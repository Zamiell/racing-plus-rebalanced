
local ____modules = {}
local ____moduleCache = {}
local ____originalRequire = require
local function require(file, ...)
    if ____moduleCache[file] then
        return ____moduleCache[file].value
    end
    if ____modules[file] then
        local module = ____modules[file]
        ____moduleCache[file] = { value = (select("#", ...) > 0) and module(...) or module(file) }
        return ____moduleCache[file].value
    else
        if ____originalRequire then
            return ____originalRequire(file)
        else
            error("module '" .. file .. "' not found")
        end
    end
end
____modules = {
["lualib_bundle"] = function(...) 
local function __TS__ArrayIsArray(value)
    return type(value) == "table" and (value[1] ~= nil or next(value) == nil)
end

local function __TS__ArrayConcat(self, ...)
    local items = {...}
    local result = {}
    local len = 0
    for i = 1, #self do
        len = len + 1
        result[len] = self[i]
    end
    for i = 1, #items do
        local item = items[i]
        if __TS__ArrayIsArray(item) then
            for j = 1, #item do
                len = len + 1
                result[len] = item[j]
            end
        else
            len = len + 1
            result[len] = item
        end
    end
    return result
end

local __TS__Symbol, Symbol
do
    local symbolMetatable = {__tostring = function(self)
        return ("Symbol(" .. (self.description or "")) .. ")"
    end}
    function __TS__Symbol(description)
        return setmetatable({description = description}, symbolMetatable)
    end
    Symbol = {
        iterator = __TS__Symbol("Symbol.iterator"),
        hasInstance = __TS__Symbol("Symbol.hasInstance"),
        species = __TS__Symbol("Symbol.species"),
        toStringTag = __TS__Symbol("Symbol.toStringTag")
    }
end

local function __TS__ArrayEntries(array)
    local key = 0
    return {
        [Symbol.iterator] = function(self)
            return self
        end,
        next = function(self)
            local result = {done = array[key + 1] == nil, value = {key, array[key + 1]}}
            key = key + 1
            return result
        end
    }
end

local function __TS__ArrayEvery(self, callbackfn, thisArg)
    for i = 1, #self do
        if not callbackfn(thisArg, self[i], i - 1, self) then
            return false
        end
    end
    return true
end

local function __TS__ArrayFilter(self, callbackfn, thisArg)
    local result = {}
    local len = 0
    for i = 1, #self do
        if callbackfn(thisArg, self[i], i - 1, self) then
            len = len + 1
            result[len] = self[i]
        end
    end
    return result
end

local function __TS__ArrayForEach(self, callbackFn, thisArg)
    for i = 1, #self do
        callbackFn(thisArg, self[i], i - 1, self)
    end
end

local function __TS__ArrayFind(self, predicate, thisArg)
    for i = 1, #self do
        local elem = self[i]
        if predicate(thisArg, elem, i - 1, self) then
            return elem
        end
    end
    return nil
end

local function __TS__ArrayFindIndex(self, callbackFn, thisArg)
    for i = 1, #self do
        if callbackFn(thisArg, self[i], i - 1, self) then
            return i - 1
        end
    end
    return -1
end

local __TS__Iterator
do
    local function iteratorGeneratorStep(self)
        local co = self.____coroutine
        local status, value = coroutine.resume(co)
        if not status then
            error(value, 0)
        end
        if coroutine.status(co) == "dead" then
            return
        end
        return true, value
    end
    local function iteratorIteratorStep(self)
        local result = self:next()
        if result.done then
            return
        end
        return true, result.value
    end
    local function iteratorStringStep(self, index)
        index = index + 1
        if index > #self then
            return
        end
        return index, string.sub(self, index, index)
    end
    function __TS__Iterator(iterable)
        if type(iterable) == "string" then
            return iteratorStringStep, iterable, 0
        elseif iterable.____coroutine ~= nil then
            return iteratorGeneratorStep, iterable
        elseif iterable[Symbol.iterator] then
            local iterator = iterable[Symbol.iterator](iterable)
            return iteratorIteratorStep, iterator
        else
            return ipairs(iterable)
        end
    end
end

local __TS__ArrayFrom
do
    local function arrayLikeStep(self, index)
        index = index + 1
        if index > self.length then
            return
        end
        return index, self[index]
    end
    local function arrayLikeIterator(arr)
        if type(arr.length) == "number" then
            return arrayLikeStep, arr, 0
        end
        return __TS__Iterator(arr)
    end
    function __TS__ArrayFrom(arrayLike, mapFn, thisArg)
        local result = {}
        if mapFn == nil then
            for ____, v in arrayLikeIterator(arrayLike) do
                result[#result + 1] = v
            end
        else
            for i, v in arrayLikeIterator(arrayLike) do
                result[#result + 1] = mapFn(thisArg, v, i - 1)
            end
        end
        return result
    end
end

local function __TS__ArrayIncludes(self, searchElement, fromIndex)
    if fromIndex == nil then
        fromIndex = 0
    end
    local len = #self
    local k = fromIndex
    if fromIndex < 0 then
        k = len + fromIndex
    end
    if k < 0 then
        k = 0
    end
    for i = k + 1, len do
        if self[i] == searchElement then
            return true
        end
    end
    return false
end

local function __TS__ArrayIndexOf(self, searchElement, fromIndex)
    if fromIndex == nil then
        fromIndex = 0
    end
    local len = #self
    if len == 0 then
        return -1
    end
    if fromIndex >= len then
        return -1
    end
    if fromIndex < 0 then
        fromIndex = len + fromIndex
        if fromIndex < 0 then
            fromIndex = 0
        end
    end
    for i = fromIndex + 1, len do
        if self[i] == searchElement then
            return i - 1
        end
    end
    return -1
end

local function __TS__ArrayJoin(self, separator)
    if separator == nil then
        separator = ","
    end
    local parts = {}
    for i = 1, #self do
        parts[i] = tostring(self[i])
    end
    return table.concat(parts, separator)
end

local function __TS__ArrayMap(self, callbackfn, thisArg)
    local result = {}
    for i = 1, #self do
        result[i] = callbackfn(thisArg, self[i], i - 1, self)
    end
    return result
end

local function __TS__ArrayPush(self, ...)
    local items = {...}
    local len = #self
    for i = 1, #items do
        len = len + 1
        self[len] = items[i]
    end
    return len
end

local function __TS__ArrayPushArray(self, items)
    local len = #self
    for i = 1, #items do
        len = len + 1
        self[len] = items[i]
    end
    return len
end

local function __TS__ArrayReduce(self, callbackFn, ...)
    local len = #self
    local k = 0
    local accumulator = nil
    if select("#", ...) ~= 0 then
        accumulator = ...
    elseif len > 0 then
        accumulator = self[1]
        k = 1
    else
        error("Reduce of empty array with no initial value", 0)
    end
    for i = k + 1, len do
        accumulator = callbackFn(
            nil,
            accumulator,
            self[i],
            i - 1,
            self
        )
    end
    return accumulator
end

local function __TS__ArrayReduceRight(self, callbackFn, ...)
    local len = #self
    local k = len - 1
    local accumulator = nil
    if select("#", ...) ~= 0 then
        accumulator = ...
    elseif len > 0 then
        accumulator = self[k + 1]
        k = k - 1
    else
        error("Reduce of empty array with no initial value", 0)
    end
    for i = k + 1, 1, -1 do
        accumulator = callbackFn(
            nil,
            accumulator,
            self[i],
            i - 1,
            self
        )
    end
    return accumulator
end

local function __TS__ArrayReverse(self)
    local i = 1
    local j = #self
    while i < j do
        local temp = self[j]
        self[j] = self[i]
        self[i] = temp
        i = i + 1
        j = j - 1
    end
    return self
end

local function __TS__ArrayUnshift(self, ...)
    local items = {...}
    local numItemsToInsert = #items
    if numItemsToInsert == 0 then
        return #self
    end
    for i = #self, 1, -1 do
        self[i + numItemsToInsert] = self[i]
    end
    for i = 1, numItemsToInsert do
        self[i] = items[i]
    end
    return #self
end

local function __TS__ArraySort(self, compareFn)
    if compareFn ~= nil then
        table.sort(
            self,
            function(a, b) return compareFn(nil, a, b) < 0 end
        )
    else
        table.sort(self)
    end
    return self
end

local function __TS__ArraySlice(self, first, last)
    local len = #self
    first = first or 0
    if first < 0 then
        first = len + first
        if first < 0 then
            first = 0
        end
    else
        if first > len then
            first = len
        end
    end
    last = last or len
    if last < 0 then
        last = len + last
        if last < 0 then
            last = 0
        end
    else
        if last > len then
            last = len
        end
    end
    local out = {}
    first = first + 1
    last = last + 1
    local n = 1
    while first < last do
        out[n] = self[first]
        first = first + 1
        n = n + 1
    end
    return out
end

local function __TS__ArraySome(self, callbackfn, thisArg)
    for i = 1, #self do
        if callbackfn(thisArg, self[i], i - 1, self) then
            return true
        end
    end
    return false
end

local function __TS__ArraySplice(self, ...)
    local args = {...}
    local len = #self
    local actualArgumentCount = select("#", ...)
    local start = args[1]
    local deleteCount = args[2]
    if start < 0 then
        start = len + start
        if start < 0 then
            start = 0
        end
    elseif start > len then
        start = len
    end
    local itemCount = actualArgumentCount - 2
    if itemCount < 0 then
        itemCount = 0
    end
    local actualDeleteCount
    if actualArgumentCount == 0 then
        actualDeleteCount = 0
    elseif actualArgumentCount == 1 then
        actualDeleteCount = len - start
    else
        actualDeleteCount = deleteCount or 0
        if actualDeleteCount < 0 then
            actualDeleteCount = 0
        end
        if actualDeleteCount > len - start then
            actualDeleteCount = len - start
        end
    end
    local out = {}
    for k = 1, actualDeleteCount do
        local from = start + k
        if self[from] ~= nil then
            out[k] = self[from]
        end
    end
    if itemCount < actualDeleteCount then
        for k = start + 1, len - actualDeleteCount do
            local from = k + actualDeleteCount
            local to = k + itemCount
            if self[from] then
                self[to] = self[from]
            else
                self[to] = nil
            end
        end
        for k = len - actualDeleteCount + itemCount + 1, len do
            self[k] = nil
        end
    elseif itemCount > actualDeleteCount then
        for k = len - actualDeleteCount, start + 1, -1 do
            local from = k + actualDeleteCount
            local to = k + itemCount
            if self[from] then
                self[to] = self[from]
            else
                self[to] = nil
            end
        end
    end
    local j = start + 1
    for i = 3, actualArgumentCount do
        self[j] = args[i]
        j = j + 1
    end
    for k = #self, len - actualDeleteCount + itemCount + 1, -1 do
        self[k] = nil
    end
    return out
end

local function __TS__ArrayToObject(self)
    local object = {}
    for i = 1, #self do
        object[i - 1] = self[i]
    end
    return object
end

local function __TS__ArrayFlat(self, depth)
    if depth == nil then
        depth = 1
    end
    local result = {}
    local len = 0
    for i = 1, #self do
        local value = self[i]
        if depth > 0 and __TS__ArrayIsArray(value) then
            local toAdd
            if depth == 1 then
                toAdd = value
            else
                toAdd = __TS__ArrayFlat(value, depth - 1)
            end
            for j = 1, #toAdd do
                local val = toAdd[j]
                len = len + 1
                result[len] = val
            end
        else
            len = len + 1
            result[len] = value
        end
    end
    return result
end

local function __TS__ArrayFlatMap(self, callback, thisArg)
    local result = {}
    local len = 0
    for i = 1, #self do
        local value = callback(thisArg, self[i], i - 1, self)
        if __TS__ArrayIsArray(value) then
            for j = 1, #value do
                len = len + 1
                result[len] = value[j]
            end
        else
            len = len + 1
            result[len] = value
        end
    end
    return result
end

local function __TS__ArraySetLength(self, length)
    if length < 0 or length ~= length or length == math.huge or math.floor(length) ~= length then
        error(
            "invalid array length: " .. tostring(length),
            0
        )
    end
    for i = length + 1, #self do
        self[i] = nil
    end
    return length
end

local function __TS__InstanceOf(obj, classTbl)
    if type(classTbl) ~= "table" then
        error("Right-hand side of 'instanceof' is not an object", 0)
    end
    if classTbl[Symbol.hasInstance] ~= nil then
        return not not classTbl[Symbol.hasInstance](classTbl, obj)
    end
    if type(obj) == "table" then
        local luaClass = obj.constructor
        while luaClass ~= nil do
            if luaClass == classTbl then
                return true
            end
            luaClass = luaClass.____super
        end
    end
    return false
end

local function __TS__New(target, ...)
    local instance = setmetatable({}, target.prototype)
    instance:____constructor(...)
    return instance
end

local function __TS__Class(self)
    local c = {prototype = {}}
    c.prototype.__index = c.prototype
    c.prototype.constructor = c
    return c
end

local __TS__Unpack = table.unpack or unpack

local function __TS__FunctionBind(fn, ...)
    local boundArgs = {...}
    return function(____, ...)
        local args = {...}
        __TS__ArrayUnshift(
            args,
            __TS__Unpack(boundArgs)
        )
        return fn(__TS__Unpack(args))
    end
end

local __TS__Promise
do
    local function promiseDeferred(self)
        local resolve
        local reject
        local promise = __TS__New(
            __TS__Promise,
            function(____, res, rej)
                resolve = res
                reject = rej
            end
        )
        return {promise = promise, resolve = resolve, reject = reject}
    end
    local function isPromiseLike(self, thing)
        return __TS__InstanceOf(thing, __TS__Promise)
    end
    __TS__Promise = __TS__Class()
    __TS__Promise.name = "__TS__Promise"
    function __TS__Promise.prototype.____constructor(self, executor)
        self.state = 0
        self.fulfilledCallbacks = {}
        self.rejectedCallbacks = {}
        self.finallyCallbacks = {}
        do
            local function ____catch(e)
                self:reject(e)
            end
            local ____try, ____hasReturned = pcall(function()
                executor(
                    nil,
                    __TS__FunctionBind(self.resolve, self),
                    __TS__FunctionBind(self.reject, self)
                )
            end)
            if not ____try then
                ____catch(____hasReturned)
            end
        end
    end
    function __TS__Promise.resolve(data)
        local promise = __TS__New(
            __TS__Promise,
            function()
            end
        )
        promise.state = 1
        promise.value = data
        return promise
    end
    function __TS__Promise.reject(reason)
        local promise = __TS__New(
            __TS__Promise,
            function()
            end
        )
        promise.state = 2
        promise.rejectionReason = reason
        return promise
    end
    __TS__Promise.prototype["then"] = function(self, onFulfilled, onRejected)
        local ____promiseDeferred_result_0 = promiseDeferred(nil)
        local promise = ____promiseDeferred_result_0.promise
        local resolve = ____promiseDeferred_result_0.resolve
        local reject = ____promiseDeferred_result_0.reject
        local isFulfilled = self.state == 1
        local isRejected = self.state == 2
        if onFulfilled then
            local internalCallback = self:createPromiseResolvingCallback(onFulfilled, resolve, reject)
            local ____self_fulfilledCallbacks_1 = self.fulfilledCallbacks
            ____self_fulfilledCallbacks_1[#____self_fulfilledCallbacks_1 + 1] = internalCallback
            if isFulfilled then
                internalCallback(nil, self.value)
            end
        else
            local ____self_fulfilledCallbacks_2 = self.fulfilledCallbacks
            ____self_fulfilledCallbacks_2[#____self_fulfilledCallbacks_2 + 1] = function(____, v) return resolve(nil, v) end
        end
        if onRejected then
            local internalCallback = self:createPromiseResolvingCallback(onRejected, resolve, reject)
            local ____self_rejectedCallbacks_3 = self.rejectedCallbacks
            ____self_rejectedCallbacks_3[#____self_rejectedCallbacks_3 + 1] = internalCallback
            if isRejected then
                internalCallback(nil, self.rejectionReason)
            end
        else
            local ____self_rejectedCallbacks_4 = self.rejectedCallbacks
            ____self_rejectedCallbacks_4[#____self_rejectedCallbacks_4 + 1] = function(____, err) return reject(nil, err) end
        end
        if isFulfilled then
            resolve(nil, self.value)
        end
        if isRejected then
            reject(nil, self.rejectionReason)
        end
        return promise
    end
    function __TS__Promise.prototype.catch(self, onRejected)
        return self["then"](self, nil, onRejected)
    end
    function __TS__Promise.prototype.finally(self, onFinally)
        if onFinally then
            local ____self_finallyCallbacks_5 = self.finallyCallbacks
            ____self_finallyCallbacks_5[#____self_finallyCallbacks_5 + 1] = onFinally
            if self.state ~= 0 then
                onFinally(nil)
            end
        end
        return self
    end
    function __TS__Promise.prototype.resolve(self, data)
        if __TS__InstanceOf(data, __TS__Promise) then
            data["then"](
                data,
                function(____, v) return self:resolve(v) end,
                function(____, err) return self:reject(err) end
            )
            return
        end
        if self.state == 0 then
            self.state = 1
            self.value = data
            for ____, callback in ipairs(self.fulfilledCallbacks) do
                callback(nil, data)
            end
            for ____, callback in ipairs(self.finallyCallbacks) do
                callback(nil)
            end
        end
    end
    function __TS__Promise.prototype.reject(self, reason)
        if self.state == 0 then
            self.state = 2
            self.rejectionReason = reason
            for ____, callback in ipairs(self.rejectedCallbacks) do
                callback(nil, reason)
            end
            for ____, callback in ipairs(self.finallyCallbacks) do
                callback(nil)
            end
        end
    end
    function __TS__Promise.prototype.createPromiseResolvingCallback(self, f, resolve, reject)
        return function(____, value)
            do
                local function ____catch(e)
                    reject(nil, e)
                end
                local ____try, ____hasReturned = pcall(function()
                    self:handleCallbackData(
                        f(nil, value),
                        resolve,
                        reject
                    )
                end)
                if not ____try then
                    ____catch(____hasReturned)
                end
            end
        end
    end
    function __TS__Promise.prototype.handleCallbackData(self, data, resolve, reject)
        if isPromiseLike(nil, data) then
            local nextpromise = data
            if nextpromise.state == 1 then
                resolve(nil, nextpromise.value)
            elseif nextpromise.state == 2 then
                reject(nil, nextpromise.rejectionReason)
            else
                data["then"](data, resolve, reject)
            end
        else
            resolve(nil, data)
        end
    end
end

local function __TS__AsyncAwaiter(generator)
    return __TS__New(
        __TS__Promise,
        function(____, resolve, reject)
            local adopt, fulfilled, step, resolved, asyncCoroutine
            function adopt(self, value)
                local ____temp_0
                if __TS__InstanceOf(value, __TS__Promise) then
                    ____temp_0 = value
                else
                    ____temp_0 = __TS__Promise.resolve(value)
                end
                return ____temp_0
            end
            function fulfilled(self, value)
                local success, resultOrError = coroutine.resume(asyncCoroutine, value)
                if success then
                    step(nil, resultOrError)
                else
                    reject(nil, resultOrError)
                end
            end
            function step(self, result)
                if resolved then
                    return
                end
                if coroutine.status(asyncCoroutine) == "dead" then
                    resolve(nil, result)
                else
                    local ____self_1 = adopt(nil, result)
                    ____self_1["then"](____self_1, fulfilled, reject)
                end
            end
            resolved = false
            asyncCoroutine = coroutine.create(generator)
            local success, resultOrError = coroutine.resume(
                asyncCoroutine,
                function(____, v)
                    resolved = true
                    local ____self_2 = adopt(nil, v)
                    ____self_2["then"](____self_2, resolve, reject)
                end
            )
            if success then
                step(nil, resultOrError)
            else
                reject(nil, resultOrError)
            end
        end
    )
end
local function __TS__Await(thing)
    return coroutine.yield(thing)
end

local function __TS__ClassExtends(target, base)
    target.____super = base
    local staticMetatable = setmetatable({__index = base}, base)
    setmetatable(target, staticMetatable)
    local baseMetatable = getmetatable(base)
    if baseMetatable then
        if type(baseMetatable.__index) == "function" then
            staticMetatable.__index = baseMetatable.__index
        end
        if type(baseMetatable.__newindex) == "function" then
            staticMetatable.__newindex = baseMetatable.__newindex
        end
    end
    setmetatable(target.prototype, base.prototype)
    if type(base.prototype.__index) == "function" then
        target.prototype.__index = base.prototype.__index
    end
    if type(base.prototype.__newindex) == "function" then
        target.prototype.__newindex = base.prototype.__newindex
    end
    if type(base.prototype.__tostring) == "function" then
        target.prototype.__tostring = base.prototype.__tostring
    end
end

local function __TS__CloneDescriptor(____bindingPattern0)
    local value
    local writable
    local set
    local get
    local configurable
    local enumerable
    enumerable = ____bindingPattern0.enumerable
    configurable = ____bindingPattern0.configurable
    get = ____bindingPattern0.get
    set = ____bindingPattern0.set
    writable = ____bindingPattern0.writable
    value = ____bindingPattern0.value
    local descriptor = {enumerable = enumerable == true, configurable = configurable == true}
    local hasGetterOrSetter = get ~= nil or set ~= nil
    local hasValueOrWritableAttribute = writable ~= nil or value ~= nil
    if hasGetterOrSetter and hasValueOrWritableAttribute then
        error("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute.", 0)
    end
    if get or set then
        descriptor.get = get
        descriptor.set = set
    else
        descriptor.value = value
        descriptor.writable = writable == true
    end
    return descriptor
end

local function __TS__ObjectAssign(target, ...)
    local sources = {...}
    for i = 1, #sources do
        local source = sources[i]
        for key in pairs(source) do
            target[key] = source[key]
        end
    end
    return target
end

local function __TS__ObjectGetOwnPropertyDescriptor(object, key)
    local metatable = getmetatable(object)
    if not metatable then
        return
    end
    if not rawget(metatable, "_descriptors") then
        return
    end
    return rawget(metatable, "_descriptors")[key]
end

local __TS__SetDescriptor
do
    local function descriptorIndex(self, key)
        local value = rawget(self, key)
        if value ~= nil then
            return value
        end
        local metatable = getmetatable(self)
        while metatable do
            local rawResult = rawget(metatable, key)
            if rawResult ~= nil then
                return rawResult
            end
            local descriptors = rawget(metatable, "_descriptors")
            if descriptors then
                local descriptor = descriptors[key]
                if descriptor then
                    if descriptor.get then
                        return descriptor.get(self)
                    end
                    return descriptor.value
                end
            end
            metatable = getmetatable(metatable)
        end
    end
    local function descriptorNewIndex(self, key, value)
        local metatable = getmetatable(self)
        while metatable do
            local descriptors = rawget(metatable, "_descriptors")
            if descriptors then
                local descriptor = descriptors[key]
                if descriptor then
                    if descriptor.set then
                        descriptor.set(self, value)
                    else
                        if descriptor.writable == false then
                            error(
                                ((("Cannot assign to read only property '" .. key) .. "' of object '") .. tostring(self)) .. "'",
                                0
                            )
                        end
                        descriptor.value = value
                    end
                    return
                end
            end
            metatable = getmetatable(metatable)
        end
        rawset(self, key, value)
    end
    function __TS__SetDescriptor(target, key, desc, isPrototype)
        if isPrototype == nil then
            isPrototype = false
        end
        local ____isPrototype_0
        if isPrototype then
            ____isPrototype_0 = target
        else
            ____isPrototype_0 = getmetatable(target)
        end
        local metatable = ____isPrototype_0
        if not metatable then
            metatable = {}
            setmetatable(target, metatable)
        end
        local value = rawget(target, key)
        if value ~= nil then
            rawset(target, key, nil)
        end
        if not rawget(metatable, "_descriptors") then
            metatable._descriptors = {}
        end
        local descriptor = __TS__CloneDescriptor(desc)
        metatable._descriptors[key] = descriptor
        metatable.__index = descriptorIndex
        metatable.__newindex = descriptorNewIndex
    end
end

local function __TS__Decorate(decorators, target, key, desc)
    local result = target
    do
        local i = #decorators
        while i >= 0 do
            local decorator = decorators[i + 1]
            if decorator then
                local oldResult = result
                if key == nil then
                    result = decorator(nil, result)
                elseif desc == true then
                    local value = rawget(target, key)
                    local descriptor = __TS__ObjectGetOwnPropertyDescriptor(target, key) or ({configurable = true, writable = true, value = value})
                    local desc = decorator(nil, target, key, descriptor) or descriptor
                    local isSimpleValue = desc.configurable == true and desc.writable == true and not desc.get and not desc.set
                    if isSimpleValue then
                        rawset(target, key, desc.value)
                    else
                        __TS__SetDescriptor(
                            target,
                            key,
                            __TS__ObjectAssign({}, descriptor, desc)
                        )
                    end
                elseif desc == false then
                    result = decorator(nil, target, key, desc)
                else
                    result = decorator(nil, target, key)
                end
                result = result or oldResult
            end
            i = i - 1
        end
    end
    return result
end

local function __TS__DecorateParam(paramIndex, decorator)
    return function(____, target, key) return decorator(nil, target, key, paramIndex) end
end

local Error, RangeError, ReferenceError, SyntaxError, TypeError, URIError
do
    local function getErrorStack(self, constructor)
        local level = 1
        while true do
            local info = debug.getinfo(level, "f")
            level = level + 1
            if not info then
                level = 1
                break
            elseif info.func == constructor then
                break
            end
        end
        return debug.traceback(nil, level)
    end
    local function wrapErrorToString(self, getDescription)
        return function(self)
            local description = getDescription(self)
            local caller = debug.getinfo(3, "f")
            if _VERSION == "Lua 5.1" or caller and caller.func ~= error then
                return description
            else
                return (tostring(description) .. "\n") .. self.stack
            end
        end
    end
    local function initErrorClass(self, Type, name)
        Type.name = name
        return setmetatable(
            Type,
            {__call = function(____, _self, message) return __TS__New(Type, message) end}
        )
    end
    local ____initErrorClass_2 = initErrorClass
    local ____class_0 = __TS__Class()
    ____class_0.name = ""
    function ____class_0.prototype.____constructor(self, message)
        if message == nil then
            message = ""
        end
        self.message = message
        self.name = "Error"
        self.stack = getErrorStack(nil, self.constructor.new)
        local metatable = getmetatable(self)
        if not metatable.__errorToStringPatched then
            metatable.__errorToStringPatched = true
            metatable.__tostring = wrapErrorToString(nil, metatable.__tostring)
        end
    end
    function ____class_0.prototype.__tostring(self)
        local ____temp_1
        if self.message ~= "" then
            ____temp_1 = (self.name .. ": ") .. self.message
        else
            ____temp_1 = self.name
        end
        return ____temp_1
    end
    Error = ____initErrorClass_2(nil, ____class_0, "Error")
    local function createErrorClass(self, name)
        local ____initErrorClass_4 = initErrorClass
        local ____class_3 = __TS__Class()
        ____class_3.name = ____class_3.name
        __TS__ClassExtends(____class_3, Error)
        function ____class_3.prototype.____constructor(self, ...)
            ____class_3.____super.prototype.____constructor(self, ...)
            self.name = name
        end
        return ____initErrorClass_4(nil, ____class_3, name)
    end
    RangeError = createErrorClass(nil, "RangeError")
    ReferenceError = createErrorClass(nil, "ReferenceError")
    SyntaxError = createErrorClass(nil, "SyntaxError")
    TypeError = createErrorClass(nil, "TypeError")
    URIError = createErrorClass(nil, "URIError")
end

local function __TS__ObjectGetOwnPropertyDescriptors(object)
    local metatable = getmetatable(object)
    if not metatable then
        return {}
    end
    return rawget(metatable, "_descriptors") or ({})
end

local function __TS__Delete(target, key)
    local descriptors = __TS__ObjectGetOwnPropertyDescriptors(target)
    local descriptor = descriptors[key]
    if descriptor then
        if not descriptor.configurable then
            error(
                __TS__New(
                    TypeError,
                    ((("Cannot delete property " .. tostring(key)) .. " of ") .. tostring(target)) .. "."
                ),
                0
            )
        end
        descriptors[key] = nil
        return true
    end
    target[key] = nil
    return true
end

local function __TS__StringAccess(self, index)
    if index >= 0 and index < #self then
        return string.sub(self, index + 1, index + 1)
    end
end

local function __TS__DelegatedYield(iterable)
    if type(iterable) == "string" then
        for index = 0, #iterable - 1 do
            coroutine.yield(__TS__StringAccess(iterable, index))
        end
    elseif iterable.____coroutine ~= nil then
        local co = iterable.____coroutine
        while true do
            local status, value = coroutine.resume(co)
            if not status then
                error(value, 0)
            end
            if coroutine.status(co) == "dead" then
                return value
            else
                coroutine.yield(value)
            end
        end
    elseif iterable[Symbol.iterator] then
        local iterator = iterable[Symbol.iterator](iterable)
        while true do
            local result = iterator:next()
            if result.done then
                return result.value
            else
                coroutine.yield(result.value)
            end
        end
    else
        for ____, value in ipairs(iterable) do
            coroutine.yield(value)
        end
    end
end

local __TS__Generator
do
    local function generatorIterator(self)
        return self
    end
    local function generatorNext(self, ...)
        local co = self.____coroutine
        if coroutine.status(co) == "dead" then
            return {done = true}
        end
        local status, value = coroutine.resume(co, ...)
        if not status then
            error(value, 0)
        end
        return {
            value = value,
            done = coroutine.status(co) == "dead"
        }
    end
    function __TS__Generator(fn)
        return function(...)
            local args = {...}
            local argsLength = select("#", ...)
            return {
                ____coroutine = coroutine.create(function() return fn((unpack or table.unpack)(args, 1, argsLength)) end),
                [Symbol.iterator] = generatorIterator,
                next = generatorNext
            }
        end
    end
end

local function __TS__InstanceOfObject(value)
    local valueType = type(value)
    return valueType == "table" or valueType == "function"
end

local Map
do
    Map = __TS__Class()
    Map.name = "Map"
    function Map.prototype.____constructor(self, entries)
        self[Symbol.toStringTag] = "Map"
        self.items = {}
        self.size = 0
        self.nextKey = {}
        self.previousKey = {}
        if entries == nil then
            return
        end
        local iterable = entries
        if iterable[Symbol.iterator] then
            local iterator = iterable[Symbol.iterator](iterable)
            while true do
                local result = iterator:next()
                if result.done then
                    break
                end
                local value = result.value
                self:set(value[1], value[2])
            end
        else
            local array = entries
            for ____, kvp in ipairs(array) do
                self:set(kvp[1], kvp[2])
            end
        end
    end
    function Map.prototype.clear(self)
        self.items = {}
        self.nextKey = {}
        self.previousKey = {}
        self.firstKey = nil
        self.lastKey = nil
        self.size = 0
    end
    function Map.prototype.delete(self, key)
        local contains = self:has(key)
        if contains then
            self.size = self.size - 1
            local next = self.nextKey[key]
            local previous = self.previousKey[key]
            if next and previous then
                self.nextKey[previous] = next
                self.previousKey[next] = previous
            elseif next then
                self.firstKey = next
                self.previousKey[next] = nil
            elseif previous then
                self.lastKey = previous
                self.nextKey[previous] = nil
            else
                self.firstKey = nil
                self.lastKey = nil
            end
            self.nextKey[key] = nil
            self.previousKey[key] = nil
        end
        self.items[key] = nil
        return contains
    end
    function Map.prototype.forEach(self, callback)
        for ____, key in __TS__Iterator(self:keys()) do
            callback(nil, self.items[key], key, self)
        end
    end
    function Map.prototype.get(self, key)
        return self.items[key]
    end
    function Map.prototype.has(self, key)
        return self.nextKey[key] ~= nil or self.lastKey == key
    end
    function Map.prototype.set(self, key, value)
        local isNewValue = not self:has(key)
        if isNewValue then
            self.size = self.size + 1
        end
        self.items[key] = value
        if self.firstKey == nil then
            self.firstKey = key
            self.lastKey = key
        elseif isNewValue then
            self.nextKey[self.lastKey] = key
            self.previousKey[key] = self.lastKey
            self.lastKey = key
        end
        return self
    end
    Map.prototype[Symbol.iterator] = function(self)
        return self:entries()
    end
    function Map.prototype.entries(self)
        local items = self.items
        local nextKey = self.nextKey
        local key = self.firstKey
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                local result = {done = not key, value = {key, items[key]}}
                key = nextKey[key]
                return result
            end
        }
    end
    function Map.prototype.keys(self)
        local nextKey = self.nextKey
        local key = self.firstKey
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                local result = {done = not key, value = key}
                key = nextKey[key]
                return result
            end
        }
    end
    function Map.prototype.values(self)
        local items = self.items
        local nextKey = self.nextKey
        local key = self.firstKey
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                local result = {done = not key, value = items[key]}
                key = nextKey[key]
                return result
            end
        }
    end
    Map[Symbol.species] = Map
end

local __TS__MathAtan2 = math.atan2 or math.atan

local function __TS__MathSign(val)
    if val > 0 then
        return 1
    elseif val < 0 then
        return -1
    end
    return 0
end

local function __TS__Number(value)
    local valueType = type(value)
    if valueType == "number" then
        return value
    elseif valueType == "string" then
        local numberValue = tonumber(value)
        if numberValue then
            return numberValue
        end
        if value == "Infinity" then
            return math.huge
        end
        if value == "-Infinity" then
            return -math.huge
        end
        local stringWithoutSpaces = string.gsub(value, "%s", "")
        if stringWithoutSpaces == "" then
            return 0
        end
        return 0 / 0
    elseif valueType == "boolean" then
        return value and 1 or 0
    else
        return 0 / 0
    end
end

local function __TS__NumberIsFinite(value)
    return type(value) == "number" and value == value and value ~= math.huge and value ~= -math.huge
end

local function __TS__NumberIsNaN(value)
    return value ~= value
end

local __TS__NumberToString
do
    local radixChars = "0123456789abcdefghijklmnopqrstuvwxyz"
    function __TS__NumberToString(self, radix)
        if radix == nil or radix == 10 or self == math.huge or self == -math.huge or self ~= self then
            return tostring(self)
        end
        radix = math.floor(radix)
        if radix < 2 or radix > 36 then
            error("toString() radix argument must be between 2 and 36", 0)
        end
        local integer, fraction = math.modf(math.abs(self))
        local result = ""
        if radix == 8 then
            result = string.format("%o", integer)
        elseif radix == 16 then
            result = string.format("%x", integer)
        else
            repeat
                do
                    result = __TS__StringAccess(radixChars, integer % radix) .. result
                    integer = math.floor(integer / radix)
                end
            until not (integer ~= 0)
        end
        if fraction ~= 0 then
            result = result .. "."
            local delta = 1e-16
            repeat
                do
                    fraction = fraction * radix
                    delta = delta * radix
                    local digit = math.floor(fraction)
                    result = result .. __TS__StringAccess(radixChars, digit)
                    fraction = fraction - digit
                end
            until not (fraction >= delta)
        end
        if self < 0 then
            result = "-" .. result
        end
        return result
    end
end

local function __TS__ObjectDefineProperty(target, key, desc)
    local ____temp_0
    if type(key) == "number" then
        ____temp_0 = key + 1
    else
        ____temp_0 = key
    end
    local luaKey = ____temp_0
    local value = rawget(target, luaKey)
    local hasGetterOrSetter = desc.get ~= nil or desc.set ~= nil
    local descriptor
    if hasGetterOrSetter then
        if value ~= nil then
            error(
                "Cannot redefine property: " .. tostring(key),
                0
            )
        end
        descriptor = desc
    else
        local valueExists = value ~= nil
        local ____desc_set_5 = desc.set
        local ____desc_get_6 = desc.get
        local ____temp_1
        if desc.configurable ~= nil then
            ____temp_1 = desc.configurable
        else
            ____temp_1 = valueExists
        end
        local ____temp_2
        if desc.enumerable ~= nil then
            ____temp_2 = desc.enumerable
        else
            ____temp_2 = valueExists
        end
        local ____temp_3
        if desc.writable ~= nil then
            ____temp_3 = desc.writable
        else
            ____temp_3 = valueExists
        end
        local ____temp_4
        if desc.value ~= nil then
            ____temp_4 = desc.value
        else
            ____temp_4 = value
        end
        descriptor = {
            set = ____desc_set_5,
            get = ____desc_get_6,
            configurable = ____temp_1,
            enumerable = ____temp_2,
            writable = ____temp_3,
            value = ____temp_4
        }
    end
    __TS__SetDescriptor(target, luaKey, descriptor)
    return target
end

local function __TS__ObjectEntries(obj)
    local result = {}
    local len = 0
    for key in pairs(obj) do
        len = len + 1
        result[len] = {key, obj[key]}
    end
    return result
end

local function __TS__ObjectFromEntries(entries)
    local obj = {}
    local iterable = entries
    if iterable[Symbol.iterator] then
        local iterator = iterable[Symbol.iterator](iterable)
        while true do
            local result = iterator:next()
            if result.done then
                break
            end
            local value = result.value
            obj[value[1]] = value[2]
        end
    else
        for ____, entry in ipairs(entries) do
            obj[entry[1]] = entry[2]
        end
    end
    return obj
end

local function __TS__ObjectKeys(obj)
    local result = {}
    local len = 0
    for key in pairs(obj) do
        len = len + 1
        result[len] = key
    end
    return result
end

local function __TS__ObjectRest(target, usedProperties)
    local result = {}
    for property in pairs(target) do
        if not usedProperties[property] then
            result[property] = target[property]
        end
    end
    return result
end

local function __TS__ObjectValues(obj)
    local result = {}
    local len = 0
    for key in pairs(obj) do
        len = len + 1
        result[len] = obj[key]
    end
    return result
end

local function __TS__ParseFloat(numberString)
    local infinityMatch = string.match(numberString, "^%s*(-?Infinity)")
    if infinityMatch then
        local ____temp_0
        if __TS__StringAccess(infinityMatch, 0) == "-" then
            ____temp_0 = -math.huge
        else
            ____temp_0 = math.huge
        end
        return ____temp_0
    end
    local number = tonumber(string.match(numberString, "^%s*(-?%d+%.?%d*)"))
    return number or 0 / 0
end

local function __TS__StringSubstr(self, from, length)
    if from ~= from then
        from = 0
    end
    if length ~= nil then
        if length ~= length or length <= 0 then
            return ""
        end
        length = length + from
    end
    if from >= 0 then
        from = from + 1
    end
    return string.sub(self, from, length)
end

local function __TS__StringSubstring(self, start, ____end)
    if ____end ~= ____end then
        ____end = 0
    end
    if ____end ~= nil and start > ____end then
        start, ____end = ____end, start
    end
    if start >= 0 then
        start = start + 1
    else
        start = 1
    end
    if ____end ~= nil and ____end < 0 then
        ____end = 0
    end
    return string.sub(self, start, ____end)
end

local __TS__ParseInt
do
    local parseIntBasePattern = "0123456789aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTvVwWxXyYzZ"
    function __TS__ParseInt(numberString, base)
        if base == nil then
            base = 10
            local hexMatch = string.match(numberString, "^%s*-?0[xX]")
            if hexMatch then
                base = 16
                local ____string_match_result__0_0
                if string.match(hexMatch, "-") then
                    ____string_match_result__0_0 = "-" .. __TS__StringSubstr(numberString, #hexMatch)
                else
                    ____string_match_result__0_0 = __TS__StringSubstr(numberString, #hexMatch)
                end
                numberString = ____string_match_result__0_0
            end
        end
        if base < 2 or base > 36 then
            return 0 / 0
        end
        local ____temp_1
        if base <= 10 then
            ____temp_1 = __TS__StringSubstring(parseIntBasePattern, 0, base)
        else
            ____temp_1 = __TS__StringSubstr(parseIntBasePattern, 0, 10 + 2 * (base - 10))
        end
        local allowedDigits = ____temp_1
        local pattern = ("^%s*(-?[" .. allowedDigits) .. "]*)"
        local number = tonumber(
            string.match(numberString, pattern),
            base
        )
        if number == nil then
            return 0 / 0
        end
        if number >= 0 then
            return math.floor(number)
        else
            return math.ceil(number)
        end
    end
end

local function __TS__PromiseAll(iterable)
    local results = {}
    local toResolve = {}
    local numToResolve = 0
    local i = 0
    for ____, item in __TS__Iterator(iterable) do
        if __TS__InstanceOf(item, __TS__Promise) then
            if item.state == 1 then
                results[i + 1] = item.value
            elseif item.state == 2 then
                return __TS__Promise.reject(item.rejectionReason)
            else
                numToResolve = numToResolve + 1
                toResolve[i] = item
            end
        else
            results[i + 1] = item
        end
        i = i + 1
    end
    if numToResolve == 0 then
        return __TS__Promise.resolve(results)
    end
    return __TS__New(
        __TS__Promise,
        function(____, resolve, reject)
            for index, promise in pairs(toResolve) do
                promise["then"](
                    promise,
                    function(____, data)
                        results[index + 1] = data
                        numToResolve = numToResolve - 1
                        if numToResolve == 0 then
                            resolve(nil, results)
                        end
                    end,
                    function(____, reason)
                        reject(nil, reason)
                    end
                )
            end
        end
    )
end

local function __TS__PromiseAllSettled(iterable)
    local results = {}
    local toResolve = {}
    local numToResolve = 0
    local i = 0
    for ____, item in __TS__Iterator(iterable) do
        if __TS__InstanceOf(item, __TS__Promise) then
            if item.state == 1 then
                results[i + 1] = {status = "fulfilled", value = item.value}
            elseif item.state == 2 then
                results[i + 1] = {status = "rejected", reason = item.rejectionReason}
            else
                numToResolve = numToResolve + 1
                toResolve[i] = item
            end
        else
            results[i + 1] = {status = "fulfilled", value = item}
        end
        i = i + 1
    end
    if numToResolve == 0 then
        return __TS__Promise.resolve(results)
    end
    return __TS__New(
        __TS__Promise,
        function(____, resolve)
            for index, promise in pairs(toResolve) do
                promise["then"](
                    promise,
                    function(____, data)
                        results[index + 1] = {status = "fulfilled", value = data}
                        numToResolve = numToResolve - 1
                        if numToResolve == 0 then
                            resolve(nil, results)
                        end
                    end,
                    function(____, reason)
                        results[index + 1] = {status = "rejected", reason = reason}
                        numToResolve = numToResolve - 1
                        if numToResolve == 0 then
                            resolve(nil, results)
                        end
                    end
                )
            end
        end
    )
end

local function __TS__PromiseAny(iterable)
    local rejections = {}
    local pending = {}
    for ____, item in __TS__Iterator(iterable) do
        if __TS__InstanceOf(item, __TS__Promise) then
            if item.state == 1 then
                return __TS__Promise.resolve(item.value)
            elseif item.state == 2 then
                rejections[#rejections + 1] = item.rejectionReason
            else
                pending[#pending + 1] = item
            end
        else
            return __TS__Promise.resolve(item)
        end
    end
    if #pending == 0 then
        return __TS__Promise.reject("No promises to resolve with .any()")
    end
    local numResolved = 0
    return __TS__New(
        __TS__Promise,
        function(____, resolve, reject)
            for ____, promise in ipairs(pending) do
                promise["then"](
                    promise,
                    function(____, data)
                        resolve(nil, data)
                    end,
                    function(____, reason)
                        rejections[#rejections + 1] = reason
                        numResolved = numResolved + 1
                        if numResolved == #pending then
                            reject(nil, {name = "AggregateError", message = "All Promises rejected", errors = rejections})
                        end
                    end
                )
            end
        end
    )
end

local function __TS__PromiseRace(iterable)
    local pending = {}
    for ____, item in __TS__Iterator(iterable) do
        if __TS__InstanceOf(item, __TS__Promise) then
            if item.state == 1 then
                return __TS__Promise.resolve(item.value)
            elseif item.state == 2 then
                return __TS__Promise.reject(item.rejectionReason)
            else
                pending[#pending + 1] = item
            end
        else
            return __TS__Promise.resolve(item)
        end
    end
    return __TS__New(
        __TS__Promise,
        function(____, resolve, reject)
            for ____, promise in ipairs(pending) do
                promise["then"](
                    promise,
                    function(____, value) return resolve(nil, value) end,
                    function(____, reason) return reject(nil, reason) end
                )
            end
        end
    )
end

local Set
do
    Set = __TS__Class()
    Set.name = "Set"
    function Set.prototype.____constructor(self, values)
        self[Symbol.toStringTag] = "Set"
        self.size = 0
        self.nextKey = {}
        self.previousKey = {}
        if values == nil then
            return
        end
        local iterable = values
        if iterable[Symbol.iterator] then
            local iterator = iterable[Symbol.iterator](iterable)
            while true do
                local result = iterator:next()
                if result.done then
                    break
                end
                self:add(result.value)
            end
        else
            local array = values
            for ____, value in ipairs(array) do
                self:add(value)
            end
        end
    end
    function Set.prototype.add(self, value)
        local isNewValue = not self:has(value)
        if isNewValue then
            self.size = self.size + 1
        end
        if self.firstKey == nil then
            self.firstKey = value
            self.lastKey = value
        elseif isNewValue then
            self.nextKey[self.lastKey] = value
            self.previousKey[value] = self.lastKey
            self.lastKey = value
        end
        return self
    end
    function Set.prototype.clear(self)
        self.nextKey = {}
        self.previousKey = {}
        self.firstKey = nil
        self.lastKey = nil
        self.size = 0
    end
    function Set.prototype.delete(self, value)
        local contains = self:has(value)
        if contains then
            self.size = self.size - 1
            local next = self.nextKey[value]
            local previous = self.previousKey[value]
            if next and previous then
                self.nextKey[previous] = next
                self.previousKey[next] = previous
            elseif next then
                self.firstKey = next
                self.previousKey[next] = nil
            elseif previous then
                self.lastKey = previous
                self.nextKey[previous] = nil
            else
                self.firstKey = nil
                self.lastKey = nil
            end
            self.nextKey[value] = nil
            self.previousKey[value] = nil
        end
        return contains
    end
    function Set.prototype.forEach(self, callback)
        for ____, key in __TS__Iterator(self:keys()) do
            callback(nil, key, key, self)
        end
    end
    function Set.prototype.has(self, value)
        return self.nextKey[value] ~= nil or self.lastKey == value
    end
    Set.prototype[Symbol.iterator] = function(self)
        return self:values()
    end
    function Set.prototype.entries(self)
        local nextKey = self.nextKey
        local key = self.firstKey
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                local result = {done = not key, value = {key, key}}
                key = nextKey[key]
                return result
            end
        }
    end
    function Set.prototype.keys(self)
        local nextKey = self.nextKey
        local key = self.firstKey
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                local result = {done = not key, value = key}
                key = nextKey[key]
                return result
            end
        }
    end
    function Set.prototype.values(self)
        local nextKey = self.nextKey
        local key = self.firstKey
        return {
            [Symbol.iterator] = function(self)
                return self
            end,
            next = function(self)
                local result = {done = not key, value = key}
                key = nextKey[key]
                return result
            end
        }
    end
    Set[Symbol.species] = Set
end

local function __TS__SparseArrayNew(...)
    local sparseArray = {...}
    sparseArray.sparseLength = select("#", ...)
    return sparseArray
end

local function __TS__SparseArrayPush(sparseArray, ...)
    local args = {...}
    local argsLen = select("#", ...)
    local listLen = sparseArray.sparseLength
    for i = 1, argsLen do
        sparseArray[listLen + i] = args[i]
    end
    sparseArray.sparseLength = listLen + argsLen
end

local function __TS__SparseArraySpread(sparseArray)
    local _unpack = unpack or table.unpack
    return _unpack(sparseArray, 1, sparseArray.sparseLength)
end

local WeakMap
do
    WeakMap = __TS__Class()
    WeakMap.name = "WeakMap"
    function WeakMap.prototype.____constructor(self, entries)
        self[Symbol.toStringTag] = "WeakMap"
        self.items = {}
        setmetatable(self.items, {__mode = "k"})
        if entries == nil then
            return
        end
        local iterable = entries
        if iterable[Symbol.iterator] then
            local iterator = iterable[Symbol.iterator](iterable)
            while true do
                local result = iterator:next()
                if result.done then
                    break
                end
                local value = result.value
                self.items[value[1]] = value[2]
            end
        else
            for ____, kvp in ipairs(entries) do
                self.items[kvp[1]] = kvp[2]
            end
        end
    end
    function WeakMap.prototype.delete(self, key)
        local contains = self:has(key)
        self.items[key] = nil
        return contains
    end
    function WeakMap.prototype.get(self, key)
        return self.items[key]
    end
    function WeakMap.prototype.has(self, key)
        return self.items[key] ~= nil
    end
    function WeakMap.prototype.set(self, key, value)
        self.items[key] = value
        return self
    end
    WeakMap[Symbol.species] = WeakMap
end

local WeakSet
do
    WeakSet = __TS__Class()
    WeakSet.name = "WeakSet"
    function WeakSet.prototype.____constructor(self, values)
        self[Symbol.toStringTag] = "WeakSet"
        self.items = {}
        setmetatable(self.items, {__mode = "k"})
        if values == nil then
            return
        end
        local iterable = values
        if iterable[Symbol.iterator] then
            local iterator = iterable[Symbol.iterator](iterable)
            while true do
                local result = iterator:next()
                if result.done then
                    break
                end
                self.items[result.value] = true
            end
        else
            for ____, value in ipairs(values) do
                self.items[value] = true
            end
        end
    end
    function WeakSet.prototype.add(self, value)
        self.items[value] = true
        return self
    end
    function WeakSet.prototype.delete(self, value)
        local contains = self:has(value)
        self.items[value] = nil
        return contains
    end
    function WeakSet.prototype.has(self, value)
        return self.items[value] == true
    end
    WeakSet[Symbol.species] = WeakSet
end

local function __TS__SourceMapTraceBack(fileName, sourceMap)
    _G.__TS__sourcemap = _G.__TS__sourcemap or ({})
    _G.__TS__sourcemap[fileName] = sourceMap
    if _G.__TS__originalTraceback == nil then
        local originalTraceback = debug.traceback
        _G.__TS__originalTraceback = originalTraceback
        debug.traceback = function(thread, message, level)
            local trace
            if thread == nil and message == nil and level == nil then
                trace = originalTraceback()
            else
                trace = originalTraceback(thread, message, level)
            end
            if type(trace) ~= "string" then
                return trace
            end
            local function replacer(____, file, srcFile, line)
                local fileSourceMap = _G.__TS__sourcemap[file]
                if fileSourceMap and fileSourceMap[line] then
                    local data = fileSourceMap[line]
                    if type(data) == "number" then
                        return (srcFile .. ":") .. tostring(data)
                    end
                    return (tostring(data.file) .. ":") .. tostring(data.line)
                end
                return (file .. ":") .. line
            end
            local result = string.gsub(
                trace,
                "(%S+)%.lua:(%d+)",
                function(file, line) return replacer(nil, file .. ".lua", file .. ".ts", line) end
            )
            local function stringReplacer(____, file, line)
                local fileSourceMap = _G.__TS__sourcemap[file]
                if fileSourceMap and fileSourceMap[line] then
                    local chunkName = string.match(file, "%[string \"([^\"]+)\"%]")
                    local sourceName = string.gsub(chunkName, ".lua$", ".ts")
                    local data = fileSourceMap[line]
                    if type(data) == "number" then
                        return (sourceName .. ":") .. tostring(data)
                    end
                    return (tostring(data.file) .. ":") .. tostring(data.line)
                end
                return (file .. ":") .. line
            end
            result = string.gsub(
                result,
                "(%[string \"[^\"]+\"%]):(%d+)",
                function(file, line) return stringReplacer(nil, file, line) end
            )
            return result
        end
    end
end

local function __TS__Spread(iterable)
    local arr = {}
    if type(iterable) == "string" then
        for i = 0, #iterable - 1 do
            arr[i + 1] = __TS__StringAccess(iterable, i)
        end
    else
        local len = 0
        for ____, item in __TS__Iterator(iterable) do
            len = len + 1
            arr[len] = item
        end
    end
    return __TS__Unpack(arr)
end

local function __TS__StringCharAt(self, pos)
    if pos ~= pos then
        pos = 0
    end
    if pos < 0 then
        return ""
    end
    return string.sub(self, pos + 1, pos + 1)
end

local function __TS__StringCharCodeAt(self, index)
    if index ~= index then
        index = 0
    end
    if index < 0 then
        return 0 / 0
    end
    return string.byte(self, index + 1) or 0 / 0
end

local function __TS__StringEndsWith(self, searchString, endPosition)
    if endPosition == nil or endPosition > #self then
        endPosition = #self
    end
    return string.sub(self, endPosition - #searchString + 1, endPosition) == searchString
end

local function __TS__StringIncludes(self, searchString, position)
    if not position then
        position = 1
    else
        position = position + 1
    end
    local index = string.find(self, searchString, position, true)
    return index ~= nil
end

local function __TS__StringPadEnd(self, maxLength, fillString)
    if fillString == nil then
        fillString = " "
    end
    if maxLength ~= maxLength then
        maxLength = 0
    end
    if maxLength == -math.huge or maxLength == math.huge then
        error("Invalid string length", 0)
    end
    if #self >= maxLength or #fillString == 0 then
        return self
    end
    maxLength = maxLength - #self
    if maxLength > #fillString then
        fillString = fillString .. string.rep(
            fillString,
            math.floor(maxLength / #fillString)
        )
    end
    return self .. string.sub(
        fillString,
        1,
        math.floor(maxLength)
    )
end

local function __TS__StringPadStart(self, maxLength, fillString)
    if fillString == nil then
        fillString = " "
    end
    if maxLength ~= maxLength then
        maxLength = 0
    end
    if maxLength == -math.huge or maxLength == math.huge then
        error("Invalid string length", 0)
    end
    if #self >= maxLength or #fillString == 0 then
        return self
    end
    maxLength = maxLength - #self
    if maxLength > #fillString then
        fillString = fillString .. string.rep(
            fillString,
            math.floor(maxLength / #fillString)
        )
    end
    return string.sub(
        fillString,
        1,
        math.floor(maxLength)
    ) .. self
end

local __TS__StringReplace
do
    local sub = string.sub
    function __TS__StringReplace(source, searchValue, replaceValue)
        local startPos, endPos = string.find(source, searchValue, nil, true)
        if not startPos then
            return source
        end
        local before = sub(source, 1, startPos - 1)
        local ____temp_0
        if type(replaceValue) == "string" then
            ____temp_0 = replaceValue
        else
            ____temp_0 = replaceValue(nil, searchValue, startPos - 1, source)
        end
        local replacement = ____temp_0
        local after = sub(source, endPos + 1)
        return (before .. replacement) .. after
    end
end

local __TS__StringSplit
do
    local sub = string.sub
    local find = string.find
    function __TS__StringSplit(source, separator, limit)
        if limit == nil then
            limit = 4294967295
        end
        if limit == 0 then
            return {}
        end
        local result = {}
        local resultIndex = 1
        if separator == nil or separator == "" then
            for i = 1, #source do
                result[resultIndex] = sub(source, i, i)
                resultIndex = resultIndex + 1
            end
        else
            local currentPos = 1
            while resultIndex <= limit do
                local startPos, endPos = find(source, separator, currentPos, true)
                if not startPos then
                    break
                end
                result[resultIndex] = sub(source, currentPos, startPos - 1)
                resultIndex = resultIndex + 1
                currentPos = endPos + 1
            end
            if resultIndex <= limit then
                result[resultIndex] = sub(source, currentPos)
            end
        end
        return result
    end
end

local __TS__StringReplaceAll
do
    local sub = string.sub
    local find = string.find
    function __TS__StringReplaceAll(source, searchValue, replaceValue)
        if type(replaceValue) == "string" then
            local concat = table.concat(
                __TS__StringSplit(source, searchValue),
                replaceValue
            )
            if #searchValue == 0 then
                return (replaceValue .. concat) .. replaceValue
            end
            return concat
        end
        local parts = {}
        local partsIndex = 1
        if #searchValue == 0 then
            parts[1] = replaceValue(nil, "", 0, source)
            partsIndex = 2
            for i = 1, #source do
                parts[partsIndex] = sub(source, i, i)
                parts[partsIndex + 1] = replaceValue(nil, "", i, source)
                partsIndex = partsIndex + 2
            end
        else
            local currentPos = 1
            while true do
                local startPos, endPos = find(source, searchValue, currentPos, true)
                if not startPos then
                    break
                end
                parts[partsIndex] = sub(source, currentPos, startPos - 1)
                parts[partsIndex + 1] = replaceValue(nil, searchValue, startPos - 1, source)
                partsIndex = partsIndex + 2
                currentPos = endPos + 1
            end
            parts[partsIndex] = sub(source, currentPos)
        end
        return table.concat(parts)
    end
end

local function __TS__StringSlice(self, start, ____end)
    if start == nil or start ~= start then
        start = 0
    end
    if ____end ~= ____end then
        ____end = 0
    end
    if start >= 0 then
        start = start + 1
    end
    if ____end ~= nil and ____end < 0 then
        ____end = ____end - 1
    end
    return string.sub(self, start, ____end)
end

local function __TS__StringStartsWith(self, searchString, position)
    if position == nil or position < 0 then
        position = 0
    end
    return string.sub(self, position + 1, #searchString + position) == searchString
end

local function __TS__StringTrim(self)
    local result = string.gsub(self, "^[%s ﻿]*(.-)[%s ﻿]*$", "%1")
    return result
end

local function __TS__StringTrimEnd(self)
    local result = string.gsub(self, "[%s ﻿]*$", "")
    return result
end

local function __TS__StringTrimStart(self)
    local result = string.gsub(self, "^[%s ﻿]*", "")
    return result
end

local __TS__SymbolRegistryFor, __TS__SymbolRegistryKeyFor
do
    local symbolRegistry = {}
    function __TS__SymbolRegistryFor(key)
        if not symbolRegistry[key] then
            symbolRegistry[key] = __TS__Symbol(key)
        end
        return symbolRegistry[key]
    end
    function __TS__SymbolRegistryKeyFor(sym)
        for key in pairs(symbolRegistry) do
            if symbolRegistry[key] == sym then
                return key
            end
        end
    end
end

local function __TS__TypeOf(value)
    local luaType = type(value)
    if luaType == "table" then
        return "object"
    elseif luaType == "nil" then
        return "undefined"
    else
        return luaType
    end
end

return {
  __TS__ArrayConcat = __TS__ArrayConcat,
  __TS__ArrayEntries = __TS__ArrayEntries,
  __TS__ArrayEvery = __TS__ArrayEvery,
  __TS__ArrayFilter = __TS__ArrayFilter,
  __TS__ArrayForEach = __TS__ArrayForEach,
  __TS__ArrayFind = __TS__ArrayFind,
  __TS__ArrayFindIndex = __TS__ArrayFindIndex,
  __TS__ArrayFrom = __TS__ArrayFrom,
  __TS__ArrayIncludes = __TS__ArrayIncludes,
  __TS__ArrayIndexOf = __TS__ArrayIndexOf,
  __TS__ArrayIsArray = __TS__ArrayIsArray,
  __TS__ArrayJoin = __TS__ArrayJoin,
  __TS__ArrayMap = __TS__ArrayMap,
  __TS__ArrayPush = __TS__ArrayPush,
  __TS__ArrayPushArray = __TS__ArrayPushArray,
  __TS__ArrayReduce = __TS__ArrayReduce,
  __TS__ArrayReduceRight = __TS__ArrayReduceRight,
  __TS__ArrayReverse = __TS__ArrayReverse,
  __TS__ArrayUnshift = __TS__ArrayUnshift,
  __TS__ArraySort = __TS__ArraySort,
  __TS__ArraySlice = __TS__ArraySlice,
  __TS__ArraySome = __TS__ArraySome,
  __TS__ArraySplice = __TS__ArraySplice,
  __TS__ArrayToObject = __TS__ArrayToObject,
  __TS__ArrayFlat = __TS__ArrayFlat,
  __TS__ArrayFlatMap = __TS__ArrayFlatMap,
  __TS__ArraySetLength = __TS__ArraySetLength,
  __TS__AsyncAwaiter = __TS__AsyncAwaiter,
  __TS__Await = __TS__Await,
  __TS__Class = __TS__Class,
  __TS__ClassExtends = __TS__ClassExtends,
  __TS__CloneDescriptor = __TS__CloneDescriptor,
  __TS__Decorate = __TS__Decorate,
  __TS__DecorateParam = __TS__DecorateParam,
  __TS__Delete = __TS__Delete,
  __TS__DelegatedYield = __TS__DelegatedYield,
  Error = Error,
  RangeError = RangeError,
  ReferenceError = ReferenceError,
  SyntaxError = SyntaxError,
  TypeError = TypeError,
  URIError = URIError,
  __TS__FunctionBind = __TS__FunctionBind,
  __TS__Generator = __TS__Generator,
  __TS__InstanceOf = __TS__InstanceOf,
  __TS__InstanceOfObject = __TS__InstanceOfObject,
  __TS__Iterator = __TS__Iterator,
  Map = Map,
  __TS__MathAtan2 = __TS__MathAtan2,
  __TS__MathSign = __TS__MathSign,
  __TS__New = __TS__New,
  __TS__Number = __TS__Number,
  __TS__NumberIsFinite = __TS__NumberIsFinite,
  __TS__NumberIsNaN = __TS__NumberIsNaN,
  __TS__NumberToString = __TS__NumberToString,
  __TS__ObjectAssign = __TS__ObjectAssign,
  __TS__ObjectDefineProperty = __TS__ObjectDefineProperty,
  __TS__ObjectEntries = __TS__ObjectEntries,
  __TS__ObjectFromEntries = __TS__ObjectFromEntries,
  __TS__ObjectGetOwnPropertyDescriptor = __TS__ObjectGetOwnPropertyDescriptor,
  __TS__ObjectGetOwnPropertyDescriptors = __TS__ObjectGetOwnPropertyDescriptors,
  __TS__ObjectKeys = __TS__ObjectKeys,
  __TS__ObjectRest = __TS__ObjectRest,
  __TS__ObjectValues = __TS__ObjectValues,
  __TS__ParseFloat = __TS__ParseFloat,
  __TS__ParseInt = __TS__ParseInt,
  __TS__Promise = __TS__Promise,
  __TS__PromiseAll = __TS__PromiseAll,
  __TS__PromiseAllSettled = __TS__PromiseAllSettled,
  __TS__PromiseAny = __TS__PromiseAny,
  __TS__PromiseRace = __TS__PromiseRace,
  Set = Set,
  __TS__SetDescriptor = __TS__SetDescriptor,
  __TS__SparseArrayNew = __TS__SparseArrayNew,
  __TS__SparseArrayPush = __TS__SparseArrayPush,
  __TS__SparseArraySpread = __TS__SparseArraySpread,
  WeakMap = WeakMap,
  WeakSet = WeakSet,
  __TS__SourceMapTraceBack = __TS__SourceMapTraceBack,
  __TS__Spread = __TS__Spread,
  __TS__StringAccess = __TS__StringAccess,
  __TS__StringCharAt = __TS__StringCharAt,
  __TS__StringCharCodeAt = __TS__StringCharCodeAt,
  __TS__StringEndsWith = __TS__StringEndsWith,
  __TS__StringIncludes = __TS__StringIncludes,
  __TS__StringPadEnd = __TS__StringPadEnd,
  __TS__StringPadStart = __TS__StringPadStart,
  __TS__StringReplace = __TS__StringReplace,
  __TS__StringReplaceAll = __TS__StringReplaceAll,
  __TS__StringSlice = __TS__StringSlice,
  __TS__StringSplit = __TS__StringSplit,
  __TS__StringStartsWith = __TS__StringStartsWith,
  __TS__StringSubstr = __TS__StringSubstr,
  __TS__StringSubstring = __TS__StringSubstring,
  __TS__StringTrim = __TS__StringTrim,
  __TS__StringTrimEnd = __TS__StringTrimEnd,
  __TS__StringTrimStart = __TS__StringTrimStart,
  __TS__Symbol = __TS__Symbol,
  Symbol = Symbol,
  __TS__SymbolRegistryFor = __TS__SymbolRegistryFor,
  __TS__SymbolRegistryKeyFor = __TS__SymbolRegistryKeyFor,
  __TS__TypeOf = __TS__TypeOf,
  __TS__Unpack = __TS__Unpack
}
 end,
["enums.CollectibleTypeCustom"] = function(...) 
local ____exports = {}
____exports.CollectibleTypeCustom = {
    DADS_LOST_COIN_CUSTOM = Isaac.GetItemIdByName("Dad's Lost Coin"),
    SCHOOLBAG_CUSTOM = Isaac.GetItemIdByName("Schoolbag"),
    MUTANT_SPIDER_INNER_EYE = Isaac.GetItemIdByName("Mutant Spider's Inner Eye"),
    HOLY_POOP = Isaac.GetItemIdByName("Holy Poop"),
    MOMS_BRA_IMPROVED = Isaac.GetItemIdByName("Mom's Bra (Improved)"),
    BOBS_ROTTEN_HEAD_IMPROVED = Isaac.GetItemIdByName("Bob's Rotten Head (Improved)"),
    MONSTER_MANUAL_IMPROVED = Isaac.GetItemIdByName("Monster Manual (Improved)"),
    TECHNOLOGY_2_5 = Isaac.GetItemIdByName("Technology 2.5"),
    FANNY_PACK_IMPROVED = Isaac.GetItemIdByName("Fanny Pack (Improved)"),
    FIRE_MIND_IMPROVED = Isaac.GetItemIdByName("Fire Mind (Improved)"),
    BOX_OF_SPIDERS_IMPROVED = Isaac.GetItemIdByName("Box of Spiders (Improved)"),
    HOLY_MANTLE_NERFED = Isaac.GetItemIdByName("Holy Mantle (Nerfed)"),
    MR_DOLLY_NERFED = Isaac.GetItemIdByName("Mr. Dolly (Nerfed)"),
    MEGA_BLAST_SINGLE = Isaac.GetItemIdByName("Mega Blast (Single Use)"),
    ADRENALINE_IMPROVED = Isaac.GetItemIdByName("Adrenaline (Improved)"),
    POKE_GO_IMPROVED = Isaac.GetItemIdByName("Poke Go (Improved)"),
    CLOCKWORK_ASSEMBLY = Isaac.GetItemIdByName("Clockwork Assembly"),
    CHARGING_STATION = Isaac.GetItemIdByName("Charging Station"),
    STRABISMUS = Isaac.GetItemIdByName("Strabismus"),
    U235 = Isaac.GetItemIdByName("U-235"),
    CATALOG = Isaac.GetItemIdByName("Catalog")
}
return ____exports
 end,
["constants"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____CollectibleTypeCustom = require("enums.CollectibleTypeCustom")
local CollectibleTypeCustom = ____CollectibleTypeCustom.CollectibleTypeCustom
____exports.VERSION = "v1.1.0"
____exports.ZERO_VECTOR = Vector(0, 0)
____exports.FAMILIAR_TEAR_DAMAGE = 0.33
____exports.FAMILIAR_TEAR_SCALE = 0.5
____exports.REMOVED_TRINKETS = {
    TrinketType.PURPLE_HEART,
    TrinketType.ROSARY_BEAD,
    TrinketType.CARTRIDGE,
    TrinketType.PULSE_WORM,
    TrinketType.MOMS_TOENAIL,
    TrinketType.BUTT_PENNY,
    TrinketType.MYSTERIOUS_CANDY,
    TrinketType.HOOK_WORM,
    TrinketType.BROKEN_ANKH,
    TrinketType.UMBILICAL_CORD,
    TrinketType.CHILDS_HEART,
    TrinketType.RUSTED_KEY,
    TrinketType.MATCH_STICK,
    TrinketType.LUCKY_TOE,
    TrinketType.CURSED_SKULL,
    TrinketType.ISAACS_FORK,
    TrinketType.SOUL,
    TrinketType.EVES_BIRD_FOOT,
    TrinketType.SHINY_ROCK,
    TrinketType.RAINBOW_WORM,
    TrinketType.TAPE_WORM,
    TrinketType.LAZY_WORM,
    TrinketType.CRACKED_DICE,
    TrinketType.FADED_POLAROID,
    TrinketType.BOBS_BLADDER,
    TrinketType.STUD_FINDER,
    TrinketType.ERROR,
    TrinketType.POKER_CHIP,
    TrinketType.BLISTER,
    TrinketType.SECOND_HAND,
    TrinketType.BLACK_FEATHER,
    TrinketType.MOMS_LOCKET,
    TrinketType.BROWN_CAP,
    TrinketType.USED_DIAPER,
    TrinketType.OUROBOROS_WORM,
    TrinketType.TONSIL,
    TrinketType.NOSE_GOBLIN,
    TrinketType.EQUALITY,
    TrinketType.BAG_LUNCH,
    TrinketType.LOST_CORK,
    TrinketType.CROW_HEART,
    TrinketType.DUCT_TAPE,
    TrinketType.LOCUST_OF_WRATH,
    TrinketType.BAT_WING,
    TrinketType.STEM_CELL,
    TrinketType.WOODEN_CROSS
}
____exports.TWO_HEART_ITEMS = {
    CollectibleType.CRICKETS_HEAD,
    CollectibleType.MAGIC_MUSHROOM,
    CollectibleType.DR_FETUS,
    CollectibleType.TECHNOLOGY,
    CollectibleType.CHOCOLATE_MILK,
    CollectibleType.MOMS_KNIFE,
    CollectibleType.BRIMSTONE,
    CollectibleType.IPECAC,
    CollectibleType.EPIC_FETUS,
    CollectibleType.POLYPHEMUS,
    CollectibleType.SACRED_HEART,
    CollectibleType.CRICKETS_BODY,
    CollectibleType.MONSTROS_LUNG,
    CollectibleType.DEATHS_TOUCH,
    CollectibleType.TECH_5,
    CollectibleType.TWENTY_TWENTY,
    CollectibleType.PROPTOSIS,
    CollectibleType.LIL_BRIMSTONE,
    CollectibleType.ISAACS_HEART,
    CollectibleType.JUDAS_SHADOW,
    CollectibleType.GODHEAD,
    CollectibleType.INCUBUS,
    CollectibleType.DEAD_EYE,
    CollectibleType.TECH_X,
    CollectibleType.MAW_OF_THE_VOID,
    CollectibleType.CROWN_OF_LIGHT,
    CollectibleType.JACOBS_LADDER,
    CollectibleTypeCustom.MUTANT_SPIDER_INNER_EYE,
    CollectibleType.PYRO,
    CollectibleType.ABADDON,
    CollectibleType.TINY_PLANET,
    CollectibleType.PURITY,
    CollectibleType.SUCCUBUS,
    CollectibleTypeCustom.TECHNOLOGY_2_5
}
____exports.SHOP_PRICES = __TS__New(Map, {
    {CollectibleType.COMPASS, 15},
    {CollectibleType.TREASURE_MAP, 15},
    {CollectibleType.BLUE_MAP, 15},
    {CollectibleType.BOOK_OF_SECRETS, 15},
    {CollectibleType.TELEPORT, 15},
    {CollectibleType.DADS_KEY, 15},
    {CollectibleType.BFFS, 15},
    {CollectibleType.THERES_OPTIONS, 15},
    {CollectibleType.UNDEFINED, 15},
    {CollectibleType.DIPLOPIA, 15},
    {CollectibleTypeCustom.CLOCKWORK_ASSEMBLY, 15},
    {CollectibleTypeCustom.CATALOG, 15},
    {CollectibleType.TRANSCENDENCE, 10},
    {CollectibleType.STEAM_SALE, 10},
    {CollectibleType.BLANK_CARD, 10},
    {CollectibleType.BLUE_BOX, 10},
    {CollectibleType.UNICORN_STUMP, 10},
    {CollectibleType.PLACEBO, 10},
    {CollectibleType.CHARGED_BABY, 10},
    {CollectibleType.RESTOCK, 10},
    {CollectibleType.VENTRICLE_RAZOR, 10},
    {CollectibleType.VOID, 10},
    {CollectibleType.PAUSE, 10},
    {CollectibleType.POTATO_PEELER, 10},
    {CollectibleType.EDENS_SOUL, 10},
    {CollectibleType.MYSTERY_GIFT, 10},
    {CollectibleType.MOVING_BOX, 10},
    {CollectibleType.MR_ME, 10},
    {CollectibleType.SACRIFICIAL_ALTAR, 10},
    {CollectibleType.BOOK_OF_SHADOWS, 5},
    {CollectibleType.BATTERY, 5},
    {CollectibleType.PHD, 5},
    {CollectibleType.XRAY_VISION, 5},
    {CollectibleType.DECK_OF_CARDS, 5},
    {CollectibleType.SPELUNKER_HAT, 5},
    {CollectibleType.MOMS_BOTTLE_OF_PILLS, 5},
    {CollectibleType.NINE_VOLT, 5},
    {CollectibleType.HABIT, 5},
    {CollectibleType.SHARP_PLUG, 5},
    {CollectibleType.PIGGY_BANK, 5},
    {CollectibleType.CONTRACT_FROM_BELOW, 5},
    {CollectibleType.HIVE_MIND, 5},
    {CollectibleType.STARTER_DECK, 5},
    {CollectibleType.LITTLE_BAGGY, 5},
    {CollectibleType.HOW_TO_JUMP, 5},
    {CollectibleType.MORE_OPTIONS, 5},
    {CollectibleType.SACK_HEAD, 5},
    {CollectibleType.MOMS_BOX, 5},
    {CollectibleType.POLYDACTYLY, 5},
    {CollectibleType.BELLY_BUTTON, 5},
    {CollectibleType.D1, 5},
    {CollectibleType.SMELTER, 5},
    {CollectibleType.COMPOST, 5},
    {CollectibleType.YO_LISTEN, 5},
    {CollectibleType.COUPON, 5},
    {CollectibleTypeCustom.FANNY_PACK_IMPROVED, 5},
    {CollectibleTypeCustom.CHARGING_STATION, 5}
})
____exports.FLY_ENTITIES = {
    EntityType.FLY,
    EntityType.POOTER,
    EntityType.ATTACK_FLY,
    EntityType.BOOM_FLY,
    EntityType.SUCKER,
    EntityType.DUKE,
    EntityType.MOTER,
    EntityType.FLY_L2,
    EntityType.RING_OF_FLIES,
    EntityType.FULL_FLY,
    EntityType.DART_FLY,
    EntityType.SWARM,
    EntityType.HUSH_FLY
}
____exports.SPIDER_ENTITIES = {
    EntityType.HOPPER,
    EntityType.SPIDER,
    EntityType.BIG_SPIDER,
    EntityType.WIDOW,
    EntityType.DADDY_LONG_LEGS,
    EntityType.BABY_LONG_LEGS,
    EntityType.CRAZY_LONG_LEGS,
    EntityType.SPIDER_L2,
    EntityType.WALL_CREEP,
    EntityType.RAGE_CREEP,
    EntityType.BLIND_CREEP,
    EntityType.RAGLING,
    EntityType.TICKING_SPIDER,
    EntityType.BLISTER,
    EntityType.THE_THING
}
____exports.TECHNOLOGY_EXCEPTION_ITEMS = {
    CollectibleType.DR_FETUS,
    CollectibleType.MOMS_KNIFE,
    CollectibleType.BRIMSTONE,
    CollectibleType.IPECAC,
    CollectibleType.EPIC_FETUS,
    CollectibleType.TINY_PLANET,
    CollectibleType.TECH_X
}
____exports.ISAACS_HEART_BROKEN_COLLECTIBLES = {CollectibleType.BRIMSTONE, CollectibleType.RUBBER_CEMENT, CollectibleType.LUDOVICO_TECHNIQUE, CollectibleType.MULTIDIMENSIONAL_BABY}
____exports.POKE_GO_EXCEPTION_ENTITIES = {
    EntityType.SHOPKEEPER,
    EntityType.FIREPLACE,
    EntityType.GRIMACE,
    EntityType.POKY,
    EntityType.ETERNAL_FLY,
    EntityType.CONSTANT_STONE_SHOOTER,
    EntityType.BRIMSTONE_HEAD,
    EntityType.SWINGER,
    EntityType.WALL_HUGGER,
    EntityType.GAPING_MAW,
    EntityType.BROKEN_GAPING_MAW,
    EntityType.SWARM,
    EntityType.PITFALL
}
____exports.CATALOG_ITEM_PRICE = 10
____exports.CATALOG_ILLEGAL_ROOM_TYPES = {
    RoomType.SHOP,
    RoomType.CURSE,
    RoomType.DEVIL,
    RoomType.ANGEL,
    RoomType.BLACK_MARKET
}
return ____exports
 end,
["types.GlobalsRunLevel"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__Class = ____lualib.__TS__Class
local ____exports = {}
____exports.default = __TS__Class()
local GlobalsRunLevel = ____exports.default
GlobalsRunLevel.name = "GlobalsRunLevel"
function GlobalsRunLevel.prototype.____constructor(self, stage, stageType, stageFrame)
    self.doubleItems = false
    self.usedDiceRoom = false
    self.stage = stage
    self.stageType = stageType
    self.stageFrame = stageFrame
end
____exports.default = GlobalsRunLevel
return ____exports
 end,
["types.GlobalsRunPills"] = function(...) 
local ____exports = {}
return ____exports
 end,
["types.Shockwave"] = function(...) 
local ____exports = {}
return ____exports
 end,
["types.Tear"] = function(...) 
local ____exports = {}
return ____exports
 end,
["types.GlobalsRunRoom"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__Class = ____lualib.__TS__Class
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
____exports.default = __TS__Class()
local GlobalsRunRoom = ____exports.default
GlobalsRunRoom.name = "GlobalsRunRoom"
function GlobalsRunRoom.prototype.____constructor(self, clearState)
    self.doubleItemsFrame = 0
    self.softlock = false
    self.knifeFlying = __TS__New(Map)
    self.knifePositions = __TS__New(Map)
    self.mongoBabyTears = {}
    self.fartingBabyShockwaves = {}
    self.clearState = clearState
end
____exports.default = GlobalsRunRoom
return ____exports
 end,
["types.GlobalsRun"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__Class = ____lualib.__TS__Class
local __TS__New = ____lualib.__TS__New
local Map = ____lualib.Map
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
local PlayerForm = ____isaac_2Dtypescript_2Ddefinitions.PlayerForm
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local getEnumValues = ____isaacscript_2Dcommon.getEnumValues
local newRNG = ____isaacscript_2Dcommon.newRNG
local ____GlobalsRunLevel = require("types.GlobalsRunLevel")
local GlobalsRunLevel = ____GlobalsRunLevel.default
local ____GlobalsRunRoom = require("types.GlobalsRunRoom")
local GlobalsRunRoom = ____GlobalsRunRoom.default
____exports.default = __TS__Class()
local GlobalsRun = ____exports.default
GlobalsRun.name = "GlobalsRun"
function GlobalsRun.prototype.____constructor(self, startSeed)
    self.randomSeed = 0
    self.tearCounter = 0
    self.level = __TS__New(GlobalsRunLevel, 0, 0, 0)
    self.room = __TS__New(GlobalsRunRoom, true)
    self.lastFireDirection = Direction.DOWN
    self.dealingExtraDamage = false
    self.familiarMultiShot = 0
    self.familiarMultiShotVelocity = Vector(0, 0)
    self.rouletteTableRNG = newRNG(nil)
    self.monstroCounters = 0
    self.monstroFrame = 0
    self.wafer = false
    self.waferCounters = 0
    self.knifeCooldownFrames = 0
    self.nineVoltFrame = 0
    self.spawningDeadBird = false
    self.blackBeanEndFrame = 0
    self.abelDoubleTear = false
    self.fannyPackRNG = newRNG(nil)
    self.piggyBankRNG = newRNG(nil)
    self.technologyAdded2020 = false
    self.spawningIsaacsHeartLaser = false
    self.judasShadow = false
    self.holyMantle = false
    self.wizDoubleTear = false
    self.chargedBabyCounters = 0
    self.fartingBabyCounters = 0
    self.blackPowderActive = false
    self.brownNuggetCounters = 0
    self.brownNuggetFrame = 0
    self.walnutCounters = 0
    self.spawningRestock = false
    self.strabismusDoubleTear = false
    self.catalogSeed = 0
    self.etherealPennySeed = 0
    self.numCoins = 0
    self.wheelOfFortuneSeed = 0
    self.sunCardRNG = newRNG(nil)
    self.pills = {
        effects = __TS__New(Map),
        damageUp = 0,
        tearDelayDown = 0,
        superSadness = 0,
        invincibility = 0,
        reallyBadGas = 0,
        aether = 0,
        aetherAngle = 0,
        wallsHaveEyes = 0,
        wallsHaveEyesShooting = false,
        bladderInfection = 0,
        scorchedEarth = 0,
        familiarFrenzy = 0
    }
    self.health = {
        hearts = 0,
        maxHearts = 0,
        soulHearts = 0,
        blackHearts = 0,
        boneHearts = 0,
        changedOnThisFrame = false,
        restoredLastHealthOnThisFrame = false
    }
    self.lastHealth = {
        hearts = 0,
        maxHearts = 0,
        soulHearts = 0,
        blackHearts = 0,
        boneHearts = 0
    }
    self.transformations = __TS__New(Map)
    self.randomSeed = startSeed
    self.rouletteTableRNG = newRNG(nil, startSeed)
    self.fannyPackRNG = newRNG(nil, startSeed)
    self.piggyBankRNG = newRNG(nil, startSeed)
    self.catalogSeed = startSeed
    self.etherealPennySeed = startSeed
    self.wheelOfFortuneSeed = startSeed
    for ____, transformation in ipairs(getEnumValues(nil, PlayerForm)) do
        self.transformations:set(transformation, false)
    end
end
____exports.default = GlobalsRun
return ____exports
 end,
["types.Globals"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__Class = ____lualib.__TS__Class
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local game = ____isaacscript_2Dcommon.game
local ____GlobalsRun = require("types.GlobalsRun")
local GlobalsRun = ____GlobalsRun.default
____exports.default = __TS__Class()
local Globals = ____exports.default
Globals.name = "Globals"
function Globals.prototype.____constructor(self)
    self.g = game
    self.l = Game():GetLevel()
    self.r = Game():GetRoom()
    self.p = Isaac.GetPlayer(0)
    self.seeds = game:GetSeeds()
    self.itemPool = game:GetItemPool()
    self.racingPlusEnabled = RacingPlusGlobals ~= nil
    self.run = __TS__New(GlobalsRun, 0)
end
____exports.default = Globals
return ____exports
 end,
["globals"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____Globals = require("types.Globals")
local Globals = ____Globals.default
local globals = __TS__New(Globals)
____exports.default = globals
RacingPlusRebalancedGlobals = globals
return ____exports
 end,
["debug"] = function(...) 
local ____exports = {}
local ____globals = require("globals")
local g = ____globals.default
function ____exports.default(self)
    Isaac.DebugString("Racing+ Rebalanced debug function activated.")
    g.run.level.doubleItems = true
end
return ____exports
 end,
["isaacScriptInit"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__StringSplit = ____lualib.__TS__StringSplit
local ____exports = {}
local overwriteError, isaacScriptError
function overwriteError(self)
    if ___LUA_ERROR_BACKUP == nil then
        ___LUA_ERROR_BACKUP = error
    end
    error = isaacScriptError
end
function isaacScriptError(err, _level)
    local msg
    if err == nil or err == "" then
        msg = "Lua error (with a blank error message)"
    else
        msg = "Lua error: " .. err
    end
    Isaac.DebugString(msg)
    Isaac.ConsoleOutput(msg)
    if debug ~= nil then
        local tracebackLines = __TS__StringSplit(
            debug.traceback(),
            "\n"
        )
        do
            local i = 0
            while i < #tracebackLines do
                do
                    if i == 0 or i == 1 then
                        goto __continue9
                    end
                    local line = tracebackLines[i + 1]
                    Isaac.DebugString(line)
                end
                ::__continue9::
                i = i + 1
            end
        end
    end
    ___LUA_ERROR_BACKUP("(See above error messages.)")
end
function ____exports.default(self)
    overwriteError(nil)
end
return ____exports
 end,
["callbacks.entityTakeDmgNPC"] = function(...) 
local ____exports = {}
local spearOfDestiny
local ____globals = require("globals")
local g = ____globals.default
function spearOfDestiny(self, npc, damageSource, damageCountdownFrames)
    if damageSource.Type == EntityType.EFFECT and damageSource.Variant == EffectVariant.SPEAR_OF_DESTINY then
        local damage = g.p.Damage * 3
        g.run.dealingExtraDamage = true
        npc:TakeDamage(
            damage,
            0,
            EntityRef(g.p),
            damageCountdownFrames
        )
        g.run.dealingExtraDamage = false
        return false
    end
    return true
end
function ____exports.default(self, npc, _damageAmount, _damageFlags, damageSource, damageCountdownFrames)
    spearOfDestiny(nil, npc, damageSource, damageCountdownFrames)
    return true
end
return ____exports
 end,
["enums.SoundEffectCustom"] = function(...) 
local ____exports = {}
____exports.SoundEffectCustom = {
    WALNUT = Isaac.GetSoundIdByName("Walnut"),
    SANTA = Isaac.GetSoundIdByName("Santa")
}
return ____exports
 end,
["enums.TrinketTypeCustom"] = function(...) 
local ____exports = {}
____exports.TrinketTypeCustom = {
    WALNUT_IMPROVED = Isaac.GetTrinketIdByName("Walnut (Improved)"),
    ETHEREAL_PENNY = Isaac.GetTrinketIdByName("Ethereal Penny"),
    PENNY_ON_A_STRING = Isaac.GetTrinketIdByName("Penny on a String")
}
return ____exports
 end,
["callbacks.entityTakeDmgPlayer"] = function(...) 
local ____exports = {}
local theWafer, infestation, theBlackBean, spiderBaby, piggyBank, techX, myShadow, fannyPackImproved, walnut
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local BatterySubType = ____isaac_2Dtypescript_2Ddefinitions.BatterySubType
local BombSubType = ____isaac_2Dtypescript_2Ddefinitions.BombSubType
local Card = ____isaac_2Dtypescript_2Ddefinitions.Card
local ChargerSubType = ____isaac_2Dtypescript_2Ddefinitions.ChargerSubType
local ChargerVariant = ____isaac_2Dtypescript_2Ddefinitions.ChargerVariant
local ChestSubType = ____isaac_2Dtypescript_2Ddefinitions.ChestSubType
local CoinSubType = ____isaac_2Dtypescript_2Ddefinitions.CoinSubType
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local DamageFlag = ____isaac_2Dtypescript_2Ddefinitions.DamageFlag
local EntityFlag = ____isaac_2Dtypescript_2Ddefinitions.EntityFlag
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local FamiliarVariant = ____isaac_2Dtypescript_2Ddefinitions.FamiliarVariant
local HeartSubType = ____isaac_2Dtypescript_2Ddefinitions.HeartSubType
local ItemPoolType = ____isaac_2Dtypescript_2Ddefinitions.ItemPoolType
local KeySubType = ____isaac_2Dtypescript_2Ddefinitions.KeySubType
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local PillColor = ____isaac_2Dtypescript_2Ddefinitions.PillColor
local SackSubType = ____isaac_2Dtypescript_2Ddefinitions.SackSubType
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local getRandomInt = ____isaacscript_2Dcommon.getRandomInt
local hasFlag = ____isaacscript_2Dcommon.hasFlag
local ____repeat = ____isaacscript_2Dcommon["repeat"]
local sfxManager = ____isaacscript_2Dcommon.sfxManager
local spawnBatteryWithSeed = ____isaacscript_2Dcommon.spawnBatteryWithSeed
local spawnCardWithSeed = ____isaacscript_2Dcommon.spawnCardWithSeed
local spawnCoin = ____isaacscript_2Dcommon.spawnCoin
local spawnCoinWithSeed = ____isaacscript_2Dcommon.spawnCoinWithSeed
local spawnCollectible = ____isaacscript_2Dcommon.spawnCollectible
local spawnHeartWithSeed = ____isaacscript_2Dcommon.spawnHeartWithSeed
local spawnKeyWithSeed = ____isaacscript_2Dcommon.spawnKeyWithSeed
local spawnNPC = ____isaacscript_2Dcommon.spawnNPC
local spawnPickupWithSeed = ____isaacscript_2Dcommon.spawnPickupWithSeed
local spawnPillWithSeed = ____isaacscript_2Dcommon.spawnPillWithSeed
local spawnSackWithSeed = ____isaacscript_2Dcommon.spawnSackWithSeed
local spawnTrinketWithSeed = ____isaacscript_2Dcommon.spawnTrinketWithSeed
local ____CollectibleTypeCustom = require("enums.CollectibleTypeCustom")
local CollectibleTypeCustom = ____CollectibleTypeCustom.CollectibleTypeCustom
local ____SoundEffectCustom = require("enums.SoundEffectCustom")
local SoundEffectCustom = ____SoundEffectCustom.SoundEffectCustom
local ____TrinketTypeCustom = require("enums.TrinketTypeCustom")
local TrinketTypeCustom = ____TrinketTypeCustom.TrinketTypeCustom
local ____globals = require("globals")
local g = ____globals.default
function theWafer(self, player)
    if g.run.waferCounters == 0 then
        return
    end
    local ____g_run_0, ____waferCounters_1 = g.run, "waferCounters"
    ____g_run_0[____waferCounters_1] = ____g_run_0[____waferCounters_1] - 1
    if g.run.waferCounters == 0 then
        player:RemoveCollectible(CollectibleType.WAFER)
    end
end
function infestation(self, player)
    if not player:HasCollectible(CollectibleType.INFESTATION) then
        return
    end
    local numFlies = 20
    player:AddBlueFlies(numFlies, player.Position)
end
function theBlackBean(self, player)
    if not player:HasCollectible(CollectibleType.BLACK_BEAN) then
        return
    end
    g.run.blackBeanEndFrame = g.g:GetFrameCount() + 300
end
function spiderBaby(self, player)
    if not g.p:HasCollectible(CollectibleType.SPIDERBABY) then
        return
    end
    local numSpiders = 20
    do
        local i = 0
        while i < numSpiders - 2 do
            local randomPosition = g.r:GetRandomPosition(0)
            player:ThrowBlueSpider(player.Position, randomPosition)
            i = i + 1
        end
    end
end
function piggyBank(self, player)
    if not player:HasCollectible(CollectibleType.PIGGY_BANK) then
        return
    end
    do
        local i = 0
        while i < 4 do
            g.run.piggyBankRNG:Next()
            spawnCoin(
                nil,
                CoinSubType.NULL,
                g.p.Position,
                RandomVector() * 2.5,
                g.p,
                g.run.piggyBankRNG:GetSeed()
            )
            i = i + 1
        end
    end
end
function techX(self, player, damageAmount, damageFlags, damageSource, damageCountdownFrames)
    if not player:HasCollectible(CollectibleType.TECH_X) then
        return
    end
    if player:HasCollectible(CollectibleType.EPIC_FETUS) then
        return
    end
    g.run.dealingExtraDamage = true
    player:TakeDamage(damageAmount, damageFlags, damageSource, damageCountdownFrames)
    g.run.dealingExtraDamage = false
end
function myShadow(self)
    if not g.p:HasCollectible(CollectibleType.MY_SHADOW) then
        return
    end
    local numBlackChargers = 20
    ____repeat(
        nil,
        numBlackChargers - 1,
        function()
            local position = g.r:FindFreePickupSpawnPosition(g.p.Position, 1, true)
            local charger = spawnNPC(
                nil,
                EntityType.CHARGER,
                ChargerVariant.CHARGER,
                ChargerSubType.CHARGER,
                position
            )
            charger:AddEntityFlags(EntityFlag.CHARM)
        end
    )
end
function fannyPackImproved(self, player)
    if not player:HasCollectible(CollectibleTypeCustom.FANNY_PACK_IMPROVED) then
        return
    end
    local pickupRoll = getRandomInt(nil, 1, 11, g.run.fannyPackRNG)
    local position = g.r:FindFreePickupSpawnPosition(g.p.Position, 1, true)
    repeat
        local ____switch26 = pickupRoll
        local ____cond26 = ____switch26 == 1
        if ____cond26 then
            do
                spawnHeartWithSeed(nil, HeartSubType.NULL, position, g.run.fannyPackRNG)
                break
            end
        end
        ____cond26 = ____cond26 or ____switch26 == 2
        if ____cond26 then
            do
                spawnCoinWithSeed(nil, CoinSubType.NULL, position, g.run.fannyPackRNG)
                break
            end
        end
        ____cond26 = ____cond26 or ____switch26 == 3
        if ____cond26 then
            do
                spawnKeyWithSeed(nil, KeySubType.NULL, position, g.run.fannyPackRNG)
                break
            end
        end
        ____cond26 = ____cond26 or ____switch26 == 4
        if ____cond26 then
            do
                spawnPickupWithSeed(
                    nil,
                    PickupVariant.BOMB,
                    BombSubType.NULL,
                    position,
                    g.run.fannyPackRNG
                )
                break
            end
        end
        ____cond26 = ____cond26 or ____switch26 == 5
        if ____cond26 then
            do
                spawnPickupWithSeed(
                    nil,
                    PickupVariant.CHEST,
                    ChestSubType.OPENED,
                    position,
                    g.run.fannyPackRNG
                )
                break
            end
        end
        ____cond26 = ____cond26 or ____switch26 == 6
        if ____cond26 then
            do
                spawnSackWithSeed(nil, SackSubType.NULL, position, g.run.fannyPackRNG)
                break
            end
        end
        ____cond26 = ____cond26 or ____switch26 == 7
        if ____cond26 then
            do
                spawnBatteryWithSeed(nil, BatterySubType.NULL, position, g.run.fannyPackRNG)
                break
            end
        end
        ____cond26 = ____cond26 or ____switch26 == 8
        if ____cond26 then
            do
                spawnPillWithSeed(nil, PillColor.NULL, position, g.run.fannyPackRNG)
                break
            end
        end
        ____cond26 = ____cond26 or ____switch26 == 9
        if ____cond26 then
            do
                spawnCardWithSeed(nil, Card.NULL, position, g.run.fannyPackRNG)
                break
            end
        end
        ____cond26 = ____cond26 or ____switch26 == 10
        if ____cond26 then
            do
                spawnTrinketWithSeed(nil, TrinketType.NULL, position, g.run.fannyPackRNG)
                break
            end
        end
        ____cond26 = ____cond26 or ____switch26 == 11
        if ____cond26 then
            do
                spawnCollectible(nil, CollectibleType.NULL, position, g.run.fannyPackRNG)
                break
            end
        end
        do
            do
                error("Unknown pickup case of: " .. tostring(pickupRoll))
            end
        end
    until true
end
function walnut(self, player, damageFlags)
    local startSeed = g.seeds:GetStartSeed()
    if not player:HasTrinket(TrinketTypeCustom.WALNUT_IMPROVED) then
        return
    end
    if not hasFlag(nil, damageFlags, DamageFlag.EXPLOSION) then
        return
    end
    local ____g_run_2, ____walnutCounters_3 = g.run, "walnutCounters"
    ____g_run_2[____walnutCounters_3] = ____g_run_2[____walnutCounters_3] + 1
    if g.run.walnutCounters == 3 then
        g.run.walnutCounters = 0
        g.p:TryRemoveTrinket(TrinketTypeCustom.WALNUT_IMPROVED)
        local position = g.r:FindFreePickupSpawnPosition(g.p.Position, 1, true)
        local collectibleType = g.itemPool:GetCollectible(ItemPoolType.DEVIL, true, startSeed)
        spawnCollectible(nil, collectibleType, position, startSeed)
        sfxManager:Play(
            SoundEffectCustom.WALNUT,
            2,
            0,
            false,
            1
        )
    end
end
function ____exports.default(self, player, damageAmount, damageFlags, damageSource, damageCountdownFrames)
    if g.run.pills.invincibility ~= 0 then
        return false
    end
    if damageSource.Type == EntityType.FAMILIAR and (damageSource.Variant == FamiliarVariant.BLUE_FLY or damageSource.Variant == FamiliarVariant.BBF or damageSource.Variant == FamiliarVariant.BOBS_BRAIN) then
        return false
    end
    theWafer(nil, player)
    infestation(nil, player)
    theBlackBean(nil, player)
    spiderBaby(nil, player)
    piggyBank(nil, player)
    techX(
        nil,
        player,
        damageAmount,
        damageFlags,
        damageSource,
        damageCountdownFrames
    )
    myShadow(nil)
    fannyPackImproved(nil, player)
    walnut(nil, player, damageFlags)
    return true
end
return ____exports
 end,
["callbacks.entityTakeDmg"] = function(...) 
local ____exports = {}
local ____globals = require("globals")
local g = ____globals.default
local ____entityTakeDmgNPC = require("callbacks.entityTakeDmgNPC")
local entityTakeDmgNPC = ____entityTakeDmgNPC.default
local ____entityTakeDmgPlayer = require("callbacks.entityTakeDmgPlayer")
local entityTakeDmgPlayer = ____entityTakeDmgPlayer.default
function ____exports.main(self, entity, damageAmount, damageFlags, damageSource, damageCountdownFrames)
    if g.run.dealingExtraDamage then
        return false
    end
    local player = entity:ToPlayer()
    if player ~= nil then
        return entityTakeDmgPlayer(
            nil,
            player,
            damageAmount,
            damageFlags,
            damageSource,
            damageCountdownFrames
        )
    end
    local npc = entity:ToNPC()
    if npc ~= nil then
        return entityTakeDmgNPC(
            nil,
            npc,
            damageAmount,
            damageFlags,
            damageSource,
            damageCountdownFrames
        )
    end
    return true
end
return ____exports
 end,
["callbacks.evaluateCache"] = function(...) 
local ____exports = {}
local damageItems, damageTrinkets, damagePills, damageGlobalPenalty, fireDelayItems, fireDelayPills, shotSpeedItems, speedItems, luckItems, hasTinyPlanetExceptionItem, TINY_PLANET_EXCEPTION_ITEMS
local ____globals = require("globals")
local g = ____globals.default
local ____enums = require("types.enums")
local CollectibleTypeCustom = ____enums.CollectibleTypeCustom
function damageItems(self, player)
    if player:HasCollectible(CollectibleType.DR_FETUS) then
        player.Damage = player.Damage * 1.2
    end
    if player:HasCollectible(CollectibleType.IPECAC) then
        player.Damage = player.Damage * 0.8
    end
    if player:HasCollectible(CollectibleType.MOMS_KNIFE) and not player:HasCollectible(CollectibleType.EPIC_FETUS) then
        player.Damage = player.Damage * 0.7
    end
    if player:HasCollectible(CollectibleType.TINY_PLANET) and not hasTinyPlanetExceptionItem(nil) then
        player.Damage = player.Damage * 1.5
    end
    if player:HasCollectible(CollectibleType.ISAACS_HEART) then
        player.Damage = player.Damage * 0.8
    end
    if player:HasCollectible(CollectibleType.LUDOVICO_TECHNIQUE) and not player:HasCollectible(CollectibleType.EPIC_FETUS) and not player:HasCollectible(CollectibleType.TECH_X) and not player:HasCollectible(CollectibleType.HAEMOLACRIA) then
        player.Damage = player.Damage * 3
    end
    if player:HasCollectible(CollectibleType.SOY_MILK) then
        player.Damage = player.Damage * 3.5
    end
    if player:HasCollectible(CollectibleType.GODHEAD) then
        player.Damage = player.Damage * 0.9
    end
    if player:HasCollectible(CollectibleType.BLACK_POWDER) and g.run.blackPowderActive then
        player.Damage = player.Damage * 1.5
    end
    if player:HasCollectible(CollectibleTypeCustom.ADRENALINE_IMPROVED) then
        local hearts = player:GetHearts()
        local soulHearts = player:GetSoulHearts()
        local boneHearts = player:GetBoneHearts()
        local numHits = hearts + soulHearts + boneHearts
        if numHits == 1 then
            player.Damage = player.Damage * 2
        elseif numHits == 2 then
            player.Damage = player.Damage * 1.5
        elseif numHits == 3 then
            player.Damage = player.Damage * 1.25
        elseif numHits == 4 then
            player.Damage = player.Damage * 1.125
        end
    end
end
function damageTrinkets(self, player)
    if player:HasTrinket(TrinketType.RING_WORM) then
        player.Damage = player.Damage * 1.25
    end
end
function damagePills(self, player)
    player.Damage = player.Damage + g.run.pills.damageUp
end
function damageGlobalPenalty(self, player)
    local stage = g.l:GetStage()
    local adjustedStage = stage >= 9 and stage - 1 or stage
    local stagePenalty = (adjustedStage - 1) / 9 * 0.3
    player.Damage = player.Damage * (1 - stagePenalty)
end
function fireDelayItems(self, player)
    local hearts = player:GetHearts()
    if player:HasCollectible(CollectibleType.INNER_EYE) and not player:HasCollectible(CollectibleTypeCustom.MUTANT_SPIDER_INNER_EYE) then
        player.MaxFireDelay = player.MaxFireDelay - 4
    end
    if player:HasCollectible(CollectibleType.MY_REFLECTION) then
        player.MaxFireDelay = player.MaxFireDelay - 2
    end
    if player:HasCollectible(CollectibleType.CUPIDS_ARROW) then
        player.MaxFireDelay = player.MaxFireDelay - 1
    end
    if player:HasCollectible(CollectibleType.TINY_PLANET) and not hasTinyPlanetExceptionItem(nil) then
        player.MaxFireDelay = player.MaxFireDelay - 4
    end
    if player:HasCollectible(CollectibleType.ISAACS_HEART) then
        player.MaxFireDelay = math.ceil(player.MaxFireDelay * 2)
    end
    if player:HasCollectible(CollectibleType.EVES_MASCARA) then
        player.MaxFireDelay = player.MaxFireDelay - 1
    end
    if player:HasCollectible(CollectibleType.STRANGE_ATTRACTOR) then
        player.MaxFireDelay = player.MaxFireDelay - 2
    end
    if player:HasCollectible(CollectibleType.THE_WIZ) then
        player.MaxFireDelay = player.MaxFireDelay - 1
    end
    if player:HasCollectible(CollectibleType.MARKED) then
        player.MaxFireDelay = player.MaxFireDelay - 2
    end
    if player:HasCollectible(CollectibleType.EXPLOSIVO) then
        player.MaxFireDelay = player.MaxFireDelay - 2
    end
    if player:HasCollectible(CollectibleType.KIDNEY_STONE) then
        player.MaxFireDelay = player.MaxFireDelay - 1
    end
    if player:HasCollectible(CollectibleType.DARK_PRINCESS_CROWN) and hearts == 2 then
        player.MaxFireDelay = player.MaxFireDelay - 2
    end
    if player:HasCollectible(CollectibleType.POP) then
        player.MaxFireDelay = player.MaxFireDelay - 1
    end
    if player:HasCollectible(CollectibleType.HAEMOLACRIA) then
        player.MaxFireDelay = player.MaxFireDelay - 14
    end
    if player:HasCollectible(CollectibleType.FLAT_STONE) then
        player.MaxFireDelay = player.MaxFireDelay - 1
    end
end
function fireDelayPills(self, player)
    player.MaxFireDelay = player.MaxFireDelay - g.run.pills.tearDelayDown
    if g.run.pills.superSadness ~= 0 then
        player.MaxFireDelay = player.MaxFireDelay - 6
    end
end
function shotSpeedItems(self, player)
    if player:HasCollectible(CollectibleType.EVES_MASCARA) then
        player.ShotSpeed = player.ShotSpeed + 0.5
    end
    if player:HasCollectible(CollectibleType.TRISAGION) then
        player.ShotSpeed = player.ShotSpeed - 0.35
    end
end
function speedItems(self, player)
    if player:HasCollectible(CollectibleType.VIRUS) then
        player.MoveSpeed = player.MoveSpeed + 0.1
    end
    if player:HasCollectible(CollectibleType.ODD_MUSHROOM_DAMAGE) then
        player.MoveSpeed = player.MoveSpeed + 0.1
    end
    if player:HasCollectible(CollectibleType.TAURUS) then
        player.MoveSpeed = player.MoveSpeed + 0.5
    end
    if player:HasCollectible(CollectibleType.LEO) then
        player.MoveSpeed = player.MoveSpeed + 0.1
    end
    if player:HasCollectible(CollectibleType.KIDNEY_STONE) then
        player.MoveSpeed = player.MoveSpeed + 0.2
    end
end
function luckItems(self, player)
    if player:HasCollectible(CollectibleType.LOKIS_HORNS) then
        player.Luck = player.Luck + 7
    end
end
function hasTinyPlanetExceptionItem(self)
    for ____, item in ipairs(TINY_PLANET_EXCEPTION_ITEMS) do
        if g.p:HasCollectible(item) then
            return true
        end
    end
    return false
end
TINY_PLANET_EXCEPTION_ITEMS = {CollectibleType.EPIC_FETUS, CollectibleType.LUDOVICO_TECHNIQUE, CollectibleType.TECH_X}
function ____exports.damage(self, player)
    damageItems(nil, player)
    damageTrinkets(nil, player)
    damagePills(nil, player)
    damageGlobalPenalty(nil, player)
end
function ____exports.fireDelay(self, player)
    fireDelayItems(nil, player)
    fireDelayPills(nil, player)
end
function ____exports.shotSpeed(self, player)
    shotSpeedItems(nil, player)
end
function ____exports.speed(self, player)
    speedItems(nil, player)
end
function ____exports.luck(self, player)
    luckItems(nil, player)
end
return ____exports
 end,
["callbacks.executeCmd"] = function(...) 
local ____exports = {}
local ____debug = require("debug")
local ____debug = ____debug.default
function ____exports.main(self, command)
    if command == "d" then
        ____debug(nil)
    end
end
return ____exports
 end,
["callbacks.familiarInit"] = function(...) 
local ____exports = {}
local ____constants = require("constants")
local ZERO_VECTOR = ____constants.ZERO_VECTOR
local ____globals = require("globals")
local g = ____globals.default
function ____exports.littleChubby(self, familiar)
    local damage = 3.5 + g.p.Damage * 0.25
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    familiar.CollisionDamage = damage
end
function ____exports.deadBird(self, familiar)
    if g.run.spawningDeadBird then
        return
    end
    local damage = 2 + g.p.Damage * 0.25
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    familiar.CollisionDamage = damage
    do
        local i = 0
        while i < 4 do
            g.run.spawningDeadBird = true
            local bird = g.g:Spawn(
                familiar.Type,
                familiar.Variant,
                g.p.Position,
                ZERO_VECTOR,
                g.p,
                familiar.SubType,
                familiar.InitSeed
            )
            bird.CollisionDamage = damage
            g.run.spawningDeadBird = true
            i = i + 1
        end
    end
end
function ____exports.daddyLonglegs(self, familiar)
    local damage = 20 + g.p.Damage * 3
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    familiar.CollisionDamage = damage
end
function ____exports.sacrificialDagger(self, familiar)
    local damage = 8.25
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    familiar.CollisionDamage = damage
end
function ____exports.leech(self, familiar)
    local damage = 1.5 + g.p.Damage * 0.25
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    familiar.CollisionDamage = damage
end
function ____exports.lilHaunt(self, familiar)
    local damage = 2 + g.p.Damage * 0.25
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    familiar.CollisionDamage = damage
end
function ____exports.blueBabysOnlyFriend(self, familiar)
    local damage = 2.5 + g.p.Damage * 0.25
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    familiar.CollisionDamage = damage
end
function ____exports.gemini(self, familiar)
    local damage = 3 + g.p.Damage
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    familiar.CollisionDamage = damage
end
function ____exports.lilGurdy(self, familiar)
    local damage = 6 + g.p.Damage * 0.25
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    familiar.CollisionDamage = damage
end
function ____exports.bumbo(self, familiar)
    familiar.Coins = 25
end
function ____exports.bigChubby(self, familiar)
    local damage = 2.7 + g.p.Damage * 0.25
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    familiar.CollisionDamage = damage
end
function ____exports.disableVanillaShooting(self, familiar)
    familiar.FireCooldown = 1000000
end
function ____exports.damage7(self, familiar)
    local damage = 7
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    familiar.CollisionDamage = damage
end
return ____exports
 end,
["misc"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local EffectVariant = ____isaac_2Dtypescript_2Ddefinitions.EffectVariant
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local GridEntityType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityType
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local getEntities = ____isaacscript_2Dcommon.getEntities
local setPlayerHealth = ____isaacscript_2Dcommon.setPlayerHealth
local ____globals = require("globals")
local g = ____globals.default
function ____exports.getRandomOffsetPosition(self, position, offsetSize, seed)
    math.randomseed(seed)
    local offsetDirection = math.random(1, 4)
    local offsetX
    local offsetY
    if offsetDirection == 1 then
        offsetX = offsetSize
        offsetY = offsetSize
    elseif offsetDirection == 2 then
        offsetX = offsetSize
        offsetY = offsetSize * -1
    elseif offsetDirection == 3 then
        offsetX = offsetSize * -1
        offsetY = offsetSize
    elseif offsetDirection == 4 then
        offsetX = offsetSize * -1
        offsetY = offsetSize * -1
    else
        error("Unknown offset direction.")
    end
    return Vector(position.X + offsetX, position.Y + offsetY)
end
function ____exports.getVelocityFromAimDirection(self)
    local velocity = g.p:GetAimDirection()
    return velocity * (g.p.ShotSpeed * 10)
end
function ____exports.hasNoHealth(self)
    return g.p:GetHearts() == 0 and g.p:GetSoulHearts() == 0 and g.p:GetBoneHearts() == 0
end
function ____exports.isOnTearBuild(self)
    return not g.p:HasCollectible(CollectibleType.DR_FETUS) and not g.p:HasCollectible(CollectibleType.TECHNOLOGY) and not g.p:HasCollectible(CollectibleType.MOMS_KNIFE) and not g.p:HasCollectible(CollectibleType.BRIMSTONE) and not g.p:HasCollectible(CollectibleType.EPIC_FETUS) and not g.p:HasCollectible(CollectibleType.TECH_X)
end
function ____exports.killIfNoHealth(self)
    if ____exports.hasNoHealth(nil) then
        g.p:Kill()
    end
end
function ____exports.removeAllEntities(self)
    for ____, entity in ipairs(getEntities(nil)) do
        if entity:ToNPC() ~= nil or entity.Type == EntityType.PICKUP or entity.Type == EntityType.SLOT or entity.Type == EntityType.EFFECT and entity.Variant == EffectVariant.DEVIL or entity.Type == EntityType.EFFECT and entity.Variant == EffectVariant.DICE_FLOOR then
            entity:Remove()
        end
    end
    g.r:SetClear(true)
end
function ____exports.removeAllGridEntities(self)
    local gridSize = g.r:GetGridSize()
    do
        local i = 1
        while i <= gridSize do
            local gridEntity = g.r:GetGridEntity(i)
            if gridEntity ~= nil then
                if gridEntity:GetSaveState().Type ~= GridEntityType.WALL and gridEntity:GetSaveState().Type ~= GridEntityType.DOOR then
                    g.r:RemoveGridEntity(i, 0, false)
                end
            end
            i = i + 1
        end
    end
end
function ____exports.removeSpecificEntities(self, entityType, variant)
    local entities = Isaac.FindByType(
        entityType,
        variant,
        -1,
        false,
        false
    )
    for ____, entity in ipairs(entities) do
        entity:Remove()
    end
end
function ____exports.setHealthFromLastFrame(self)
    local gameFrameCount = g.g:GetFrameCount()
    if gameFrameCount == 0 then
        return
    end
    if g.run.health.restoredLastHealthOnThisFrame then
        return
    end
    g.run.health.restoredLastHealthOnThisFrame = true
    setPlayerHealth(
        nil,
        g.run.lastHealth.hearts,
        g.run.lastHealth.maxHearts,
        g.run.lastHealth.soulHearts,
        g.run.lastHealth.blackHearts,
        g.run.lastHealth.boneHearts
    )
end
return ____exports
 end,
["callbacks.NPCUpdate"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local ____exports = {}
local skatole, burstingSack, delirious, removeCharm, checkTemporaryCharm, removeConfusion, removeFear, fadeFriendly
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EntityFlag = ____isaac_2Dtypescript_2Ddefinitions.EntityFlag
local ____constants = require("constants")
local FLY_ENTITIES = ____constants.FLY_ENTITIES
local SPIDER_ENTITIES = ____constants.SPIDER_ENTITIES
local ____globals = require("globals")
local g = ____globals.default
function skatole(self, npc)
    if not g.p:HasCollectible(CollectibleType.SKATOLE) or npc:HasEntityFlags(EntityFlag.FRIENDLY) then
        return
    end
    if __TS__ArrayIncludes(FLY_ENTITIES, npc.Type) then
        npc:AddEntityFlags(EntityFlag.CHARM)
        npc:AddEntityFlags(EntityFlag.FRIENDLY)
        npc:AddEntityFlags(EntityFlag.PERSISTENT)
    end
end
function burstingSack(self, npc)
    if not g.p:HasCollectible(CollectibleType.BURSTING_SACK) or npc:HasEntityFlags(EntityFlag.FRIENDLY) then
        return
    end
    if __TS__ArrayIncludes(SPIDER_ENTITIES, npc.Type) then
        npc:AddEntityFlags(EntityFlag.CHARM)
        npc:AddEntityFlags(EntityFlag.FRIENDLY)
        npc:AddEntityFlags(EntityFlag.PERSISTENT)
    end
end
function delirious(self, npc)
    if npc:HasEntityFlags(EntityFlag.FRIENDLY) and not npc:HasEntityFlags(EntityFlag.PERSISTENT) then
        npc:AddEntityFlags(EntityFlag.PERSISTENT)
    end
end
function removeCharm(self, npc)
    if npc:HasEntityFlags(EntityFlag.CHARM) and npc:IsBoss() then
        npc:ClearEntityFlags(EntityFlag.CHARM)
    end
end
function checkTemporaryCharm(self, npc)
    if not npc:HasEntityFlags(EntityFlag.CHARM) or npc:IsBoss() or npc:HasEntityFlags(EntityFlag.FRIENDLY) or npc:HasEntityFlags(EntityFlag.PERSISTENT) then
        return
    end
    if npc.Type == EntityType.THE_HAUNT and npc.Variant == 1 then
        local haunts = Isaac.FindByType(
            EntityType.THE_HAUNT,
            0,
            -1,
            false,
            false
        )
        if #haunts ~= 0 then
            return
        end
    end
    npc:AddEntityFlags(EntityFlag.FRIENDLY)
    npc:AddEntityFlags(EntityFlag.PERSISTENT)
    if npc:IsChampion() then
        local newNPC = g.g:Spawn(
            npc.Type,
            npc.Variant,
            npc.Position,
            npc.Velocity,
            npc.SpawnerEntity,
            npc.SubType,
            0
        )
        newNPC:AddEntityFlags(EntityFlag.FRIENDLY)
        newNPC:AddEntityFlags(EntityFlag.PERSISTENT)
        npc:Remove()
    end
end
function removeConfusion(self, npc)
    if npc:HasEntityFlags(EntityFlag.CONFUSION) then
        npc:ClearEntityFlags(EntityFlag.CONFUSION)
    end
end
function removeFear(self, npc)
    if npc:HasEntityFlags(EntityFlag.FEAR) then
        npc:ClearEntityFlags(EntityFlag.FEAR)
    end
end
function fadeFriendly(self, npc)
    if npc:HasEntityFlags(EntityFlag.FRIENDLY) then
        ____exports.fade(nil, npc)
    end
end
function ____exports.fade(self, entity)
    local color = entity:GetColor()
    local fadeAmount = 0.25
    local newColor = Color(
        color.R,
        color.G,
        color.B,
        fadeAmount,
        0,
        0,
        0
    )
    entity:SetColor(
        newColor,
        0,
        0,
        true,
        true
    )
end
function ____exports.main(self, npc)
    skatole(nil, npc)
    burstingSack(nil, npc)
    delirious(nil, npc)
    removeCharm(nil, npc)
    checkTemporaryCharm(nil, npc)
    removeConfusion(nil, npc)
    removeFear(nil, npc)
    fadeFriendly(nil, npc)
end
return ____exports
 end,
["callbacks.familiarUpdate"] = function(...) 
local ____exports = {}
local ____globals = require("globals")
local g = ____globals.default
local misc = require("misc")
local NPCUpdate = require("callbacks.NPCUpdate")
function ____exports.leech(self, familiar)
    NPCUpdate:fade(familiar)
end
function ____exports.yoListen(self, familiar)
    if familiar.FrameCount % 5 == 0 then
        familiar.Velocity = familiar.Velocity * 1.5
    end
    if familiar.Velocity.X > -0.5 and familiar.Velocity.X < 0.5 and familiar.Velocity.Y > -0.5 and familiar.Velocity.Y < 0.5 then
        local gridEntity = g.r:GetGridEntityFromPos(familiar.Position)
        if gridEntity ~= nil then
            gridEntity:Destroy(true)
        end
    end
end
function ____exports.preventStacking(self, familiar)
    local familiars = Isaac.FindByType(
        familiar.Type,
        familiar.Variant,
        -1,
        false,
        false
    )
    for ____, familiar2 in ipairs(familiars) do
        if familiar.Position:Distance(familiar2.Position) <= 1 and familiar.Index < familiar2.Index then
            familiar2.Position = misc:getRandomOffsetPosition(familiar2.Position, 8, familiar2.InitSeed)
        end
    end
end
return ____exports
 end,
["callbacks.getCard"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Card = ____isaac_2Dtypescript_2Ddefinitions.Card
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local getRandomArrayElement = ____isaacscript_2Dcommon.getRandomArrayElement
local REPLACEMENT_CARDS = {
    Card.CHAOS,
    Card.CREDIT,
    Card.SUICIDE_KING,
    Card.GET_OUT_OF_JAIL_FREE,
    Card.EMERGENCY_CONTACT,
    Card.HOLY,
    Card.HUGE_GROWTH,
    Card.ANCIENT_RECALL,
    Card.ERA_WALK
}
function ____exports.main(self, rng, card)
    if card ~= Card.RULES and card ~= Card.AGAINST_HUMANITY then
        return nil
    end
    local randomReplacementCardIndex = getRandomArrayElement(nil, REPLACEMENT_CARDS, rng)
    return REPLACEMENT_CARDS[randomReplacementCardIndex + 1]
end
return ____exports
 end,
["pills"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____globals = require("globals")
local g = ____globals.default
local ____enums = require("types.enums")
local PillEffectCustom = ____enums.PillEffectCustom
local DURATION = 600
____exports.COLORS = {PillColor.PILL_BLUE_BLUE, PillColor.PILL_ORANGE_ORANGE, PillColor.PILL_WHITE_WHITE, PillColor.PILL_REDDOTS_RED}
____exports.EFFECTS = {
    PillEffect.PILLEFFECT_BALLS_OF_STEEL,
    PillEffect.PILLEFFECT_HEALTH_UP,
    PillEffect.PILLEFFECT_PRETTY_FLY,
    PillEffect.PILLEFFECT_SPEED_UP,
    PillEffect.PILLEFFECT_TEARS_UP,
    PillEffect.PILLEFFECT_48HOUR_ENERGY,
    PillEffect.PILLEFFECT_SEE_FOREVER,
    PillEffectCustom.PILLEFFECT_DAMAGE_UP,
    PillEffectCustom.PILLEFFECT_TEAR_DELAY_DOWN,
    PillEffectCustom.PILLEFFECT_DEAL_AFFINITY,
    PillEffectCustom.PILLEFFECT_BONE_AFFINITY,
    PillEffectCustom.PILLEFFECT_RESTOCK,
    PillEffectCustom.PILLEFFECT_GOLDEN_DUMP,
    PillEffectCustom.PILLEFFECT_SUPER_SADNESS,
    PillEffectCustom.PILLEFFECT_INVINCIBILITY,
    PillEffectCustom.PILLEFFECT_REALLY_BAD_GAS,
    PillEffectCustom.PILLEFFECT_GLIMPSE,
    PillEffectCustom.PILLEFFECT_AETHER,
    PillEffectCustom.PILLEFFECT_WALLS_HAVE_EYES,
    PillEffectCustom.PILLEFFECT_BLADDER_INFECTION,
    PillEffectCustom.PILLEFFECT_SCORCHED_EARTH
}
____exports.WALL_COORDINATES = __TS__New(
    Map,
    {
        {
            RoomShape.ROOMSHAPE_1x1,
            __TS__New(Map, {{Direction.LEFT, {29, 7}}, {Direction.UP, {121, 13}}, {Direction.RIGHT, {15, 7}}, {Direction.DOWN, {1, 13}}})
        },
        {
            RoomShape.ROOMSHAPE_IH,
            __TS__New(Map, {{Direction.LEFT, {59, 3}}, {Direction.UP, {91, 13}}, {Direction.RIGHT, {45, 3}}, {Direction.DOWN, {31, 13}}})
        },
        {
            RoomShape.ROOMSHAPE_IV,
            __TS__New(Map, {{Direction.LEFT, {25, 7}}, {Direction.UP, {125, 5}}, {Direction.RIGHT, {19, 7}}, {Direction.DOWN, {5, 5}}})
        },
        {
            RoomShape.ROOMSHAPE_1x2,
            __TS__New(Map, {{Direction.LEFT, {44, 14}}, {Direction.UP, {226, 13}}, {Direction.RIGHT, {15, 14}}, {Direction.DOWN, {1, 13}}})
        },
        {
            RoomShape.ROOMSHAPE_IIV,
            __TS__New(Map, {{Direction.LEFT, {25, 14}}, {Direction.UP, {230, 5}}, {Direction.RIGHT, {19, 14}}, {Direction.DOWN, {5, 5}}})
        },
        {
            RoomShape.ROOMSHAPE_2x1,
            __TS__New(Map, {{Direction.LEFT, {55, 7}}, {Direction.UP, {225, 26}}, {Direction.RIGHT, {28, 7}}, {Direction.DOWN, {1, 26}}})
        },
        {
            RoomShape.ROOMSHAPE_IIH,
            __TS__New(Map, {{Direction.LEFT, {111, 3}}, {Direction.UP, {169, 26}}, {Direction.RIGHT, {84, 3}}, {Direction.DOWN, {57, 26}}})
        },
        {
            RoomShape.ROOMSHAPE_2x2,
            __TS__New(Map, {{Direction.LEFT, {55, 14}}, {Direction.UP, {421, 26}}, {Direction.RIGHT, {28, 14}}, {Direction.DOWN, {1, 26}}})
        },
        {
            RoomShape.ROOMSHAPE_LTL,
            __TS__New(Map, {{Direction.LEFT, {55, 14}}, {Direction.UP, {421, 26}}, {Direction.RIGHT, {41, 7, 224}}, {Direction.DOWN, {197, 13, 14}}})
        },
        {
            RoomShape.ROOMSHAPE_LTR,
            __TS__New(Map, {{Direction.LEFT, {42, 7, 251}}, {Direction.UP, {421, 26}}, {Direction.RIGHT, {28, 14}}, {Direction.DOWN, {1, 13, 210}}})
        },
        {
            RoomShape.ROOMSHAPE_LBL,
            __TS__New(Map, {{Direction.LEFT, {55, 14}}, {Direction.UP, {225, 13, 434}}, {Direction.RIGHT, {28, 7, 237}}, {Direction.DOWN, {1, 26}}})
        },
        {
            RoomShape.ROOMSHAPE_LBR,
            __TS__New(Map, {{Direction.LEFT, {55, 7, 238}}, {Direction.UP, {421, 13, 238}}, {Direction.RIGHT, {28, 14}}, {Direction.DOWN, {1, 26}}})
        }
    }
)
function ____exports.animateHappy(self)
    g.p:AnimateHappy()
    local color = Color(
        0.3,
        0.3,
        0.3,
        1,
        1,
        1,
        1
    )
    g.p:SetColor(
        color,
        15,
        1,
        true,
        false
    )
    sfxManager:Stop(SoundEffect.THUMBSUP)
    sfxManager:Play(
        SoundEffect.POWERUP_SPEWER,
        1,
        0,
        false,
        1
    )
end
function ____exports.getDuration(self)
    local duration = DURATION
    if g.p:HasCollectible(CollectibleType.PHD) then
        duration = duration * 2
    end
    return duration
end
return ____exports
 end,
["callbacks.getPillColor"] = function(...) 
local ____exports = {}
local pills = require("pills")
function ____exports.main(self, seed)
    math.randomseed(seed)
    local randomIndex = math.random(0, #pills.COLORS - 1)
    return pills.COLORS[randomIndex + 1]
end
return ____exports
 end,
["callbacks.getPillEffect"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local ____exports = {}
local ____globals = require("globals")
local g = ____globals.default
local pills = require("pills")
function ____exports.main(self, pillEffect, pillColor)
    if not __TS__ArrayIncludes(pills.COLORS, pillColor) then
        return pillEffect
    end
    local newPillEffect = g.run.pills.effects:get(pillColor)
    if newPillEffect == nil then
        error("Failed to get the pill effect for a pill color of: " .. tostring(pillColor))
    end
    return newPillEffect
end
return ____exports
 end,
["callbacks.postBombUpdate"] = function(...) 
local ____exports = {}
local drFetus, sacredHeart
local ____globals = require("globals")
local g = ____globals.default
function drFetus(self, bomb)
    if not g.p:HasCollectible(CollectibleType.DR_FETUS) then
        return
    end
    if not bomb.IsFetus then
        return
    end
    g.run.familiarMultiShot = 2
    g.run.familiarMultiShotVelocity = bomb.Velocity
end
function sacredHeart(self, bomb)
    if not g.p:HasCollectible(CollectibleType.SACRED_HEART) then
        return
    end
    local homing = (bomb.Flags & 1 << 2) >> 2
    if homing == 0 then
        return
    end
    if g.p:HasCollectible(CollectibleType.BOBBY_BOMB) then
        return
    end
    bomb.Flags = bomb.Flags & ~TearFlag.HOMING
end
function ____exports.main(self, bomb)
    if bomb.SpawnerType ~= EntityType.PLAYER or bomb.FrameCount ~= 1 then
        return
    end
    drFetus(nil, bomb)
    sacredHeart(nil, bomb)
end
return ____exports
 end,
["callbacks.postEffectUpdate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local spawnPickupsInCircle, dicePipFunctions
local ____constants = require("constants")
local ZERO_VECTOR = ____constants.ZERO_VECTOR
local ____globals = require("globals")
local g = ____globals.default
local misc = require("misc")
function spawnPickupsInCircle(self, numToSpawn, pickupVariant, pickupSubType)
    local velocityMultiplier = 4
    local roomSeed = g.r:GetSpawnSeed()
    local centerPos = g.r:GetCenterPos()
    local seed = roomSeed
    do
        local i = 0
        while i < numToSpawn do
            local velocity = Vector(velocityMultiplier, 0)
            local degrees = 360 / numToSpawn * i
            local rotatedVelocity = velocity:Rotated(degrees)
            seed = misc:incrementRNG(seed)
            g.g:Spawn(
                EntityType.PICKUP,
                pickupVariant,
                centerPos,
                rotatedVelocity,
                nil,
                pickupSubType,
                seed
            )
            i = i + 1
        end
    end
end
function ____exports.blueFlame(self, effect)
    if effect.FrameCount == 0 then
        effect.Size = effect.Size * 2
        effect.CollisionDamage = effect.CollisionDamage * 2
    end
    effect.SpriteScale = Vector(1.5, 1.5)
end
function ____exports.diceRoomCustom(self, effect)
    if effect.State == 1 then
        return
    end
    local activationDistance = 75
    if g.p.Position:Distance(effect.Position) > activationDistance then
        return
    end
    effect.State = 1
    g.p:AnimateHappy()
    Isaac.DebugString(("Activated a " .. tostring(effect.SubType)) .. "-pip custom dice room.")
    local streakText = dicePipFunctions:get(effect.SubType)
    RacingPlusGlobals.run.streakFrame = Isaac.GetFrameCount()
    RacingPlusGlobals.run.streakText = streakText
end
dicePipFunctions = __TS__New(Map)
local ____ = {
    function()
        local effectDescription = "Spawn a random item from one of the six item pools"
        local roomSeed = g.r:GetSpawnSeed()
        math.randomseed(roomSeed)
        local itemPoolTypes = {
            ItemPoolType.TREASURE,
            ItemPoolType.SHOP,
            ItemPoolType.BOSS,
            ItemPoolType.DEVIL,
            ItemPoolType.ANGEL,
            ItemPoolType.LIBRARY
        }
        local randomIndex = math.random(0, #itemPoolTypes - 1)
        local itemPoolType = itemPoolTypes[randomIndex + 1]
        local subType = g.itemPool:GetCollectible(
            itemPoolType,
            true,
            g.r:GetSpawnSeed()
        )
        g.g:Spawn(
            EntityType.PICKUP,
            PickupVariant.COLLECTIBLE,
            g.r:GetCenterPos(),
            ZERO_VECTOR,
            nil,
            subType,
            roomSeed
        )
        return effectDescription
    end,
    function()
        g.run.level.doubleItems = true
        return "Double items for the rest of the floor"
    end,
    function()
        spawnPickupsInCircle(nil, 3, PickupVariant.COIN, CoinSubType.COIN_DIME)
        return "Spawn 3 dimes"
    end,
    function()
        spawnPickupsInCircle(nil, 3, PickupVariant.HEART, HeartSubType.HEART_SOUL)
        return "Spawn 4 soul hearts"
    end,
    function()
        spawnPickupsInCircle(nil, 10, PickupVariant.TRINKET, 0)
        return "Spawn 10 trinkets"
    end,
    function()
        spawnPickupsInCircle(nil, 10, PickupVariant.TAROTCARD, 0)
        return "Spawn 6 cards"
    end
}
function ____exports.creepScaling(self, effect)
    if effect.SubType == CreepSubTypeCustom.FLOOR_EFFECT_CREEP then
        return
    end
    effect.CollisionDamage = g.p.Damage
    if effect.Variant == EffectVariant.PLAYER_CREEP_GREEN then
        effect.CollisionDamage = effect.CollisionDamage / 10
    end
end
return ____exports
 end,
["callbacks.postFireTear"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local ____exports = {}
local momsContacts, abel, tinyPlanet, isaacsHeart, theWiz, fireMind, strabismus, u235, pillAether, pillWallsHaveEyes, removeFear, familiars, spawnTearWithIncreasedDmg
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local FamiliarVariant = ____isaac_2Dtypescript_2Ddefinitions.FamiliarVariant
local TearVariant = ____isaac_2Dtypescript_2Ddefinitions.TearVariant
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local spawnTear = ____isaacscript_2Dcommon.spawnTear
local ____constants = require("constants")
local FAMILIAR_TEAR_DAMAGE = ____constants.FAMILIAR_TEAR_DAMAGE
local FAMILIAR_TEAR_SCALE = ____constants.FAMILIAR_TEAR_SCALE
local ____globals = require("globals")
local g = ____globals.default
local misc = require("misc")
local pills = require("pills")
local ____enums = require("types.enums")
local CollectibleTypeCustom = ____enums.CollectibleTypeCustom
function momsContacts(self, tear)
    if not g.p:HasCollectible(CollectibleType.MOMS_CONTACTS) then
        return
    end
    tear.TearFlags = tear.TearFlags | TearFlag.FREEZE
end
function abel(self, tear)
    if not g.p:HasCollectible(CollectibleType.ABEL) or g.run.abelDoubleTear then
        return
    end
    local abels = Isaac.FindByType(
        EntityType.FAMILIAR,
        FamiliarVariant.ABEL,
        -1,
        false,
        false
    )
    for ____, abelEntity in ipairs(abels) do
        g.run.abelDoubleTear = true
        local velocity = tear.Velocity * -1
        g.p:FireTear(
            abelEntity.Position,
            velocity,
            false,
            true,
            false
        )
        g.run.abelDoubleTear = false
    end
end
function tinyPlanet(self, tear)
    local direction = g.p:GetFireDirection()
    if not g.p:HasCollectible(CollectibleType.TINY_PLANET) then
        return
    end
    tear.TearFlags = tear.TearFlags | TearFlag.SPECTRAL
    tear.FallingSpeed = 0
    tear.SubType = direction + 1
    local distance = 90
    local degrees = 0
    if direction == Direction.RIGHT then
        degrees = degrees + 90
    elseif direction == Direction.DOWN then
        degrees = degrees + 180
    elseif direction == Direction.LEFT then
        degrees = degrees + 270
    end
    tear.Position = (g.p.Position + Vector(0, distance * -1)):Rotated(degrees)
end
function isaacsHeart(self, tear)
    if not g.p:HasCollectible(CollectibleType.ISAACS_HEART) then
        return
    end
    g.run.spawningIsaacsHeartLaser = true
    g.p:FireBrimstone(tear.Velocity)
    g.run.spawningIsaacsHeartLaser = false
    tear:Remove()
end
function theWiz(self, tear)
    if not g.p:HasCollectible(CollectibleType.THE_WIZ) or g.run.wizDoubleTear then
        return
    end
    g.run.wizDoubleTear = true
    g.p:FireTear(
        g.p.Position,
        tear.Velocity * -1,
        false,
        false,
        false
    )
    g.run.wizDoubleTear = false
end
function fireMind(self, tear)
    if not g.p:HasCollectible(CollectibleTypeCustom.FIRE_MIND_IMPROVED) then
        return
    end
    tear.SubType = 1
end
function strabismus(self, tear)
    if not g.p:HasCollectible(CollectibleTypeCustom.STRABISMUS) or g.run.strabismusDoubleTear then
        return
    end
    local seed = tear:GetDropRNG():GetSeed()
    math.randomseed(seed)
    local rotation = math.random(1, 359)
    local velocity = tear.Velocity:Rotated(rotation)
    g.run.strabismusDoubleTear = true
    g.p:FireTear(
        g.p.Position,
        velocity,
        false,
        false,
        false
    )
    g.run.strabismusDoubleTear = false
end
function u235(self, tear)
    if not g.p:HasCollectible(CollectibleTypeCustom.U235) then
        return
    end
    if g.run.tearCounter % 8 == 0 then
        local bomb = g.g:Spawn(
            EntityType.BOMBDROP,
            0,
            tear.Position,
            tear.Velocity,
            tear.SpawnerEntity,
            0,
            tear.InitSeed
        ):ToBomb()
        if bomb ~= nil then
            bomb.ExplosionDamage = g.p.Damage * 5 + 30
        end
        tear:Remove()
    end
end
function pillAether(self, tear)
    if g.run.pills.aether == 0 then
        return
    end
    local ____g_run_pills_2, ____aetherAngle_3 = g.run.pills, "aetherAngle"
    ____g_run_pills_2[____aetherAngle_3] = ____g_run_pills_2[____aetherAngle_3] + 45
    if g.run.pills.aetherAngle < 360 then
        local vel = tear.Velocity:Rotated(g.run.pills.aetherAngle)
        g.p:FireTear(
            g.p.Position,
            vel,
            false,
            false,
            false
        )
    else
        g.run.pills.aetherAngle = 0
    end
end
function pillWallsHaveEyes(self, tear)
    if g.run.pills.wallsHaveEyes == 0 or g.run.pills.wallsHaveEyesShooting then
        return
    end
    g.run.pills.wallsHaveEyesShooting = true
    local roomShape = g.r:GetRoomShape()
    local fireDirection = g.p:GetFireDirection()
    local direction = fireDirection == Direction.NO_DIRECTION and g.run.lastFireDirection or fireDirection
    local amountToAdd = 1
    if direction == Direction.LEFT or direction == Direction.RIGHT then
        amountToAdd = 15
        if roomShape >= RoomShape.ROOMSHAPE_2x1 then
            amountToAdd = 28
        end
    end
    local roomShapeCoordinates = pills.WALL_COORDINATES:get(roomShape)
    if roomShapeCoordinates == nil then
        error("Failed to get the wall coordinates for room shape: " .. tostring(roomShape))
    end
    local coordinates = roomShapeCoordinates:get(direction)
    if coordinates == nil then
        error("Failed to get the wall coordinates direction: " .. tostring(direction))
    end
    local startingGridCoordinate, numTimesToIterate, startingGridCoordinateForSecondWall = table.unpack(coordinates)
    local walls = {}
    do
        local i = 0
        while i < numTimesToIterate do
            local coordinate = startingGridCoordinate + i * amountToAdd
            walls[#walls + 1] = coordinate
            i = i + 1
        end
    end
    if startingGridCoordinateForSecondWall ~= nil then
        do
            local i = 0
            while i < numTimesToIterate do
                local coordinate = startingGridCoordinateForSecondWall + i * amountToAdd
                walls[#walls + 1] = coordinate
                i = i + 1
            end
        end
    end
    for ____, wall in ipairs(walls) do
        do
            local gridEntity = g.r:GetGridEntity(wall)
            if gridEntity == nil then
                goto __continue40
            end
            local saveState = gridEntity:GetSaveState()
            if saveState.Type ~= GridEntityType.WALL then
                goto __continue40
            end
            local adjustedPosition = gridEntity.Position
            local distanceToAdjust = 15
            if direction == Direction.LEFT then
                adjustedPosition = adjustedPosition + Vector(distanceToAdjust * -1, 0)
            elseif direction == Direction.UP then
                adjustedPosition = adjustedPosition + Vector(0, distanceToAdjust * -1)
            elseif direction == Direction.RIGHT then
                adjustedPosition = adjustedPosition + Vector(distanceToAdjust, 0)
            elseif direction == Direction.DOWN then
                adjustedPosition = adjustedPosition + Vector(0, distanceToAdjust)
            end
            g.p:FireTear(
                adjustedPosition,
                tear.Velocity,
                false,
                true,
                false
            )
        end
        ::__continue40::
    end
    g.run.pills.wallsHaveEyesShooting = false
end
function removeFear(self, tear)
    tear.TearFlags = tear.TearFlags & ~TearFlag.FEAR
end
function familiars(self, tear)
    local damage = 3.5 + g.p.Damage * FAMILIAR_TEAR_DAMAGE
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    local velocity = tear.Velocity
    if g.p:HasCollectible(CollectibleType.TINY_PLANET) then
        velocity = misc:getVelocityFromAimDirection()
    end
    local familiarEntities = Isaac.FindByType(
        EntityType.FAMILIAR,
        -1,
        -1,
        false,
        false
    )
    for ____, familiar in ipairs(familiarEntities) do
        repeat
            local ____switch53 = familiar.Variant
            local ____cond53 = ____switch53 == FamiliarVariant.BROTHER_BOBBY or ____switch53 == FamiliarVariant.DEMON_BABY or ____switch53 == FamiliarVariant.LITTLE_GISH or ____switch53 == FamiliarVariant.LITTLE_STEVEN or ____switch53 == FamiliarVariant.SISTER_MAGGY or ____switch53 == FamiliarVariant.GHOST_BABY or ____switch53 == FamiliarVariant.RAINBOW_BABY or ____switch53 == FamiliarVariant.ISAACS_HEAD or ____switch53 == FamiliarVariant.MONGO_BABY or ____switch53 == FamiliarVariant.SERAPHIM
            if ____cond53 then
                do
                    spawnTearWithIncreasedDmg(
                        nil,
                        tear,
                        familiar,
                        velocity,
                        damage
                    )
                    break
                end
            end
            ____cond53 = ____cond53 or ____switch53 == FamiliarVariant.ROBO_BABY
            if ____cond53 then
                do
                    local laser = g.p:FireTechLaser(
                        familiar.Position,
                        0,
                        velocity,
                        false,
                        false
                    )
                    laser.CollisionDamage = damage
                    break
                end
            end
            ____cond53 = ____cond53 or ____switch53 == FamiliarVariant.HARLEQUIN_BABY
            if ____cond53 then
                do
                    do
                        local i = 0
                        while i < 2 do
                            if i == 1 then
                                velocity = velocity:Rotated(-10)
                            elseif i == 2 then
                                velocity = velocity:Rotated(10)
                            end
                            local familiarTear = spawnTear(
                                nil,
                                TearVariant.BLUE,
                                0,
                                familiar.Position,
                                velocity
                            )
                            familiarTear.Scale = tear.Scale * FAMILIAR_TEAR_SCALE
                            familiarTear.CollisionDamage = damage
                            i = i + 1
                        end
                    end
                    break
                end
            end
            ____cond53 = ____cond53 or ____switch53 == FamiliarVariant.LIL_LOKI
            if ____cond53 then
                do
                    do
                        local i = 0
                        while i < 4 do
                            local familiarTear = spawnTear(
                                nil,
                                TearVariant.BLUE,
                                0,
                                familiar.Position,
                                velocity
                            )
                            velocity = velocity:Rotated(90)
                            familiarTear.Scale = tear.Scale * FAMILIAR_TEAR_SCALE
                            familiarTear.CollisionDamage = damage
                            i = i + 1
                        end
                    end
                    break
                end
            end
            do
                do
                    break
                end
            end
        until true
    end
end
function spawnTearWithIncreasedDmg(self, tear, familiar, velocity, damage)
    local familiarTear = Isaac.Spawn(
        EntityType.TEAR,
        0,
        0,
        familiar.Position,
        velocity,
        nil
    ):ToTear()
    if familiarTear == nil then
        return
    end
    familiarTear.Scale = tear.Scale * FAMILIAR_TEAR_SCALE
    familiarTear.CollisionDamage = damage
    repeat
        local ____switch66 = familiar.Variant
        local ____cond66 = ____switch66 == FamiliarVariant.LITTLE_GISH
        if ____cond66 then
            do
                local color = Color(
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1
                )
                familiarTear:SetColor(
                    color,
                    10000,
                    1000,
                    false,
                    false
                )
                familiarTear.TearFlags = familiarTear.TearFlags | TearFlag.SLOW
                break
            end
        end
        ____cond66 = ____cond66 or ____switch66 == FamiliarVariant.LITTLE_STEVEN
        if ____cond66 then
            do
                local color = Color(
                    1,
                    0,
                    1,
                    1,
                    1,
                    1,
                    1
                )
                familiarTear:SetColor(
                    color,
                    10000,
                    1000,
                    false,
                    false
                )
                familiarTear.TearFlags = familiarTear.TearFlags | TearFlag.HOMING
                break
            end
        end
        ____cond66 = ____cond66 or ____switch66 == FamiliarVariant.GHOST_BABY
        if ____cond66 then
            do
                local color = Color(
                    1,
                    1,
                    1,
                    0.5,
                    1,
                    1,
                    1
                )
                familiarTear:SetColor(
                    color,
                    10000,
                    1000,
                    false,
                    false
                )
                familiarTear.TearFlags = familiarTear.TearFlags | TearFlag.SPECTRAL
                break
            end
        end
        ____cond66 = ____cond66 or ____switch66 == FamiliarVariant.RAINBOW_BABY
        if ____cond66 then
            do
                local color = Color(
                    2,
                    0,
                    2,
                    1,
                    1,
                    1,
                    1
                )
                familiarTear:SetColor(
                    color,
                    10000,
                    1000,
                    false,
                    false
                )
                math.randomseed(g.g:GetFrameCount())
                local tearFlag = math.random(1, 60)
                familiarTear.TearFlags = familiarTear.TearFlags | 1 << tearFlag
                break
            end
        end
        ____cond66 = ____cond66 or ____switch66 == FamiliarVariant.MONGO_BABY
        if ____cond66 then
            do
                local ____g_run_room_mongoBabyTears_4 = g.run.room.mongoBabyTears
                ____g_run_room_mongoBabyTears_4[#____g_run_room_mongoBabyTears_4 + 1] = {
                    frame = g.g:GetFrameCount() + 3,
                    familiar = EntityRef(familiar),
                    velocity = velocity,
                    damage = damage,
                    scale = tear.Scale * FAMILIAR_TEAR_SCALE
                }
                break
            end
        end
        ____cond66 = ____cond66 or ____switch66 == FamiliarVariant.SERAPHIM
        if ____cond66 then
            do
                familiarTear.CollisionDamage = damage * 1.8953
                local color = Color(
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                )
                familiarTear:SetColor(
                    color,
                    10000,
                    1000,
                    false,
                    false
                )
                familiarTear.TearFlags = familiarTear.TearFlags | TearFlag.HOMING
                break
            end
        end
        do
            do
                error("The familiar variant was an unknown value of: " .. tostring(familiar.Variant))
            end
        end
    until true
end
function ____exports.main(self, tear)
    if not g.run.abelDoubleTear and not g.run.wizDoubleTear and not g.run.strabismusDoubleTear then
        local ____g_run_0, ____tearCounter_1 = g.run, "tearCounter"
        ____g_run_0[____tearCounter_1] = ____g_run_0[____tearCounter_1] + 1
    end
    momsContacts(nil, tear)
    abel(nil, tear)
    tinyPlanet(nil, tear)
    isaacsHeart(nil, tear)
    theWiz(nil, tear)
    fireMind(nil, tear)
    strabismus(nil, tear)
    u235(nil, tear)
    pillAether(nil, tear)
    pillWallsHaveEyes(nil, tear)
    removeFear(nil, tear)
    familiars(nil, tear)
end
return ____exports
 end,
["items.technology"] = function(...) 
local ____exports = {}
local hasPowerfulItem
local ____constants = require("constants")
local TECHNOLOGY_EXCEPTION_ITEMS = ____constants.TECHNOLOGY_EXCEPTION_ITEMS
local ____globals = require("globals")
local g = ____globals.default
function hasPowerfulItem(self)
    for ____, item in ipairs(TECHNOLOGY_EXCEPTION_ITEMS) do
        if g.p:HasCollectible(item) then
            return true
        end
    end
    return false
end
function ____exports.postUpdate(self)
    if g.run.technologyAdded2020 and hasPowerfulItem(nil) then
        g.run.technologyAdded2020 = false
        g.p:RemoveCollectible(CollectibleType.TWENTY_TWENTY)
    end
end
function ____exports.postItemPickup(self)
    if not hasPowerfulItem(nil) then
        g.run.technologyAdded2020 = true
        g.p:AddCollectible(CollectibleType.TWENTY_TWENTY, 0, false)
        removeCollectibleFromItemTracker(nil, CollectibleType.TWENTY_TWENTY)
    end
end
return ____exports
 end,
["items.technology25"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local TearFlag = ____isaac_2Dtypescript_2Ddefinitions.TearFlag
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local addCollectibleCostume = ____isaacscript_2Dcommon.addCollectibleCostume
local addFlag = ____isaacscript_2Dcommon.addFlag
local ____constants = require("constants")
local ZERO_VECTOR = ____constants.ZERO_VECTOR
local ____CollectibleTypeCustom = require("enums.CollectibleTypeCustom")
local CollectibleTypeCustom = ____CollectibleTypeCustom.CollectibleTypeCustom
local ____globals = require("globals")
local g = ____globals.default
function ____exports.postNewRoom(self)
    if not g.p:HasCollectible(CollectibleTypeCustom.TECHNOLOGY_2_5) then
        return
    end
    local radius = 66
    local laser = g.p:FireTechXLaser(g.p.Position, ZERO_VECTOR, radius):ToLaser()
    if laser ~= nil then
        if laser.Variant ~= 2 then
            laser.Variant = 2
            laser.SpriteScale = Vector(0.5, 1)
        end
        laser.TearFlags = addFlag(nil, laser.TearFlags, TearFlag.CONTINUUM)
        laser.CollisionDamage = laser.CollisionDamage * 0.33
        local data = laser:GetData()
        data.ring = true
    end
end
function ____exports.postItemPickup(self)
    addCollectibleCostume(nil, g.p, CollectibleType.TECHNOLOGY_2)
    ____exports.postNewRoom(nil)
end
return ____exports
 end,
["postItemPickup"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local holyPoop, fannyPackImproved, fireMindImproved, holyMantleNerfed, adrenalineCustom
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local DisplayFlag = ____isaac_2Dtypescript_2Ddefinitions.DisplayFlag
local DisplayFlagZero = ____isaac_2Dtypescript_2Ddefinitions.DisplayFlagZero
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local addCollectibleCostume = ____isaacscript_2Dcommon.addCollectibleCostume
local addFlag = ____isaacscript_2Dcommon.addFlag
local bitFlags = ____isaacscript_2Dcommon.bitFlags
local removeAllTrinkets = ____isaacscript_2Dcommon.removeAllTrinkets
local removeCollectibleFromItemTracker = ____isaacscript_2Dcommon.removeCollectibleFromItemTracker
local ____repeat = ____isaacscript_2Dcommon["repeat"]
local ____constants = require("constants")
local ISAACS_HEART_BROKEN_COLLECTIBLES = ____constants.ISAACS_HEART_BROKEN_COLLECTIBLES
local ____CollectibleTypeCustom = require("enums.CollectibleTypeCustom")
local CollectibleTypeCustom = ____CollectibleTypeCustom.CollectibleTypeCustom
local ____globals = require("globals")
local g = ____globals.default
local technology = require("items.technology")
local technology25 = require("items.technology25")
local misc = require("misc")
function ____exports.blueMap(self)
    local bossIndex = g.l:QueryRoomTypeIndex(
        RoomType.BOSS,
        false,
        RNG()
    )
    local bossRoom = g.l:GetRoomByIdx(bossIndex)
    if bossRoom.DisplayFlags == DisplayFlagZero then
        bossRoom.DisplayFlags = bitFlags(nil, DisplayFlag.SHOW_ICON)
    end
    if bossRoom.DisplayFlags == DisplayFlag.VISIBLE then
        bossRoom.DisplayFlags = addFlag(nil, DisplayFlag.VISIBLE, DisplayFlag.SHOW_ICON)
    end
    g.l:UpdateVisibility()
end
function holyPoop(self)
    g.p:AddCollectible(CollectibleType.POOP, 0, false)
    g.p:AddCollectible(CollectibleTypeCustom.HOLY_POOP, 1, false)
end
function fannyPackImproved(self)
    addCollectibleCostume(nil, g.p, CollectibleType.FANNY_PACK)
end
function fireMindImproved(self)
    addCollectibleCostume(nil, g.p, CollectibleType.FIRE_MIND)
end
function holyMantleNerfed(self)
    g.run.holyMantle = true
    g.p:AddCollectible(CollectibleType.HOLY_MANTLE, 0, false)
    g.p:RemoveCollectible(CollectibleType.HOLY_MANTLE)
    removeCollectibleFromItemTracker(nil, CollectibleType.HOLY_MANTLE)
    local effects = g.p:GetEffects()
    if not effects:HasCollectibleEffect(CollectibleType.HOLY_MANTLE) then
        effects:AddCollectibleEffect(CollectibleType.HOLY_MANTLE, false)
    end
    addCollectibleCostume(nil, g.p, CollectibleType.HOLY_MANTLE)
end
function adrenalineCustom(self)
    g.p:AddCollectible(CollectibleType.ADRENALINE, 0, false)
    g.p:RemoveCollectible(CollectibleType.ADRENALINE)
    removeCollectibleFromItemTracker(nil, CollectibleType.ADRENALINE)
    addCollectibleCostume(nil, g.p, CollectibleType.ADRENALINE)
end
____exports.functionMap = __TS__New(Map)
____exports.functionMap:set(
    CollectibleType.MAGIC_MUSHROOM,
    function()
        misc:setHealthFromLastFrame()
        misc:killIfNoHealth()
    end
)
____exports.functionMap:set(
    CollectibleType.POOP,
    function()
        g.p:RemoveCollectible(CollectibleType.POOP)
        holyPoop(nil)
    end
)
____exports.functionMap:set(
    CollectibleType.MOMS_BRA,
    function()
        g.p:RemoveCollectible(CollectibleType.MOMS_BRA)
        g.p:AddCollectible(CollectibleTypeCustom.MOMS_BRA_IMPROVED, 1, false)
    end
)
____exports.functionMap:set(CollectibleType.TECHNOLOGY, technology.postItemPickup)
____exports.functionMap:set(
    CollectibleType.LITTLE_CHUBBY,
    function()
        ____repeat(
            nil,
            3,
            function()
                g.p:AddCollectible(CollectibleType.LITTLE_CHUBBY, 0, false)
                removeCollectibleFromItemTracker(nil, CollectibleType.LITTLE_CHUBBY)
            end
        )
    end
)
____exports.functionMap:set(
    CollectibleType.SUPER_BANDAGE,
    function()
        misc:setHealthFromLastFrame()
        g.p:AddMaxHearts(2, false)
        g.p:AddSoulHearts(2)
    end
)
____exports.functionMap:set(
    CollectibleType.WAFER,
    function()
        g.run.wafer = true
        g.run.waferCounters = 2
    end
)
____exports.functionMap:set(
    CollectibleType.MOMS_KNIFE,
    function()
        g.itemPool:RemoveCollectible(CollectibleType.TWENTY_TWENTY)
    end
)
____exports.functionMap:set(
    CollectibleType.BRIMSTONE,
    function()
        g.itemPool:RemoveCollectible(CollectibleType.TWENTY_TWENTY)
        g.itemPool:RemoveCollectible(CollectibleType.ISAACS_HEART)
    end
)
____exports.functionMap:set(
    CollectibleType.TECHNOLOGY_2,
    function()
        g.p:RemoveCollectible(CollectibleType.TECHNOLOGY_2)
        removeCollectibleFromItemTracker(nil, CollectibleType.TECHNOLOGY_2)
        g.p:AddCollectible(CollectibleTypeCustom.TECHNOLOGY_2_5, 0, false)
        technology25:postItemPickup()
    end
)
____exports.functionMap:set(
    CollectibleType.SACRED_HEART,
    function()
        misc:setHealthFromLastFrame()
        misc:killIfNoHealth()
    end
)
____exports.functionMap:set(
    CollectibleType.FANNY_PACK,
    function()
        g.p:RemoveCollectible(CollectibleType.FANNY_PACK)
        removeCollectibleFromItemTracker(nil, CollectibleType.FANNY_PACK)
        g.p:AddCollectible(CollectibleTypeCustom.FANNY_PACK_IMPROVED, 0, false)
        fannyPackImproved(nil)
    end
)
____exports.functionMap:set(
    CollectibleType.CEREMONIAL_ROBES,
    function()
        misc:setHealthFromLastFrame()
        g.p:AddBlackHearts(2)
    end
)
____exports.functionMap:set(
    CollectibleType.ABADDON,
    function()
        misc:setHealthFromLastFrame()
        g.p:AddBlackHearts(4)
    end
)
____exports.functionMap:set(CollectibleType.BLUE_MAP, ____exports.blueMap)
____exports.functionMap:set(
    CollectibleType.FIRE_MIND,
    function()
        if not misc:isOnTearBuild() then
            return
        end
        g.p:RemoveCollectible(CollectibleType.FIRE_MIND)
        removeCollectibleFromItemTracker(nil, CollectibleType.FIRE_MIND)
        g.p:AddCollectible(CollectibleTypeCustom.FIRE_MIND_IMPROVED, 0, false)
        fireMindImproved(nil)
    end
)
____exports.functionMap:set(
    CollectibleType.LEECH,
    function()
        ____repeat(
            nil,
            5,
            function()
                g.p:AddCollectible(CollectibleType.LEECH, 0, false)
                removeCollectibleFromItemTracker(nil, CollectibleType.LEECH)
            end
        )
    end
)
____exports.functionMap:set(
    CollectibleType.ISAACS_HEART,
    function()
        for ____, item in ipairs(ISAACS_HEART_BROKEN_COLLECTIBLES) do
            g.p:RemoveCollectible(item)
            g.itemPool:RemoveCollectible(item)
        end
    end
)
____exports.functionMap:set(
    CollectibleType.LIL_HAUNT,
    function()
        do
            local i = 0
            while i < 2 do
                g.p:AddCollectible(CollectibleType.LIL_HAUNT, 0, false)
                removeCollectibleFromItemTracker(nil, CollectibleType.LIL_HAUNT)
                i = i + 1
            end
        end
    end
)
____exports.functionMap:set(
    CollectibleType.SISSY_LONGLEGS,
    function()
        do
            local i = 0
            while i < 9 do
                g.p:AddCollectible(CollectibleType.SISSY_LONGLEGS, 0, false)
                removeCollectibleFromItemTracker(nil, CollectibleType.SISSY_LONGLEGS)
                i = i + 1
            end
        end
    end
)
____exports.functionMap:set(
    CollectibleType.CAPRICORN,
    function()
        misc:setHealthFromLastFrame()
        misc:killIfNoHealth()
    end
)
____exports.functionMap:set(
    CollectibleType.HOLY_MANTLE,
    function()
        g.p:RemoveCollectible(CollectibleType.HOLY_MANTLE)
        removeCollectibleFromItemTracker(nil, CollectibleType.HOLY_MANTLE)
        g.p:AddCollectible(CollectibleTypeCustom.HOLY_MANTLE_NERFED, 0, false)
        holyMantleNerfed(nil)
    end
)
____exports.functionMap:set(
    CollectibleType.MR_DOLLY,
    function()
        g.p:RemoveCollectible(CollectibleType.MR_DOLLY)
        g.p:AddCollectible(CollectibleType.SAD_ONION, 0, false)
        removeCollectibleFromItemTracker(nil, CollectibleType.SAD_ONION)
    end
)
____exports.functionMap:set(
    CollectibleType.LIL_GURDY,
    function()
        do
            local i = 0
            while i < 4 do
                g.p:AddCollectible(CollectibleType.LIL_GURDY, 0, false)
                removeCollectibleFromItemTracker(nil, CollectibleType.LIL_GURDY)
                i = i + 1
            end
        end
    end
)
____exports.functionMap:set(
    CollectibleType.CROWN_OF_LIGHT,
    function()
        misc:setHealthFromLastFrame()
        misc:killIfNoHealth()
    end
)
____exports.functionMap:set(
    CollectibleType.MEGA_SATANS_BREATH,
    function()
        g.p:AddCollectible(CollectibleTypeCustom.MEGA_BLAST_SINGLE, 0, false)
    end
)
____exports.functionMap:set(
    CollectibleType.BIG_CHUBBY,
    function()
        do
            local i = 0
            while i < 2 do
                g.p:AddCollectible(CollectibleType.BIG_CHUBBY, 0, false)
                removeCollectibleFromItemTracker(nil, CollectibleType.BIG_CHUBBY)
                i = i + 1
            end
        end
    end
)
____exports.functionMap:set(
    CollectibleType.ADRENALINE,
    function()
        g.p:RemoveCollectible(CollectibleType.ADRENALINE)
        removeCollectibleFromItemTracker(nil, CollectibleType.ADRENALINE)
        g.p:AddCollectible(CollectibleTypeCustom.ADRENALINE_IMPROVED, 0, false)
        adrenalineCustom(nil)
    end
)
____exports.functionMap:set(
    CollectibleType.POKE_GO,
    function()
        g.p:RemoveCollectible(CollectibleType.POKE_GO)
        removeCollectibleFromItemTracker(nil, CollectibleType.POKE_GO)
        g.p:AddCollectible(CollectibleTypeCustom.POKE_GO_IMPROVED, 0, false)
    end
)
____exports.functionMap:set(
    CollectibleType.DIVORCE_PAPERS,
    function()
        g.p:AddBoneHearts(-1)
        if g.p:HasTrinket(TrinketType.MYSTERIOUS_PAPER) then
            g.p:TryRemoveTrinket(TrinketType.MYSTERIOUS_PAPER)
        else
            removeAllTrinkets(nil, TrinketType.MYSTERIOUS_PAPER)
        end
    end
)
____exports.functionMap:set(
    CollectibleType.BRITTLE_BONES,
    function()
        g.p:AddBoneHearts(-4)
    end
)
____exports.functionMap:set(CollectibleTypeCustom.HOLY_POOP, holyPoop)
____exports.functionMap:set(CollectibleTypeCustom.TECHNOLOGY_2_5, technology25.postItemPickup)
____exports.functionMap:set(CollectibleTypeCustom.FANNY_PACK_IMPROVED, fannyPackImproved)
____exports.functionMap:set(CollectibleTypeCustom.FIRE_MIND_IMPROVED, fireMindImproved)
____exports.functionMap:set(
    CollectibleTypeCustom.BOX_OF_SPIDERS_IMPROVED,
    function()
        local activeCharge = g.p:GetActiveCharge()
        g.p:AddCollectible(CollectibleType.BOX_OF_SPIDERS, 0, false)
        removeCollectibleFromItemTracker(nil, CollectibleType.BOX_OF_SPIDERS)
        g.p:AddCollectible(CollectibleTypeCustom.BOX_OF_SPIDERS_IMPROVED, activeCharge, false)
    end
)
____exports.functionMap:set(CollectibleTypeCustom.HOLY_MANTLE_NERFED, holyMantleNerfed)
____exports.functionMap:set(
    CollectibleTypeCustom.MR_DOLLY_NERFED,
    function()
        addCollectibleCostume(nil, g.p, CollectibleType.MR_DOLLY)
        g.p:RemoveCollectible(CollectibleTypeCustom.MR_DOLLY_NERFED)
        g.p:AddCollectible(CollectibleType.SAD_ONION, 0, false)
        removeCollectibleFromItemTracker(nil, CollectibleType.SAD_ONION)
    end
)
____exports.functionMap:set(CollectibleTypeCustom.ADRENALINE_IMPROVED, adrenalineCustom)
return ____exports
 end,
["callbacks.postNewRoom"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local ____exports = {}
local checkDressingMachine, checkShopMachine, replaceArcade, replaceCurseRoom, replaceChallengeRoom, replaceRedChestDD, replaceChestRoom, replaceDiceRoom, abel, blueMap, holyMantle, pokeGoImproved
local ____constants = require("constants")
local POKE_GO_EXCEPTION_ENTITIES = ____constants.POKE_GO_EXCEPTION_ENTITIES
local ZERO_VECTOR = ____constants.ZERO_VECTOR
local ____globals = require("globals")
local g = ____globals.default
local technology25 = require("items.technology25")
local misc = require("misc")
local ____enums = require("types.enums")
local CollectibleTypeCustom = ____enums.CollectibleTypeCustom
local EffectVariantCustom = ____enums.EffectVariantCustom
local SlotVariantCustom = ____enums.SlotVariantCustom
local ____GlobalsRunRoom = require("types.GlobalsRunRoom")
local GlobalsRunRoom = ____GlobalsRunRoom.default
function ____exports.newRoom(self)
    local roomClear = g.r:IsClear()
    g.run.room = __TS__New(GlobalsRunRoom, roomClear)
    checkDressingMachine(nil)
    checkShopMachine(nil)
    replaceArcade(nil)
    replaceCurseRoom(nil)
    replaceChallengeRoom(nil)
    replaceRedChestDD(nil)
    replaceChestRoom(nil)
    replaceDiceRoom(nil)
    abel(nil)
    blueMap(nil)
    holyMantle(nil)
    pokeGoImproved(nil)
    technology25:postNewRoom()
    ____exports.familiarFrenzy(nil)
end
function checkDressingMachine(self)
    local roomIndex = misc:getRoomIndex()
    local startingRoomIndex = g.l:GetStartingRoomIndex()
    if roomIndex ~= startingRoomIndex then
        return
    end
    misc:removeSpecificEntities(EntityType.SLOT, SlotVariant.MOMS_DRESSING_TABLE)
end
function checkShopMachine(self)
    local roomSeed = g.r:GetSpawnSeed()
    local roomType = g.r:GetType()
    local isFirstVisit = g.r:IsFirstVisit()
    if roomType ~= RoomType.SHOP or not isFirstVisit then
        return
    end
    local greeds = Isaac.FindByType(
        EntityType.GREED,
        -1,
        -1,
        false,
        false
    )
    if #greeds > 0 then
        return
    end
    misc:removeSpecificEntities(EntityType.SLOT, SlotVariant.SHOP_RESTOCK_MACHINE)
    math.randomseed(roomSeed)
    local machine = math.random(1, 3)
    repeat
        local ____switch11 = machine
        local ____cond11 = ____switch11 == 1
        if ____cond11 then
            do
                g.g:Spawn(
                    EntityType.SLOT,
                    SlotVariant.SHOP_RESTOCK_MACHINE,
                    Vector(200, 160),
                    ZERO_VECTOR,
                    nil,
                    0,
                    g.r:GetSpawnSeed()
                )
                break
            end
        end
        ____cond11 = ____cond11 or ____switch11 == 2
        if ____cond11 then
            do
                g.g:Spawn(
                    EntityType.SLOT,
                    SlotVariantCustom.TRANSMUTATION_MACHINE,
                    Vector(200, 160),
                    ZERO_VECTOR,
                    nil,
                    0,
                    g.r:GetSpawnSeed()
                )
                break
            end
        end
        ____cond11 = ____cond11 or ____switch11 == 3
        if ____cond11 then
            do
                break
            end
        end
        do
            do
                error("Unknown machine case of: " .. tostring(machine))
            end
        end
    until true
end
function replaceArcade(self)
    local stage = g.l:GetStage()
    local roomType = g.r:GetType()
    local isFirstVisit = g.r:IsFirstVisit()
    if roomType ~= RoomType.ARCADE then
        return
    end
    misc:removeAllGridEntities()
    if not isFirstVisit then
        return
    end
    misc:removeAllEntities()
    Isaac.Spawn(
        EntityType.SLOT,
        SlotVariant.BEGGAR,
        0,
        misc:gridToPos(2, 1),
        ZERO_VECTOR,
        nil
    )
    Isaac.Spawn(
        EntityType.SLOT,
        SlotVariant.BLOOD_DONATION_MACHINE,
        0,
        misc:gridToPos(10, 1),
        ZERO_VECTOR,
        nil
    )
    Isaac.Spawn(
        EntityType.SLOT,
        SlotVariantCustom.BOMB_DONATION_MACHINE,
        0,
        misc:gridToPos(2, 5),
        ZERO_VECTOR,
        nil
    )
    Isaac.Spawn(
        EntityType.SLOT,
        SlotVariantCustom.KEY_DONATION_MACHINE,
        0,
        misc:gridToPos(10, 5),
        ZERO_VECTOR,
        nil
    )
    local roulettePosition = g.r:GetCenterPos()
    if stage == 8 then
        roulettePosition = misc:gridToPos(4, 3)
    end
    Isaac.Spawn(
        EntityType.SLOT,
        SlotVariantCustom.ROULETTE_TABLE,
        0,
        roulettePosition,
        ZERO_VECTOR,
        nil
    )
    if stage == 8 then
        Isaac.Spawn(
            EntityType.SLOT,
            SlotVariantCustom.HOLY_MACHINE,
            0,
            misc:gridToPos(8, 3),
            ZERO_VECTOR,
            nil
        )
    end
end
function replaceCurseRoom(self)
    local roomType = g.r:GetType()
    local isFirstVisit = g.r:IsFirstVisit()
    if roomType ~= RoomType.CURSE then
        return
    end
    misc:removeAllGridEntities()
    if not isFirstVisit then
        return
    end
    misc:removeAllEntities()
    ____exports.spawnCurseRoomPedestalItem(nil)
end
function ____exports.spawnCurseRoomPedestalItem(self)
    local centerPos = g.r:GetCenterPos()
    local subType = g.itemPool:GetCollectible(
        ItemPoolType.CURSE,
        true,
        g.r:GetSpawnSeed()
    )
    local collectible = Isaac.Spawn(
        EntityType.PICKUP,
        PickupVariant.COLLECTIBLE,
        subType,
        centerPos,
        ZERO_VECTOR,
        nil
    ):ToPickup()
    if collectible ~= nil then
        collectible.AutoUpdatePrice = false
        collectible.Price = -1
    end
end
function replaceChallengeRoom(self)
    local roomType = g.r:GetType()
    local isFirstVisit = g.r:IsFirstVisit()
    if roomType ~= RoomType.CHALLENGE then
        return
    end
    misc:removeAllGridEntities()
    if not isFirstVisit then
        return
    end
    misc:removeAllEntities()
    local subType = g.itemPool:GetCollectible(
        ItemPoolType.TREASURE,
        true,
        g.r:GetSpawnSeed()
    )
    Isaac.Spawn(
        EntityType.PICKUP,
        PickupVariant.COLLECTIBLE,
        subType,
        g.r:GetCenterPos(),
        ZERO_VECTOR,
        nil
    ):ToPickup()
end
function replaceRedChestDD(self)
    local roomDesc = g.l:GetCurrentRoomDesc()
    local roomVariant = roomDesc.Data.Variant
    local roomType = g.r:GetType()
    local isFirstVisit = g.r:IsFirstVisit()
    if roomType ~= RoomType.DEVIL or roomVariant ~= 18 or not isFirstVisit then
        return
    end
    misc:removeSpecificEntities(EntityType.PICKUP, PickupVariant.REDCHEST)
    Isaac.Spawn(
        EntityType.PICKUP,
        PickupVariant.SHOPITEM,
        0,
        misc:gridToPos(6, 4),
        ZERO_VECTOR,
        nil
    )
end
function replaceChestRoom(self)
    local velocityMultiplier = 8
    local roomType = g.r:GetType()
    local isFirstVisit = g.r:IsFirstVisit()
    local centerPos = g.r:GetCenterPos()
    local roomSeed = g.r:GetSpawnSeed()
    local numKeys = g.p:GetNumKeys()
    if roomType ~= RoomType.CHEST then
        return
    end
    misc:removeAllGridEntities()
    if not isFirstVisit then
        return
    end
    misc:removeAllEntities()
    local numToSpawn = numKeys
    local numToSpawnMin = 8
    if numToSpawn < numToSpawnMin then
        numToSpawn = numToSpawnMin
    end
    local numToSpawnMax = 30
    if numToSpawn > numToSpawnMax then
        numToSpawn = numToSpawnMax
    end
    local seed = roomSeed
    do
        local i = 0
        while i < numToSpawn do
            local velocity = Vector(velocityMultiplier, 0)
            local degrees = 360 / numToSpawn * i
            local rotatedVelocity = velocity:Rotated(degrees)
            seed = misc:incrementRNG(seed)
            local variant = PickupVariant.LOCKEDCHEST
            if i >= numKeys then
                variant = PickupVariant.CHEST
            end
            g.g:Spawn(
                EntityType.PICKUP,
                variant,
                centerPos,
                rotatedVelocity,
                nil,
                0,
                seed
            )
            i = i + 1
        end
    end
end
function replaceDiceRoom(self)
    local roomType = g.r:GetType()
    local isFirstVisit = g.r:IsFirstVisit()
    if roomType ~= RoomType.DICE then
        return
    end
    misc:removeAllGridEntities()
    if g.run.level.usedDiceRoom then
        return
    end
    g.run.level.usedDiceRoom = true
    if isFirstVisit then
        misc:removeAllEntities()
    end
    math.randomseed(g.r:GetSpawnSeed())
    local dicePip = math.random(1, 6)
    local diceEffect = Isaac.Spawn(
        EntityType.EFFECT,
        EffectVariantCustom.DICE_ROOM_FLOOR_CUSTOM,
        dicePip,
        g.r:GetCenterPos(),
        ZERO_VECTOR,
        nil
    )
    diceEffect:GetSprite():Play(
        tostring(dicePip),
        true
    )
    diceEffect.DepthOffset = -150
end
function abel(self)
    if not g.p:HasCollectible(CollectibleType.ABEL) then
        return
    end
    local abels = Isaac.FindByType(
        EntityType.FAMILIAR,
        FamiliarVariant.ABEL,
        -1,
        false,
        false
    )
    for ____, abelEntity in ipairs(abels) do
        local familiar = abelEntity:ToFamiliar()
        if familiar ~= nil then
            familiar.FireCooldown = 1000000
        end
    end
end
function blueMap(self)
    if not g.p:HasCollectible(CollectibleType.BLUE_MAP) then
        return
    end
    local bossIndex = g.l:QueryRoomTypeIndex(
        RoomType.BOSS,
        false,
        RNG()
    )
    local bossRoom = g.l:GetRoomByIdx(bossIndex)
    if bossRoom.DisplayFlags == 0 then
        bossRoom.DisplayFlags = 4
    end
end
function holyMantle(self)
    if not g.run.holyMantle or not g.p:HasCollectible(CollectibleTypeCustom.HOLY_MANTLE_NERFED) then
        return
    end
    local effects = g.p:GetEffects()
    effects:AddCollectibleEffect(CollectibleType.HOLY_MANTLE, true)
end
function pokeGoImproved(self)
    if not g.p:HasCollectible(CollectibleTypeCustom.POKE_GO_IMPROVED) then
        return
    end
    local targetNPC = nil
    for ____, entity in ipairs(Isaac.GetRoomEntities()) do
        local npc = entity:ToNPC()
        if npc ~= nil and not npc:IsBoss() and not __TS__ArrayIncludes(POKE_GO_EXCEPTION_ENTITIES, npc.Type) then
            targetNPC = npc
            break
        end
    end
    if targetNPC == nil then
        return
    end
    targetNPC:AddEntityFlags(EntityFlag.CHARM)
    targetNPC:AddEntityFlags(EntityFlag.FRIENDLY)
    targetNPC:AddEntityFlags(EntityFlag.PERSISTENT)
end
function ____exports.familiarFrenzy(self)
    if g.run.pills.familiarFrenzy == 0 then
        return
    end
    local numFamiliars = 10
    if g.p:HasCollectible(CollectibleType.PHD) then
        numFamiliars = numFamiliars * 2
    end
    do
        local i = 0
        while i < numFamiliars do
            g.p:UseActiveItem(
                CollectibleType.MONSTER_MANUAL,
                false,
                false,
                false,
                false
            )
            i = i + 1
        end
    end
end
function ____exports.main(self)
    g.l = g.g:GetLevel()
    g.r = g.g:GetRoom()
    local player = Isaac.GetPlayer(0)
    if player ~= nil then
        g.p = player
    end
    g.seeds = g.g:GetSeeds()
    g.itemPool = g.g:GetItemPool()
    local gameFrameCount = g.g:GetFrameCount()
    local stage = g.l:GetStage()
    local stageType = g.l:GetStageType()
    local ____ = CacheFlag.PostGameStarted
    local ____ = callbacks
    if gameFrameCount == 0 or g.run.level.stage ~= stage or g.run.level.stageType ~= stageType then
        return
    end
    ____exports.newRoom(nil)
end
return ____exports
 end,
["callbacks.postNewLevel"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local theWafer, holyMantleNerfed
local ____globals = require("globals")
local g = ____globals.default
local ____enums = require("types.enums")
local CollectibleTypeCustom = ____enums.CollectibleTypeCustom
local ____GlobalsRunLevel = require("types.GlobalsRunLevel")
local GlobalsRunLevel = ____GlobalsRunLevel.default
local postNewRoom = require("callbacks.postNewRoom")
function ____exports.newLevel(self)
    local gameFrameCount = g.g:GetFrameCount()
    local stage = g.l:GetStage()
    local stageType = g.l:GetStageType()
    if gameFrameCount ~= 0 and gameFrameCount == g.run.level.stageFrame then
        return
    end
    g.run.level = __TS__New(GlobalsRunLevel, stage, stageType, gameFrameCount)
    local stageSeed = g.seeds:GetStageSeed(stage)
    g.run.sunCardRNG = stageSeed
    theWafer(nil)
    holyMantleNerfed(nil)
    postNewRoom:newRoom()
end
function theWafer(self)
    if not g.run.wafer then
        return
    end
    g.run.waferCounters = 2
    if not g.p:HasCollectible(CollectibleType.WAFER) then
        g.p:AddCollectible(CollectibleType.WAFER, 0, false)
        removeCollectibleFromItemTracker(nil, CollectibleType.WAFER)
    end
end
function holyMantleNerfed(self)
    if not g.p:HasCollectible(CollectibleTypeCustom.HOLY_MANTLE_NERFED) then
        return
    end
    g.run.holyMantle = true
end
function ____exports.main(self)
    local gameFrameCount = g.g:GetFrameCount()
    if gameFrameCount == 0 then
        return
    end
    ____exports.newLevel(nil)
end
return ____exports
 end,
["callbacks.postGameStarted"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local ____exports = {}
local checkVanillaStartingItems, addStartingItems, trinkets, initPills
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CacheFlag = ____isaac_2Dtypescript_2Ddefinitions.CacheFlag
local Challenge = ____isaac_2Dtypescript_2Ddefinitions.Challenge
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local GameStateFlag = ____isaac_2Dtypescript_2Ddefinitions.GameStateFlag
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local removeCollectibleCostume = ____isaacscript_2Dcommon.removeCollectibleCostume
local ____constants = require("constants")
local REMOVED_TRINKETS = ____constants.REMOVED_TRINKETS
local ____CollectibleTypeCustom = require("enums.CollectibleTypeCustom")
local CollectibleTypeCustom = ____CollectibleTypeCustom.CollectibleTypeCustom
local ____TrinketTypeCustom = require("enums.TrinketTypeCustom")
local TrinketTypeCustom = ____TrinketTypeCustom.TrinketTypeCustom
local ____globals = require("globals")
local g = ____globals.default
local misc = require("misc")
local pills = require("pills")
local postItemPickup = require("postItemPickup")
local ____GlobalsRun = require("types.GlobalsRun")
local GlobalsRun = ____GlobalsRun.default
local postNewLevel = require("callbacks.postNewLevel")
function checkVanillaStartingItems(self)
    if g.p:HasCollectible(CollectibleType.DUALITY) then
        if Isaac.GetChallenge() == Challenge.NULL and g.seeds:IsCustomRun() then
            g.p:RemoveCollectible(CollectibleType.DUALITY)
            removeCollectibleFromItemTracker(nil, CollectibleType.DUALITY)
            g.p:AddCollectible(CollectibleType.SAD_ONION, 0, false)
            Isaac.DebugString("Eden has started with Duality; removing it.")
        else
            RacingPlusGlobals.run.restart = true
            Isaac.DebugString("Restarting because Eden started with Duality.")
            return
        end
    end
    do
        local i = 1
        while i <= g.numTotalCollectibles do
            if g.p:HasCollectible(i) then
                local postItemPickupFunction = postItemPickup.functionMap:get(i)
                if postItemPickupFunction ~= nil then
                    postItemPickupFunction(nil)
                end
            end
            i = i + 1
        end
    end
    local schoolbagItem = RacingPlusGlobals.run.schoolbag.item
    if schoolbagItem == CollectibleType.POOP then
        RacingPlusSchoolbag:put(CollectibleTypeCustom.HOLY_POOP, -1)
    elseif schoolbagItem == CollectibleType.MOMS_BRA then
        RacingPlusSchoolbag:put(CollectibleTypeCustom.MOMS_BRA_IMPROVED, -1)
    elseif schoolbagItem == CollectibleType.BOBS_ROTTEN_HEAD then
        RacingPlusSchoolbag:put(CollectibleTypeCustom.BOBS_ROTTEN_HEAD_IMPROVED, -1)
    elseif schoolbagItem == CollectibleType.MONSTER_MANUAL then
        RacingPlusSchoolbag:put(CollectibleTypeCustom.MONSTER_MANUAL_IMPROVED, -1)
    elseif schoolbagItem == CollectibleType.BOX_OF_SPIDERS then
        RacingPlusSchoolbag:put(CollectibleTypeCustom.BOX_OF_SPIDERS_IMPROVED, -1)
    elseif schoolbagItem == CollectibleType.MEGA_BLAST then
        RacingPlusSchoolbag:put(CollectibleTypeCustom.MEGA_BLAST_SINGLE, -1)
    end
    if g.p:HasTrinket(TrinketType.WALNUT) then
        g.p:TryRemoveTrinket(TrinketType.WALNUT)
        g.p:AddTrinket(TrinketTypeCustom.WALNUT_IMPROVED)
    end
end
function addStartingItems(self)
    if not g.p:HasCollectible(CollectibleTypeCustom.SCHOOLBAG_CUSTOM) then
        g.p:AddCollectible(CollectibleTypeCustom.SCHOOLBAG_CUSTOM, 0, false)
    end
    g.itemPool:RemoveCollectible(CollectibleTypeCustom.SCHOOLBAG_CUSTOM)
    if not g.p:HasCollectible(CollectibleType.DUALITY) then
        g.p:AddCollectible(CollectibleType.DUALITY, 0, false)
    end
    removeCollectibleFromItemTracker(nil, CollectibleType.DUALITY)
    removeCollectibleCostume(nil, g.p, CollectibleType.DUALITY)
    g.itemPool:RemoveCollectible(CollectibleType.DUALITY)
    local character = g.p:GetPlayerType()
    if character == PlayerType.LILITH then
        g.p:AddCollectible(CollectibleType.INCUBUS, 0, false)
        g.itemPool:RemoveCollectible(CollectibleType.INCUBUS)
        removeCollectibleFromItemTracker(nil, CollectibleType.INCUBUS)
        RacingPlusGlobals.run.extraIncubus = true
    end
end
function trinkets(self)
    for ____, trinket in ipairs(REMOVED_TRINKETS) do
        if g.p:HasTrinket(trinket) then
            g.p:TryRemoveTrinket(trinket)
        end
        g.itemPool:RemoveTrinket(trinket)
    end
    if g.p:HasTrinket(TrinketType.WALNUT) then
        g.p:TryRemoveTrinket(TrinketType.WALNUT)
        g.p:AddTrinket(TrinketTypeCustom.WALNUT_IMPROVED)
    end
    g.itemPool:RemoveTrinket(TrinketType.WALNUT)
end
function initPills(self)
    local seed = g.seeds:GetStartSeed()
    local chosenEffectIndexes = {}
    for ____, pillColor in ipairs(pills.COLORS) do
        local randomEffectIndex
        repeat
            do
                seed = misc:incrementRNG(seed)
                math.randomseed(seed)
                randomEffectIndex = math.random(0, #pills.EFFECTS - 1)
            end
        until not __TS__ArrayIncludes(chosenEffectIndexes, randomEffectIndex)
        chosenEffectIndexes[#chosenEffectIndexes + 1] = randomEffectIndex
        local pillEffect = pills.EFFECTS[randomEffectIndex + 1]
        g.run.pills.effects:set(pillColor, pillEffect)
    end
end
function ____exports.main(self, saveState)
    local startSeed = g.seeds:GetStartSeed()
    if g.numTotalCollectibles == 0 then
        g.numTotalCollectibles = misc:getNumTotalCollectibles()
    end
    if saveState then
        return
    end
    if not g.racingPlusEnabled then
        return
    end
    g.run = __TS__New(GlobalsRun, startSeed)
    checkVanillaStartingItems(nil)
    addStartingItems(nil)
    trinkets(nil)
    initPills(nil)
    g.itemPool:RemoveCollectible(CollectibleTypeCustom.DADS_LOST_COIN_CUSTOM)
    g.g:SetStateFlag(GameStateFlag.KRAMPUS_SPAWNED, true)
    g.p:AddCacheFlags(CacheFlag.ALL)
    g.p:EvaluateItems()
    postNewLevel:newLevel()
end
return ____exports
 end,
["callbacks.postKnifeUpdate"] = function(...) 
local ____exports = {}
local ____globals = require("globals")
local g = ____globals.default
function ____exports.main(self, knife)
    if g.run.knifeCooldownFrames > 0 then
        return
    end
    local isFlying = knife:IsFlying()
    local flyingLastFrame = g.run.room.knifeFlying:get(knife.Index)
    if flyingLastFrame == nil then
        g.run.room.knifeFlying:set(knife.Index, isFlying)
        g.run.room.knifePositions:set(
            knife.Index,
            Vector(knife.Position.X, knife.Position.Y)
        )
        return
    end
    if isFlying and not flyingLastFrame then
        local lastKnifePosition = g.run.room.knifePositions:get(knife.Index)
        if lastKnifePosition == nil then
            lastKnifePosition = Vector(knife.Position.X, knife.Position.Y)
        end
        local velocity = knife.Position - lastKnifePosition
        local fakeTear = g.p:FireTear(
            g.p.Position,
            velocity,
            false,
            true,
            false
        )
        fakeTear:Remove()
        g.run.familiarMultiShot = 3
        if g.p:HasCollectible(CollectibleType.ISAACS_HEART) then
            g.run.familiarMultiShot = 0
        end
        g.run.familiarMultiShotVelocity = velocity
        g.run.knifeCooldownFrames = 45
    end
    g.run.room.knifeFlying:set(knife.Index, isFlying)
    g.run.room.knifePositions:set(
        knife.Index,
        Vector(knife.Position.X, knife.Position.Y)
    )
end
return ____exports
 end,
["callbacks.postLaserInit"] = function(...) 
local ____exports = {}
local isaacsHeart
local ____globals = require("globals")
local g = ____globals.default
function isaacsHeart(self, laser)
    if not g.run.spawningIsaacsHeartLaser then
        return
    end
    laser.Visible = false
end
function ____exports.main(self, laser)
    isaacsHeart(nil, laser)
end
return ____exports
 end,
["callbacks.postLaserUpdate"] = function(...) 
local ____exports = {}
local lilBrimstone, isaacsHeart, mawOfTheVoid, technology25, familiarLaser, friendlyFade
local ____constants = require("constants")
local FAMILIAR_TEAR_DAMAGE = ____constants.FAMILIAR_TEAR_DAMAGE
local ____globals = require("globals")
local g = ____globals.default
local misc = require("misc")
local ____enums = require("types.enums")
local CollectibleTypeCustom = ____enums.CollectibleTypeCustom
function lilBrimstone(self, laser)
    if laser.FrameCount == 0 and laser.SpawnerType == EntityType.FAMILIAR and laser.SpawnerVariant == FamiliarVariant.LIL_BRIMSTONE then
        laser.CollisionDamage = 3 + g.p.Damage * FAMILIAR_TEAR_DAMAGE
    end
end
function isaacsHeart(self, laser)
    if laser.FrameCount >= 3 or laser.Variant ~= LaserVariant.LASER_THICK_RED or laser.SpawnerType ~= EntityType.PLAYER or not g.p:HasCollectible(CollectibleType.ISAACS_HEART) then
        return
    end
    local hearts = Isaac.FindByType(
        EntityType.FAMILIAR,
        FamiliarVariant.ISAACS_HEART,
        -1,
        false,
        false
    )
    if #hearts == 0 then
        return
    end
    if laser.FrameCount == 1 then
        laser.Parent = hearts[1]
    elseif laser.FrameCount == 2 then
        laser.Visible = true
        sfxManager:Play(
            SoundEffect.BLOOD_LASER_LARGE,
            0.75,
            0,
            false,
            1
        )
    end
end
function mawOfTheVoid(self, laser)
    if laser.BlackHpDropChance > 0.04 and laser.BlackHpDropChance < 0.06 then
        laser.CollisionDamage = g.p.Damage * 0.75
        laser:SetBlackHpDropChance(0)
    end
end
function technology25(self, laser)
    if not g.p:HasCollectible(CollectibleTypeCustom.TECHNOLOGY_2_5) then
        return
    end
    local data = laser:GetData()
    if data.ring ~= true then
        return
    end
    laser.Position = g.p.Position
end
function familiarLaser(self, laser)
    if laser.FrameCount ~= 0 or laser.SpawnerType ~= EntityType.PLAYER then
        return
    end
    if g.p:HasCollectible(CollectibleType.EPIC_FETUS) then
        return
    end
    if g.p:HasCollectible(CollectibleType.BRIMSTONE) and g.p:HasCollectible(CollectibleType.TRISAGION) then
        return
    end
    if laser.Variant == LaserVariant.LASER_THIN_RED and not g.p:HasCollectible(CollectibleType.TECHNOLOGY) and not g.p:HasCollectible(CollectibleType.TECH_X) then
        return
    end
    if laser.Variant == LaserVariant.LASER_THIN_RED and laser.SubType == 4 then
        return
    end
    if laser.Variant ~= LaserVariant.LASER_THICK_RED and laser.Variant ~= LaserVariant.LASER_THIN_RED and laser.Variant ~= LaserVariant.LASER_BRIMTECH then
        return
    end
    local velocity = Vector(g.p.ShotSpeed * 10, 0):Rotated(laser.AngleDegrees)
    if g.p:HasCollectible(CollectibleType.TECH_X) then
        velocity = misc:getVelocityFromAimDirection()
    end
    local fakeTear = g.p:FireTear(
        g.p.Position,
        velocity,
        false,
        true,
        false
    )
    fakeTear:Remove()
    if (laser.Variant == LaserVariant.LASER_THICK_RED or laser.Variant == LaserVariant.LASER_BRIMTECH) and not g.p:HasCollectible(CollectibleType.TECH_X) then
        g.run.familiarMultiShot = 3
        if g.p:HasCollectible(CollectibleType.ISAACS_HEART) then
            g.run.familiarMultiShot = 0
        end
        g.run.familiarMultiShotVelocity = velocity
    end
end
function friendlyFade(self, laser)
    if not laser:HasEntityFlags(EntityFlag.FRIENDLY) then
        return
    end
    local color = laser:GetColor()
    local fadeAmount = 0.25
    local newColor = Color(
        color.R,
        color.G,
        color.B,
        fadeAmount,
        0,
        0,
        0
    )
    local ____ = CacheFlag.BO
    local ____ = will
    local ____ = be
    local ____ = float
    do
        local ____ = values
        local ____ = but
    end
    local ____ = the
    local ____ = Color
    laser:SetColor(
        newColor,
        0,
        0,
        true,
        true
    )
end
function ____exports.main(self, laser)
    lilBrimstone(nil, laser)
    isaacsHeart(nil, laser)
    mawOfTheVoid(nil, laser)
    technology25(nil, laser)
    familiarLaser(nil, laser)
    friendlyFade(nil, laser)
end
return ____exports
 end,
["callbacks.postPickupInit"] = function(...) 
local ____exports = {}
function ____exports.tarotCard(self, pickup)
    local ____ = CacheFlag.runes
    local ____ = face - up
    if pickup.SubType >= Card.FOOL and pickup.SubType <= Card.RUNE_ALGIZ or CacheFlag.Black then
        Rune(nil, 41)
    end
    local ____ = are
    local ____ = (Racing + pickup.SubType)[handled] ~= nil == Card.CHAOS or pickup.SubType == Card.RULES or pickup.SubType == Card.SUICIDE_KING or pickup.SubType == Card.GET_OUT_OF_JAIL or pickup.SubType == Card.QUESTIONMARK or pickup.SubType >= Card.HUGE_GROWTH and pickup.SubType <= Card.ERA_WALK
    do
        local sprite = pickup:GetSprite()
        sprite:ReplaceSpritesheet(
            0,
            ("gfx/cards/" .. tostring(pickup.SubType)) .. ".png"
        )
        sprite:LoadGraphics()
    end
end
return ____exports
 end,
["callbacks.postPickupRender"] = function(...) 
local ____exports = {}
local ____globals = require("globals")
local g = ____globals.default
local shopItemNumbersYellow = Sprite()
shopItemNumbersYellow:Load("gfx/005.150_shop item custom.anm2", true)
shopItemNumbersYellow:Play("NumbersYellow", true)
function ____exports.collectible(self, pickup)
    local roomShape = g.r:GetRoomShape()
    if roomShape >= RoomShape.ROOMSHAPE_1x2 then
        return
    end
    if pickup.Price <= 0 then
        return
    end
    local sprite = pickup:GetSprite()
    sprite:SetLayerFrame(0, -1)
    local position = Isaac.WorldToRenderPosition(pickup.Position)
    if pickup.Price >= 10 then
        shopItemNumbersYellow:SetLayerFrame(0, 1)
        shopItemNumbersYellow:SetLayerFrame(1, pickup.Price - 10)
        shopItemNumbersYellow:SetLayerFrame(2, 10)
        shopItemNumbersYellow:RenderLayer(0, position)
        shopItemNumbersYellow:RenderLayer(1, position)
        shopItemNumbersYellow:RenderLayer(2, position)
    else
        shopItemNumbersYellow:SetLayerFrame(0, pickup.Price)
        shopItemNumbersYellow:SetLayerFrame(1, 10)
        shopItemNumbersYellow:RenderLayer(
            0,
            position + Vector(11, 0)
        )
        shopItemNumbersYellow:RenderLayer(
            1,
            position + Vector(9, 1)
        )
    end
end
return ____exports
 end,
["items.catalog"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local ____exports = {}
local ____constants = require("constants")
local CATALOG_ILLEGAL_ROOM_TYPES = ____constants.CATALOG_ILLEGAL_ROOM_TYPES
local CATALOG_ITEM_PRICE = ____constants.CATALOG_ITEM_PRICE
local ZERO_VECTOR = ____constants.ZERO_VECTOR
local ____globals = require("globals")
local g = ____globals.default
local misc = require("misc")
local ____enums = require("types.enums")
local SoundEffectCustom = ____enums.SoundEffectCustom
function ____exports.spawnItem(self, position)
    g.run.catalogSeed = misc:incrementRNG(g.run.catalogSeed)
    local spawnedItem = g.g:Spawn(
        EntityType.PICKUP,
        PickupVariant.COLLECTIBLE,
        position,
        ZERO_VECTOR,
        nil,
        0,
        g.run.catalogSeed
    ):ToPickup()
    if spawnedItem ~= nil then
        local data = spawnedItem:GetData()
        data.catalogItem = true
        spawnedItem.AutoUpdatePrice = false
        spawnedItem.Price = CATALOG_ITEM_PRICE
    end
end
function ____exports.inIllegalRoomType(self)
    local roomType = g.r:GetType()
    return __TS__ArrayIncludes(CATALOG_ILLEGAL_ROOM_TYPES, roomType)
end
function ____exports.useItem(self)
    local position = g.r:FindFreePickupSpawnPosition(g.p.Position, 1, true)
    ____exports.spawnItem(nil, position)
    sfxManager:Play(
        SoundEffectCustom.SANTA,
        1,
        0,
        false,
        1
    )
    return true
end
function ____exports.preUseItem(self)
    local gameFrameCount = g.g:GetFrameCount()
    if ____exports.inIllegalRoomType(nil) then
        g.p:AnimateSad()
        RacingPlusGlobals.run.rechargeItemFrame = gameFrameCount + 1
        return true
    end
    return false
end
return ____exports
 end,
["callbacks.postPickupUpdate"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local ____exports = {}
local checkTouched, touched, touchedEtherealPenny, heartRelic, heartCheckDDReroll, heartCheckCatalogReroll, collectibleCheckDouble
local ____constants = require("constants")
local ZERO_VECTOR = ____constants.ZERO_VECTOR
local ____globals = require("globals")
local g = ____globals.default
local catalog = require("items.catalog")
local misc = require("misc")
local ____pills = require("pills")
local COLORS = ____pills.COLORS
local ____enums = require("types.enums")
local CollectibleState = ____enums.CollectibleState
local TrinketTypeCustom = ____enums.TrinketTypeCustom
local postNewRoom = require("callbacks.postNewRoom")
function checkTouched(self, pickup)
    local sprite = pickup:GetSprite()
    local data = pickup:GetData()
    if sprite:IsPlaying("Collect") and data.touched == nil then
        data.touched = true
        Isaac.DebugString(((((("Touched pickup. " .. tostring(pickup.Type)) .. ".") .. tostring(pickup.Variant)) .. ".") .. tostring(pickup.SubType)) .. " (RPR)")
        touched(nil, pickup)
    end
end
function touched(self, pickup)
    touchedEtherealPenny(nil, pickup)
end
function touchedEtherealPenny(self, pickup)
    if pickup.Variant ~= PickupVariant.COIN or not g.p:HasTrinket(TrinketTypeCustom.ETHEREAL_PENNY) then
        return
    end
    g.run.etherealPennySeed = misc:incrementRNG(g.run.etherealPennySeed)
    math.randomseed(g.run.etherealPennySeed)
    local slotChoice = math.random(1, 5)
    if slotChoice ~= 1 then
        return
    end
    local position = g.r:FindFreePickupSpawnPosition(g.p.Position, 1, true)
    g.g:Spawn(
        EntityType.PICKUP,
        PickupVariant.HEART,
        position,
        ZERO_VECTOR,
        nil,
        HeartSubType.HEART_HALF_SOUL,
        g.run.etherealPennySeed
    )
end
function heartRelic(self, pickup)
    if pickup.SubType == HeartSubType.HEART_SOUL and pickup.SpawnerType == EntityType.FAMILIAR and pickup.SpawnerVariant == FamiliarVariant.RELIC then
        g.g:Spawn(
            EntityType.PICKUP,
            PickupVariant.HEART,
            pickup.Position,
            pickup.Velocity,
            pickup.SpawnerEntity,
            HeartSubType.HEART_HALF_SOUL,
            pickup.InitSeed
        )
        pickup:Remove()
    end
end
function heartCheckDDReroll(self, pickup)
    local roomType = g.r:GetType()
    if pickup.FrameCount == 1 and pickup.SubType == HeartSubType.HEART_FULL and pickup.Price == 3 and roomType == RoomType.CURSE then
        postNewRoom:spawnCurseRoomPedestalItem()
        pickup:Remove()
    end
end
function heartCheckCatalogReroll(self, pickup)
    if pickup.FrameCount == 1 and pickup.SubType == HeartSubType.HEART_FULL and pickup.Price == 3 and not catalog:inIllegalRoomType() then
        catalog:spawnItem(pickup.Position)
        pickup:Remove()
    end
end
function collectibleCheckDouble(self, pickup)
    if not g.run.level.doubleItems then
        return
    end
    local gameFrameCount = g.g:GetFrameCount()
    if g.r:IsFirstVisit() and pickup.FrameCount == 2 and pickup.State ~= 2 and (g.run.room.doubleItemsFrame == 0 or g.run.room.doubleItemsFrame == gameFrameCount) then
        local position = g.r:FindFreePickupSpawnPosition(pickup.Position, 1, true)
        g.run.randomSeed = misc:incrementRNG(g.run.randomSeed)
        local pedestal = g.g:Spawn(
            EntityType.PICKUP,
            PickupVariant.COLLECTIBLE,
            position,
            ZERO_VECTOR,
            nil,
            0,
            g.run.randomSeed
        ):ToPickup()
        if pedestal ~= nil then
            pedestal.Price = pickup.Price
            pedestal.TheresOptionsPickup = pickup.TheresOptionsPickup
            pedestal.State = CollectibleState.DUPLICATED
            g.run.room.doubleItemsFrame = gameFrameCount
        end
    end
end
function ____exports.main(self, pickup)
    checkTouched(nil, pickup)
end
function ____exports.heart(self, pickup)
    heartRelic(nil, pickup)
    heartCheckDDReroll(nil, pickup)
    heartCheckCatalogReroll(nil, pickup)
end
function ____exports.pill(self, pickup)
    if __TS__ArrayIncludes(COLORS, pickup.SubType) then
        return
    end
    pickup:Remove()
    math.randomseed(pickup.InitSeed)
    local colorIndex = math.random(0, #COLORS - 1)
    local color = COLORS[colorIndex + 1]
    g.g:Spawn(
        pickup.Type,
        pickup.Variant,
        pickup.Position,
        pickup.Velocity,
        pickup.SpawnerEntity,
        color,
        pickup.InitSeed
    )
end
function ____exports.collectible(self, pickup)
    collectibleCheckDouble(nil, pickup)
end
return ____exports
 end,
["callbacks.postPlayerInit"] = function(...) 
local ____exports = {}
local ____globals = require("globals")
local g = ____globals.default
function ____exports.main(self, player)
    if player.Variant ~= PlayerVariant.PLAYER then
        return
    end
    g.p = player
end
return ____exports
 end,
["callbacks.postProjectileUpdate"] = function(...) 
local ____exports = {}
function ____exports.main(self, projectile)
    if not projectile:HasEntityFlags(EntityFlag.FRIENDLY) then
        return
    end
    local color = projectile:GetColor()
    local fadeAmount = 0.25
    local newColor = Color(
        color.R,
        color.G,
        color.B,
        fadeAmount,
        0,
        0,
        0
    )
    projectile:SetColor(
        newColor,
        0,
        0,
        true,
        true
    )
end
return ____exports
 end,
["callbacks.postRender"] = function(...) 
local ____exports = {}
local checkRacingPlus
local ____globals = require("globals")
local g = ____globals.default
function checkRacingPlus(self)
    if g.racingPlusEnabled then
        return
    end
    local x = 115
    local y = 70
    local text = "Error. The Racing+ Rebalanced mod requires"
    Isaac.RenderText(
        text,
        x,
        y,
        2,
        2,
        2,
        2
    )
    x = x + 42
    y = y + 10
    text = "that you also enable the Racing+ mod."
    Isaac.RenderText(
        text,
        x,
        y,
        2,
        2,
        2,
        2
    )
end
function ____exports.main(self)
    g.l = g.g:GetLevel()
    g.r = g.g:GetRoom()
    local player = Isaac.GetPlayer(0)
    if player ~= nil then
        g.p = player
    end
    g.seeds = g.g:GetSeeds()
    g.itemPool = g.g:GetItemPool()
    checkRacingPlus(nil)
end
return ____exports
 end,
["callbacks.postTearUpdate"] = function(...) 
local ____exports = {}
local bobsRottenHead, demonBaby, abel, tinyPlanet, explosivo, lilMonstro, fireMindImproved
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
local EffectVariant = ____isaac_2Dtypescript_2Ddefinitions.EffectVariant
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local FamiliarVariant = ____isaac_2Dtypescript_2Ddefinitions.FamiliarVariant
local TearFlag = ____isaac_2Dtypescript_2Ddefinitions.TearFlag
local TearVariant = ____isaac_2Dtypescript_2Ddefinitions.TearVariant
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local addFlag = ____isaacscript_2Dcommon.addFlag
local spawnEffect = ____isaacscript_2Dcommon.spawnEffect
local ____constants = require("constants")
local FAMILIAR_TEAR_DAMAGE = ____constants.FAMILIAR_TEAR_DAMAGE
local ____CollectibleTypeCustom = require("enums.CollectibleTypeCustom")
local CollectibleTypeCustom = ____CollectibleTypeCustom.CollectibleTypeCustom
local ____globals = require("globals")
local g = ____globals.default
function bobsRottenHead(self, tear)
    if tear.Variant == TearVariant.BOBS_HEAD and tear.FrameCount == 1 then
        tear.TearFlags = addFlag(nil, tear.TearFlags, TearFlag.SAD_BOMB)
        g.p:SetActiveCharge(1)
    end
end
function demonBaby(self, tear)
    if tear.FrameCount == 1 and tear.SpawnerType == EntityType.FAMILIAR and tear.SpawnerVariant == FamiliarVariant.DEMON_BABY then
        tear.CollisionDamage = 7 + g.p.Damage * 0.33
    end
end
function abel(self, tear)
    if tear.SpawnerType == EntityType.FAMILIAR and tear.SpawnerVariant == FamiliarVariant.ABEL and tear.CollisionDamage == 3.5 then
        tear:Remove()
    end
end
function tinyPlanet(self, tear)
    if not g.p:HasCollectible(CollectibleType.TINY_PLANET) then
        return
    end
    if tear.SubType == 0 then
        return
    end
    local distance = 90
    local positionMod = Vector(0, distance * -1)
    local frameCount = tear.FrameCount
    local direction = tear.SubType - 1
    local degreesPerFrame = 8
    local degrees = frameCount * degreesPerFrame
    if direction == Direction.RIGHT then
        degrees = degrees + 90
    elseif direction == Direction.DOWN then
        degrees = degrees + 180
    elseif direction == Direction.LEFT then
        degrees = degrees + 270
    end
    positionMod = positionMod:Rotated(degrees)
    tear.Position = g.p.Position + positionMod
    tear.Velocity = Vector(distance / 4, 0)
    tear.Velocity = tear.Velocity:Rotated(degrees)
    if tear.FrameCount < 150 then
        tear.FallingSpeed = 0
    end
end
function explosivo(self, tear)
    if tear.Variant ~= TearVariant.EXPLOSIVO then
        return
    end
    if tear.StickTimer == 89 then
        tear.StickTimer = 29
    end
end
function lilMonstro(self, tear)
    if tear.FrameCount == 1 and tear.SpawnerType == EntityType.FAMILIAR and tear.SpawnerVariant == FamiliarVariant.LIL_MONSTRO then
        tear.CollisionDamage = g.p.Damage * FAMILIAR_TEAR_DAMAGE
        tear.Velocity = tear.Velocity * 2
    end
end
function fireMindImproved(self, tear)
    if not g.p:HasCollectible(CollectibleTypeCustom.FIRE_MIND_IMPROVED) or tear.SubType ~= 1 or tear.FrameCount % 2 ~= 0 then
        return
    end
    local fire = spawnEffect(nil, EffectVariant.HOT_BOMB_FIRE, 0, tear.Position)
    fire.SpriteScale = Vector(0.5, 0.5)
    local color = fire:GetColor()
    local fadeAmount = 0.5
    local newColor = Color(
        color.R,
        color.G,
        color.B,
        fadeAmount,
        color.RO,
        color.GO,
        color.BO
    )
    fire:SetColor(
        newColor,
        0,
        0,
        true,
        true
    )
end
function ____exports.main(self, tear)
    bobsRottenHead(nil, tear)
    demonBaby(nil, tear)
    abel(nil, tear)
    tinyPlanet(nil, tear)
    explosivo(nil, tear)
    lilMonstro(nil, tear)
    fireMindImproved(nil, tear)
end
return ____exports
 end,
["roomCleared"] = function(...) 
local ____exports = {}
local chargedBaby
local ____constants = require("constants")
local ZERO_VECTOR = ____constants.ZERO_VECTOR
local ____globals = require("globals")
local g = ____globals.default
function chargedBaby(self)
    if not g.p:HasCollectible(CollectibleType.CHARGED_BABY) then
        return
    end
    local ____g_run_0, ____chargedBabyCounters_1 = g.run, "chargedBabyCounters"
    ____g_run_0[____chargedBabyCounters_1] = ____g_run_0[____chargedBabyCounters_1] + 1
    if g.run.chargedBabyCounters ~= 4 then
        return
    end
    g.run.chargedBabyCounters = 0
    local chargedBabies = Isaac.FindByType(
        EntityType.FAMILIAR,
        FamiliarVariant.CHARGED_BABY,
        -1,
        false,
        false
    )
    for ____, chargedBabyEntity in ipairs(chargedBabies) do
        Isaac.Spawn(
            EntityType.PICKUP,
            PickupVariant.LIL_BATTERY,
            0,
            chargedBabyEntity.Position,
            ZERO_VECTOR,
            nil
        )
    end
end
function ____exports.main(self)
    chargedBaby(nil)
end
return ____exports
 end,
["slotRewardFunctionMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local spawnCoin, spawn3Coins
local ____constants = require("constants")
local ZERO_VECTOR = ____constants.ZERO_VECTOR
local ____globals = require("globals")
local g = ____globals.default
local misc = require("misc")
local ____enums = require("types.enums")
local SlotVariantCustom = ____enums.SlotVariantCustom
function spawnCoin(self, slot)
    Isaac.Spawn(
        EntityType.PICKUP,
        PickupVariant.COIN,
        0,
        slot.Position,
        RandomVector() * 3,
        slot
    )
end
function spawn3Coins(self, slot)
    do
        local i = 0
        while i < 3 do
            spawnCoin(nil, slot)
            i = i + 1
        end
    end
    return true
end
local slotRewardFunctionMap = __TS__New(Map)
____exports.default = slotRewardFunctionMap
slotRewardFunctionMap:set(
    SlotVariantCustom.TRANSMUTATION_MACHINE,
    function()
        g.p:UseActiveItem(
            CollectibleType.D6,
            false,
            false,
            false,
            false
        )
        return true
    end
)
slotRewardFunctionMap:set(SlotVariantCustom.BOMB_DONATION_MACHINE, spawn3Coins)
slotRewardFunctionMap:set(SlotVariantCustom.KEY_DONATION_MACHINE, spawn3Coins)
slotRewardFunctionMap:set(
    SlotVariantCustom.ROULETTE_TABLE,
    function(____, slot)
        g.run.rouletteTableRNG = misc:incrementRNG(g.run.rouletteTableRNG)
        math.randomseed(g.run.rouletteTableRNG)
        local success = math.random(1, 10)
        if success <= 4 then
            do
                local i = 0
                while i < 10 do
                    spawnCoin(nil, slot)
                    i = i + 1
                end
            end
            return true
        end
        g.p:AnimateSad()
        return false
    end
)
slotRewardFunctionMap:set(
    SlotVariantCustom.HOLY_MACHINE,
    function(____, slot)
        Isaac.Spawn(
            EntityType.EFFECT,
            EffectVariant.HEAVEN_LIGHT_DOOR,
            0,
            slot.Position,
            ZERO_VECTOR,
            slot
        )
        slot:GetSprite():Play("Death", true)
        return true
    end
)
return ____exports
 end,
["slotTouchedFunctionMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local touchSuccess
local ____globals = require("globals")
local g = ____globals.default
local ____enums = require("types.enums")
local SlotVariantCustom = ____enums.SlotVariantCustom
function touchSuccess(self, sprite)
    sfxManager:Play(
        SoundEffect.COIN_SLOT,
        1,
        0,
        false,
        1
    )
    sprite:Play("Initiate", true)
end
local slotRewardTouchedMap = __TS__New(Map)
____exports.default = slotRewardTouchedMap
slotRewardTouchedMap:set(
    SlotVariantCustom.TRANSMUTATION_MACHINE,
    function(____, slot)
        g.p:TakeDamage(
            1,
            DamageFlag.RED_HEARTS,
            EntityRef(slot),
            0
        )
        touchSuccess(
            nil,
            slot:GetSprite()
        )
    end
)
slotRewardTouchedMap:set(
    SlotVariantCustom.BOMB_DONATION_MACHINE,
    function(____, slot)
        local numBombs = g.p:GetNumBombs()
        local price = 1
        if numBombs < price then
            return
        end
        g.p:AddBombs(-price)
        touchSuccess(
            nil,
            slot:GetSprite()
        )
    end
)
slotRewardTouchedMap:set(
    SlotVariantCustom.KEY_DONATION_MACHINE,
    function(____, slot)
        local numKeys = g.p:GetNumKeys()
        local price = 1
        if numKeys < price then
            return
        end
        g.p:AddKeys(-price)
        touchSuccess(
            nil,
            slot:GetSprite()
        )
    end
)
slotRewardTouchedMap:set(
    SlotVariantCustom.ROULETTE_TABLE,
    function(____, slot)
        local numCoins = g.p:GetNumCoins()
        local price = 5
        if numCoins < price then
            return
        end
        g.p:AddCoins(-price)
        touchSuccess(
            nil,
            slot:GetSprite()
        )
    end
)
slotRewardTouchedMap:set(
    SlotVariantCustom.HOLY_MACHINE,
    function(____, slot)
        local numCoins = g.p:GetNumCoins()
        local price = 20
        if numCoins < price then
            return
        end
        g.p:AddCoins(-price)
        touchSuccess(
            nil,
            slot:GetSprite()
        )
    end
)
return ____exports
 end,
["slots"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EntityGridCollisionClass = ____isaac_2Dtypescript_2Ddefinitions.EntityGridCollisionClass
local SlotVariant = ____isaac_2Dtypescript_2Ddefinitions.SlotVariant
local SoundEffect = ____isaac_2Dtypescript_2Ddefinitions.SoundEffect
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local getSlots = ____isaacscript_2Dcommon.getSlots
local ____globals = require("globals")
local g = ____globals.default
local ____slotRewardFunctionMap = require("slotRewardFunctionMap")
local slotRewardFunctionMap = ____slotRewardFunctionMap.default
local ____slotTouchedFunctionMap = require("slotTouchedFunctionMap")
local slotTouchedFunctionMap = ____slotTouchedFunctionMap.default
function ____exports.postUpdate(self)
    local slots = getSlots(nil)
    for ____, slot in ipairs(slots) do
        if slot.Variant > SlotVariant.MOMS_DRESSING_TABLE then
            local sprite = slot:GetSprite()
            if sprite:IsFinished("Initiate") then
                sprite:Play("Wiggle", true)
            end
            if sprite:IsFinished("Wiggle") then
                sprite:Play("Prize", true)
                local rewardFunction = slotRewardFunctionMap:get(slot.Variant)
                if rewardFunction ~= nil then
                    local success = rewardFunction(nil, slot)
                    if success then
                        sfxManager:Play(
                            SoundEffect.BLOOD_BANK_SPAWN,
                            1,
                            0,
                            false,
                            1
                        )
                        sfxManager:Play(
                            SoundEffect.SLOT_SPAWN,
                            1,
                            0,
                            false,
                            1
                        )
                    end
                end
            end
            if sprite:IsFinished("Prize") then
                sprite:Play("Idle", true)
            end
            if sprite:IsFinished("Death") then
                sprite:Play("Broken", true)
            end
            local exploded = slot.GridCollisionClass == EntityGridCollisionClass.GROUND
            if exploded then
                if not sprite:IsPlaying("Death") and not sprite:IsPlaying("Broken") then
                    sprite:Play("Death", true)
                end
            elseif sprite:IsPlaying("Idle") and slot.Position:Distance(g.p.Position) <= slot.Size + g.p.Size then
                local touchedFunction = slotTouchedFunctionMap:get(slot.Variant)
                if touchedFunction ~= nil then
                    touchedFunction(nil, slot)
                end
            end
        end
    end
end
return ____exports
 end,
["callbacks.postUpdateCollectible"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local ____exports = {}
local checkDDPrice, getDDPrice, checkShopPrice, getPrice, checkSetBossItem
local ____constants = require("constants")
local CATALOG_ITEM_PRICE = ____constants.CATALOG_ITEM_PRICE
local SHOP_PRICES = ____constants.SHOP_PRICES
local TWO_HEART_ITEMS = ____constants.TWO_HEART_ITEMS
local ____globals = require("globals")
local g = ____globals.default
local ____enums = require("types.enums")
local CollectibleState = ____enums.CollectibleState
function checkDDPrice(self, pickup)
    local roomType = g.r:GetType()
    if roomType ~= RoomType.CURSE and roomType ~= RoomType.DEVIL and roomType ~= RoomType.BLACK_MARKET then
        return
    end
    if pickup.Price == 0 or pickup.Price == PickupPrice.PRICE_FREE then
        return
    end
    local DDPrice = getDDPrice(nil, pickup.SubType)
    if pickup.Price ~= DDPrice then
        pickup.AutoUpdatePrice = false
        pickup.Price = DDPrice
    end
end
function getDDPrice(self, subType)
    local maxHearts = g.p:GetMaxHearts()
    if maxHearts == 0 then
        return -3
    end
    if g.p:HasTrinket(TrinketType.JUDAS_TONGUE) then
        return -1
    end
    if __TS__ArrayIncludes(TWO_HEART_ITEMS, subType) then
        return -2
    end
    return -1
end
function checkShopPrice(self, pickup)
    if pickup.Price == 0 or pickup.Price == PickupPrice.PRICE_ONE_HEART or pickup.Price == PickupPrice.PRICE_TWO_HEARTS or pickup.Price == PickupPrice.PRICE_THREE_SOULHEARTS then
        return
    end
    local price = getPrice(nil, pickup)
    if pickup.Price ~= price then
        pickup.AutoUpdatePrice = false
        pickup.Price = price
    end
end
function getPrice(self, pickup)
    local numSteamSales = g.p:GetCollectibleNum(CollectibleType.STEAM_SALE)
    if g.p:HasTrinket(TrinketType.STORE_CREDIT) then
        return PickupPrice.PRICE_FREE
    end
    if numSteamSales == 2 then
        return PickupPrice.PRICE_FREE
    end
    local price
    local shopPrice = SHOP_PRICES:get(pickup.SubType)
    if shopPrice == nil then
        local data = pickup:GetData()
        if data.catalogItem ~= nil then
            price = CATALOG_ITEM_PRICE
        else
            price = 15
        end
    else
        price = shopPrice
    end
    if numSteamSales == 1 then
        price = math.floor(price / 2)
    end
    return price
end
function checkSetBossItem(self, pedestal)
    local roomType = g.r:GetType()
    if roomType ~= RoomType.BOSS then
        return
    end
    if pedestal.SubType == CollectibleType.CUBE_OF_MEAT or pedestal.SubType == CollectibleType.LITTLE_CHAD or pedestal.SubType == CollectibleType.LITTLE_GISH or pedestal.SubType == CollectibleType.LITTLE_STEVEN or pedestal.SubType == CollectibleType.PONY or pedestal.SubType == CollectibleType.WHITE_PONY or pedestal.SubType == CollectibleType.BALL_OF_BANDAGES then
        local newEntity = g.g:Spawn(
            EntityType.PICKUP,
            PickupVariant.COLLECTIBLE,
            pedestal.Position,
            pedestal.Velocity,
            pedestal.Parent,
            0,
            pedestal.InitSeed
        )
        local newPedestal = newEntity:ToPickup()
        if newPedestal ~= nil then
            newPedestal.TheresOptionsPickup = pedestal.TheresOptionsPickup
        end
        pedestal:Remove()
    end
end
____exports.default = function()
    local pedestals = Isaac.FindByType(
        EntityType.PICKUP,
        PickupVariant.COLLECTIBLE,
        -1,
        false,
        false
    )
    for ____, pedestal in ipairs(pedestals) do
        do
            local pickup = pedestal:ToPickup()
            if pickup == nil then
                goto __continue3
            end
            if pickup.SubType ~= CollectibleType.NULL and pickup.State ~= CollectibleState.NORMAL then
                checkDDPrice(nil, pickup)
                checkShopPrice(nil, pickup)
                checkSetBossItem(nil, pickup)
            end
        end
        ::__continue3::
    end
end
return ____exports
 end,
["callbacks.postUpdate"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArraySplice = ____lualib.__TS__ArraySplice
local ____exports = {}
local recordLastFireDirection, recordHealth, checkRoomCleared, checkItemPickup, checkItemPickupQueueEmpty, checkItemPickupQueueNotEmpty, postNewItem, checkTransformations, checkFamiliarMultiShot, monstrosTooth, momsKnife, nineVolt, theBlackBean, tinyPlanet, isaacsHeart, judasShadow, mongoBaby, fartingBaby, blackPowder, brownNugget, fireMindImproved, holyMantleNerfed, adrenalineImproved, pennyOnAString, checkPillTimer
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CacheFlag = ____isaac_2Dtypescript_2Ddefinitions.CacheFlag
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local DamageFlag = ____isaac_2Dtypescript_2Ddefinitions.DamageFlag
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
local EffectVariant = ____isaac_2Dtypescript_2Ddefinitions.EffectVariant
local EntityPartition = ____isaac_2Dtypescript_2Ddefinitions.EntityPartition
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local NullItemID = ____isaac_2Dtypescript_2Ddefinitions.NullItemID
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local PlayerForm = ____isaac_2Dtypescript_2Ddefinitions.PlayerForm
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local SoundEffect = ____isaac_2Dtypescript_2Ddefinitions.SoundEffect
local TearVariant = ____isaac_2Dtypescript_2Ddefinitions.TearVariant
local ____isaacscript_2Dcommon = require("lua_modules.isaacscript-common.index")
local getEnumValues = ____isaacscript_2Dcommon.getEnumValues
local removeCollectibleFromItemTracker = ____isaacscript_2Dcommon.removeCollectibleFromItemTracker
local sfxManager = ____isaacscript_2Dcommon.sfxManager
local spawnEffect = ____isaacscript_2Dcommon.spawnEffect
local spawnTear = ____isaacscript_2Dcommon.spawnTear
local ____constants = require("constants")
local ZERO_VECTOR = ____constants.ZERO_VECTOR
local ____CollectibleTypeCustom = require("enums.CollectibleTypeCustom")
local CollectibleTypeCustom = ____CollectibleTypeCustom.CollectibleTypeCustom
local ____TrinketTypeCustom = require("enums.TrinketTypeCustom")
local TrinketTypeCustom = ____TrinketTypeCustom.TrinketTypeCustom
local ____globals = require("globals")
local g = ____globals.default
local technology = require("items.technology")
local misc = require("misc")
local postItemPickup = require("postItemPickup")
local roomCleared = require("roomCleared")
local slots = require("slots")
local ____postUpdateCollectible = require("callbacks.postUpdateCollectible")
local postUpdateCollectible = ____postUpdateCollectible.default
function recordLastFireDirection(self)
    local fireDirection = g.p:GetFireDirection()
    if fireDirection ~= Direction.NO_DIRECTION then
        g.run.lastFireDirection = fireDirection
    end
end
function recordHealth(self)
    g.run.health.changedOnThisFrame = false
    g.run.health.restoredLastHealthOnThisFrame = false
    g.run.lastHealth.hearts = g.run.health.hearts
    local hearts = g.p:GetHearts()
    if hearts ~= g.run.health.hearts then
        g.run.health.hearts = hearts
        g.run.health.changedOnThisFrame = true
    end
    g.run.lastHealth.maxHearts = g.run.health.maxHearts
    local maxHearts = g.p:GetMaxHearts()
    if maxHearts ~= g.run.health.maxHearts then
        g.run.health.maxHearts = maxHearts
        g.run.health.changedOnThisFrame = true
    end
    g.run.lastHealth.soulHearts = g.run.health.soulHearts
    local soulHearts = g.p:GetSoulHearts()
    if soulHearts ~= g.run.health.soulHearts then
        g.run.health.soulHearts = soulHearts
        g.run.health.changedOnThisFrame = true
    end
    g.run.lastHealth.blackHearts = g.run.health.blackHearts
    local blackHearts = g.p:GetBlackHearts()
    if blackHearts ~= g.run.health.blackHearts then
        g.run.health.blackHearts = blackHearts
        g.run.health.changedOnThisFrame = true
    end
    g.run.lastHealth.boneHearts = g.run.health.boneHearts
    local boneHearts = g.p:GetBoneHearts()
    if boneHearts ~= g.run.health.boneHearts then
        g.run.health.boneHearts = boneHearts
        g.run.health.changedOnThisFrame = true
    end
end
function checkRoomCleared(self)
    local roomClear = g.r:IsClear()
    if roomClear == g.run.room.clearState then
        return
    end
    g.run.room.clearState = roomClear
    if not roomClear then
        return
    end
    roomCleared:main()
end
function checkItemPickup(self)
    if g.p:IsItemQueueEmpty() then
        checkItemPickupQueueEmpty(nil)
    else
        checkItemPickupQueueNotEmpty(nil)
    end
end
function checkItemPickupQueueEmpty(self)
    if g.run.pickingUpItem == CollectibleType.NULL then
        return
    end
    if g.run.pickingUpItemType == ItemType.PASSIVE or g.run.pickingUpItemType == ItemType.ACTIVE or g.run.pickingUpItemType == ItemType.FAMILIAR then
        postNewItem(nil)
    end
    g.run.pickingUpItem = CollectibleType.NULL
    g.run.pickingUpItemRoom = 0
    g.run.pickingUpItemType = ItemType.NULL
end
function checkItemPickupQueueNotEmpty(self)
    local roomIndex = misc:getRoomIndex()
    if g.run.pickingUpItem ~= CollectibleType.NULL then
        return
    end
    if g.p.QueuedItem.Item == nil then
        return
    end
    g.run.pickingUpItem = g.p.QueuedItem.Item.ID
    g.run.pickingUpItemRoom = roomIndex
    g.run.pickingUpItemType = g.p.QueuedItem.Item.Type
end
function postNewItem(self)
    local postItemFunction = postItemPickup.functionMap:get(g.run.pickingUpItem)
    if postItemFunction ~= nil then
        postItemFunction(nil)
    end
end
function checkTransformations(self)
    for ____, transformation in ipairs(getEnumValues(nil, PlayerForm)) do
        local hasPlayerForm = g.p:HasPlayerForm(transformation)
        local storedHasPlayerForm = g.run.transformations:get(transformation)
        if storedHasPlayerForm == nil then
            error("Failed to get the stored player form for: " .. tostring(transformation))
        end
        if hasPlayerForm ~= storedHasPlayerForm then
            g.run.transformations:set(transformation, hasPlayerForm)
            if transformation == PlayerForm.LEVIATHAN then
                misc:setHealthFromLastFrame()
                misc:killIfNoHealth()
            end
        end
    end
end
function checkFamiliarMultiShot(self)
    if g.run.familiarMultiShot > 0 then
        local ____g_run_0, ____familiarMultiShot_1 = g.run, "familiarMultiShot"
        ____g_run_0[____familiarMultiShot_1] = ____g_run_0[____familiarMultiShot_1] - 1
        local fakeTear = g.p:FireTear(
            g.p.Position,
            g.run.familiarMultiShotVelocity,
            false,
            true,
            false
        )
        fakeTear:Remove()
    end
end
function monstrosTooth(self)
    local gameFrameCount = g.g:GetFrameCount()
    local roomClear = g.r:IsClear()
    if g.run.monstroFrame == 0 or gameFrameCount < g.run.monstroFrame then
        return
    end
    if roomClear then
        g.run.monstroCounters = 0
        g.run.monstroFrame = 0
    else
        g.p:UseActiveItem(
            CollectibleType.MONSTROS_TOOTH,
            false,
            false,
            false,
            false
        )
    end
end
function momsKnife(self)
    if g.run.knifeCooldownFrames > 0 then
        g.run.knifeCooldownFrames = -1
    end
end
function nineVolt(self)
    local gameFrameCount = g.g:GetFrameCount()
    local activeItem = g.p:GetActiveItem()
    local activeItemMaxCharges = misc:getItemMaxCharges(activeItem)
    if g.run.nineVoltFrame == 0 or gameFrameCount <= g.run.nineVoltFrame then
        return
    end
    g.run.nineVoltFrame = 0
    if activeItem == 0 then
        return
    end
    local charge = g.p:GetActiveCharge()
    charge = charge + 1
    if charge > activeItemMaxCharges then
        charge = activeItemMaxCharges
    end
    g.p:SetActiveCharge(charge)
end
function theBlackBean(self)
    if g.run.blackBeanEndFrame == 0 then
        return
    end
    local gameFrameCount = g.g:GetFrameCount()
    if gameFrameCount >= g.run.blackBeanEndFrame then
        g.run.blackBeanEndFrame = 0
        return
    end
    if gameFrameCount % 3 == 0 then
        g.p:UseActiveItem(
            CollectibleType.BEAN,
            false,
            false,
            false,
            false
        )
    end
end
function tinyPlanet(self)
    local roomFrameCount = g.r:GetFrameCount()
    local roomType = g.r:GetType()
    if not g.p:HasCollectible(CollectibleType.TINY_PLANET) then
        return
    end
    if roomType == RoomType.BOSS then
        return
    end
    if roomFrameCount < 900 then
        return
    end
    g.run.room.softlock = true
    g.r:SetClear(true)
    misc:openAllDoors()
end
function isaacsHeart(self)
    if not g.p:HasCollectible(CollectibleType.ISAACS_HEART) then
        return
    end
    if g.p:HasCollectible(CollectibleType.BRIMSTONE) then
        g.p:RemoveCollectible(CollectibleType.BRIMSTONE)
        removeCollectibleFromItemTracker(nil, CollectibleType.BRIMSTONE)
    end
    if g.p:HasCollectible(CollectibleType.ANTI_GRAVITY) then
        g.p:RemoveCollectible(CollectibleType.ANTI_GRAVITY)
        removeCollectibleFromItemTracker(nil, CollectibleType.ANTI_GRAVITY)
    end
end
function judasShadow(self)
    local character = g.p:GetPlayerType()
    if not g.run.judasShadow and character == PlayerType.BLACK_JUDAS then
        g.run.judasShadow = true
        g.p:AddSoulHearts(-4)
        g.p:AddMaxHearts(2, false)
        g.p:AddHearts(2)
        g.p:AddSoulHearts(1)
    end
end
function mongoBaby(self)
    local gameFrameCount = g.g:GetFrameCount()
    do
        local i = #g.run.room.mongoBabyTears - 1
        while i >= 0 do
            local tear = g.run.room.mongoBabyTears[i + 1]
            if gameFrameCount >= tear.frame then
                local familiarTear = spawnTear(
                    nil,
                    TearVariant.BLUE,
                    0,
                    tear.familiar.Position,
                    tear.velocity
                )
                if familiarTear ~= nil then
                    familiarTear.Scale = tear.scale
                    familiarTear.CollisionDamage = tear.damage
                    __TS__ArraySplice(g.run.room.mongoBabyTears, i, 1)
                end
            end
            i = i - 1
        end
    end
end
function fartingBaby(self)
    local gameFrameCount = g.g:GetFrameCount()
    do
        local i = #g.run.room.fartingBabyShockwaves - 1
        while i >= 0 do
            local shockwave = g.run.room.fartingBabyShockwaves[i + 1]
            if (gameFrameCount - shockwave.frame) % 2 == 0 then
                local explosion = Isaac.Spawn(
                    EntityType.EFFECT,
                    EffectVariant.ROCK_EXPLOSION,
                    0,
                    shockwave.position,
                    ZERO_VECTOR,
                    g.p
                )
                local index = g.r:GetGridIndex(shockwave.position)
                g.r:DestroyGrid(index, true)
                sfxManager:Play(
                    SoundEffect.ROCK_CRUMBLE,
                    0.5,
                    0,
                    false,
                    1
                )
                local entities = Isaac.FindInRadius(shockwave.position, 40, EntityPartition.ENEMY)
                for ____, entity in ipairs(entities) do
                    local damage = g.p.Damage * 1.5
                    entity:TakeDamage(
                        damage,
                        DamageFlag.EXPLOSION,
                        EntityRef(explosion),
                        2
                    )
                end
                shockwave.position = shockwave.position + shockwave.velocity
            end
            if not g.r:IsPositionInRoom(shockwave.position, 0) then
                __TS__ArraySplice(g.run.room.fartingBabyShockwaves, i, 1)
            end
            i = i - 1
        end
    end
end
function blackPowder(self)
    if not g.p:HasCollectible(CollectibleType.BLACK_POWDER) then
        return
    end
    local pentagrams = Isaac.FindByType(
        EntityType.EFFECT,
        EffectVariant.PENTAGRAM_BLACK_POWDER,
        -1,
        false,
        false
    )
    if #pentagrams > 0 and not g.run.blackPowderActive then
        g.run.blackPowderActive = true
        g.p:AddCacheFlags(CacheFlag.DAMAGE)
        g.p:EvaluateItems()
    end
    if #pentagrams == 0 and g.run.blackPowderActive then
        g.run.blackPowderActive = false
        g.p:AddCacheFlags(CacheFlag.DAMAGE)
        g.p:EvaluateItems()
    end
end
function brownNugget(self)
    local gameFrameCount = g.g:GetFrameCount()
    if g.run.brownNuggetFrame == 0 or gameFrameCount < g.run.brownNuggetFrame then
        return
    end
    local ____g_run_2, ____brownNuggetCounters_3 = g.run, "brownNuggetCounters"
    ____g_run_2[____brownNuggetCounters_3] = ____g_run_2[____brownNuggetCounters_3] + 1
    g.run.brownNuggetFrame = gameFrameCount + 3
    g.p:UseActiveItem(
        CollectibleType.BROWN_NUGGET,
        false,
        false,
        false,
        false
    )
    if g.run.brownNuggetCounters == 9 then
        g.run.brownNuggetCounters = 0
        g.run.brownNuggetFrame = 0
    end
end
function fireMindImproved(self)
    if not g.p:HasCollectible(CollectibleTypeCustom.FIRE_MIND_IMPROVED) then
        return
    end
    if not misc:isOnTearBuild() then
        g.p:RemoveCollectible(CollectibleTypeCustom.FIRE_MIND_IMPROVED)
        removeCollectibleFromItemTracker(nil, CollectibleTypeCustom.FIRE_MIND_IMPROVED)
        g.p:AddCollectible(CollectibleType.FIRE_MIND, 0, false)
    end
end
function holyMantleNerfed(self)
    if not g.run.holyMantle or not g.p:HasCollectible(CollectibleTypeCustom.HOLY_MANTLE_NERFED) then
        return
    end
    local effects = g.p:GetEffects()
    local numMantleEffects = effects:GetCollectibleEffectNum(CollectibleType.HOLY_MANTLE)
    if numMantleEffects == 0 then
        g.run.holyMantle = false
    end
end
function adrenalineImproved(self)
    if not g.p:HasCollectible(CollectibleTypeCustom.ADRENALINE_IMPROVED) then
        return
    end
    if g.run.health.changedOnThisFrame then
        g.p:AddCacheFlags(CacheFlag.DAMAGE)
        g.p:EvaluateItems()
    end
end
function pennyOnAString(self)
    if not g.p:HasTrinket(TrinketTypeCustom.PENNY_ON_A_STRING) then
        return
    end
    local numCoins = g.p:GetNumCoins()
    if numCoins == g.run.numCoins - 1 then
        g.p:AddCoins(1)
    end
    g.run.numCoins = g.p:GetNumCoins()
end
function checkPillTimer(self)
    local gameFrameCount = g.g:GetFrameCount()
    if g.run.pills.superSadness ~= 0 and gameFrameCount > g.run.pills.superSadness then
        g.run.pills.superSadness = 0
        g.p:AddCacheFlags(CacheFlag.FIRE_DELAY)
        g.p:EvaluateItems()
    end
    if g.run.pills.invincibility ~= 0 then
        if gameFrameCount + 60 > g.run.pills.invincibility then
            if gameFrameCount % 2 == 0 then
                g.p:TryRemoveNullCostume(NullItemID.STATUE)
            else
                g.p:AddNullCostume(NullItemID.STATUE)
            end
        end
        if gameFrameCount > g.run.pills.invincibility then
            g.run.pills.invincibility = 0
            g.p:TryRemoveNullCostume(NullItemID.STATUE)
        end
    end
    if g.run.pills.reallyBadGas ~= 0 then
        if gameFrameCount > g.run.pills.reallyBadGas then
            g.run.pills.reallyBadGas = 0
        else
            local bigChests = Isaac.FindByType(
                EntityType.PICKUP,
                PickupVariant.BIG_CHEST,
                -1,
                false,
                false
            )
            if #bigChests > 0 then
                return
            end
            if misc:hasNoHealth() then
                return
            end
            if gameFrameCount % 3 == 0 then
                g.p:UseActiveItem(
                    CollectibleType.BEAN,
                    false,
                    false,
                    false,
                    false
                )
            end
        end
    end
    if g.run.pills.aether ~= 0 and gameFrameCount > g.run.pills.aether then
        g.run.pills.aether = 0
    end
    if g.run.pills.wallsHaveEyes ~= 0 and gameFrameCount > g.run.pills.wallsHaveEyes then
        g.run.pills.wallsHaveEyes = 0
    end
    if g.run.pills.bladderInfection ~= 0 then
        if gameFrameCount > g.run.pills.bladderInfection then
            g.run.pills.bladderInfection = 0
        else
            local creep = spawnEffect(
                nil,
                EffectVariant.PLAYER_CREEP_LEMON_MISHAP,
                0,
                g.p.Position,
                ZERO_VECTOR,
                g.p
            )
            if creep ~= nil then
                creep.Scale = 2
                creep.SpriteScale = Vector(2, 2)
                local randomNumberBetween1And6 = math.random(6)
                math.randomseed(creep.InitSeed)
                creep:GetSprite():Play(
                    "BiggestBlood0" .. tostring(randomNumberBetween1And6),
                    true
                )
                creep:Update()
            end
        end
    end
    if g.run.pills.scorchedEarth > 0 then
        local ____g_run_pills_4, ____scorchedEarth_5 = g.run.pills, "scorchedEarth"
        ____g_run_pills_4[____scorchedEarth_5] = ____g_run_pills_4[____scorchedEarth_5] - 1
        local position = g.r:GetRandomPosition(1)
        spawnEffect(nil, EffectVariant.HOT_BOMB_FIRE, 0, position)
    end
    if g.run.pills.familiarFrenzy ~= 0 and gameFrameCount > g.run.pills.familiarFrenzy then
        g.run.pills.familiarFrenzy = 0
    end
end
function ____exports.main(self)
    recordLastFireDirection(nil)
    recordHealth(nil)
    checkRoomCleared(nil)
    checkItemPickup(nil)
    checkTransformations(nil)
    checkFamiliarMultiShot(nil)
    postUpdateCollectible(nil)
    slots:postUpdate()
    technology:postUpdate()
    monstrosTooth(nil)
    momsKnife(nil)
    nineVolt(nil)
    theBlackBean(nil)
    tinyPlanet(nil)
    isaacsHeart(nil)
    judasShadow(nil)
    mongoBaby(nil)
    fartingBaby(nil)
    blackPowder(nil)
    brownNugget(nil)
    fireMindImproved(nil)
    holyMantleNerfed(nil)
    adrenalineImproved(nil)
    pennyOnAString(nil)
    checkPillTimer(nil)
end
return ____exports
 end,
["callbacks.preEntitySpawn"] = function(...) 
local ____exports = {}
local collectible
local ____globals = require("globals")
local g = ____globals.default
local ____enums = require("types.enums")
local CollectibleTypeCustom = ____enums.CollectibleTypeCustom
local PickupVariantCustom = ____enums.PickupVariantCustom
function collectible(self, subType, position, velocity, spawner, initSeed)
    local replacedSubType
    repeat
        local ____switch5 = subType
        local ____cond5 = ____switch5 == CollectibleType.BOBS_ROTTEN_HEAD
        if ____cond5 then
            do
                replacedSubType = CollectibleTypeCustom.BOBS_ROTTEN_HEAD_IMPROVED
                break
            end
        end
        ____cond5 = ____cond5 or ____switch5 == CollectibleType.DEAD_CAT
        if ____cond5 then
            do
                replacedSubType = CollectibleType.ONE_UP
                break
            end
        end
        ____cond5 = ____cond5 or ____switch5 == CollectibleType.BUCKET_LARD
        if ____cond5 then
            do
                replacedSubType = CollectibleType.SUPER_BANDAGE
                break
            end
        end
        do
            do
                break
            end
        end
    until true
    if replacedSubType ~= nil then
        g.g:Spawn(
            EntityType.PICKUP,
            PickupVariant.COLLECTIBLE,
            position,
            velocity,
            spawner,
            replacedSubType,
            initSeed
        )
        return {EntityType.PICKUP, PickupVariantCustom.INVISIBLE_PICKUP, 0, 0}
    end
    return nil
end
function ____exports.main(self, entityType, variant, subType, position, velocity, spawner, initSeed)
    if entityType == EntityType.PICKUP and variant == PickupVariant.COLLECTIBLE then
        return collectible(
            nil,
            subType,
            position,
            velocity,
            spawner,
            initSeed
        )
    end
    return nil
end
return ____exports
 end,
["callbacks.preFamiliarCollision"] = function(...) 
local ____exports = {}
local ____globals = require("globals")
local g = ____globals.default
function ____exports.momsRazor(self, familiar, collider)
    local npc = collider:ToNPC()
    if npc == nil then
        return nil
    end
    local gameFrameCount = g.g:GetFrameCount()
    local damage = 10
    if g.p:HasCollectible(CollectibleType.BFFS) then
        damage = damage * 2
    end
    if gameFrameCount % 2 == 0 then
        collider:TakeDamage(
            damage,
            0,
            EntityRef(familiar),
            0
        )
    end
    return true
end
return ____exports
 end,
["callbacks.preProjectileCollision"] = function(...) 
local ____exports = {}
local fartingBaby
local ____globals = require("globals")
local g = ____globals.default
function fartingBaby(self, projectile, collider)
    if collider.Type ~= EntityType.FAMILIAR or collider.Variant ~= FamiliarVariant.FARTING_BABY then
        return
    end
    local ____g_run_0, ____fartingBabyCounters_1 = g.run, "fartingBabyCounters"
    ____g_run_0[____fartingBabyCounters_1] = ____g_run_0[____fartingBabyCounters_1] + 1
    if g.run.fartingBabyCounters ~= 5 then
        return
    end
    g.run.fartingBabyCounters = 0
    local gameFrameCount = g.g:GetFrameCount()
    local ____g_run_room_fartingBabyShockwaves_2 = g.run.room.fartingBabyShockwaves
    ____g_run_room_fartingBabyShockwaves_2[#____g_run_room_fartingBabyShockwaves_2 + 1] = {frame = gameFrameCount, position = projectile.Position, velocity = projectile.Velocity * -2}
end
function ____exports.main(self, projectile, collider)
    fartingBaby(nil, projectile, collider)
    return nil
end
return ____exports
 end,
["callbacks.preTearCollision"] = function(...) 
local ____exports = {}
local lostContact
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local ____globals = require("globals")
local g = ____globals.default
function lostContact(self, tear, collider)
    if collider.Type == EntityType.PROJECTILE and g.p:HasCollectible(CollectibleType.LOST_CONTACT) then
        local ____ = CacheFlag.keep
        local ____ = going
        local ____ = If
        local ____ = we
        return true
    end
end
function ____exports.main(self, tear, collider)
    lostContact(nil, tear, collider)
    return nil
end
return ____exports
 end,
["callbacks.preUseItem"] = function(...) 
local ____exports = {}
local ____globals = require("globals")
local g = ____globals.default
local ____enums = require("types.enums")
local CollectibleTypeCustom = ____enums.CollectibleTypeCustom
function ____exports.isaacsTears(self)
    local vel = Vector(10, 0)
    do
        local i = 0
        while i < 8 do
            vel = vel:Rotated(45)
            local tear = g.p:FireTear(
                g.p.Position,
                vel,
                false,
                false,
                false
            )
            local ____ = CacheFlag.make
            local ____ = it
            local ____ = look
            local ____ = more
            local ____ = impressive
            local buff = 2.5
            tear.CollisionDamage = g.p.Damage * buff
            tear.Scale = buff
            tear.KnockbackMultiplier = 20
            i = i + 1
        end
    end
    g.p:AnimateCollectible(CollectibleType.ISAACS_TEARS, "UseItem", "PlayerPickup")
    return true
end
function ____exports.voidItem(self)
    local megaBlasts = Isaac.FindByType(
        EntityType.PICKUP,
        PickupVariant.COLLECTIBLE,
        CollectibleTypeCustom.MEGA_BLAST_SINGLE,
        false,
        false
    )
    if #megaBlasts > 0 then
        g.p:AnimateSad()
        RacingPlusGlobals.run.rechargeItemFrame = g.g:GetFrameCount() + 1
        return true
    end
    return false
end
return ____exports
 end,
["path"] = function(...) 
local ____exports = {}
local getCoordsFromGridIndex, getGridIndexFromXY
local ____globals = require("globals")
local g = ____globals.default
require("lib.astar")
require("lib.tiledmaphandler")
function getCoordsFromGridIndex(self, gridIndex)
    local y = math.floor(gridIndex / 13)
    local x = gridIndex - y * 13
    return {x = x, y = y}
end
function getGridIndexFromXY(self, coords)
    local x = coords.x - 1
    local y = coords.y - 1
    return y * 13 + x
end
local GridValue = GridValue or ({})
GridValue.ROOM = 0
GridValue[GridValue.ROOM] = "ROOM"
GridValue.NULL = 1
GridValue[GridValue.NULL] = "NULL"
function ____exports.findMidBoss(self, percent)
    local startingRoomIndex = g.l:GetStartingRoomIndex()
    local rooms = g.l:GetRooms()
    local grid = {}
    do
        local i = 0
        while i < 13 do
            local row = {}
            do
                local j = 0
                while j < 13 do
                    row[#row + 1] = GridValue.NULL
                    j = j + 1
                end
            end
            grid[#grid + 1] = row
            i = i + 1
        end
    end
    local bossRoomIndex
    do
        local i = 0
        while i < rooms.Size do
            do
                local roomDesc = rooms:Get(i)
                if roomDesc == nil then
                    goto __continue5
                end
                local roomIndexSafe = roomDesc.SafeGridIndex
                local roomData = roomDesc.Data
                local roomType = roomData.Type
                local roomShape = roomData.Shape
                if roomType == RoomType.BOSS then
                    bossRoomIndex = roomIndexSafe
                end
                if roomType == RoomType.DEFAULT or roomType == RoomType.BOSS then
                    local ____getCoordsFromGridIndex_result_0 = getCoordsFromGridIndex(nil, roomIndexSafe)
                    local x = ____getCoordsFromGridIndex_result_0.x
                    local y = ____getCoordsFromGridIndex_result_0.y
                    grid[y + 1][x + 1] = GridValue.ROOM
                    if roomShape == RoomShape.ROOMSHAPE_1x2 or roomShape == RoomShape.ROOMSHAPE_IIV then
                        grid[y + 1 + 1][x + 1] = GridValue.ROOM
                    elseif roomShape == RoomShape.ROOMSHAPE_2x1 or roomShape == RoomShape.ROOMSHAPE_IIH then
                        grid[y + 1][x + 1 + 1] = GridValue.ROOM
                    elseif roomShape == RoomShape.ROOMSHAPE_2x2 then
                        grid[y + 1][x + 1 + 1] = GridValue.ROOM
                        grid[y + 1 + 1][x + 1] = GridValue.ROOM
                        grid[y + 1 + 1][x + 1 + 1] = GridValue.ROOM
                    elseif roomShape == RoomShape.ROOMSHAPE_LTL then
                        grid[y + 1 + 1][x + 1] = GridValue.ROOM
                        grid[y + 1 + 1][x] = GridValue.ROOM
                    elseif roomShape == RoomShape.ROOMSHAPE_LTR then
                        grid[y + 1 + 1][x + 1] = GridValue.ROOM
                        grid[y + 1 + 1][x + 1 + 1] = GridValue.ROOM
                    elseif roomShape == RoomShape.ROOMSHAPE_LBL then
                        grid[y + 1][x + 1 + 1] = GridValue.ROOM
                        grid[y + 1 + 1][x + 1 + 1] = GridValue.ROOM
                    elseif roomShape == RoomShape.ROOMSHAPE_LBR then
                        grid[y + 1][x + 1 + 1] = GridValue.ROOM
                        grid[y + 1 + 1][x + 1] = GridValue.ROOM
                    end
                    Isaac.DebugString(("Plotted room " .. tostring(i)) .. ":")
                    Isaac.DebugString("  ID: " .. tostring(roomData.Variant))
                    Isaac.DebugString("  Index: " .. tostring(roomIndexSafe))
                    Isaac.DebugString(((("  Coordinates: (" .. tostring(x)) .. ", ") .. tostring(y)) .. ")")
                    Isaac.DebugString("  Shape: " .. tostring(roomShape))
                end
            end
            ::__continue5::
            i = i + 1
        end
    end
    local startingRoomCoords = getCoordsFromGridIndex(nil, startingRoomIndex)
    if bossRoomIndex == nil then
        error("Failed to find the boss room when iterating through the rooms.")
    end
    local bossRoomCoords = getCoordsFromGridIndex(nil, bossRoomIndex)
    Isaac.DebugString("Grid:")
    Isaac.DebugString("     1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16")
    do
        local i = 0
        while i < #grid do
            local rowString = ("  " .. tostring(i)) .. " "
            if i < 10 then
                rowString = rowString .. " "
            end
            do
                local j = 0
                while j < #grid[i + 1] do
                    local gridValue = grid[i + 1][j + 1]
                    if gridValue == GridValue.NULL then
                        rowString = rowString .. "  "
                    elseif gridValue == GridValue.ROOM then
                        rowString = rowString .. tostring(gridValue)
                        if i == startingRoomCoords.y and j == startingRoomCoords.x then
                            rowString = rowString .. "S"
                        elseif i == bossRoomCoords.y and j == bossRoomCoords.x then
                            rowString = rowString .. "B"
                        end
                    end
                    rowString = rowString .. " "
                    j = j + 1
                end
            end
            Isaac.DebugString(rowString)
            i = i + 1
        end
    end
    local maphandler = TiledMapHandler(grid)
    local astar = AStar(maphandler)
    startingRoomCoords.x = startingRoomCoords.x + 1
    startingRoomCoords.y = startingRoomCoords.y + 1
    bossRoomCoords.x = bossRoomCoords.x + 1
    bossRoomCoords.y = bossRoomCoords.y + 1
    Isaac.ConsoleOutput(((("STARTING ROOM COORDS: (" .. tostring(startingRoomCoords.x)) .. ", ") .. tostring(startingRoomCoords.y)) .. ")")
    Isaac.ConsoleOutput(((("BOSS ROOM COORDS: (" .. tostring(bossRoomCoords.x)) .. ", ") .. tostring(bossRoomCoords.y)) .. ")")
    local path = astar:findPath(startingRoomCoords, bossRoomCoords)
    local nodes = path:getNodes()
    Isaac.DebugString("Path:")
    do
        local i = 0
        while i < #nodes do
            local node = nodes[i + 1]
            local loc = node.location
            Isaac.DebugString(((((tostring(i) .. ".  (") .. tostring(loc.x)) .. ", ") .. tostring(loc.y)) .. ")")
            i = i + 1
        end
    end
    local nodeIndex = math.floor(#nodes * percent)
    nodeIndex = nodeIndex - 1
    local inBetweenNodeCoords = nodes[nodeIndex + 1].location
    return getGridIndexFromXY(nil, inBetweenNodeCoords)
end
return ____exports
 end,
["callbacks.useCard"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local ____exports = {}
local deleteNearestHeart
local ____constants = require("constants")
local ZERO_VECTOR = ____constants.ZERO_VECTOR
local ____globals = require("globals")
local g = ____globals.default
local misc = require("misc")
local path = require("path")
local ____enums = require("types.enums")
local CollectibleTypeCustom = ____enums.CollectibleTypeCustom
function deleteNearestHeart(self)
    local hearts = Isaac.FindByType(
        EntityType.PICKUP,
        PickupVariant.HEART,
        HeartSubType.HEART_FULL,
        false,
        false
    )
    local nearestPickup = nil
    local nearestPickupDistance = nil
    for ____, heart in ipairs(hearts) do
        do
            local pickup = heart:ToPickup()
            if pickup == nil then
                goto __continue13
            end
            if pickup.FrameCount <= 1 and pickup.SpawnerType == EntityType.PLAYER and not pickup.Touched and pickup.Price == 0 and pickup.State ~= 1 then
                local distanceToPlayer = g.p.Position:Distance(pickup.Position)
                if nearestPickup == nil or nearestPickupDistance == nil then
                    nearestPickup = pickup
                    nearestPickupDistance = distanceToPlayer
                elseif distanceToPlayer < nearestPickupDistance then
                    nearestPickup = pickup
                    nearestPickupDistance = distanceToPlayer
                end
            end
        end
        ::__continue13::
    end
    if nearestPickup ~= nil then
        nearestPickup.State = 1
        nearestPickup:Remove()
    end
end
function ____exports.magician(self)
    if not g.p:HasCollectible(CollectibleTypeCustom.TECHNOLOGY_2_5) then
        return
    end
    local lasers = Isaac.FindByType(
        EntityType.LASER,
        LaserVariant.LASER_THIN_RED,
        -1,
        false,
        false
    )
    for ____, entity in ipairs(lasers) do
        if entity.SpawnerType == EntityType.PLAYER then
            local laser = entity:ToLaser()
            if laser ~= nil then
                laser.TearFlags = laser.TearFlags | TearFlag.HOMING
            end
        end
    end
end
function ____exports.emperor(self)
    if RacingPlusGlobals.run.bossCommand then
        return
    end
    local gridIndex = path:findMidBoss(0.66)
    g.l.LeaveDoor = -1
    g.g:StartRoomTransition(gridIndex, Direction.NO_DIRECTION, RoomTransition.TRANSITION_TELEPORT)
    Isaac.DebugString("Nerfed emperor to room. " .. tostring(gridIndex))
end
function ____exports.lovers(self)
    do
        local i = 0
        while i < 2 do
            deleteNearestHeart(nil)
            i = i + 1
        end
    end
    Isaac.Spawn(
        EntityType.PICKUP,
        PickupVariant.BED,
        0,
        g.r:FindFreePickupSpawnPosition(g.p.Position, 1, true),
        ZERO_VECTOR,
        g.p
    )
end
function ____exports.wheelOfFortune(self)
    local slotVariant
    if g.run.spawningRestock then
        g.run.spawningRestock = false
        slotVariant = SlotVariant.SHOP_RESTOCK_MACHINE
    else
        g.run.wheelOfFortuneSeed = misc:incrementRNG(g.run.wheelOfFortuneSeed)
        math.randomseed(g.run.wheelOfFortuneSeed)
        local slotChoice = math.random(1, 3)
        if slotChoice == 1 then
            slotVariant = SlotVariant.SLOT_MACHINE
        elseif slotChoice == 2 then
            slotVariant = SlotVariant.FORTUNE_TELLING_MACHINE
        elseif slotChoice == 3 then
            slotVariant = SlotVariant.SHOP_RESTOCK_MACHINE
        else
            error("Unknown slot choice: " .. tostring(slotChoice))
        end
    end
    local slots = Isaac.FindByType(
        EntityType.SLOT,
        -1,
        -1,
        false,
        false
    )
    for ____, slot in ipairs(slots) do
        if slot.FrameCount == 0 then
            g.g:Spawn(
                EntityType.SLOT,
                slotVariant,
                slot.Position,
                slot.Velocity,
                slot.Parent,
                slot.SubType,
                slot.InitSeed
            )
            Isaac.Spawn(
                EntityType.EFFECT,
                EffectVariant.POOF01,
                3,
                slot.Position,
                ZERO_VECTOR,
                nil
            )
            slot:Remove()
        end
    end
end
function ____exports.sun(self)
    local rooms = g.l:GetRooms()
    do
        local i = 0
        while i < rooms.Size do
            local roomDesc = rooms:Get(i)
            if roomDesc ~= nil then
                local roomIndexSafe = roomDesc.SafeGridIndex
                local room = g.l:GetRoomByIdx(roomIndexSafe)
                room.DisplayFlags = 0
            end
            i = i + 1
        end
    end
    local randomIndexes = {}
    repeat
        do
            local randomIndex
            repeat
                do
                    g.run.sunCardRNG = misc:incrementRNG(g.run.sunCardRNG)
                    math.randomseed(g.run.sunCardRNG)
                    randomIndex = math.random(0, rooms.Size - 1)
                end
            until not __TS__ArrayIncludes(randomIndexes, randomIndex)
            randomIndexes[#randomIndexes + 1] = randomIndex
        end
    until not (#randomIndexes < 3)
    for ____, randomIndex in ipairs(randomIndexes) do
        local roomDesc = rooms:Get(randomIndex)
        if roomDesc ~= nil then
            local roomIndexSafe = roomDesc.SafeGridIndex
            local room = g.l:GetRoomByIdx(roomIndexSafe)
            room.DisplayFlags = 5
        end
    end
    g.l:UpdateVisibility()
end
function ____exports.world(self)
    local rooms = g.l:GetRooms()
    if g.l:GetStateFlag(LevelStateFlag.STATE_COMPASS_EFFECT) then
        return
    end
    do
        local i = 0
        while i < rooms.Size do
            do
                local roomDesc = rooms:Get(i)
                if roomDesc == nil then
                    goto __continue40
                end
                local roomIndexSafe = roomDesc.SafeGridIndex
                local roomData = roomDesc.Data
                local roomType = roomData.Type
                if roomType ~= RoomType.BOSS then
                    local room = g.l:GetRoomByIdx(roomIndexSafe)
                    room.DisplayFlags = 0
                end
            end
            ::__continue40::
            i = i + 1
        end
    end
    g.l:UpdateVisibility()
end
function ____exports.ansuz(self)
    local rooms = g.l:GetRooms()
    do
        local i = 0
        while i < rooms.Size do
            local roomDesc = rooms:Get(i)
            if roomDesc ~= nil then
                local roomIndexSafe = roomDesc.SafeGridIndex
                local room = g.l:GetRoomByIdx(roomIndexSafe)
                room.DisplayFlags = room.DisplayFlags & ~(1 << 2)
            end
            i = i + 1
        end
    end
    g.l:UpdateVisibility()
end
return ____exports
 end,
["callbacks.useItem"] = function(...) 
local ____exports = {}
local ____globals = require("globals")
local g = ____globals.default
local misc = require("misc")
local postItemPickup = require("postItemPickup")
local ____enums = require("types.enums")
local CollectibleTypeCustom = ____enums.CollectibleTypeCustom
function ____exports.main(self, collectibleType)
    if not g.p:HasCollectible(CollectibleType.NINE_VOLT) then
        return true
    end
    local maxCharges = misc:getItemMaxCharges(collectibleType)
    if maxCharges < 3 then
        return true
    end
    g.run.nineVoltFrame = g.g:GetFrameCount()
    return true
end
function ____exports.bookOfRevelations(self)
    g.p:AddSoulHearts(-1)
    return true
end
function ____exports.theNail(self)
    g.p:AddSoulHearts(-1)
    return true
end
function ____exports.monstrosTooth(self)
    local ____g_run_0, ____monstroCounters_1 = g.run, "monstroCounters"
    ____g_run_0[____monstroCounters_1] = ____g_run_0[____monstroCounters_1] + 1
    if g.run.monstroCounters == 3 then
        g.run.monstroCounters = 0
        g.run.monstroFrame = 0
    else
        g.run.monstroFrame = g.g:GetFrameCount() + 15
    end
    return true
end
function ____exports.bookOfSecrets(self)
    if g.l:GetStateFlag(LevelStateFlag.STATE_BLUE_MAP_EFFECT) then
        postItemPickup:blueMap()
    end
    return true
end
function ____exports.satanicBible(self)
    g.p:AddBlackHearts(-1)
    return true
end
function ____exports.brownNugget(self)
    if g.run.brownNuggetCounters == 0 then
        g.run.brownNuggetCounters = 1
        g.run.brownNuggetFrame = g.g:GetFrameCount() + 3
    end
    return true
end
function ____exports.holyPoop(self)
    Isaac.GridSpawn(GridEntityType.POOP, PoopVariant.POOP_WHITE, g.p.Position, false)
    sfxManager:Play(
        SoundEffect.FART,
        1,
        0,
        false,
        1
    )
    return true
end
function ____exports.momsBraImproved(self)
    g.p:UseActiveItem(
        CollectibleType.MOMS_BRA,
        true,
        false,
        false,
        false
    )
    return true
end
function ____exports.monsterManualImproved(self)
    g.p:UseActiveItem(
        CollectibleType.MONSTER_MANUAL,
        true,
        false,
        false,
        false
    )
    return true
end
function ____exports.boxOfSpidersImproved(self)
    g.p:UseActiveItem(
        CollectibleType.BOX_OF_SPIDERS,
        true,
        false,
        false,
        false
    )
    return true
end
function ____exports.megaBlastSingle(self)
    g.p:UseActiveItem(
        CollectibleType.MEGA_SATANS_BREATH,
        true,
        false,
        false,
        false
    )
    g.p:RemoveCollectible(CollectibleTypeCustom.MEGA_BLAST_SINGLE)
    return true
end
function ____exports.clockworkAssembly(self)
    g.run.spawningRestock = true
    RacingPlusGlobals.run.streakIgnore = true
    g.p:UseCard(Card.WHEEL_OF_FORTUNE)
    return true
end
function ____exports.chargingStation(self)
    if RacingPlusSchoolbag:isItemFullyCharged() then
        return false
    end
    local coins = g.p:GetNumCoins()
    if coins == 0 then
        return false
    end
    g.p:AddCoins(-1)
    RacingPlusSchoolbag:addCharge(true)
    g.p:AnimateCollectible(CollectibleTypeCustom.CHARGING_STATION, "UseItem", "PlayerPickup")
    sfxManager:Play(
        SoundEffect.BEEP,
        1,
        0,
        false,
        1
    )
    return true
end
return ____exports
 end,
["callbacks.usePill"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local animateUse
local ____constants = require("constants")
local ZERO_VECTOR = ____constants.ZERO_VECTOR
local ____globals = require("globals")
local g = ____globals.default
local pills = require("pills")
local postNewRoom = require("callbacks.postNewRoom")
function animateUse(self, thisPillEffect)
    local thisPillColor
    for ____, ____value in __TS__Iterator(g.run.pills.effects:entries()) do
        local pillColor = ____value[1]
        local pillEffect = ____value[2]
        if pillEffect == thisPillEffect then
            thisPillColor = pillColor
        end
    end
    if thisPillColor == nil then
        thisPillColor = PillColor.PILL_BLUE_BLUE
    end
    g.p:AnimatePill(thisPillColor, "UseItem")
    local pillName = itemConfig:GetPillEffect(thisPillEffect).Name
    RacingPlusGlobals.run.streakText = pillName
end
function ____exports.damageUp(self)
    local damageAmount = 2
    if g.p:HasCollectible(CollectibleType.PHD) then
        damageAmount = damageAmount * 2
    end
    local ____g_run_pills_0, ____damageUp_1 = g.run.pills, "damageUp"
    ____g_run_pills_0[____damageUp_1] = ____g_run_pills_0[____damageUp_1] + damageAmount
    g.p:AddCacheFlags(CacheFlag.DAMAGE)
    g.p:EvaluateItems()
    pills:animateHappy()
end
function ____exports.tearDelayDown(self)
    local delayAmount = 1
    if g.p:HasCollectible(CollectibleType.PHD) then
        delayAmount = 2
    end
    local ____g_run_pills_2, ____tearDelayDown_3 = g.run.pills, "tearDelayDown"
    ____g_run_pills_2[____tearDelayDown_3] = ____g_run_pills_2[____tearDelayDown_3] + delayAmount
    g.p:AddCacheFlags(CacheFlag.FIRE_DELAY)
    g.p:EvaluateItems()
    pills:animateHappy()
end
function ____exports.dealAffinity(self)
    local stage = g.l:GetStage()
    if stage == 1 or stage == 2 then
        pills:animateHappy()
        return
    end
    local lastDevilStage = RacingPlusGlobals.run.lastDDLevel
    local levelModifier = 1
    if g.p:HasCollectible(CollectibleType.PHD) then
        levelModifier = 2
    end
    local newLastDevilStage = lastDevilStage - levelModifier
    if newLastDevilStage < 0 then
        newLastDevilStage = 0
    end
    g.g:SetLastDevilRoomStage(newLastDevilStage)
    pills:animateHappy()
end
function ____exports.boneAffinity(self, pillEffect)
    local numBones = 10
    if g.p:HasCollectible(CollectibleType.PHD) then
        numBones = numBones * 2
    end
    do
        local i = 0
        while i < numBones do
            Isaac.Spawn(
                EntityType.FAMILIAR,
                FamiliarVariant.BONE_ORBITAL,
                0,
                g.p.Position,
                ZERO_VECTOR,
                g.p
            )
            i = i + 1
        end
    end
    animateUse(nil, pillEffect)
end
function ____exports.restock(self, pillEffect)
    g.run.spawningRestock = true
    g.p:UseCard(Card.WHEEL_OF_FORTUNE)
    if g.p:HasCollectible(CollectibleType.PHD) then
        g.run.spawningRestock = true
        g.p:UseCard(Card.WHEEL_OF_FORTUNE)
    end
    animateUse(nil, pillEffect)
end
function ____exports.goldenDump(self, pillEffect)
    local position = g.p.Position
    Isaac.GridSpawn(GridEntityType.POOP, PoopVariant.POOP_GOLDEN, position, false)
    if g.p:HasCollectible(CollectibleType.PHD) then
        position = g.r:FindFreePickupSpawnPosition(g.p.Position, 1, true)
        Isaac.GridSpawn(GridEntityType.POOP, PoopVariant.POOP_GOLDEN, position, false)
    end
    sfxManager:Play(
        SoundEffect.FART,
        1,
        0,
        false,
        1
    )
    g.r:TurnGold()
    animateUse(nil, pillEffect)
end
function ____exports.glimpse(self, pillEffect)
    g.l:ApplyCompassEffect(false)
    animateUse(nil, pillEffect)
end
function ____exports.superSadness(self)
    g.run.pills.superSadness = g.g:GetFrameCount() + pills:getDuration()
    g.p:AddCacheFlags(CacheFlag.FIRE_DELAY)
    g.p:EvaluateItems()
    pills:animateHappy()
end
function ____exports.invincibility(self)
    g.run.pills.invincibility = g.g:GetFrameCount() + pills:getDuration()
    g.p:AddNullCostume(NullItemID.STATUE)
    pills:animateHappy()
end
function ____exports.reallyBadGas(self, pillEffect)
    g.run.pills.reallyBadGas = g.g:GetFrameCount() + pills:getDuration()
    animateUse(nil, pillEffect)
end
function ____exports.aether(self)
    g.run.pills.aether = g.g:GetFrameCount() + pills:getDuration()
    pills:animateHappy()
end
function ____exports.wallsHaveEyes(self)
    g.run.pills.wallsHaveEyes = g.g:GetFrameCount() + pills:getDuration()
    pills:animateHappy()
end
function ____exports.bladderInfection(self, pillEffect)
    g.run.pills.bladderInfection = g.g:GetFrameCount() + pills:getDuration()
    animateUse(nil, pillEffect)
end
function ____exports.scorchedEarth(self, pillEffect)
    local numFires = 80
    if g.p:HasCollectible(CollectibleType.PHD) then
        numFires = numFires * 2
    end
    g.run.pills.scorchedEarth = numFires
    animateUse(nil, pillEffect)
end
function ____exports.familiarFrenzy(self, pillEffect)
    g.run.pills.familiarFrenzy = g.g:GetFrameCount() + pills:getDuration()
    postNewRoom:familiarFrenzy()
    animateUse(nil, pillEffect)
end
function ____exports.unlock(self)
    g.p:UseActiveItem(
        CollectibleType.DADS_KEY,
        true,
        false,
        false,
        false
    )
end
return ____exports
 end,
["main"] = function(...) 
local ____exports = {}
local entityTakeDmg = require("callbacks.entityTakeDmg")
local evaluateCache = require("callbacks.evaluateCache")
local executeCmd = require("callbacks.executeCmd")
local familiarInit = require("callbacks.familiarInit")
local familiarUpdate = require("callbacks.familiarUpdate")
local getCard = require("callbacks.getCard")
local getPillColor = require("callbacks.getPillColor")
local getPillEffect = require("callbacks.getPillEffect")
local NPCUpdate = require("callbacks.NPCUpdate")
local postBombUpdate = require("callbacks.postBombUpdate")
local postEffectUpdate = require("callbacks.postEffectUpdate")
local postFireTear = require("callbacks.postFireTear")
local postGameStarted = require("callbacks.postGameStarted")
local postKnifeUpdate = require("callbacks.postKnifeUpdate")
local postLaserInit = require("callbacks.postLaserInit")
local postLaserUpdate = require("callbacks.postLaserUpdate")
local postNewLevel = require("callbacks.postNewLevel")
local postNewRoom = require("callbacks.postNewRoom")
local postPickupInit = require("callbacks.postPickupInit")
local postPickupRender = require("callbacks.postPickupRender")
local postPickupUpdate = require("callbacks.postPickupUpdate")
local postPlayerInit = require("callbacks.postPlayerInit")
local postProjectileUpdate = require("callbacks.postProjectileUpdate")
local postRender = require("callbacks.postRender")
local postTearUpdate = require("callbacks.postTearUpdate")
local postUpdate = require("callbacks.postUpdate")
local preEntitySpawn = require("callbacks.preEntitySpawn")
local preFamiliarCollision = require("callbacks.preFamiliarCollision")
local preProjectileCollision = require("callbacks.preProjectileCollision")
local preTearCollision = require("callbacks.preTearCollision")
local preUseItem = require("callbacks.preUseItem")
local useCard = require("callbacks.useCard")
local useItem = require("callbacks.useItem")
local usePill = require("callbacks.usePill")
local ____constants = require("constants")
local VERSION = ____constants.VERSION
local ____isaacScriptInit = require("isaacScriptInit")
local isaacScriptInit = ____isaacScriptInit.default
local catalog = require("items.catalog")
local ____enums = require("types.enums")
local CollectibleTypeCustom = ____enums.CollectibleTypeCustom
local EffectVariantCustom = ____enums.EffectVariantCustom
local PillEffectCustom = ____enums.PillEffectCustom
isaacScriptInit(nil)
local RPRebalanced = RegisterMod("Racing+ Rebalanced", 1)
RacingPlusRebalancedVersion = VERSION
RPRebalanced:AddCallback(ModCallbacks.MC_NPC_UPDATE, NPCUpdate.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_UPDATE, postUpdate.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_RENDER, postRender.main)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_PLAYER_INIT, postPlayerInit.main)
RPRebalanced:AddCallback(ModCallbacks.MC_ENTITY_TAKE_DMG, entityTakeDmg.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_GAME_STARTED, postGameStarted.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_NEW_LEVEL, postNewLevel.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_NEW_ROOM, postNewRoom.main)
RPRebalanced:AddCallback(ModCallbacks.MC_GET_CARD, getCard.main)
RPRebalanced:AddCallback(ModCallbacks.MC_EXECUTE_CMD, executeCmd.main)
RPRebalanced:AddCallback(ModCallbacks.MC_PRE_ENTITY_SPAWN, preEntitySpawn.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_PICKUP_UPDATE, postPickupUpdate.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_TEAR_UPDATE, postTearUpdate.main)
RPRebalanced:AddCallback(ModCallbacks.MC_PRE_TEAR_COLLISION, preTearCollision.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_PROJECTILE_UPDATE, postProjectileUpdate.main)
RPRebalanced:AddCallback(ModCallbacks.MC_PRE_PROJECTILE_COLLISION, preProjectileCollision.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_LASER_INIT, postLaserInit.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_LASER_UPDATE, postLaserUpdate.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_KNIFE_UPDATE, postKnifeUpdate.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_BOMB_UPDATE, postBombUpdate.main)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_FIRE_TEAR, postFireTear.main)
RPRebalanced:AddCallback(ModCallbacks.MC_GET_PILL_COLOR, getPillColor.main)
RPRebalanced:AddCallback(ModCallbacks.MC_GET_PILL_EFFECT, getPillEffect.main)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.bookOfRevelations, CollectibleType.BOOK_REVELATIONS)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.theNail, CollectibleType.THE_NAIL)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.monstrosTooth, CollectibleType.MONSTROS_TOOTH)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.bookOfSecrets, CollectibleType.BOOK_OF_SECRETS)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.satanicBible, CollectibleType.SATANIC_BIBLE)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.brownNugget, CollectibleType.BROWN_NUGGET)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.holyPoop, CollectibleTypeCustom.HOLY_POOP)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.momsBraImproved, CollectibleTypeCustom.MOMS_BRA_IMPROVED)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.monsterManualImproved, CollectibleTypeCustom.MONSTER_MANUAL_IMPROVED)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.boxOfSpidersImproved, CollectibleTypeCustom.BOX_OF_SPIDERS_IMPROVED)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.megaBlastSingle, CollectibleTypeCustom.MEGA_BLAST_SINGLE)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.clockworkAssembly, CollectibleTypeCustom.CLOCKWORK_ASSEMBLY)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, useItem.chargingStation, CollectibleTypeCustom.CHARGING_STATION)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_ITEM, catalog.useItem, CollectibleTypeCustom.CATALOG)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_CARD, useCard.magician, Card.MAGICIAN)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_CARD, useCard.emperor, Card.EMPEROR)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_CARD, useCard.lovers, Card.LOVERS)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_CARD, useCard.wheelOfFortune, Card.WHEEL_OF_FORTUNE)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_CARD, useCard.sun, Card.SUN)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_CARD, useCard.world, Card.WORLD)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_CARD, useCard.ansuz, Card.RUNE_ANSUZ)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_UPDATE, familiarUpdate.leech, FamiliarVariant.LEECH)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_UPDATE, familiarUpdate.yoListen, FamiliarVariant.YO_LISTEN)
local preventStackingFamiliarVariants = {
    FamiliarVariant.LITTLE_CHUBBY,
    FamiliarVariant.DEAD_BIRD,
    FamiliarVariant.EVES_BIRD_FOOT,
    FamiliarVariant.LEECH,
    FamiliarVariant.LIL_HAUNT,
    FamiliarVariant.SISSY_LONGLEGS,
    FamiliarVariant.LIL_GURDY,
    FamiliarVariant.BIG_CHUBBY
}
for ____, familiarVariant in ipairs(preventStackingFamiliarVariants) do
    RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_UPDATE, familiarUpdate.preventStacking, familiarVariant)
end
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.littleChubby, FamiliarVariant.LITTLE_CHUBBY)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.deadBird, FamiliarVariant.DEAD_BIRD)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.deadBird, FamiliarVariant.EVES_BIRD_FOOT)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.daddyLonglegs, FamiliarVariant.DADDY_LONGLEGS)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.sacrificialDagger, FamiliarVariant.SACRIFICIAL_DAGGER)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.leech, FamiliarVariant.LEECH)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.lilHaunt, FamiliarVariant.LIL_HAUNT)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.blueBabysOnlyFriend, FamiliarVariant.BLUEBABYS_ONLY_FRIEND)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.gemini, FamiliarVariant.GEMINI)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.lilGurdy, FamiliarVariant.LIL_GURDY)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.bumbo, FamiliarVariant.BUMBO)
RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.bigChubby, FamiliarVariant.BIG_CHUBBY)
local disableVanillaShootingFamiliarVariants = {
    FamiliarVariant.BROTHER_BOBBY,
    FamiliarVariant.LITTLE_GISH,
    FamiliarVariant.LITTLE_STEVEN,
    FamiliarVariant.ROBO_BABY,
    FamiliarVariant.SISTER_MAGGY,
    FamiliarVariant.GHOST_BABY,
    FamiliarVariant.HARLEQUIN_BABY,
    FamiliarVariant.RAINBOW_BABY,
    FamiliarVariant.ISAACS_HEAD,
    FamiliarVariant.MONGO_BABY,
    FamiliarVariant.SERAPHIM,
    FamiliarVariant.LIL_LOKI
}
for ____, familiarVariant in ipairs(disableVanillaShootingFamiliarVariants) do
    RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.disableVanillaShooting, familiarVariant)
end
local damage7FamiliarVariants = {FamiliarVariant.FOREVER_ALONE, FamiliarVariant.DISTANT_ADMIRATION, FamiliarVariant.FRIEND_ZONE}
for ____, familiarVariant in ipairs(damage7FamiliarVariants) do
    RPRebalanced:AddCallback(ModCallbacks.MC_FAMILIAR_INIT, familiarInit.damage7, familiarVariant)
end
RPRebalanced:AddCallback(ModCallbacks.MC_EVALUATE_CACHE, evaluateCache.damage, CacheFlag.DAMAGE)
RPRebalanced:AddCallback(ModCallbacks.MC_EVALUATE_CACHE, evaluateCache.fireDelay, CacheFlag.FIRE_DELAY)
RPRebalanced:AddCallback(ModCallbacks.MC_EVALUATE_CACHE, evaluateCache.shotSpeed, CacheFlag.SHOTSPEED)
RPRebalanced:AddCallback(ModCallbacks.MC_EVALUATE_CACHE, evaluateCache.speed, CacheFlag.SPEED)
RPRebalanced:AddCallback(ModCallbacks.MC_EVALUATE_CACHE, evaluateCache.luck, CacheFlag.LUCK)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.damageUp, PillEffectCustom.PILLEFFECT_DAMAGE_UP)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.tearDelayDown, PillEffectCustom.PILLEFFECT_TEAR_DELAY_DOWN)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.dealAffinity, PillEffectCustom.PILLEFFECT_DEAL_AFFINITY)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.boneAffinity, PillEffectCustom.PILLEFFECT_BONE_AFFINITY)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.restock, PillEffectCustom.PILLEFFECT_RESTOCK)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.goldenDump, PillEffectCustom.PILLEFFECT_GOLDEN_DUMP)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.glimpse, PillEffectCustom.PILLEFFECT_GLIMPSE)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.superSadness, PillEffectCustom.PILLEFFECT_SUPER_SADNESS)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.invincibility, PillEffectCustom.PILLEFFECT_INVINCIBILITY)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.reallyBadGas, PillEffectCustom.PILLEFFECT_REALLY_BAD_GAS)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.aether, PillEffectCustom.PILLEFFECT_AETHER)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.wallsHaveEyes, PillEffectCustom.PILLEFFECT_WALLS_HAVE_EYES)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.bladderInfection, PillEffectCustom.PILLEFFECT_BLADDER_INFECTION)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.scorchedEarth, PillEffectCustom.PILLEFFECT_SCORCHED_EARTH)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.familiarFrenzy, PillEffectCustom.PILLEFFECT_FAMILIAR_FRENZY)
RPRebalanced:AddCallback(ModCallbacks.MC_USE_PILL, usePill.unlock, PillEffectCustom.PILLEFFECT_UNLOCK)
RPRebalanced:AddCallback(ModCallbacks.MC_PRE_USE_ITEM, preUseItem.isaacsTears, CollectibleType.ISAACS_TEARS)
RPRebalanced:AddCallback(ModCallbacks.MC_PRE_USE_ITEM, preUseItem.voidItem, CollectibleType.VOID)
RPRebalanced:AddCallback(ModCallbacks.MC_PRE_USE_ITEM, catalog.preUseItem, CollectibleTypeCustom.CATALOG)
RPRebalanced:AddCallback(ModCallbacks.MC_PRE_FAMILIAR_COLLISION, preFamiliarCollision.momsRazor, FamiliarVariant.MOMS_RAZOR)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_PICKUP_INIT, postPickupInit.tarotCard, PickupVariant.TAROTCARD)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_PICKUP_UPDATE, postPickupUpdate.heart, PickupVariant.HEART)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_PICKUP_UPDATE, postPickupUpdate.pill, PickupVariant.PILL)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_PICKUP_UPDATE, postPickupUpdate.collectible, PickupVariant.COLLECTIBLE)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_PICKUP_RENDER, postPickupRender.collectible, PickupVariant.COLLECTIBLE)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_EFFECT_UPDATE, postEffectUpdate.blueFlame, EffectVariant.BLUE_FLAME)
RPRebalanced:AddCallback(ModCallbacks.MC_POST_EFFECT_UPDATE, postEffectUpdate.diceRoomCustom, EffectVariantCustom.DICE_ROOM_FLOOR_CUSTOM)
local playerCreepEffectVariants = {
    EffectVariant.PLAYER_CREEP_LEMON_MISHAP,
    EffectVariant.PLAYER_CREEP_HOLYWATER,
    EffectVariant.PLAYER_CREEP_RED,
    EffectVariant.PLAYER_CREEP_GREEN,
    EffectVariant.PLAYER_CREEP_HOLYWATER_TRAIL,
    EffectVariant.PLAYER_CREEP_LEMON_PARTY
}
for ____, effectVariant in ipairs(playerCreepEffectVariants) do
    RPRebalanced:AddCallback(ModCallbacks.MC_POST_EFFECT_UPDATE, postEffectUpdate.creepScaling, effectVariant)
end
local modName = "Racing+ Rebalanced"
local welcomeText = ((modName .. " ") .. VERSION) .. " initialized."
local hyphens = string.rep(
    "-",
    math.floor(#welcomeText)
)
local welcomeTextBorder = ("+-" .. hyphens) .. "-+"
Isaac.DebugString(welcomeTextBorder)
Isaac.DebugString(("| " .. welcomeText) .. " |")
Isaac.DebugString(welcomeTextBorder)
return ____exports
 end,
["enums.CollectibleState"] = function(...) 
local ____exports = {}
____exports.CollectibleState = CollectibleState or ({})
____exports.CollectibleState.NORMAL = 0
____exports.CollectibleState[____exports.CollectibleState.NORMAL] = "NORMAL"
____exports.CollectibleState.RACING_PLUS_REPLACED = 1
____exports.CollectibleState[____exports.CollectibleState.RACING_PLUS_REPLACED] = "RACING_PLUS_REPLACED"
____exports.CollectibleState.DUPLICATED = 2
____exports.CollectibleState[____exports.CollectibleState.DUPLICATED] = "DUPLICATED"
return ____exports
 end,
["enums.CreepSubTypeCustom"] = function(...) 
local ____exports = {}
____exports.CreepSubTypeCustom = CreepSubTypeCustom or ({})
____exports.CreepSubTypeCustom.FLOOR_EFFECT_CREEP = 12545
____exports.CreepSubTypeCustom[____exports.CreepSubTypeCustom.FLOOR_EFFECT_CREEP] = "FLOOR_EFFECT_CREEP"
return ____exports
 end,
["enums.EffectVariantCustom"] = function(...) 
local ____exports = {}
____exports.EffectVariantCustom = {DICE_ROOM_FLOOR_CUSTOM = Isaac.GetEntityVariantByName("Dice Room Floor (Custom)")}
return ____exports
 end,
["enums.PickupVariantCustom"] = function(...) 
local ____exports = {}
____exports.PickupVariantCustom = {INVISIBLE_PICKUP = Isaac.GetEntityVariantByName("Invisible Pickup")}
return ____exports
 end,
["enums.PillEffectCustom"] = function(...) 
local ____exports = {}
____exports.PillEffectCustom = {
    DAMAGE_UP = Isaac.GetPillEffectByName("Damage Up"),
    TEAR_DELAY_DOWN = Isaac.GetPillEffectByName("Tear Delay Down"),
    DEAL_AFFINITY = Isaac.GetPillEffectByName("Deal Affinity"),
    BONE_AFFINITY = Isaac.GetPillEffectByName("Bone Affinity"),
    RESTOCK = Isaac.GetPillEffectByName("Restock"),
    GOLDEN_DUMP = Isaac.GetPillEffectByName("Golden Dump"),
    GLIMPSE = Isaac.GetPillEffectByName("Glimpse"),
    SUPER_SADNESS = Isaac.GetPillEffectByName("Super Sadness"),
    INVINCIBILITY = Isaac.GetPillEffectByName("Invincibility"),
    REALLY_BAD_GAS = Isaac.GetPillEffectByName("Really Bad Gas"),
    AETHER = Isaac.GetPillEffectByName("Aether"),
    WALLS_HAVE_EYES = Isaac.GetPillEffectByName("Walls Have Eyes"),
    BLADDER_INFECTION = Isaac.GetPillEffectByName("Bladder Infection"),
    SCORCHED_EARTH = Isaac.GetPillEffectByName("Scorched Earth"),
    FAMILIAR_FRENZY = Isaac.GetPillEffectByName("Familiar Frenzy"),
    UNLOCK = Isaac.GetPillEffectByName("Unlock")
}
return ____exports
 end,
["types.SlotVariantCustom"] = function(...) 
local ____exports = {}
____exports.SlotVariantCustom = {
    TRANSMUTATION_MACHINE = Isaac.GetEntityVariantByName("Transmutation Machine"),
    BOMB_DONATION_MACHINE = Isaac.GetEntityVariantByName("Bomb Donation Machine"),
    KEY_DONATION_MACHINE = Isaac.GetEntityVariantByName("Key Donation Machine"),
    ROULETTE_TABLE = Isaac.GetEntityVariantByName("Roulette Table"),
    HOLY_MACHINE = Isaac.GetEntityVariantByName("Holy Machine")
}
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.index"] = function(...) 
local ____exports = {}
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ActiveSlot")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.BackdropType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.BrokenWatchState")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ButtonAction")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.Challenge")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ChampionColor")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.CollectibleAnimation")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.CollectiblePedestalType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.collections.entityState")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.collections.gridEntityState")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.collections.gridEntityVariants")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.collections.roomSubTypes")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.collections.subTypes")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.collections.variants")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.Controller")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ControllerIndex")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.Difficulty")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.Dimension")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.Direction")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.DoorSlot")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.Ending")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.EntityCollisionClass")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.EntityGridCollisionClass")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.EntityType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.FadeoutTarget")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.ActionTrigger")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.CacheFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.DamageFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.DisplayFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.DoorSlotFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.EntityFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.EntityPartition")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.ItemConfigTag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.LevelCurse")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.ProjectileFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.RoomDescriptorFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.TargetFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.TearFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.flags.UseFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.GameStateFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.GridCollisionClass")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.GridEntityType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.GridEntityXMLType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.GridPath")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.GridRoom")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.InputHook")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ItemConfigCardType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ItemConfigChargeType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ItemConfigPillEffectClass")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ItemConfigPillEffectType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ItemPoolType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ItemType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.Keyboard")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.LanguageAbbreviation")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.LaserOffset")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.LevelStage")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.LevelStateFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.LineCheckMode")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ModCallback")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.Mouse")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.Music")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.NpcState")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.NullItemID")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.PickupPrice")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.PillEffect")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.PlayerForm")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.PlayerItemAnimation")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.PlayerSpriteLayer")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.PocketItemSlot")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.PoopSpellType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.ProjectilesMode")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.RenderMode")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.RoomDescriptorDisplayType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.RoomDifficulty")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.RoomShape")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.RoomTransitionAnim")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.RoomType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.SeedEffect")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.SkinColor")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.SortingLayer")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.SoundEffect")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.StageID")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.StageTransition")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.StageType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.TrinketSlot")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaac-typescript-definitions.enums.WeaponType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ActiveSlot"] = function(...) 
local ____exports = {}
____exports.ActiveSlot = {}
____exports.ActiveSlot.PRIMARY = 0
____exports.ActiveSlot[____exports.ActiveSlot.PRIMARY] = "PRIMARY"
____exports.ActiveSlot.SECONDARY = 1
____exports.ActiveSlot[____exports.ActiveSlot.SECONDARY] = "SECONDARY"
____exports.ActiveSlot.POCKET = 2
____exports.ActiveSlot[____exports.ActiveSlot.POCKET] = "POCKET"
____exports.ActiveSlot.POCKET_SINGLE_USE = 3
____exports.ActiveSlot[____exports.ActiveSlot.POCKET_SINGLE_USE] = "POCKET_SINGLE_USE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.BackdropType"] = function(...) 
local ____exports = {}
____exports.BackdropType = {}
____exports.BackdropType.BACKDROP_NULL = 0
____exports.BackdropType[____exports.BackdropType.BACKDROP_NULL] = "BACKDROP_NULL"
____exports.BackdropType.BASEMENT = 1
____exports.BackdropType[____exports.BackdropType.BASEMENT] = "BASEMENT"
____exports.BackdropType.CELLAR = 2
____exports.BackdropType[____exports.BackdropType.CELLAR] = "CELLAR"
____exports.BackdropType.BURNT_BASEMENT = 3
____exports.BackdropType[____exports.BackdropType.BURNT_BASEMENT] = "BURNT_BASEMENT"
____exports.BackdropType.CAVES = 4
____exports.BackdropType[____exports.BackdropType.CAVES] = "CAVES"
____exports.BackdropType.CATACOMBS = 5
____exports.BackdropType[____exports.BackdropType.CATACOMBS] = "CATACOMBS"
____exports.BackdropType.FLOODED_CAVES = 6
____exports.BackdropType[____exports.BackdropType.FLOODED_CAVES] = "FLOODED_CAVES"
____exports.BackdropType.DEPTHS = 7
____exports.BackdropType[____exports.BackdropType.DEPTHS] = "DEPTHS"
____exports.BackdropType.NECROPOLIS = 8
____exports.BackdropType[____exports.BackdropType.NECROPOLIS] = "NECROPOLIS"
____exports.BackdropType.DANK_DEPTHS = 9
____exports.BackdropType[____exports.BackdropType.DANK_DEPTHS] = "DANK_DEPTHS"
____exports.BackdropType.WOMB = 10
____exports.BackdropType[____exports.BackdropType.WOMB] = "WOMB"
____exports.BackdropType.UTERO = 11
____exports.BackdropType[____exports.BackdropType.UTERO] = "UTERO"
____exports.BackdropType.SCARRED_WOMB = 12
____exports.BackdropType[____exports.BackdropType.SCARRED_WOMB] = "SCARRED_WOMB"
____exports.BackdropType.BLUE_WOMB = 13
____exports.BackdropType[____exports.BackdropType.BLUE_WOMB] = "BLUE_WOMB"
____exports.BackdropType.SHEOL = 14
____exports.BackdropType[____exports.BackdropType.SHEOL] = "SHEOL"
____exports.BackdropType.CATHEDRAL = 15
____exports.BackdropType[____exports.BackdropType.CATHEDRAL] = "CATHEDRAL"
____exports.BackdropType.DARK_ROOM = 16
____exports.BackdropType[____exports.BackdropType.DARK_ROOM] = "DARK_ROOM"
____exports.BackdropType.CHEST = 17
____exports.BackdropType[____exports.BackdropType.CHEST] = "CHEST"
____exports.BackdropType.MEGA_SATAN = 18
____exports.BackdropType[____exports.BackdropType.MEGA_SATAN] = "MEGA_SATAN"
____exports.BackdropType.LIBRARY = 19
____exports.BackdropType[____exports.BackdropType.LIBRARY] = "LIBRARY"
____exports.BackdropType.SHOP = 20
____exports.BackdropType[____exports.BackdropType.SHOP] = "SHOP"
____exports.BackdropType.ISAAC = 21
____exports.BackdropType[____exports.BackdropType.ISAAC] = "ISAAC"
____exports.BackdropType.BARREN = 22
____exports.BackdropType[____exports.BackdropType.BARREN] = "BARREN"
____exports.BackdropType.SECRET = 23
____exports.BackdropType[____exports.BackdropType.SECRET] = "SECRET"
____exports.BackdropType.DICE = 24
____exports.BackdropType[____exports.BackdropType.DICE] = "DICE"
____exports.BackdropType.ARCADE = 25
____exports.BackdropType[____exports.BackdropType.ARCADE] = "ARCADE"
____exports.BackdropType.ERROR_ROOM = 26
____exports.BackdropType[____exports.BackdropType.ERROR_ROOM] = "ERROR_ROOM"
____exports.BackdropType.BLUE_WOMB_PASS = 27
____exports.BackdropType[____exports.BackdropType.BLUE_WOMB_PASS] = "BLUE_WOMB_PASS"
____exports.BackdropType.GREED_SHOP = 28
____exports.BackdropType[____exports.BackdropType.GREED_SHOP] = "GREED_SHOP"
____exports.BackdropType.DUNGEON = 29
____exports.BackdropType[____exports.BackdropType.DUNGEON] = "DUNGEON"
____exports.BackdropType.SACRIFICE = 30
____exports.BackdropType[____exports.BackdropType.SACRIFICE] = "SACRIFICE"
____exports.BackdropType.DOWNPOUR = 31
____exports.BackdropType[____exports.BackdropType.DOWNPOUR] = "DOWNPOUR"
____exports.BackdropType.MINES = 32
____exports.BackdropType[____exports.BackdropType.MINES] = "MINES"
____exports.BackdropType.MAUSOLEUM = 33
____exports.BackdropType[____exports.BackdropType.MAUSOLEUM] = "MAUSOLEUM"
____exports.BackdropType.CORPSE = 34
____exports.BackdropType[____exports.BackdropType.CORPSE] = "CORPSE"
____exports.BackdropType.PLANETARIUM = 35
____exports.BackdropType[____exports.BackdropType.PLANETARIUM] = "PLANETARIUM"
____exports.BackdropType.DOWNPOUR_ENTRANCE = 36
____exports.BackdropType[____exports.BackdropType.DOWNPOUR_ENTRANCE] = "DOWNPOUR_ENTRANCE"
____exports.BackdropType.MINES_ENTRANCE = 37
____exports.BackdropType[____exports.BackdropType.MINES_ENTRANCE] = "MINES_ENTRANCE"
____exports.BackdropType.MAUSOLEUM_ENTRANCE = 38
____exports.BackdropType[____exports.BackdropType.MAUSOLEUM_ENTRANCE] = "MAUSOLEUM_ENTRANCE"
____exports.BackdropType.CORPSE_ENTRANCE = 39
____exports.BackdropType[____exports.BackdropType.CORPSE_ENTRANCE] = "CORPSE_ENTRANCE"
____exports.BackdropType.MAUSOLEUM_2 = 40
____exports.BackdropType[____exports.BackdropType.MAUSOLEUM_2] = "MAUSOLEUM_2"
____exports.BackdropType.MAUSOLEUM_3 = 41
____exports.BackdropType[____exports.BackdropType.MAUSOLEUM_3] = "MAUSOLEUM_3"
____exports.BackdropType.MAUSOLEUM_4 = 42
____exports.BackdropType[____exports.BackdropType.MAUSOLEUM_4] = "MAUSOLEUM_4"
____exports.BackdropType.CORPSE_2 = 43
____exports.BackdropType[____exports.BackdropType.CORPSE_2] = "CORPSE_2"
____exports.BackdropType.CORPSE_3 = 44
____exports.BackdropType[____exports.BackdropType.CORPSE_3] = "CORPSE_3"
____exports.BackdropType.DROSS = 45
____exports.BackdropType[____exports.BackdropType.DROSS] = "DROSS"
____exports.BackdropType.ASHPIT = 46
____exports.BackdropType[____exports.BackdropType.ASHPIT] = "ASHPIT"
____exports.BackdropType.GEHENNA = 47
____exports.BackdropType[____exports.BackdropType.GEHENNA] = "GEHENNA"
____exports.BackdropType.MORTIS = 48
____exports.BackdropType[____exports.BackdropType.MORTIS] = "MORTIS"
____exports.BackdropType.ISAACS_BEDROOM = 49
____exports.BackdropType[____exports.BackdropType.ISAACS_BEDROOM] = "ISAACS_BEDROOM"
____exports.BackdropType.HALLWAY = 50
____exports.BackdropType[____exports.BackdropType.HALLWAY] = "HALLWAY"
____exports.BackdropType.MOMS_BEDROOM = 51
____exports.BackdropType[____exports.BackdropType.MOMS_BEDROOM] = "MOMS_BEDROOM"
____exports.BackdropType.CLOSET = 52
____exports.BackdropType[____exports.BackdropType.CLOSET] = "CLOSET"
____exports.BackdropType.CLOSET_B = 53
____exports.BackdropType[____exports.BackdropType.CLOSET_B] = "CLOSET_B"
____exports.BackdropType.DOGMA = 54
____exports.BackdropType[____exports.BackdropType.DOGMA] = "DOGMA"
____exports.BackdropType.DUNGEON_GIDEON = 55
____exports.BackdropType[____exports.BackdropType.DUNGEON_GIDEON] = "DUNGEON_GIDEON"
____exports.BackdropType.DUNGEON_ROTGUT = 56
____exports.BackdropType[____exports.BackdropType.DUNGEON_ROTGUT] = "DUNGEON_ROTGUT"
____exports.BackdropType.DUNGEON_BEAST = 57
____exports.BackdropType[____exports.BackdropType.DUNGEON_BEAST] = "DUNGEON_BEAST"
____exports.BackdropType.MINES_SHAFT = 58
____exports.BackdropType[____exports.BackdropType.MINES_SHAFT] = "MINES_SHAFT"
____exports.BackdropType.ASHPIT_SHAFT = 59
____exports.BackdropType[____exports.BackdropType.ASHPIT_SHAFT] = "ASHPIT_SHAFT"
____exports.BackdropType.DARK_CLOSET = 60
____exports.BackdropType[____exports.BackdropType.DARK_CLOSET] = "DARK_CLOSET"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.BrokenWatchState"] = function(...) 
local ____exports = {}
--- Used by the `Room.SetBrokenWatchState` method.
____exports.BrokenWatchState = {}
____exports.BrokenWatchState.NONE = 0
____exports.BrokenWatchState[____exports.BrokenWatchState.NONE] = "NONE"
____exports.BrokenWatchState.SLOW = 1
____exports.BrokenWatchState[____exports.BrokenWatchState.SLOW] = "SLOW"
____exports.BrokenWatchState.FAST = 2
____exports.BrokenWatchState[____exports.BrokenWatchState.FAST] = "FAST"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ButtonAction"] = function(...) 
local ____exports = {}
____exports.ButtonAction = {}
____exports.ButtonAction.LEFT = 0
____exports.ButtonAction[____exports.ButtonAction.LEFT] = "LEFT"
____exports.ButtonAction.RIGHT = 1
____exports.ButtonAction[____exports.ButtonAction.RIGHT] = "RIGHT"
____exports.ButtonAction.UP = 2
____exports.ButtonAction[____exports.ButtonAction.UP] = "UP"
____exports.ButtonAction.DOWN = 3
____exports.ButtonAction[____exports.ButtonAction.DOWN] = "DOWN"
____exports.ButtonAction.SHOOT_LEFT = 4
____exports.ButtonAction[____exports.ButtonAction.SHOOT_LEFT] = "SHOOT_LEFT"
____exports.ButtonAction.SHOOT_RIGHT = 5
____exports.ButtonAction[____exports.ButtonAction.SHOOT_RIGHT] = "SHOOT_RIGHT"
____exports.ButtonAction.SHOOT_UP = 6
____exports.ButtonAction[____exports.ButtonAction.SHOOT_UP] = "SHOOT_UP"
____exports.ButtonAction.SHOOT_DOWN = 7
____exports.ButtonAction[____exports.ButtonAction.SHOOT_DOWN] = "SHOOT_DOWN"
____exports.ButtonAction.BOMB = 8
____exports.ButtonAction[____exports.ButtonAction.BOMB] = "BOMB"
____exports.ButtonAction.ITEM = 9
____exports.ButtonAction[____exports.ButtonAction.ITEM] = "ITEM"
____exports.ButtonAction.PILL_CARD = 10
____exports.ButtonAction[____exports.ButtonAction.PILL_CARD] = "PILL_CARD"
____exports.ButtonAction.DROP = 11
____exports.ButtonAction[____exports.ButtonAction.DROP] = "DROP"
____exports.ButtonAction.PAUSE = 12
____exports.ButtonAction[____exports.ButtonAction.PAUSE] = "PAUSE"
____exports.ButtonAction.MAP = 13
____exports.ButtonAction[____exports.ButtonAction.MAP] = "MAP"
____exports.ButtonAction.MENU_CONFIRM = 14
____exports.ButtonAction[____exports.ButtonAction.MENU_CONFIRM] = "MENU_CONFIRM"
____exports.ButtonAction.MENU_BACK = 15
____exports.ButtonAction[____exports.ButtonAction.MENU_BACK] = "MENU_BACK"
____exports.ButtonAction.RESTART = 16
____exports.ButtonAction[____exports.ButtonAction.RESTART] = "RESTART"
____exports.ButtonAction.FULLSCREEN = 17
____exports.ButtonAction[____exports.ButtonAction.FULLSCREEN] = "FULLSCREEN"
____exports.ButtonAction.MUTE = 18
____exports.ButtonAction[____exports.ButtonAction.MUTE] = "MUTE"
____exports.ButtonAction.JOIN_MULTIPLAYER = 19
____exports.ButtonAction[____exports.ButtonAction.JOIN_MULTIPLAYER] = "JOIN_MULTIPLAYER"
____exports.ButtonAction.MENU_LEFT = 20
____exports.ButtonAction[____exports.ButtonAction.MENU_LEFT] = "MENU_LEFT"
____exports.ButtonAction.MENU_RIGHT = 21
____exports.ButtonAction[____exports.ButtonAction.MENU_RIGHT] = "MENU_RIGHT"
____exports.ButtonAction.MENU_UP = 22
____exports.ButtonAction[____exports.ButtonAction.MENU_UP] = "MENU_UP"
____exports.ButtonAction.MENU_DOWN = 23
____exports.ButtonAction[____exports.ButtonAction.MENU_DOWN] = "MENU_DOWN"
____exports.ButtonAction.MENU_LT = 24
____exports.ButtonAction[____exports.ButtonAction.MENU_LT] = "MENU_LT"
____exports.ButtonAction.MENU_RT = 25
____exports.ButtonAction[____exports.ButtonAction.MENU_RT] = "MENU_RT"
____exports.ButtonAction.MENU_TAB = 26
____exports.ButtonAction[____exports.ButtonAction.MENU_TAB] = "MENU_TAB"
____exports.ButtonAction.CONSOLE = 28
____exports.ButtonAction[____exports.ButtonAction.CONSOLE] = "CONSOLE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.Challenge"] = function(...) 
local ____exports = {}
____exports.Challenge = {}
____exports.Challenge.NULL = 0
____exports.Challenge[____exports.Challenge.NULL] = "NULL"
____exports.Challenge.PITCH_BLACK = 1
____exports.Challenge[____exports.Challenge.PITCH_BLACK] = "PITCH_BLACK"
____exports.Challenge.HIGH_BROW = 2
____exports.Challenge[____exports.Challenge.HIGH_BROW] = "HIGH_BROW"
____exports.Challenge.HEAD_TRAUMA = 3
____exports.Challenge[____exports.Challenge.HEAD_TRAUMA] = "HEAD_TRAUMA"
____exports.Challenge.DARKNESS_FALLS = 4
____exports.Challenge[____exports.Challenge.DARKNESS_FALLS] = "DARKNESS_FALLS"
____exports.Challenge.THE_TANK = 5
____exports.Challenge[____exports.Challenge.THE_TANK] = "THE_TANK"
____exports.Challenge.SOLAR_SYSTEM = 6
____exports.Challenge[____exports.Challenge.SOLAR_SYSTEM] = "SOLAR_SYSTEM"
____exports.Challenge.SUICIDE_KING = 7
____exports.Challenge[____exports.Challenge.SUICIDE_KING] = "SUICIDE_KING"
____exports.Challenge.CAT_GOT_YOUR_TONGUE = 8
____exports.Challenge[____exports.Challenge.CAT_GOT_YOUR_TONGUE] = "CAT_GOT_YOUR_TONGUE"
____exports.Challenge.DEMO_MAN = 9
____exports.Challenge[____exports.Challenge.DEMO_MAN] = "DEMO_MAN"
____exports.Challenge.CURSED = 10
____exports.Challenge[____exports.Challenge.CURSED] = "CURSED"
____exports.Challenge.GLASS_CANNON = 11
____exports.Challenge[____exports.Challenge.GLASS_CANNON] = "GLASS_CANNON"
____exports.Challenge.WHEN_LIFE_GIVES_LEMONS = 12
____exports.Challenge[____exports.Challenge.WHEN_LIFE_GIVES_LEMONS] = "WHEN_LIFE_GIVES_LEMONS"
____exports.Challenge.BEANS = 13
____exports.Challenge[____exports.Challenge.BEANS] = "BEANS"
____exports.Challenge.ITS_IN_THE_CARDS = 14
____exports.Challenge[____exports.Challenge.ITS_IN_THE_CARDS] = "ITS_IN_THE_CARDS"
____exports.Challenge.SLOW_ROLL = 15
____exports.Challenge[____exports.Challenge.SLOW_ROLL] = "SLOW_ROLL"
____exports.Challenge.COMPUTER_SAVY = 16
____exports.Challenge[____exports.Challenge.COMPUTER_SAVY] = "COMPUTER_SAVY"
____exports.Challenge.WAKA_WAKA = 17
____exports.Challenge[____exports.Challenge.WAKA_WAKA] = "WAKA_WAKA"
____exports.Challenge.THE_HOST = 18
____exports.Challenge[____exports.Challenge.THE_HOST] = "THE_HOST"
____exports.Challenge.THE_FAMILY_MAN = 19
____exports.Challenge[____exports.Challenge.THE_FAMILY_MAN] = "THE_FAMILY_MAN"
____exports.Challenge.PURIST = 20
____exports.Challenge[____exports.Challenge.PURIST] = "PURIST"
____exports.Challenge.XXXXXXXXL = 21
____exports.Challenge[____exports.Challenge.XXXXXXXXL] = "XXXXXXXXL"
____exports.Challenge.SPEED = 22
____exports.Challenge[____exports.Challenge.SPEED] = "SPEED"
____exports.Challenge.BLUE_BOMBER = 23
____exports.Challenge[____exports.Challenge.BLUE_BOMBER] = "BLUE_BOMBER"
____exports.Challenge.PAY_TO_PLAY = 24
____exports.Challenge[____exports.Challenge.PAY_TO_PLAY] = "PAY_TO_PLAY"
____exports.Challenge.HAVE_A_HEART = 25
____exports.Challenge[____exports.Challenge.HAVE_A_HEART] = "HAVE_A_HEART"
____exports.Challenge.I_RULE = 26
____exports.Challenge[____exports.Challenge.I_RULE] = "I_RULE"
____exports.Challenge.BRAINS = 27
____exports.Challenge[____exports.Challenge.BRAINS] = "BRAINS"
____exports.Challenge.PRIDE_DAY = 28
____exports.Challenge[____exports.Challenge.PRIDE_DAY] = "PRIDE_DAY"
____exports.Challenge.ONANS_STREAK = 29
____exports.Challenge[____exports.Challenge.ONANS_STREAK] = "ONANS_STREAK"
____exports.Challenge.GUARDIAN = 30
____exports.Challenge[____exports.Challenge.GUARDIAN] = "GUARDIAN"
____exports.Challenge.BACKASSWARDS = 31
____exports.Challenge[____exports.Challenge.BACKASSWARDS] = "BACKASSWARDS"
____exports.Challenge.APRILS_FOOL = 32
____exports.Challenge[____exports.Challenge.APRILS_FOOL] = "APRILS_FOOL"
____exports.Challenge.POKEY_MANS = 33
____exports.Challenge[____exports.Challenge.POKEY_MANS] = "POKEY_MANS"
____exports.Challenge.ULTRA_HARD = 34
____exports.Challenge[____exports.Challenge.ULTRA_HARD] = "ULTRA_HARD"
____exports.Challenge.PONG = 35
____exports.Challenge[____exports.Challenge.PONG] = "PONG"
____exports.Challenge.SCAT_MAN = 36
____exports.Challenge[____exports.Challenge.SCAT_MAN] = "SCAT_MAN"
____exports.Challenge.BLOODY_MARY = 37
____exports.Challenge[____exports.Challenge.BLOODY_MARY] = "BLOODY_MARY"
____exports.Challenge.BAPTISM_BY_FIRE = 38
____exports.Challenge[____exports.Challenge.BAPTISM_BY_FIRE] = "BAPTISM_BY_FIRE"
____exports.Challenge.ISAACS_AWAKENING = 39
____exports.Challenge[____exports.Challenge.ISAACS_AWAKENING] = "ISAACS_AWAKENING"
____exports.Challenge.SEEING_DOUBLE = 40
____exports.Challenge[____exports.Challenge.SEEING_DOUBLE] = "SEEING_DOUBLE"
____exports.Challenge.PICA_RUN = 41
____exports.Challenge[____exports.Challenge.PICA_RUN] = "PICA_RUN"
____exports.Challenge.HOT_POTATO = 42
____exports.Challenge[____exports.Challenge.HOT_POTATO] = "HOT_POTATO"
____exports.Challenge.CANTRIPPED = 43
____exports.Challenge[____exports.Challenge.CANTRIPPED] = "CANTRIPPED"
____exports.Challenge.RED_REDEMPTION = 44
____exports.Challenge[____exports.Challenge.RED_REDEMPTION] = "RED_REDEMPTION"
____exports.Challenge.DELETE_THIS = 45
____exports.Challenge[____exports.Challenge.DELETE_THIS] = "DELETE_THIS"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ChampionColor"] = function(...) 
local ____exports = {}
____exports.ChampionColor = {}
____exports.ChampionColor.RED = 0
____exports.ChampionColor[____exports.ChampionColor.RED] = "RED"
____exports.ChampionColor.YELLOW = 1
____exports.ChampionColor[____exports.ChampionColor.YELLOW] = "YELLOW"
____exports.ChampionColor.GREEN = 2
____exports.ChampionColor[____exports.ChampionColor.GREEN] = "GREEN"
____exports.ChampionColor.ORANGE = 3
____exports.ChampionColor[____exports.ChampionColor.ORANGE] = "ORANGE"
____exports.ChampionColor.BLUE = 4
____exports.ChampionColor[____exports.ChampionColor.BLUE] = "BLUE"
____exports.ChampionColor.BLACK = 5
____exports.ChampionColor[____exports.ChampionColor.BLACK] = "BLACK"
____exports.ChampionColor.WHITE = 6
____exports.ChampionColor[____exports.ChampionColor.WHITE] = "WHITE"
____exports.ChampionColor.GREY = 7
____exports.ChampionColor[____exports.ChampionColor.GREY] = "GREY"
____exports.ChampionColor.TRANSPARENT = 8
____exports.ChampionColor[____exports.ChampionColor.TRANSPARENT] = "TRANSPARENT"
____exports.ChampionColor.FLICKER = 9
____exports.ChampionColor[____exports.ChampionColor.FLICKER] = "FLICKER"
____exports.ChampionColor.PINK = 10
____exports.ChampionColor[____exports.ChampionColor.PINK] = "PINK"
____exports.ChampionColor.PURPLE = 11
____exports.ChampionColor[____exports.ChampionColor.PURPLE] = "PURPLE"
____exports.ChampionColor.DARK_RED = 12
____exports.ChampionColor[____exports.ChampionColor.DARK_RED] = "DARK_RED"
____exports.ChampionColor.LIGHT_BLUE = 13
____exports.ChampionColor[____exports.ChampionColor.LIGHT_BLUE] = "LIGHT_BLUE"
____exports.ChampionColor.CAMO = 14
____exports.ChampionColor[____exports.ChampionColor.CAMO] = "CAMO"
____exports.ChampionColor.PULSE_GREEN = 15
____exports.ChampionColor[____exports.ChampionColor.PULSE_GREEN] = "PULSE_GREEN"
____exports.ChampionColor.PULSE_GREY = 16
____exports.ChampionColor[____exports.ChampionColor.PULSE_GREY] = "PULSE_GREY"
____exports.ChampionColor.FLY_PROTECTED = 17
____exports.ChampionColor[____exports.ChampionColor.FLY_PROTECTED] = "FLY_PROTECTED"
____exports.ChampionColor.TINY = 18
____exports.ChampionColor[____exports.ChampionColor.TINY] = "TINY"
____exports.ChampionColor.GIANT = 19
____exports.ChampionColor[____exports.ChampionColor.GIANT] = "GIANT"
____exports.ChampionColor.PULSE_RED = 20
____exports.ChampionColor[____exports.ChampionColor.PULSE_RED] = "PULSE_RED"
____exports.ChampionColor.SIZE_PULSE = 21
____exports.ChampionColor[____exports.ChampionColor.SIZE_PULSE] = "SIZE_PULSE"
____exports.ChampionColor.KING = 22
____exports.ChampionColor[____exports.ChampionColor.KING] = "KING"
____exports.ChampionColor.DEATH = 23
____exports.ChampionColor[____exports.ChampionColor.DEATH] = "DEATH"
____exports.ChampionColor.BROWN = 24
____exports.ChampionColor[____exports.ChampionColor.BROWN] = "BROWN"
____exports.ChampionColor.RAINBOW = 25
____exports.ChampionColor[____exports.ChampionColor.RAINBOW] = "RAINBOW"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.CollectibleAnimation"] = function(...) 
local ____exports = {}
____exports.CollectibleAnimation = {}
____exports.CollectibleAnimation.IDLE = "Idle"
____exports.CollectibleAnimation.EMPTY = "Empty"
____exports.CollectibleAnimation.SHOP_IDLE = "ShopIdle"
____exports.CollectibleAnimation.PLAYER_PICKUP = "PlayerPickup"
____exports.CollectibleAnimation.PLAYER_PICKUP_SPARKLE = "PlayerPickupSparkle"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.CollectiblePedestalType"] = function(...) 
local ____exports = {}
--- Corresponds to the overlay frame number in "005.100_collectible.anm2".
____exports.CollectiblePedestalType = {}
____exports.CollectiblePedestalType.NONE = -1
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.NONE] = "NONE"
____exports.CollectiblePedestalType.NORMAL = 0
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.NORMAL] = "NORMAL"
____exports.CollectiblePedestalType.FORTUNE_TELLING_MACHINE = 1
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.FORTUNE_TELLING_MACHINE] = "FORTUNE_TELLING_MACHINE"
____exports.CollectiblePedestalType.BLOOD_DONATION_MACHINE = 2
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.BLOOD_DONATION_MACHINE] = "BLOOD_DONATION_MACHINE"
____exports.CollectiblePedestalType.SLOT_MACHINE = 3
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.SLOT_MACHINE] = "SLOT_MACHINE"
____exports.CollectiblePedestalType.LOCKED_CHEST = 4
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.LOCKED_CHEST] = "LOCKED_CHEST"
____exports.CollectiblePedestalType.RED_CHEST = 5
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.RED_CHEST] = "RED_CHEST"
____exports.CollectiblePedestalType.BOMB_CHEST = 6
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.BOMB_CHEST] = "BOMB_CHEST"
____exports.CollectiblePedestalType.SPIKED_CHEST = 7
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.SPIKED_CHEST] = "SPIKED_CHEST"
____exports.CollectiblePedestalType.ETERNAL_CHEST = 8
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.ETERNAL_CHEST] = "ETERNAL_CHEST"
____exports.CollectiblePedestalType.MOMS_DRESSING_TABLE = 9
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.MOMS_DRESSING_TABLE] = "MOMS_DRESSING_TABLE"
____exports.CollectiblePedestalType.CHEST = 10
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.CHEST] = "CHEST"
____exports.CollectiblePedestalType.MOMS_CHEST = 11
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.MOMS_CHEST] = "MOMS_CHEST"
____exports.CollectiblePedestalType.OLD_CHEST = 12
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.OLD_CHEST] = "OLD_CHEST"
____exports.CollectiblePedestalType.WOODEN_CHEST = 13
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.WOODEN_CHEST] = "WOODEN_CHEST"
____exports.CollectiblePedestalType.MEGA_CHEST = 14
____exports.CollectiblePedestalType[____exports.CollectiblePedestalType.MEGA_CHEST] = "MEGA_CHEST"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.collections.entityState"] = function(...) 
local ____exports = {}
--- EntityType.FAMILIAR (3), FamiliarVariant.LOST_SOUL (211)
____exports.LostSoulState = {}
____exports.LostSoulState.ALIVE = 1
____exports.LostSoulState[____exports.LostSoulState.ALIVE] = "ALIVE"
____exports.LostSoulState.DEAD = 4
____exports.LostSoulState[____exports.LostSoulState.DEAD] = "DEAD"
--- For `EntityType.DEATH` (66)
____exports.DeathState = {}
____exports.DeathState.APPEAR = 1
____exports.DeathState[____exports.DeathState.APPEAR] = "APPEAR"
____exports.DeathState.SCYTHE_APPEAR = 3
____exports.DeathState[____exports.DeathState.SCYTHE_APPEAR] = "SCYTHE_APPEAR"
____exports.DeathState.MAIN_IDLE = 4
____exports.DeathState[____exports.DeathState.MAIN_IDLE] = "MAIN_IDLE"
____exports.DeathState.JUMP_OFF_HORSE = 7
____exports.DeathState[____exports.DeathState.JUMP_OFF_HORSE] = "JUMP_OFF_HORSE"
____exports.DeathState.SLOW_ATTACK = 8
____exports.DeathState[____exports.DeathState.SLOW_ATTACK] = "SLOW_ATTACK"
____exports.DeathState.SUMMON_KNIGHTS = 13
____exports.DeathState[____exports.DeathState.SUMMON_KNIGHTS] = "SUMMON_KNIGHTS"
____exports.DeathState.SUMMON_SCYTHES = 14
____exports.DeathState[____exports.DeathState.SUMMON_SCYTHES] = "SUMMON_SCYTHES"
--- For `EntityType.DADDY_LONG_LEGS` (101)
____exports.DaddyLongLegsState = {}
____exports.DaddyLongLegsState.SLAM_WITH_PROJECTILE_BURST = 4
____exports.DaddyLongLegsState[____exports.DaddyLongLegsState.SLAM_WITH_PROJECTILE_BURST] = "SLAM_WITH_PROJECTILE_BURST"
____exports.DaddyLongLegsState.STOMP_ATTACK_LEG = 7
____exports.DaddyLongLegsState[____exports.DaddyLongLegsState.STOMP_ATTACK_LEG] = "STOMP_ATTACK_LEG"
____exports.DaddyLongLegsState.SPITTING_SPIDERS_ATTACK = 8
____exports.DaddyLongLegsState[____exports.DaddyLongLegsState.SPITTING_SPIDERS_ATTACK] = "SPITTING_SPIDERS_ATTACK"
____exports.DaddyLongLegsState.MULTI_STOMP_ATTACK_MAIN = 9
____exports.DaddyLongLegsState[____exports.DaddyLongLegsState.MULTI_STOMP_ATTACK_MAIN] = "MULTI_STOMP_ATTACK_MAIN"
--- For `EntityType.BIG_HORN` (411)
____exports.BigHornState = {}
____exports.BigHornState.IDLE = 3
____exports.BigHornState[____exports.BigHornState.IDLE] = "IDLE"
____exports.BigHornState.HEAD_GOING_UP_OR_GOING_DOWN_INTO_HOLE = 4
____exports.BigHornState[____exports.BigHornState.HEAD_GOING_UP_OR_GOING_DOWN_INTO_HOLE] = "HEAD_GOING_UP_OR_GOING_DOWN_INTO_HOLE"
____exports.BigHornState.HAND_GOING_DOWN_INTO_HOLE = 5
____exports.BigHornState[____exports.BigHornState.HAND_GOING_DOWN_INTO_HOLE] = "HAND_GOING_DOWN_INTO_HOLE"
____exports.BigHornState.HAND_SLAM_ATTACK = 8
____exports.BigHornState[____exports.BigHornState.HAND_SLAM_ATTACK] = "HAND_SLAM_ATTACK"
____exports.BigHornState.HAND_THROW_TROLL_BOMB_ATTACK = 9
____exports.BigHornState[____exports.BigHornState.HAND_THROW_TROLL_BOMB_ATTACK] = "HAND_THROW_TROLL_BOMB_ATTACK"
____exports.BigHornState.HAND_THROW_TRIPLE_TROLL_BOMB_ATTACK = 10
____exports.BigHornState[____exports.BigHornState.HAND_THROW_TRIPLE_TROLL_BOMB_ATTACK] = "HAND_THROW_TRIPLE_TROLL_BOMB_ATTACK"
____exports.BigHornState.HEAD_BALL_ATTACK = 13
____exports.BigHornState[____exports.BigHornState.HEAD_BALL_ATTACK] = "HEAD_BALL_ATTACK"
--- For `EntityType.REAP_CREEP` (900)
____exports.ReapCreepState = {}
____exports.ReapCreepState.CRAWLING_FROM_SIDE_TO_SIDE = 3
____exports.ReapCreepState[____exports.ReapCreepState.CRAWLING_FROM_SIDE_TO_SIDE] = "CRAWLING_FROM_SIDE_TO_SIDE"
____exports.ReapCreepState.JUMPING_TO_TOP_WALL = 6
____exports.ReapCreepState[____exports.ReapCreepState.JUMPING_TO_TOP_WALL] = "JUMPING_TO_TOP_WALL"
____exports.ReapCreepState.WALL_SLAM_ATTACK = 7
____exports.ReapCreepState[____exports.ReapCreepState.WALL_SLAM_ATTACK] = "WALL_SLAM_ATTACK"
____exports.ReapCreepState.PROJECTILE_SPIT_LINE_ATTACK = 8
____exports.ReapCreepState[____exports.ReapCreepState.PROJECTILE_SPIT_LINE_ATTACK] = "PROJECTILE_SPIT_LINE_ATTACK"
____exports.ReapCreepState.PROJECTILE_SPIT_BURST_ATTACK = 9
____exports.ReapCreepState[____exports.ReapCreepState.PROJECTILE_SPIT_BURST_ATTACK] = "PROJECTILE_SPIT_BURST_ATTACK"
____exports.ReapCreepState.BRIMSTONE_ATTACK = 10
____exports.ReapCreepState[____exports.ReapCreepState.BRIMSTONE_ATTACK] = "BRIMSTONE_ATTACK"
____exports.ReapCreepState.SPAWNING_WALL_SPIDERS = 13
____exports.ReapCreepState[____exports.ReapCreepState.SPAWNING_WALL_SPIDERS] = "SPAWNING_WALL_SPIDERS"
____exports.ReapCreepState.SPAWNING_SPIDERS = 14
____exports.ReapCreepState[____exports.ReapCreepState.SPAWNING_SPIDERS] = "SPAWNING_SPIDERS"
____exports.ReapCreepState.TRANSFORMING_TO_NEXT_PHASE = 16
____exports.ReapCreepState[____exports.ReapCreepState.TRANSFORMING_TO_NEXT_PHASE] = "TRANSFORMING_TO_NEXT_PHASE"
--- For `EntityType.COLOSTOMIA` (917)
____exports.ColostomiaState = {}
____exports.ColostomiaState.IDLE_PHASE_1 = 3
____exports.ColostomiaState[____exports.ColostomiaState.IDLE_PHASE_1] = "IDLE_PHASE_1"
____exports.ColostomiaState.IDLE_PHASE_2 = 4
____exports.ColostomiaState[____exports.ColostomiaState.IDLE_PHASE_2] = "IDLE_PHASE_2"
____exports.ColostomiaState.JUMP_ATTACK_WITH_PROJECTILE_SPLASH = 6
____exports.ColostomiaState[____exports.ColostomiaState.JUMP_ATTACK_WITH_PROJECTILE_SPLASH] = "JUMP_ATTACK_WITH_PROJECTILE_SPLASH"
____exports.ColostomiaState.CHARGE_SLIDE = 8
____exports.ColostomiaState[____exports.ColostomiaState.CHARGE_SLIDE] = "CHARGE_SLIDE"
____exports.ColostomiaState.SPIT_POOP_BOMB = 9
____exports.ColostomiaState[____exports.ColostomiaState.SPIT_POOP_BOMB] = "SPIT_POOP_BOMB"
____exports.ColostomiaState.SPIT_TWO_POOP_BOMBS = 10
____exports.ColostomiaState[____exports.ColostomiaState.SPIT_TWO_POOP_BOMBS] = "SPIT_TWO_POOP_BOMBS"
____exports.ColostomiaState.FART_ATTACK = 11
____exports.ColostomiaState[____exports.ColostomiaState.FART_ATTACK] = "FART_ATTACK"
____exports.ColostomiaState.TRANSITION_TO_PHASE_2 = 16
____exports.ColostomiaState[____exports.ColostomiaState.TRANSITION_TO_PHASE_2] = "TRANSITION_TO_PHASE_2"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.collections.gridEntityState"] = function(...) 
local ____exports = {}
--- Used by the following grid entity types:
-- - GridEntityType.ROCK (2)
-- - GridEntityType.ROCK_TINTED (4)
-- - GridEntityType.ROCK_BOMB (5)
-- - GridEntityType.ROCK_ALT (6)
-- - GridEntityType.STATUE (21) (only for Angel Statues)
-- - GridEntityType.ROCK_SS (22)
-- - GridEntityType.ROCK_SPIKED (25)
-- - GridEntityType.ROCK_ALT2 (26)
-- - GridEntityType.ROCK_GOLD (27)
____exports.RockState = {}
____exports.RockState.UNBROKEN = 1
____exports.RockState[____exports.RockState.UNBROKEN] = "UNBROKEN"
____exports.RockState.BROKEN = 2
____exports.RockState[____exports.RockState.BROKEN] = "BROKEN"
____exports.RockState.EXPLODING = 3
____exports.RockState[____exports.RockState.EXPLODING] = "EXPLODING"
____exports.RockState.HALF_BROKEN = 4
____exports.RockState[____exports.RockState.HALF_BROKEN] = "HALF_BROKEN"
--- For `GridEntityType.PIT` (7)
____exports.PitState = {}
____exports.PitState.NORMAL = 0
____exports.PitState[____exports.PitState.NORMAL] = "NORMAL"
____exports.PitState.FILLED = 1
____exports.PitState[____exports.PitState.FILLED] = "FILLED"
--- For `GridEntityType.SPIKES_ON_OFF` (9)
____exports.SpikesOnOffState = {}
____exports.SpikesOnOffState.ON = 0
____exports.SpikesOnOffState[____exports.SpikesOnOffState.ON] = "ON"
____exports.SpikesOnOffState.OFF = 1
____exports.SpikesOnOffState[____exports.SpikesOnOffState.OFF] = "OFF"
--- For `GridEntityType.SPIDERWEB` (10)
____exports.SpiderWebState = {}
____exports.SpiderWebState.UNBROKEN = 0
____exports.SpiderWebState[____exports.SpiderWebState.UNBROKEN] = "UNBROKEN"
____exports.SpiderWebState.BROKEN = 1
____exports.SpiderWebState[____exports.SpiderWebState.BROKEN] = "BROKEN"
--- For `GridEntityType.LOCK` (11)
____exports.LockState = {}
____exports.LockState.LOCKED = 0
____exports.LockState[____exports.LockState.LOCKED] = "LOCKED"
____exports.LockState.UNLOCKED = 1
____exports.LockState[____exports.LockState.UNLOCKED] = "UNLOCKED"
--- For `GridEntityType.TNT` (12)
-- 
-- The health of a TNT barrel is represented by its state. It starts at 0 and climbs upwards in
-- increments of 1. Once the state reaches 4, the barrel explodes, and remains at state 4.
-- 
-- Breaking a TNT barrel usually takes 4 tears. However, it is possible to take less than that if
-- the players damage is high enough. (High damage causes the tear to do two or more increments at
-- once.)
____exports.TNTState = {}
____exports.TNTState.UNDAMAGED = 0
____exports.TNTState[____exports.TNTState.UNDAMAGED] = "UNDAMAGED"
____exports.TNTState.ONE_QUARTER_DAMAGED = 1
____exports.TNTState[____exports.TNTState.ONE_QUARTER_DAMAGED] = "ONE_QUARTER_DAMAGED"
____exports.TNTState.TWO_QUARTERS_DAMAGED = 2
____exports.TNTState[____exports.TNTState.TWO_QUARTERS_DAMAGED] = "TWO_QUARTERS_DAMAGED"
____exports.TNTState.THREE_QUARTERS_DAMAGED = 3
____exports.TNTState[____exports.TNTState.THREE_QUARTERS_DAMAGED] = "THREE_QUARTERS_DAMAGED"
____exports.TNTState.EXPLODED = 4
____exports.TNTState[____exports.TNTState.EXPLODED] = "EXPLODED"
--- For `GridEntityType.POOP` (14)
-- 
-- The health of a poop is represented by its state. It starts at 0 and climbs upwards in increments
-- of 250. Once the state reaches 1000, the poop is completely broken.
-- 
-- Breaking a poop usually takes 4 tears. However, it is possible to take less than that if the
-- players damage is high enough. (High damage causes the tear to do two or more increments at
-- once.)
-- 
-- Giga Poops increment by 20 instead of 250. Thus, they take around 50 tears to destroy.
____exports.PoopState = {}
____exports.PoopState.UNDAMAGED = 0
____exports.PoopState[____exports.PoopState.UNDAMAGED] = "UNDAMAGED"
____exports.PoopState.ONE_QUARTER_DAMAGED = 250
____exports.PoopState[____exports.PoopState.ONE_QUARTER_DAMAGED] = "ONE_QUARTER_DAMAGED"
____exports.PoopState.TWO_QUARTERS_DAMAGED = 500
____exports.PoopState[____exports.PoopState.TWO_QUARTERS_DAMAGED] = "TWO_QUARTERS_DAMAGED"
____exports.PoopState.THREE_QUARTERS_DAMAGED = 750
____exports.PoopState[____exports.PoopState.THREE_QUARTERS_DAMAGED] = "THREE_QUARTERS_DAMAGED"
____exports.PoopState.COMPLETELY_DESTROYED = 1000
____exports.PoopState[____exports.PoopState.COMPLETELY_DESTROYED] = "COMPLETELY_DESTROYED"
--- For `GridEntityType.DOOR` (16)
____exports.DoorState = {}
____exports.DoorState.INIT = 0
____exports.DoorState[____exports.DoorState.INIT] = "INIT"
____exports.DoorState.CLOSED = 1
____exports.DoorState[____exports.DoorState.CLOSED] = "CLOSED"
____exports.DoorState.OPEN = 2
____exports.DoorState[____exports.DoorState.OPEN] = "OPEN"
____exports.DoorState.ONE_CHAIN = 3
____exports.DoorState[____exports.DoorState.ONE_CHAIN] = "ONE_CHAIN"
____exports.DoorState.HALF_CRACKED = 4
____exports.DoorState[____exports.DoorState.HALF_CRACKED] = "HALF_CRACKED"
--- For `GridEntityType.TRAPDOOR` (17)
____exports.TrapdoorState = {}
____exports.TrapdoorState.CLOSED = 0
____exports.TrapdoorState[____exports.TrapdoorState.CLOSED] = "CLOSED"
____exports.TrapdoorState.OPEN = 1
____exports.TrapdoorState[____exports.TrapdoorState.OPEN] = "OPEN"
--- For `GridEntityType.CRAWL_SPACE` (18)
____exports.CrawlSpaceState = {}
____exports.CrawlSpaceState.CLOSED = 0
____exports.CrawlSpaceState[____exports.CrawlSpaceState.CLOSED] = "CLOSED"
____exports.CrawlSpaceState.OPEN = 1
____exports.CrawlSpaceState[____exports.CrawlSpaceState.OPEN] = "OPEN"
--- For `GridEntityType.PRESSURE_PLATE` (20)
____exports.PressurePlateState = {}
____exports.PressurePlateState.UNPRESSED = 0
____exports.PressurePlateState[____exports.PressurePlateState.UNPRESSED] = "UNPRESSED"
____exports.PressurePlateState.STATE_1_UNKNOWN = 1
____exports.PressurePlateState[____exports.PressurePlateState.STATE_1_UNKNOWN] = "STATE_1_UNKNOWN"
____exports.PressurePlateState.STATE_2_UNKNOWN = 2
____exports.PressurePlateState[____exports.PressurePlateState.STATE_2_UNKNOWN] = "STATE_2_UNKNOWN"
____exports.PressurePlateState.PRESSURE_PLATE_PRESSED = 3
____exports.PressurePlateState[____exports.PressurePlateState.PRESSURE_PLATE_PRESSED] = "PRESSURE_PLATE_PRESSED"
____exports.PressurePlateState.REWARD_PLATE_PRESSED = 4
____exports.PressurePlateState[____exports.PressurePlateState.REWARD_PLATE_PRESSED] = "REWARD_PLATE_PRESSED"
--- For `GridEntityType.TELEPORTER` (23)
____exports.TeleporterState = {}
____exports.TeleporterState.NORMAL = 0
____exports.TeleporterState[____exports.TeleporterState.NORMAL] = "NORMAL"
____exports.TeleporterState.ACTIVATED = 1
____exports.TeleporterState[____exports.TeleporterState.ACTIVATED] = "ACTIVATED"
____exports.TeleporterState.DISABLED = 2
____exports.TeleporterState[____exports.TeleporterState.DISABLED] = "DISABLED"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.collections.gridEntityVariants"] = function(...) 
local ____exports = {}
--- For `GridEntityType.ROCK` (2)
____exports.RockVariant = {}
____exports.RockVariant.NORMAL = 0
____exports.RockVariant[____exports.RockVariant.NORMAL] = "NORMAL"
____exports.RockVariant.EVENT = 1
____exports.RockVariant[____exports.RockVariant.EVENT] = "EVENT"
--- For `GridEntityType.PIT` (7)
____exports.PitVariant = {}
____exports.PitVariant.NORMAL = 0
____exports.PitVariant[____exports.PitVariant.NORMAL] = "NORMAL"
____exports.PitVariant.FISSURE_SPAWNER = 16
____exports.PitVariant[____exports.PitVariant.FISSURE_SPAWNER] = "FISSURE_SPAWNER"
--- For `GridEntityType.POOP` (14)
____exports.PoopGridEntityVariant = {}
____exports.PoopGridEntityVariant.NORMAL = 0
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.NORMAL] = "NORMAL"
____exports.PoopGridEntityVariant.RED = 1
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.RED] = "RED"
____exports.PoopGridEntityVariant.CORN = 2
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.CORN] = "CORN"
____exports.PoopGridEntityVariant.GOLDEN = 3
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.GOLDEN] = "GOLDEN"
____exports.PoopGridEntityVariant.RAINBOW = 4
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.RAINBOW] = "RAINBOW"
____exports.PoopGridEntityVariant.BLACK = 5
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.BLACK] = "BLACK"
____exports.PoopGridEntityVariant.WHITE = 6
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.WHITE] = "WHITE"
____exports.PoopGridEntityVariant.GIGA_TOP_LEFT = 7
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.GIGA_TOP_LEFT] = "GIGA_TOP_LEFT"
____exports.PoopGridEntityVariant.GIGA_TOP_RIGHT = 8
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.GIGA_TOP_RIGHT] = "GIGA_TOP_RIGHT"
____exports.PoopGridEntityVariant.GIGA_BOTTOM_LEFT = 9
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.GIGA_BOTTOM_LEFT] = "GIGA_BOTTOM_LEFT"
____exports.PoopGridEntityVariant.GIGA_BOTTOM_RIGHT = 10
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.GIGA_BOTTOM_RIGHT] = "GIGA_BOTTOM_RIGHT"
____exports.PoopGridEntityVariant.CHARMING = 11
____exports.PoopGridEntityVariant[____exports.PoopGridEntityVariant.CHARMING] = "CHARMING"
--- For `GridEntityType.DOOR` (16)
____exports.DoorVariant = {}
____exports.DoorVariant.UNSPECIFIED = 0
____exports.DoorVariant[____exports.DoorVariant.UNSPECIFIED] = "UNSPECIFIED"
____exports.DoorVariant.LOCKED = 1
____exports.DoorVariant[____exports.DoorVariant.LOCKED] = "LOCKED"
____exports.DoorVariant.LOCKED_DOUBLE = 2
____exports.DoorVariant[____exports.DoorVariant.LOCKED_DOUBLE] = "LOCKED_DOUBLE"
____exports.DoorVariant.LOCKED_CRACKED = 3
____exports.DoorVariant[____exports.DoorVariant.LOCKED_CRACKED] = "LOCKED_CRACKED"
____exports.DoorVariant.LOCKED_BARRED = 4
____exports.DoorVariant[____exports.DoorVariant.LOCKED_BARRED] = "LOCKED_BARRED"
____exports.DoorVariant.LOCKED_KEY_FAMILIAR = 5
____exports.DoorVariant[____exports.DoorVariant.LOCKED_KEY_FAMILIAR] = "LOCKED_KEY_FAMILIAR"
____exports.DoorVariant.LOCKED_GREED = 6
____exports.DoorVariant[____exports.DoorVariant.LOCKED_GREED] = "LOCKED_GREED"
____exports.DoorVariant.HIDDEN = 7
____exports.DoorVariant[____exports.DoorVariant.HIDDEN] = "HIDDEN"
____exports.DoorVariant.UNLOCKED = 8
____exports.DoorVariant[____exports.DoorVariant.UNLOCKED] = "UNLOCKED"
--- For `GridEntityType.TRAPDOOR` (17)
____exports.TrapdoorVariant = {}
____exports.TrapdoorVariant.NORMAL = 0
____exports.TrapdoorVariant[____exports.TrapdoorVariant.NORMAL] = "NORMAL"
____exports.TrapdoorVariant.VOID_PORTAL = 1
____exports.TrapdoorVariant[____exports.TrapdoorVariant.VOID_PORTAL] = "VOID_PORTAL"
--- For `GridEntityType.CRAWL_SPACE` (18)
____exports.CrawlSpaceVariant = {}
____exports.CrawlSpaceVariant.NORMAL = 0
____exports.CrawlSpaceVariant[____exports.CrawlSpaceVariant.NORMAL] = "NORMAL"
____exports.CrawlSpaceVariant.GREAT_GIDEON = 1
____exports.CrawlSpaceVariant[____exports.CrawlSpaceVariant.GREAT_GIDEON] = "GREAT_GIDEON"
____exports.CrawlSpaceVariant.SECRET_SHOP = 2
____exports.CrawlSpaceVariant[____exports.CrawlSpaceVariant.SECRET_SHOP] = "SECRET_SHOP"
____exports.CrawlSpaceVariant.PASSAGE_TO_BEGINNING_OF_FLOOR = 3
____exports.CrawlSpaceVariant[____exports.CrawlSpaceVariant.PASSAGE_TO_BEGINNING_OF_FLOOR] = "PASSAGE_TO_BEGINNING_OF_FLOOR"
____exports.CrawlSpaceVariant.NULL = 4
____exports.CrawlSpaceVariant[____exports.CrawlSpaceVariant.NULL] = "NULL"
--- For `GridEntityType.PRESSURE_PLATE` (20)
____exports.PressurePlateVariant = {}
____exports.PressurePlateVariant.PRESSURE_PLATE = 0
____exports.PressurePlateVariant[____exports.PressurePlateVariant.PRESSURE_PLATE] = "PRESSURE_PLATE"
____exports.PressurePlateVariant.REWARD_PLATE = 1
____exports.PressurePlateVariant[____exports.PressurePlateVariant.REWARD_PLATE] = "REWARD_PLATE"
____exports.PressurePlateVariant.GREED_PLATE = 2
____exports.PressurePlateVariant[____exports.PressurePlateVariant.GREED_PLATE] = "GREED_PLATE"
____exports.PressurePlateVariant.RAIL_PLATE = 3
____exports.PressurePlateVariant[____exports.PressurePlateVariant.RAIL_PLATE] = "RAIL_PLATE"
____exports.PressurePlateVariant.KILL_ALL_ENEMIES_PLATE = 9
____exports.PressurePlateVariant[____exports.PressurePlateVariant.KILL_ALL_ENEMIES_PLATE] = "KILL_ALL_ENEMIES_PLATE"
____exports.PressurePlateVariant.SPAWN_ROCKS_PLATE = 10
____exports.PressurePlateVariant[____exports.PressurePlateVariant.SPAWN_ROCKS_PLATE] = "SPAWN_ROCKS_PLATE"
--- For `GridEntityType.STATUE` (21)
____exports.StatueVariant = {}
____exports.StatueVariant.DEVIL = 0
____exports.StatueVariant[____exports.StatueVariant.DEVIL] = "DEVIL"
____exports.StatueVariant.ANGEL = 1
____exports.StatueVariant[____exports.StatueVariant.ANGEL] = "ANGEL"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.collections.roomSubTypes"] = function(...) 
local ____exports = {}
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.SHOP` (2)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file.
____exports.ShopSubType = {}
____exports.ShopSubType.LEVEL_1 = 0
____exports.ShopSubType[____exports.ShopSubType.LEVEL_1] = "LEVEL_1"
____exports.ShopSubType.LEVEL_2 = 1
____exports.ShopSubType[____exports.ShopSubType.LEVEL_2] = "LEVEL_2"
____exports.ShopSubType.LEVEL_3 = 2
____exports.ShopSubType[____exports.ShopSubType.LEVEL_3] = "LEVEL_3"
____exports.ShopSubType.LEVEL_4 = 3
____exports.ShopSubType[____exports.ShopSubType.LEVEL_4] = "LEVEL_4"
____exports.ShopSubType.LEVEL_5 = 4
____exports.ShopSubType[____exports.ShopSubType.LEVEL_5] = "LEVEL_5"
____exports.ShopSubType.RARE_GOOD = 10
____exports.ShopSubType[____exports.ShopSubType.RARE_GOOD] = "RARE_GOOD"
____exports.ShopSubType.RARE_BAD = 11
____exports.ShopSubType[____exports.ShopSubType.RARE_BAD] = "RARE_BAD"
____exports.ShopSubType.TAINTED_KEEPER_LEVEL_1 = 100
____exports.ShopSubType[____exports.ShopSubType.TAINTED_KEEPER_LEVEL_1] = "TAINTED_KEEPER_LEVEL_1"
____exports.ShopSubType.TAINTED_KEEPER_LEVEL_2 = 101
____exports.ShopSubType[____exports.ShopSubType.TAINTED_KEEPER_LEVEL_2] = "TAINTED_KEEPER_LEVEL_2"
____exports.ShopSubType.TAINTED_KEEPER_LEVEL_3 = 102
____exports.ShopSubType[____exports.ShopSubType.TAINTED_KEEPER_LEVEL_3] = "TAINTED_KEEPER_LEVEL_3"
____exports.ShopSubType.TAINTED_KEEPER_LEVEL_4 = 103
____exports.ShopSubType[____exports.ShopSubType.TAINTED_KEEPER_LEVEL_4] = "TAINTED_KEEPER_LEVEL_4"
____exports.ShopSubType.TAINTED_KEEPER_LEVEL_5 = 104
____exports.ShopSubType[____exports.ShopSubType.TAINTED_KEEPER_LEVEL_5] = "TAINTED_KEEPER_LEVEL_5"
____exports.ShopSubType.TAINTED_KEEPER_RARE_GOOD = 110
____exports.ShopSubType[____exports.ShopSubType.TAINTED_KEEPER_RARE_GOOD] = "TAINTED_KEEPER_RARE_GOOD"
____exports.ShopSubType.TAINTED_KEEPER_RARE_BAD = 111
____exports.ShopSubType[____exports.ShopSubType.TAINTED_KEEPER_RARE_BAD] = "TAINTED_KEEPER_RARE_BAD"
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.TREASURE` (4)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file and elsewhere.
____exports.TreasureRoomSubType = {}
____exports.TreasureRoomSubType.NORMAL = 0
____exports.TreasureRoomSubType[____exports.TreasureRoomSubType.NORMAL] = "NORMAL"
____exports.TreasureRoomSubType.MORE_OPTIONS = 1
____exports.TreasureRoomSubType[____exports.TreasureRoomSubType.MORE_OPTIONS] = "MORE_OPTIONS"
____exports.TreasureRoomSubType.PAY_TO_WIN = 2
____exports.TreasureRoomSubType[____exports.TreasureRoomSubType.PAY_TO_WIN] = "PAY_TO_WIN"
____exports.TreasureRoomSubType.MORE_OPTIONS_AND_PAY_TO_WIN = 3
____exports.TreasureRoomSubType[____exports.TreasureRoomSubType.MORE_OPTIONS_AND_PAY_TO_WIN] = "MORE_OPTIONS_AND_PAY_TO_WIN"
____exports.TreasureRoomSubType.KNIFE_PIECE = 34
____exports.TreasureRoomSubType[____exports.TreasureRoomSubType.KNIFE_PIECE] = "KNIFE_PIECE"
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.BOSS` (5)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file.
-- 
-- The enum is named this way to match the `Entity.GetBossID`, `Room.GetBossID` and
-- `Room.GetSecondBossID` methods.
____exports.BossID = {}
____exports.BossID.MONSTRO = 1
____exports.BossID[____exports.BossID.MONSTRO] = "MONSTRO"
____exports.BossID.LARRY_JR = 2
____exports.BossID[____exports.BossID.LARRY_JR] = "LARRY_JR"
____exports.BossID.CHUB = 3
____exports.BossID[____exports.BossID.CHUB] = "CHUB"
____exports.BossID.GURDY = 4
____exports.BossID[____exports.BossID.GURDY] = "GURDY"
____exports.BossID.MONSTRO_II = 5
____exports.BossID[____exports.BossID.MONSTRO_II] = "MONSTRO_II"
____exports.BossID.MOM = 6
____exports.BossID[____exports.BossID.MOM] = "MOM"
____exports.BossID.SCOLEX = 7
____exports.BossID[____exports.BossID.SCOLEX] = "SCOLEX"
____exports.BossID.MOMS_HEART = 8
____exports.BossID[____exports.BossID.MOMS_HEART] = "MOMS_HEART"
____exports.BossID.FAMINE = 9
____exports.BossID[____exports.BossID.FAMINE] = "FAMINE"
____exports.BossID.PESTILENCE = 10
____exports.BossID[____exports.BossID.PESTILENCE] = "PESTILENCE"
____exports.BossID.WAR = 11
____exports.BossID[____exports.BossID.WAR] = "WAR"
____exports.BossID.DEATH = 12
____exports.BossID[____exports.BossID.DEATH] = "DEATH"
____exports.BossID.DUKE_OF_FLIES = 13
____exports.BossID[____exports.BossID.DUKE_OF_FLIES] = "DUKE_OF_FLIES"
____exports.BossID.PEEP = 14
____exports.BossID[____exports.BossID.PEEP] = "PEEP"
____exports.BossID.LOKI = 15
____exports.BossID[____exports.BossID.LOKI] = "LOKI"
____exports.BossID.BLASTOCYST = 16
____exports.BossID[____exports.BossID.BLASTOCYST] = "BLASTOCYST"
____exports.BossID.GEMINI = 17
____exports.BossID[____exports.BossID.GEMINI] = "GEMINI"
____exports.BossID.FISTULA = 18
____exports.BossID[____exports.BossID.FISTULA] = "FISTULA"
____exports.BossID.GISH = 19
____exports.BossID[____exports.BossID.GISH] = "GISH"
____exports.BossID.STEVEN = 20
____exports.BossID[____exports.BossID.STEVEN] = "STEVEN"
____exports.BossID.CHAD = 21
____exports.BossID[____exports.BossID.CHAD] = "CHAD"
____exports.BossID.HEADLESS_HORSEMAN = 22
____exports.BossID[____exports.BossID.HEADLESS_HORSEMAN] = "HEADLESS_HORSEMAN"
____exports.BossID.THE_FALLEN = 23
____exports.BossID[____exports.BossID.THE_FALLEN] = "THE_FALLEN"
____exports.BossID.SATAN = 24
____exports.BossID[____exports.BossID.SATAN] = "SATAN"
____exports.BossID.IT_LIVES = 25
____exports.BossID[____exports.BossID.IT_LIVES] = "IT_LIVES"
____exports.BossID.THE_HOLLOW = 26
____exports.BossID[____exports.BossID.THE_HOLLOW] = "THE_HOLLOW"
____exports.BossID.THE_CARRION_QUEEN = 27
____exports.BossID[____exports.BossID.THE_CARRION_QUEEN] = "THE_CARRION_QUEEN"
____exports.BossID.GURDY_JR = 28
____exports.BossID[____exports.BossID.GURDY_JR] = "GURDY_JR"
____exports.BossID.THE_HUSK = 29
____exports.BossID[____exports.BossID.THE_HUSK] = "THE_HUSK"
____exports.BossID.THE_BLOAT = 30
____exports.BossID[____exports.BossID.THE_BLOAT] = "THE_BLOAT"
____exports.BossID.LOKII = 31
____exports.BossID[____exports.BossID.LOKII] = "LOKII"
____exports.BossID.THE_BLIGHTED_OVUM = 32
____exports.BossID[____exports.BossID.THE_BLIGHTED_OVUM] = "THE_BLIGHTED_OVUM"
____exports.BossID.TERATOMA = 33
____exports.BossID[____exports.BossID.TERATOMA] = "TERATOMA"
____exports.BossID.THE_WIDOW = 34
____exports.BossID[____exports.BossID.THE_WIDOW] = "THE_WIDOW"
____exports.BossID.MASK_OF_INFAMY = 35
____exports.BossID[____exports.BossID.MASK_OF_INFAMY] = "MASK_OF_INFAMY"
____exports.BossID.THE_WRETCHED = 36
____exports.BossID[____exports.BossID.THE_WRETCHED] = "THE_WRETCHED"
____exports.BossID.PIN = 37
____exports.BossID[____exports.BossID.PIN] = "PIN"
____exports.BossID.CONQUEST = 38
____exports.BossID[____exports.BossID.CONQUEST] = "CONQUEST"
____exports.BossID.ISAAC = 39
____exports.BossID[____exports.BossID.ISAAC] = "ISAAC"
____exports.BossID.BLUE_BABY = 40
____exports.BossID[____exports.BossID.BLUE_BABY] = "BLUE_BABY"
____exports.BossID.DADDY_LONG_LEGS = 41
____exports.BossID[____exports.BossID.DADDY_LONG_LEGS] = "DADDY_LONG_LEGS"
____exports.BossID.TRIACHNID = 42
____exports.BossID[____exports.BossID.TRIACHNID] = "TRIACHNID"
____exports.BossID.THE_HAUNT = 43
____exports.BossID[____exports.BossID.THE_HAUNT] = "THE_HAUNT"
____exports.BossID.DINGLE = 44
____exports.BossID[____exports.BossID.DINGLE] = "DINGLE"
____exports.BossID.MEGA_MAW = 45
____exports.BossID[____exports.BossID.MEGA_MAW] = "MEGA_MAW"
____exports.BossID.MEGA_MAW_II = 46
____exports.BossID[____exports.BossID.MEGA_MAW_II] = "MEGA_MAW_II"
____exports.BossID.MEGA_FATTY = 47
____exports.BossID[____exports.BossID.MEGA_FATTY] = "MEGA_FATTY"
____exports.BossID.MEGA_FATTY_II = 48
____exports.BossID[____exports.BossID.MEGA_FATTY_II] = "MEGA_FATTY_II"
____exports.BossID.MEGA_GURDY = 49
____exports.BossID[____exports.BossID.MEGA_GURDY] = "MEGA_GURDY"
____exports.BossID.DARK_ONE = 50
____exports.BossID[____exports.BossID.DARK_ONE] = "DARK_ONE"
____exports.BossID.DARK_ONE_II = 51
____exports.BossID[____exports.BossID.DARK_ONE_II] = "DARK_ONE_II"
____exports.BossID.POLYCEPHALUS = 52
____exports.BossID[____exports.BossID.POLYCEPHALUS] = "POLYCEPHALUS"
____exports.BossID.MEGA_FRED = 53
____exports.BossID[____exports.BossID.MEGA_FRED] = "MEGA_FRED"
____exports.BossID.THE_LAMB = 54
____exports.BossID[____exports.BossID.THE_LAMB] = "THE_LAMB"
____exports.BossID.MEGA_SATAN = 55
____exports.BossID[____exports.BossID.MEGA_SATAN] = "MEGA_SATAN"
____exports.BossID.GURGLINGS = 56
____exports.BossID[____exports.BossID.GURGLINGS] = "GURGLINGS"
____exports.BossID.THE_STAIN = 57
____exports.BossID[____exports.BossID.THE_STAIN] = "THE_STAIN"
____exports.BossID.BROWNIE = 58
____exports.BossID[____exports.BossID.BROWNIE] = "BROWNIE"
____exports.BossID.THE_FORSAKEN = 59
____exports.BossID[____exports.BossID.THE_FORSAKEN] = "THE_FORSAKEN"
____exports.BossID.LITTLE_HORN = 60
____exports.BossID[____exports.BossID.LITTLE_HORN] = "LITTLE_HORN"
____exports.BossID.RAG_MAN = 61
____exports.BossID[____exports.BossID.RAG_MAN] = "RAG_MAN"
____exports.BossID.ULTRA_GREED = 62
____exports.BossID[____exports.BossID.ULTRA_GREED] = "ULTRA_GREED"
____exports.BossID.HUSH = 63
____exports.BossID[____exports.BossID.HUSH] = "HUSH"
____exports.BossID.DANGLE = 64
____exports.BossID[____exports.BossID.DANGLE] = "DANGLE"
____exports.BossID.TURDLING = 65
____exports.BossID[____exports.BossID.TURDLING] = "TURDLING"
____exports.BossID.THE_FRAIL = 66
____exports.BossID[____exports.BossID.THE_FRAIL] = "THE_FRAIL"
____exports.BossID.RAG_MEGA = 67
____exports.BossID[____exports.BossID.RAG_MEGA] = "RAG_MEGA"
____exports.BossID.SISTERS_VIS = 68
____exports.BossID[____exports.BossID.SISTERS_VIS] = "SISTERS_VIS"
____exports.BossID.BIG_HORN = 69
____exports.BossID[____exports.BossID.BIG_HORN] = "BIG_HORN"
____exports.BossID.DELIRIUM = 70
____exports.BossID[____exports.BossID.DELIRIUM] = "DELIRIUM"
____exports.BossID.THE_MATRIARCH = 72
____exports.BossID[____exports.BossID.THE_MATRIARCH] = "THE_MATRIARCH"
____exports.BossID.THE_PILE = 73
____exports.BossID[____exports.BossID.THE_PILE] = "THE_PILE"
____exports.BossID.REAP_CREEP = 74
____exports.BossID[____exports.BossID.REAP_CREEP] = "REAP_CREEP"
____exports.BossID.LIL_BLUB = 75
____exports.BossID[____exports.BossID.LIL_BLUB] = "LIL_BLUB"
____exports.BossID.WORMWOOD = 76
____exports.BossID[____exports.BossID.WORMWOOD] = "WORMWOOD"
____exports.BossID.RAINMAKER = 77
____exports.BossID[____exports.BossID.RAINMAKER] = "RAINMAKER"
____exports.BossID.THE_VISAGE = 78
____exports.BossID[____exports.BossID.THE_VISAGE] = "THE_VISAGE"
____exports.BossID.THE_SIREN = 79
____exports.BossID[____exports.BossID.THE_SIREN] = "THE_SIREN"
____exports.BossID.TUFF_TWINS = 80
____exports.BossID[____exports.BossID.TUFF_TWINS] = "TUFF_TWINS"
____exports.BossID.THE_HERETIC = 81
____exports.BossID[____exports.BossID.THE_HERETIC] = "THE_HERETIC"
____exports.BossID.HORNFEL = 82
____exports.BossID[____exports.BossID.HORNFEL] = "HORNFEL"
____exports.BossID.GREAT_GIDEON = 83
____exports.BossID[____exports.BossID.GREAT_GIDEON] = "GREAT_GIDEON"
____exports.BossID.BABY_PLUM = 84
____exports.BossID[____exports.BossID.BABY_PLUM] = "BABY_PLUM"
____exports.BossID.THE_SCOURGE = 85
____exports.BossID[____exports.BossID.THE_SCOURGE] = "THE_SCOURGE"
____exports.BossID.CHIMERA = 86
____exports.BossID[____exports.BossID.CHIMERA] = "CHIMERA"
____exports.BossID.ROTGUT = 87
____exports.BossID[____exports.BossID.ROTGUT] = "ROTGUT"
____exports.BossID.MOTHER = 88
____exports.BossID[____exports.BossID.MOTHER] = "MOTHER"
____exports.BossID.MAUSOLEUM_MOM = 89
____exports.BossID[____exports.BossID.MAUSOLEUM_MOM] = "MAUSOLEUM_MOM"
____exports.BossID.MAUSOLEUM_MOMS_HEART = 90
____exports.BossID[____exports.BossID.MAUSOLEUM_MOMS_HEART] = "MAUSOLEUM_MOMS_HEART"
____exports.BossID.MIN_MIN = 91
____exports.BossID[____exports.BossID.MIN_MIN] = "MIN_MIN"
____exports.BossID.CLOG = 92
____exports.BossID[____exports.BossID.CLOG] = "CLOG"
____exports.BossID.SINGE = 93
____exports.BossID[____exports.BossID.SINGE] = "SINGE"
____exports.BossID.BUMBINO = 94
____exports.BossID[____exports.BossID.BUMBINO] = "BUMBINO"
____exports.BossID.COLOSTOMIA = 95
____exports.BossID[____exports.BossID.COLOSTOMIA] = "COLOSTOMIA"
____exports.BossID.THE_SHELL = 96
____exports.BossID[____exports.BossID.THE_SHELL] = "THE_SHELL"
____exports.BossID.TURDLET = 97
____exports.BossID[____exports.BossID.TURDLET] = "TURDLET"
____exports.BossID.RAGLICH = 98
____exports.BossID[____exports.BossID.RAGLICH] = "RAGLICH"
____exports.BossID.DOGMA = 99
____exports.BossID[____exports.BossID.DOGMA] = "DOGMA"
____exports.BossID.BEAST = 100
____exports.BossID[____exports.BossID.BEAST] = "BEAST"
____exports.BossID.HORNY_BOYS = 101
____exports.BossID[____exports.BossID.HORNY_BOYS] = "HORNY_BOYS"
____exports.BossID.CLUTCH = 102
____exports.BossID[____exports.BossID.CLUTCH] = "CLUTCH"
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.MINIBOSS` (6)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file.
-- 
-- The enum is named this way to match the `BossID` enum.
____exports.MinibossID = {}
____exports.MinibossID.SLOTH = 0
____exports.MinibossID[____exports.MinibossID.SLOTH] = "SLOTH"
____exports.MinibossID.LUST = 1
____exports.MinibossID[____exports.MinibossID.LUST] = "LUST"
____exports.MinibossID.WRATH = 2
____exports.MinibossID[____exports.MinibossID.WRATH] = "WRATH"
____exports.MinibossID.GLUTTONY = 3
____exports.MinibossID[____exports.MinibossID.GLUTTONY] = "GLUTTONY"
____exports.MinibossID.GREED = 4
____exports.MinibossID[____exports.MinibossID.GREED] = "GREED"
____exports.MinibossID.ENVY = 5
____exports.MinibossID[____exports.MinibossID.ENVY] = "ENVY"
____exports.MinibossID.PRIDE = 6
____exports.MinibossID[____exports.MinibossID.PRIDE] = "PRIDE"
____exports.MinibossID.SUPER_SLOTH = 7
____exports.MinibossID[____exports.MinibossID.SUPER_SLOTH] = "SUPER_SLOTH"
____exports.MinibossID.SUPER_LUST = 8
____exports.MinibossID[____exports.MinibossID.SUPER_LUST] = "SUPER_LUST"
____exports.MinibossID.SUPER_WRATH = 9
____exports.MinibossID[____exports.MinibossID.SUPER_WRATH] = "SUPER_WRATH"
____exports.MinibossID.SUPER_GLUTTONY = 10
____exports.MinibossID[____exports.MinibossID.SUPER_GLUTTONY] = "SUPER_GLUTTONY"
____exports.MinibossID.SUPER_GREED = 11
____exports.MinibossID[____exports.MinibossID.SUPER_GREED] = "SUPER_GREED"
____exports.MinibossID.SUPER_ENVY = 12
____exports.MinibossID[____exports.MinibossID.SUPER_ENVY] = "SUPER_ENVY"
____exports.MinibossID.SUPER_PRIDE = 13
____exports.MinibossID[____exports.MinibossID.SUPER_PRIDE] = "SUPER_PRIDE"
____exports.MinibossID.ULTRA_PRIDE = 14
____exports.MinibossID[____exports.MinibossID.ULTRA_PRIDE] = "ULTRA_PRIDE"
____exports.MinibossID.KRAMPUS = 15
____exports.MinibossID[____exports.MinibossID.KRAMPUS] = "KRAMPUS"
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.CURSE` (10)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file.
____exports.CurseRoomSubType = {}
____exports.CurseRoomSubType.NORMAL = 0
____exports.CurseRoomSubType[____exports.CurseRoomSubType.NORMAL] = "NORMAL"
____exports.CurseRoomSubType.VOODOO_HEAD = 1
____exports.CurseRoomSubType[____exports.CurseRoomSubType.VOODOO_HEAD] = "VOODOO_HEAD"
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.CHALLENGE` (11)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file and elsewhere.
____exports.ChallengeRoomSubType = {}
____exports.ChallengeRoomSubType.NORMAL = 0
____exports.ChallengeRoomSubType[____exports.ChallengeRoomSubType.NORMAL] = "NORMAL"
____exports.ChallengeRoomSubType.BOSS = 1
____exports.ChallengeRoomSubType[____exports.ChallengeRoomSubType.BOSS] = "BOSS"
____exports.ChallengeRoomSubType.NORMAL_WAVE = 10
____exports.ChallengeRoomSubType[____exports.ChallengeRoomSubType.NORMAL_WAVE] = "NORMAL_WAVE"
____exports.ChallengeRoomSubType.BOSS_WAVE = 11
____exports.ChallengeRoomSubType[____exports.ChallengeRoomSubType.BOSS_WAVE] = "BOSS_WAVE"
____exports.ChallengeRoomSubType.GREAT_GIDEON_WAVE = 12
____exports.ChallengeRoomSubType[____exports.ChallengeRoomSubType.GREAT_GIDEON_WAVE] = "GREAT_GIDEON_WAVE"
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.LIBRARY` (12)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file.
____exports.LibrarySubType = {}
____exports.LibrarySubType.LEVEL_1 = 0
____exports.LibrarySubType[____exports.LibrarySubType.LEVEL_1] = "LEVEL_1"
____exports.LibrarySubType.LEVEL_2 = 1
____exports.LibrarySubType[____exports.LibrarySubType.LEVEL_2] = "LEVEL_2"
____exports.LibrarySubType.LEVEL_3 = 2
____exports.LibrarySubType[____exports.LibrarySubType.LEVEL_3] = "LEVEL_3"
____exports.LibrarySubType.LEVEL_4 = 3
____exports.LibrarySubType[____exports.LibrarySubType.LEVEL_4] = "LEVEL_4"
____exports.LibrarySubType.LEVEL_5 = 4
____exports.LibrarySubType[____exports.LibrarySubType.LEVEL_5] = "LEVEL_5"
____exports.LibrarySubType.EXTRA_GOOD = 10
____exports.LibrarySubType[____exports.LibrarySubType.EXTRA_GOOD] = "EXTRA_GOOD"
____exports.LibrarySubType.EXTRA_BAD = 11
____exports.LibrarySubType[____exports.LibrarySubType.EXTRA_BAD] = "EXTRA_BAD"
____exports.LibrarySubType.TAINTED_KEEPER_LEVEL_1 = 100
____exports.LibrarySubType[____exports.LibrarySubType.TAINTED_KEEPER_LEVEL_1] = "TAINTED_KEEPER_LEVEL_1"
____exports.LibrarySubType.TAINTED_KEEPER_LEVEL_2 = 101
____exports.LibrarySubType[____exports.LibrarySubType.TAINTED_KEEPER_LEVEL_2] = "TAINTED_KEEPER_LEVEL_2"
____exports.LibrarySubType.TAINTED_KEEPER_LEVEL_3 = 102
____exports.LibrarySubType[____exports.LibrarySubType.TAINTED_KEEPER_LEVEL_3] = "TAINTED_KEEPER_LEVEL_3"
____exports.LibrarySubType.TAINTED_KEEPER_LEVEL_4 = 103
____exports.LibrarySubType[____exports.LibrarySubType.TAINTED_KEEPER_LEVEL_4] = "TAINTED_KEEPER_LEVEL_4"
____exports.LibrarySubType.TAINTED_KEEPER_LEVEL_5 = 104
____exports.LibrarySubType[____exports.LibrarySubType.TAINTED_KEEPER_LEVEL_5] = "TAINTED_KEEPER_LEVEL_5"
____exports.LibrarySubType.TAINTED_KEEPER_EXTRA_GOOD = 110
____exports.LibrarySubType[____exports.LibrarySubType.TAINTED_KEEPER_EXTRA_GOOD] = "TAINTED_KEEPER_EXTRA_GOOD"
____exports.LibrarySubType.TAINTED_KEEPER_EXTRA_BAD = 111
____exports.LibrarySubType[____exports.LibrarySubType.TAINTED_KEEPER_EXTRA_BAD] = "TAINTED_KEEPER_EXTRA_BAD"
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.DEVIL` (14)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file.
____exports.DevilRoomSubType = {}
____exports.DevilRoomSubType.NORMAL = 0
____exports.DevilRoomSubType[____exports.DevilRoomSubType.NORMAL] = "NORMAL"
____exports.DevilRoomSubType.NUMBER_SIX_TRINKET = 1
____exports.DevilRoomSubType[____exports.DevilRoomSubType.NUMBER_SIX_TRINKET] = "NUMBER_SIX_TRINKET"
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.ANGEL` (15)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file.
____exports.AngelRoomSubType = {}
____exports.AngelRoomSubType.NORMAL = 0
____exports.AngelRoomSubType[____exports.AngelRoomSubType.NORMAL] = "NORMAL"
____exports.AngelRoomSubType.SHOP = 1
____exports.AngelRoomSubType[____exports.AngelRoomSubType.SHOP] = "SHOP"
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.DUNGEON` (16)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file and elsewhere.
____exports.DungeonSubType = {}
____exports.DungeonSubType.NORMAL = 0
____exports.DungeonSubType[____exports.DungeonSubType.NORMAL] = "NORMAL"
____exports.DungeonSubType.GIDEONS_GRAVE = 1
____exports.DungeonSubType[____exports.DungeonSubType.GIDEONS_GRAVE] = "GIDEONS_GRAVE"
____exports.DungeonSubType.ROTGUT_MAGGOT = 2
____exports.DungeonSubType[____exports.DungeonSubType.ROTGUT_MAGGOT] = "ROTGUT_MAGGOT"
____exports.DungeonSubType.ROTGUT_HEART = 3
____exports.DungeonSubType[____exports.DungeonSubType.ROTGUT_HEART] = "ROTGUT_HEART"
____exports.DungeonSubType.BEAST_ROOM = 4
____exports.DungeonSubType[____exports.DungeonSubType.BEAST_ROOM] = "BEAST_ROOM"
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.CLEAN` (18)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file.
____exports.IsaacsRoomSubType = {}
____exports.IsaacsRoomSubType.NORMAL = 0
____exports.IsaacsRoomSubType[____exports.IsaacsRoomSubType.NORMAL] = "NORMAL"
____exports.IsaacsRoomSubType.GENESIS = 99
____exports.IsaacsRoomSubType[____exports.IsaacsRoomSubType.GENESIS] = "GENESIS"
--- For `StageID.SPECIAL_ROOMS` (0), `RoomType.SECRET_EXIT` (27)
-- 
-- This matches the sub-type in the "00.special rooms.stb" file.
____exports.SecretExitSubType = {}
____exports.SecretExitSubType.DOWNPOUR = 1
____exports.SecretExitSubType[____exports.SecretExitSubType.DOWNPOUR] = "DOWNPOUR"
____exports.SecretExitSubType.MINES = 2
____exports.SecretExitSubType[____exports.SecretExitSubType.MINES] = "MINES"
____exports.SecretExitSubType.MAUSOLEUM = 3
____exports.SecretExitSubType[____exports.SecretExitSubType.MAUSOLEUM] = "MAUSOLEUM"
--- For `StageID.DOWNPOUR` (27) and `StageID.DROSS` (28)
-- 
-- For `RoomType.DEFAULT` (1)
-- 
-- This matches the sub-type in the "27.downpour.stb" and "28.dross.stb" files.
____exports.DownpourRoomSubType = {}
____exports.DownpourRoomSubType.NORMAL = 0
____exports.DownpourRoomSubType[____exports.DownpourRoomSubType.NORMAL] = "NORMAL"
____exports.DownpourRoomSubType.WHITE_FIRE = 1
____exports.DownpourRoomSubType[____exports.DownpourRoomSubType.WHITE_FIRE] = "WHITE_FIRE"
____exports.DownpourRoomSubType.MIRROR = 34
____exports.DownpourRoomSubType[____exports.DownpourRoomSubType.MIRROR] = "MIRROR"
--- For `StageID.MINES` (29) and `StageID.ASHPIT` (30)
-- 
-- For `RoomType.DEFAULT` (1)
-- 
-- This matches the sub-type in the "29.mines.stb" and "30.ashpit.stb" files.
____exports.MinesRoomSubType = {}
____exports.MinesRoomSubType.NORMAL = 0
____exports.MinesRoomSubType[____exports.MinesRoomSubType.NORMAL] = "NORMAL"
____exports.MinesRoomSubType.BUTTON_ROOM = 1
____exports.MinesRoomSubType[____exports.MinesRoomSubType.BUTTON_ROOM] = "BUTTON_ROOM"
____exports.MinesRoomSubType.MINESHAFT_ENTRANCE = 10
____exports.MinesRoomSubType[____exports.MinesRoomSubType.MINESHAFT_ENTRANCE] = "MINESHAFT_ENTRANCE"
____exports.MinesRoomSubType.MINESHAFT_LOBBY = 11
____exports.MinesRoomSubType[____exports.MinesRoomSubType.MINESHAFT_LOBBY] = "MINESHAFT_LOBBY"
____exports.MinesRoomSubType.MINESHAFT_KNIFE_PIECE = 20
____exports.MinesRoomSubType[____exports.MinesRoomSubType.MINESHAFT_KNIFE_PIECE] = "MINESHAFT_KNIFE_PIECE"
____exports.MinesRoomSubType.MINESHAFT_ROOM_PRE_CHASE = 30
____exports.MinesRoomSubType[____exports.MinesRoomSubType.MINESHAFT_ROOM_PRE_CHASE] = "MINESHAFT_ROOM_PRE_CHASE"
____exports.MinesRoomSubType.MINESHAFT_ROOM_POST_CHASE = 31
____exports.MinesRoomSubType[____exports.MinesRoomSubType.MINESHAFT_ROOM_POST_CHASE] = "MINESHAFT_ROOM_POST_CHASE"
--- For `StageID.HOME` (35), `RoomType.DEFAULT` (1)
-- 
-- This matches the sub-type in the "35.home.stb" file.
____exports.HomeRoomSubType = {}
____exports.HomeRoomSubType.ISAACS_BEDROOM = 0
____exports.HomeRoomSubType[____exports.HomeRoomSubType.ISAACS_BEDROOM] = "ISAACS_BEDROOM"
____exports.HomeRoomSubType.HALLWAY = 1
____exports.HomeRoomSubType[____exports.HomeRoomSubType.HALLWAY] = "HALLWAY"
____exports.HomeRoomSubType.MOMS_BEDROOM = 2
____exports.HomeRoomSubType[____exports.HomeRoomSubType.MOMS_BEDROOM] = "MOMS_BEDROOM"
____exports.HomeRoomSubType.LIVING_ROOM = 3
____exports.HomeRoomSubType[____exports.HomeRoomSubType.LIVING_ROOM] = "LIVING_ROOM"
____exports.HomeRoomSubType.CLOSET_RIGHT = 10
____exports.HomeRoomSubType[____exports.HomeRoomSubType.CLOSET_RIGHT] = "CLOSET_RIGHT"
____exports.HomeRoomSubType.CLOSET_LEFT = 11
____exports.HomeRoomSubType[____exports.HomeRoomSubType.CLOSET_LEFT] = "CLOSET_LEFT"
____exports.HomeRoomSubType.DEATH_CERTIFICATE_ENTRANCE = 33
____exports.HomeRoomSubType[____exports.HomeRoomSubType.DEATH_CERTIFICATE_ENTRANCE] = "DEATH_CERTIFICATE_ENTRANCE"
____exports.HomeRoomSubType.DEATH_CERTIFICATE_ITEMS = 34
____exports.HomeRoomSubType[____exports.HomeRoomSubType.DEATH_CERTIFICATE_ITEMS] = "DEATH_CERTIFICATE_ITEMS"
--- For `StageID.BACKWARDS` (36), `RoomType.DEFAULT` (1)
-- 
-- This matches the sub-type in the "36.backwards.stb" file.
____exports.BackwardsRoomSubType = {}
____exports.BackwardsRoomSubType.EXIT = 0
____exports.BackwardsRoomSubType[____exports.BackwardsRoomSubType.EXIT] = "EXIT"
____exports.BackwardsRoomSubType.BASEMENT = 1
____exports.BackwardsRoomSubType[____exports.BackwardsRoomSubType.BASEMENT] = "BASEMENT"
____exports.BackwardsRoomSubType.CAVES = 4
____exports.BackwardsRoomSubType[____exports.BackwardsRoomSubType.CAVES] = "CAVES"
____exports.BackwardsRoomSubType.DEPTHS = 7
____exports.BackwardsRoomSubType[____exports.BackwardsRoomSubType.DEPTHS] = "DEPTHS"
____exports.BackwardsRoomSubType.DOWNPOUR = 27
____exports.BackwardsRoomSubType[____exports.BackwardsRoomSubType.DOWNPOUR] = "DOWNPOUR"
____exports.BackwardsRoomSubType.MINES = 29
____exports.BackwardsRoomSubType[____exports.BackwardsRoomSubType.MINES] = "MINES"
____exports.BackwardsRoomSubType.MAUSOLEUM = 31
____exports.BackwardsRoomSubType[____exports.BackwardsRoomSubType.MAUSOLEUM] = "MAUSOLEUM"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.collections.subTypes"] = function(...) 
local ____exports = {}
--- For `EntityType.PLAYER` (1), `PlayerVariant.PLAYER` (0)
-- 
-- This is the sub-type of a player.
-- 
-- Conventionally, variables that have this type are represented as "character" instead of
-- "playerType", since the former is more descriptive of what this value actually represents.
____exports.PlayerType = {}
____exports.PlayerType.POSSESSOR = -1
____exports.PlayerType[____exports.PlayerType.POSSESSOR] = "POSSESSOR"
____exports.PlayerType.ISAAC = 0
____exports.PlayerType[____exports.PlayerType.ISAAC] = "ISAAC"
____exports.PlayerType.MAGDALENE = 1
____exports.PlayerType[____exports.PlayerType.MAGDALENE] = "MAGDALENE"
____exports.PlayerType.CAIN = 2
____exports.PlayerType[____exports.PlayerType.CAIN] = "CAIN"
____exports.PlayerType.JUDAS = 3
____exports.PlayerType[____exports.PlayerType.JUDAS] = "JUDAS"
____exports.PlayerType.BLUE_BABY = 4
____exports.PlayerType[____exports.PlayerType.BLUE_BABY] = "BLUE_BABY"
____exports.PlayerType.EVE = 5
____exports.PlayerType[____exports.PlayerType.EVE] = "EVE"
____exports.PlayerType.SAMSON = 6
____exports.PlayerType[____exports.PlayerType.SAMSON] = "SAMSON"
____exports.PlayerType.AZAZEL = 7
____exports.PlayerType[____exports.PlayerType.AZAZEL] = "AZAZEL"
____exports.PlayerType.LAZARUS = 8
____exports.PlayerType[____exports.PlayerType.LAZARUS] = "LAZARUS"
____exports.PlayerType.EDEN = 9
____exports.PlayerType[____exports.PlayerType.EDEN] = "EDEN"
____exports.PlayerType.THE_LOST = 10
____exports.PlayerType[____exports.PlayerType.THE_LOST] = "THE_LOST"
____exports.PlayerType.LAZARUS_2 = 11
____exports.PlayerType[____exports.PlayerType.LAZARUS_2] = "LAZARUS_2"
____exports.PlayerType.BLACK_JUDAS = 12
____exports.PlayerType[____exports.PlayerType.BLACK_JUDAS] = "BLACK_JUDAS"
____exports.PlayerType.LILITH = 13
____exports.PlayerType[____exports.PlayerType.LILITH] = "LILITH"
____exports.PlayerType.KEEPER = 14
____exports.PlayerType[____exports.PlayerType.KEEPER] = "KEEPER"
____exports.PlayerType.APOLLYON = 15
____exports.PlayerType[____exports.PlayerType.APOLLYON] = "APOLLYON"
____exports.PlayerType.THE_FORGOTTEN = 16
____exports.PlayerType[____exports.PlayerType.THE_FORGOTTEN] = "THE_FORGOTTEN"
____exports.PlayerType.THE_SOUL = 17
____exports.PlayerType[____exports.PlayerType.THE_SOUL] = "THE_SOUL"
____exports.PlayerType.BETHANY = 18
____exports.PlayerType[____exports.PlayerType.BETHANY] = "BETHANY"
____exports.PlayerType.JACOB = 19
____exports.PlayerType[____exports.PlayerType.JACOB] = "JACOB"
____exports.PlayerType.ESAU = 20
____exports.PlayerType[____exports.PlayerType.ESAU] = "ESAU"
____exports.PlayerType.ISAAC_B = 21
____exports.PlayerType[____exports.PlayerType.ISAAC_B] = "ISAAC_B"
____exports.PlayerType.MAGDALENE_B = 22
____exports.PlayerType[____exports.PlayerType.MAGDALENE_B] = "MAGDALENE_B"
____exports.PlayerType.CAIN_B = 23
____exports.PlayerType[____exports.PlayerType.CAIN_B] = "CAIN_B"
____exports.PlayerType.JUDAS_B = 24
____exports.PlayerType[____exports.PlayerType.JUDAS_B] = "JUDAS_B"
____exports.PlayerType.BLUE_BABY_B = 25
____exports.PlayerType[____exports.PlayerType.BLUE_BABY_B] = "BLUE_BABY_B"
____exports.PlayerType.EVE_B = 26
____exports.PlayerType[____exports.PlayerType.EVE_B] = "EVE_B"
____exports.PlayerType.SAMSON_B = 27
____exports.PlayerType[____exports.PlayerType.SAMSON_B] = "SAMSON_B"
____exports.PlayerType.AZAZEL_B = 28
____exports.PlayerType[____exports.PlayerType.AZAZEL_B] = "AZAZEL_B"
____exports.PlayerType.LAZARUS_B = 29
____exports.PlayerType[____exports.PlayerType.LAZARUS_B] = "LAZARUS_B"
____exports.PlayerType.EDEN_B = 30
____exports.PlayerType[____exports.PlayerType.EDEN_B] = "EDEN_B"
____exports.PlayerType.THE_LOST_B = 31
____exports.PlayerType[____exports.PlayerType.THE_LOST_B] = "THE_LOST_B"
____exports.PlayerType.LILITH_B = 32
____exports.PlayerType[____exports.PlayerType.LILITH_B] = "LILITH_B"
____exports.PlayerType.KEEPER_B = 33
____exports.PlayerType[____exports.PlayerType.KEEPER_B] = "KEEPER_B"
____exports.PlayerType.APOLLYON_B = 34
____exports.PlayerType[____exports.PlayerType.APOLLYON_B] = "APOLLYON_B"
____exports.PlayerType.THE_FORGOTTEN_B = 35
____exports.PlayerType[____exports.PlayerType.THE_FORGOTTEN_B] = "THE_FORGOTTEN_B"
____exports.PlayerType.BETHANY_B = 36
____exports.PlayerType[____exports.PlayerType.BETHANY_B] = "BETHANY_B"
____exports.PlayerType.JACOB_B = 37
____exports.PlayerType[____exports.PlayerType.JACOB_B] = "JACOB_B"
____exports.PlayerType.LAZARUS_2_B = 38
____exports.PlayerType[____exports.PlayerType.LAZARUS_2_B] = "LAZARUS_2_B"
____exports.PlayerType.JACOB_2_B = 39
____exports.PlayerType[____exports.PlayerType.JACOB_2_B] = "JACOB_2_B"
____exports.PlayerType.THE_SOUL_B = 40
____exports.PlayerType[____exports.PlayerType.THE_SOUL_B] = "THE_SOUL_B"
--- For `EntityType.PLAYER` (1), `PlayerVariant.COOP_BABY` (1)
____exports.BabySubType = {}
____exports.BabySubType.UNASSIGNED = -1
____exports.BabySubType[____exports.BabySubType.UNASSIGNED] = "UNASSIGNED"
____exports.BabySubType.SPIDER = 0
____exports.BabySubType[____exports.BabySubType.SPIDER] = "SPIDER"
____exports.BabySubType.LOVE = 1
____exports.BabySubType[____exports.BabySubType.LOVE] = "LOVE"
____exports.BabySubType.BLOAT = 2
____exports.BabySubType[____exports.BabySubType.BLOAT] = "BLOAT"
____exports.BabySubType.WATER = 3
____exports.BabySubType[____exports.BabySubType.WATER] = "WATER"
____exports.BabySubType.PSY = 4
____exports.BabySubType[____exports.BabySubType.PSY] = "PSY"
____exports.BabySubType.CURSED = 5
____exports.BabySubType[____exports.BabySubType.CURSED] = "CURSED"
____exports.BabySubType.TROLL = 6
____exports.BabySubType[____exports.BabySubType.TROLL] = "TROLL"
____exports.BabySubType.YBAB = 7
____exports.BabySubType[____exports.BabySubType.YBAB] = "YBAB"
____exports.BabySubType.COCKEYED = 8
____exports.BabySubType[____exports.BabySubType.COCKEYED] = "COCKEYED"
____exports.BabySubType.HOST = 9
____exports.BabySubType[____exports.BabySubType.HOST] = "HOST"
____exports.BabySubType.LOST = 10
____exports.BabySubType[____exports.BabySubType.LOST] = "LOST"
____exports.BabySubType.CUTE = 11
____exports.BabySubType[____exports.BabySubType.CUTE] = "CUTE"
____exports.BabySubType.CROW = 12
____exports.BabySubType[____exports.BabySubType.CROW] = "CROW"
____exports.BabySubType.SHADOW = 13
____exports.BabySubType[____exports.BabySubType.SHADOW] = "SHADOW"
____exports.BabySubType.GLASS = 14
____exports.BabySubType[____exports.BabySubType.GLASS] = "GLASS"
____exports.BabySubType.GOLD = 15
____exports.BabySubType[____exports.BabySubType.GOLD] = "GOLD"
____exports.BabySubType.CY = 16
____exports.BabySubType[____exports.BabySubType.CY] = "CY"
____exports.BabySubType.BEAN = 17
____exports.BabySubType[____exports.BabySubType.BEAN] = "BEAN"
____exports.BabySubType.MAG = 18
____exports.BabySubType[____exports.BabySubType.MAG] = "MAG"
____exports.BabySubType.WRATH = 19
____exports.BabySubType[____exports.BabySubType.WRATH] = "WRATH"
____exports.BabySubType.WRAPPED = 20
____exports.BabySubType[____exports.BabySubType.WRAPPED] = "WRAPPED"
____exports.BabySubType.BEGOTTEN = 21
____exports.BabySubType[____exports.BabySubType.BEGOTTEN] = "BEGOTTEN"
____exports.BabySubType.DEAD = 22
____exports.BabySubType[____exports.BabySubType.DEAD] = "DEAD"
____exports.BabySubType.FIGHTING = 23
____exports.BabySubType[____exports.BabySubType.FIGHTING] = "FIGHTING"
____exports.BabySubType.ZERO = 24
____exports.BabySubType[____exports.BabySubType.ZERO] = "ZERO"
____exports.BabySubType.GLITCH = 25
____exports.BabySubType[____exports.BabySubType.GLITCH] = "GLITCH"
____exports.BabySubType.MAGNET = 26
____exports.BabySubType[____exports.BabySubType.MAGNET] = "MAGNET"
____exports.BabySubType.BLACK = 27
____exports.BabySubType[____exports.BabySubType.BLACK] = "BLACK"
____exports.BabySubType.RED = 28
____exports.BabySubType[____exports.BabySubType.RED] = "RED"
____exports.BabySubType.WHITE = 29
____exports.BabySubType[____exports.BabySubType.WHITE] = "WHITE"
____exports.BabySubType.BLUE = 30
____exports.BabySubType[____exports.BabySubType.BLUE] = "BLUE"
____exports.BabySubType.RAGE = 31
____exports.BabySubType[____exports.BabySubType.RAGE] = "RAGE"
____exports.BabySubType.CRY = 32
____exports.BabySubType[____exports.BabySubType.CRY] = "CRY"
____exports.BabySubType.YELLOW = 33
____exports.BabySubType[____exports.BabySubType.YELLOW] = "YELLOW"
____exports.BabySubType.LONG = 34
____exports.BabySubType[____exports.BabySubType.LONG] = "LONG"
____exports.BabySubType.GREEN = 35
____exports.BabySubType[____exports.BabySubType.GREEN] = "GREEN"
____exports.BabySubType.LIL = 36
____exports.BabySubType[____exports.BabySubType.LIL] = "LIL"
____exports.BabySubType.BIG = 37
____exports.BabySubType[____exports.BabySubType.BIG] = "BIG"
____exports.BabySubType.BROWN = 38
____exports.BabySubType[____exports.BabySubType.BROWN] = "BROWN"
____exports.BabySubType.NOOSE = 39
____exports.BabySubType[____exports.BabySubType.NOOSE] = "NOOSE"
____exports.BabySubType.HIVE = 40
____exports.BabySubType[____exports.BabySubType.HIVE] = "HIVE"
____exports.BabySubType.BUDDY = 41
____exports.BabySubType[____exports.BabySubType.BUDDY] = "BUDDY"
____exports.BabySubType.COLORFUL = 42
____exports.BabySubType[____exports.BabySubType.COLORFUL] = "COLORFUL"
____exports.BabySubType.WHORE = 43
____exports.BabySubType[____exports.BabySubType.WHORE] = "WHORE"
____exports.BabySubType.CRACKED = 44
____exports.BabySubType[____exports.BabySubType.CRACKED] = "CRACKED"
____exports.BabySubType.DRIPPING = 45
____exports.BabySubType[____exports.BabySubType.DRIPPING] = "DRIPPING"
____exports.BabySubType.BLINDING = 46
____exports.BabySubType[____exports.BabySubType.BLINDING] = "BLINDING"
____exports.BabySubType.SUCKY = 47
____exports.BabySubType[____exports.BabySubType.SUCKY] = "SUCKY"
____exports.BabySubType.DARK = 48
____exports.BabySubType[____exports.BabySubType.DARK] = "DARK"
____exports.BabySubType.PICKY = 49
____exports.BabySubType[____exports.BabySubType.PICKY] = "PICKY"
____exports.BabySubType.REVENGE = 50
____exports.BabySubType[____exports.BabySubType.REVENGE] = "REVENGE"
____exports.BabySubType.BELIAL = 51
____exports.BabySubType[____exports.BabySubType.BELIAL] = "BELIAL"
____exports.BabySubType.SALE = 52
____exports.BabySubType[____exports.BabySubType.SALE] = "SALE"
____exports.BabySubType.GOAT = 53
____exports.BabySubType[____exports.BabySubType.GOAT] = "GOAT"
____exports.BabySubType.SUPER_GREED = 54
____exports.BabySubType[____exports.BabySubType.SUPER_GREED] = "SUPER_GREED"
____exports.BabySubType.MORT = 55
____exports.BabySubType[____exports.BabySubType.MORT] = "MORT"
____exports.BabySubType.APOLLYON = 56
____exports.BabySubType[____exports.BabySubType.APOLLYON] = "APOLLYON"
____exports.BabySubType.BONE = 57
____exports.BabySubType[____exports.BabySubType.BONE] = "BONE"
____exports.BabySubType.BOUND = 58
____exports.BabySubType[____exports.BabySubType.BOUND] = "BOUND"
____exports.BabySubType.FOUND_SOUL = 59
____exports.BabySubType[____exports.BabySubType.FOUND_SOUL] = "FOUND_SOUL"
____exports.BabySubType.LOST_WHITE = 60
____exports.BabySubType[____exports.BabySubType.LOST_WHITE] = "LOST_WHITE"
____exports.BabySubType.LOST_BLACK = 61
____exports.BabySubType[____exports.BabySubType.LOST_BLACK] = "LOST_BLACK"
____exports.BabySubType.LOST_BLUE = 62
____exports.BabySubType[____exports.BabySubType.LOST_BLUE] = "LOST_BLUE"
____exports.BabySubType.LOST_GREY = 63
____exports.BabySubType[____exports.BabySubType.LOST_GREY] = "LOST_GREY"
____exports.BabySubType.WISP = 64
____exports.BabySubType[____exports.BabySubType.WISP] = "WISP"
____exports.BabySubType.DOUBLE = 65
____exports.BabySubType[____exports.BabySubType.DOUBLE] = "DOUBLE"
____exports.BabySubType.GLOWING = 66
____exports.BabySubType[____exports.BabySubType.GLOWING] = "GLOWING"
____exports.BabySubType.ILLUSION = 67
____exports.BabySubType[____exports.BabySubType.ILLUSION] = "ILLUSION"
____exports.BabySubType.HOPE = 68
____exports.BabySubType[____exports.BabySubType.HOPE] = "HOPE"
____exports.BabySubType.SOLOMON_A = 69
____exports.BabySubType[____exports.BabySubType.SOLOMON_A] = "SOLOMON_A"
____exports.BabySubType.SOLOMON_B = 70
____exports.BabySubType[____exports.BabySubType.SOLOMON_B] = "SOLOMON_B"
____exports.BabySubType.BASIC = 71
____exports.BabySubType[____exports.BabySubType.BASIC] = "BASIC"
--- For `EntityType.FAMILIAR` (3), `FamiliarVariant.BLUE_FLY` (43)
____exports.BlueFlySubType = {}
____exports.BlueFlySubType.BLUE_FLY = 0
____exports.BlueFlySubType[____exports.BlueFlySubType.BLUE_FLY] = "BLUE_FLY"
____exports.BlueFlySubType.WRATH = 1
____exports.BlueFlySubType[____exports.BlueFlySubType.WRATH] = "WRATH"
____exports.BlueFlySubType.PESTILENCE = 2
____exports.BlueFlySubType[____exports.BlueFlySubType.PESTILENCE] = "PESTILENCE"
____exports.BlueFlySubType.FAMINE = 3
____exports.BlueFlySubType[____exports.BlueFlySubType.FAMINE] = "FAMINE"
____exports.BlueFlySubType.DEATH = 4
____exports.BlueFlySubType[____exports.BlueFlySubType.DEATH] = "DEATH"
____exports.BlueFlySubType.CONQUEST = 5
____exports.BlueFlySubType[____exports.BlueFlySubType.CONQUEST] = "CONQUEST"
--- For `EntityType.FAMILIAR` (3), `FamiliarVariant.DIP` (201)
____exports.DipFamiliarSubType = {}
____exports.DipFamiliarSubType.NORMAL = 0
____exports.DipFamiliarSubType[____exports.DipFamiliarSubType.NORMAL] = "NORMAL"
____exports.DipFamiliarSubType.RED = 1
____exports.DipFamiliarSubType[____exports.DipFamiliarSubType.RED] = "RED"
____exports.DipFamiliarSubType.CORNY = 2
____exports.DipFamiliarSubType[____exports.DipFamiliarSubType.CORNY] = "CORNY"
____exports.DipFamiliarSubType.GOLD = 3
____exports.DipFamiliarSubType[____exports.DipFamiliarSubType.GOLD] = "GOLD"
____exports.DipFamiliarSubType.RAINBOW = 4
____exports.DipFamiliarSubType[____exports.DipFamiliarSubType.RAINBOW] = "RAINBOW"
____exports.DipFamiliarSubType.BLACK = 5
____exports.DipFamiliarSubType[____exports.DipFamiliarSubType.BLACK] = "BLACK"
____exports.DipFamiliarSubType.WHITE = 6
____exports.DipFamiliarSubType[____exports.DipFamiliarSubType.WHITE] = "WHITE"
____exports.DipFamiliarSubType.STONE = 12
____exports.DipFamiliarSubType[____exports.DipFamiliarSubType.STONE] = "STONE"
____exports.DipFamiliarSubType.FLAMING = 13
____exports.DipFamiliarSubType[____exports.DipFamiliarSubType.FLAMING] = "FLAMING"
____exports.DipFamiliarSubType.STINKY = 14
____exports.DipFamiliarSubType[____exports.DipFamiliarSubType.STINKY] = "STINKY"
____exports.DipFamiliarSubType.BROWNIE = 20
____exports.DipFamiliarSubType[____exports.DipFamiliarSubType.BROWNIE] = "BROWNIE"
--- For `EntityType.FAMILIAR` (3), `FamiliarVariant.BLOOD_BABY` (238)
____exports.BloodClotSubType = {}
____exports.BloodClotSubType.RED = 0
____exports.BloodClotSubType[____exports.BloodClotSubType.RED] = "RED"
____exports.BloodClotSubType.SOUL = 1
____exports.BloodClotSubType[____exports.BloodClotSubType.SOUL] = "SOUL"
____exports.BloodClotSubType.BLACK = 2
____exports.BloodClotSubType[____exports.BloodClotSubType.BLACK] = "BLACK"
____exports.BloodClotSubType.ETERNAL = 3
____exports.BloodClotSubType[____exports.BloodClotSubType.ETERNAL] = "ETERNAL"
____exports.BloodClotSubType.GOLD = 4
____exports.BloodClotSubType[____exports.BloodClotSubType.GOLD] = "GOLD"
____exports.BloodClotSubType.BONE = 5
____exports.BloodClotSubType[____exports.BloodClotSubType.BONE] = "BONE"
____exports.BloodClotSubType.ROTTEN = 6
____exports.BloodClotSubType[____exports.BloodClotSubType.ROTTEN] = "ROTTEN"
____exports.BloodClotSubType.RED_NO_SUMPTORIUM = 7
____exports.BloodClotSubType[____exports.BloodClotSubType.RED_NO_SUMPTORIUM] = "RED_NO_SUMPTORIUM"
--- For `EntityType.PICKUP` (5), `PickupVariant.NULL` (0)
____exports.PickupNullSubType = {}
____exports.PickupNullSubType.ALL = 0
____exports.PickupNullSubType[____exports.PickupNullSubType.ALL] = "ALL"
____exports.PickupNullSubType.EXCLUDE_COLLECTIBLES_CHESTS = 1
____exports.PickupNullSubType[____exports.PickupNullSubType.EXCLUDE_COLLECTIBLES_CHESTS] = "EXCLUDE_COLLECTIBLES_CHESTS"
____exports.PickupNullSubType.EXCLUDE_COLLECTIBLES = 2
____exports.PickupNullSubType[____exports.PickupNullSubType.EXCLUDE_COLLECTIBLES] = "EXCLUDE_COLLECTIBLES"
____exports.PickupNullSubType.EXCLUDE_COLLECTIBLES_CHESTS_COINS = 3
____exports.PickupNullSubType[____exports.PickupNullSubType.EXCLUDE_COLLECTIBLES_CHESTS_COINS] = "EXCLUDE_COLLECTIBLES_CHESTS_COINS"
____exports.PickupNullSubType.EXCLUDE_COLLECTIBLES_TRINKETS_CHESTS = 4
____exports.PickupNullSubType[____exports.PickupNullSubType.EXCLUDE_COLLECTIBLES_TRINKETS_CHESTS] = "EXCLUDE_COLLECTIBLES_TRINKETS_CHESTS"
--- For `EntityType.PICKUP` (5), `PickupVariant.HEART` (10)
____exports.HeartSubType = {}
____exports.HeartSubType.NULL = 0
____exports.HeartSubType[____exports.HeartSubType.NULL] = "NULL"
____exports.HeartSubType.FULL = 1
____exports.HeartSubType[____exports.HeartSubType.FULL] = "FULL"
____exports.HeartSubType.HALF = 2
____exports.HeartSubType[____exports.HeartSubType.HALF] = "HALF"
____exports.HeartSubType.SOUL = 3
____exports.HeartSubType[____exports.HeartSubType.SOUL] = "SOUL"
____exports.HeartSubType.ETERNAL = 4
____exports.HeartSubType[____exports.HeartSubType.ETERNAL] = "ETERNAL"
____exports.HeartSubType.DOUBLE_PACK = 5
____exports.HeartSubType[____exports.HeartSubType.DOUBLE_PACK] = "DOUBLE_PACK"
____exports.HeartSubType.BLACK = 6
____exports.HeartSubType[____exports.HeartSubType.BLACK] = "BLACK"
____exports.HeartSubType.GOLDEN = 7
____exports.HeartSubType[____exports.HeartSubType.GOLDEN] = "GOLDEN"
____exports.HeartSubType.HALF_SOUL = 8
____exports.HeartSubType[____exports.HeartSubType.HALF_SOUL] = "HALF_SOUL"
____exports.HeartSubType.SCARED = 9
____exports.HeartSubType[____exports.HeartSubType.SCARED] = "SCARED"
____exports.HeartSubType.BLENDED = 10
____exports.HeartSubType[____exports.HeartSubType.BLENDED] = "BLENDED"
____exports.HeartSubType.BONE = 11
____exports.HeartSubType[____exports.HeartSubType.BONE] = "BONE"
____exports.HeartSubType.ROTTEN = 12
____exports.HeartSubType[____exports.HeartSubType.ROTTEN] = "ROTTEN"
--- For `EntityType.PICKUP` (5), `PickupVariant.COIN` (20)
____exports.CoinSubType = {}
____exports.CoinSubType.NULL = 0
____exports.CoinSubType[____exports.CoinSubType.NULL] = "NULL"
____exports.CoinSubType.PENNY = 1
____exports.CoinSubType[____exports.CoinSubType.PENNY] = "PENNY"
____exports.CoinSubType.NICKEL = 2
____exports.CoinSubType[____exports.CoinSubType.NICKEL] = "NICKEL"
____exports.CoinSubType.DIME = 3
____exports.CoinSubType[____exports.CoinSubType.DIME] = "DIME"
____exports.CoinSubType.DOUBLE_PACK = 4
____exports.CoinSubType[____exports.CoinSubType.DOUBLE_PACK] = "DOUBLE_PACK"
____exports.CoinSubType.LUCKY_PENNY = 5
____exports.CoinSubType[____exports.CoinSubType.LUCKY_PENNY] = "LUCKY_PENNY"
____exports.CoinSubType.STICKY_NICKEL = 6
____exports.CoinSubType[____exports.CoinSubType.STICKY_NICKEL] = "STICKY_NICKEL"
____exports.CoinSubType.GOLDEN = 7
____exports.CoinSubType[____exports.CoinSubType.GOLDEN] = "GOLDEN"
--- For `EntityType.PICKUP` (5), `PickupVariant.KEY` (30)
____exports.KeySubType = {}
____exports.KeySubType.NULL = 0
____exports.KeySubType[____exports.KeySubType.NULL] = "NULL"
____exports.KeySubType.NORMAL = 1
____exports.KeySubType[____exports.KeySubType.NORMAL] = "NORMAL"
____exports.KeySubType.GOLDEN = 2
____exports.KeySubType[____exports.KeySubType.GOLDEN] = "GOLDEN"
____exports.KeySubType.DOUBLE_PACK = 3
____exports.KeySubType[____exports.KeySubType.DOUBLE_PACK] = "DOUBLE_PACK"
____exports.KeySubType.CHARGED = 4
____exports.KeySubType[____exports.KeySubType.CHARGED] = "CHARGED"
--- For `EntityType.PICKUP` (5), `PickupVariant.BOMB` (40)
____exports.BombSubType = {}
____exports.BombSubType.NULL = 0
____exports.BombSubType[____exports.BombSubType.NULL] = "NULL"
____exports.BombSubType.NORMAL = 1
____exports.BombSubType[____exports.BombSubType.NORMAL] = "NORMAL"
____exports.BombSubType.DOUBLE_PACK = 2
____exports.BombSubType[____exports.BombSubType.DOUBLE_PACK] = "DOUBLE_PACK"
____exports.BombSubType.TROLL = 3
____exports.BombSubType[____exports.BombSubType.TROLL] = "TROLL"
____exports.BombSubType.GOLDEN = 4
____exports.BombSubType[____exports.BombSubType.GOLDEN] = "GOLDEN"
____exports.BombSubType.MEGA_TROLL = 5
____exports.BombSubType[____exports.BombSubType.MEGA_TROLL] = "MEGA_TROLL"
____exports.BombSubType.GOLDEN_TROLL = 6
____exports.BombSubType[____exports.BombSubType.GOLDEN_TROLL] = "GOLDEN_TROLL"
____exports.BombSubType.GIGA = 7
____exports.BombSubType[____exports.BombSubType.GIGA] = "GIGA"
--- For `EntityType.PICKUP` (5), `PickupVariant.POOP` (42)
____exports.PoopPickupSubType = {}
____exports.PoopPickupSubType.SMALL = 0
____exports.PoopPickupSubType[____exports.PoopPickupSubType.SMALL] = "SMALL"
____exports.PoopPickupSubType.BIG = 1
____exports.PoopPickupSubType[____exports.PoopPickupSubType.BIG] = "BIG"
--- For `EntityType.PICKUP` (5), `PickupVariant.CHEST` (50)
____exports.ChestSubType = {}
____exports.ChestSubType.OPENED = 0
____exports.ChestSubType[____exports.ChestSubType.OPENED] = "OPENED"
____exports.ChestSubType.CLOSED = 1
____exports.ChestSubType[____exports.ChestSubType.CLOSED] = "CLOSED"
--- For `EntityType.PICKUP` (5), `PickupVariant.SACK` (69)
____exports.SackSubType = {}
____exports.SackSubType.NULL = 0
____exports.SackSubType[____exports.SackSubType.NULL] = "NULL"
____exports.SackSubType.NORMAL = 1
____exports.SackSubType[____exports.SackSubType.NORMAL] = "NORMAL"
____exports.SackSubType.BLACK = 2
____exports.SackSubType[____exports.SackSubType.BLACK] = "BLACK"
--- For `EntityType.PICKUP` (5), `PickupVariant.PILL` (70)
-- 
-- This is the sub-type of a pill.
____exports.PillColor = {}
____exports.PillColor.NULL = 0
____exports.PillColor[____exports.PillColor.NULL] = "NULL"
____exports.PillColor.BLUE_BLUE = 1
____exports.PillColor[____exports.PillColor.BLUE_BLUE] = "BLUE_BLUE"
____exports.PillColor.WHITE_BLUE = 2
____exports.PillColor[____exports.PillColor.WHITE_BLUE] = "WHITE_BLUE"
____exports.PillColor.ORANGE_ORANGE = 3
____exports.PillColor[____exports.PillColor.ORANGE_ORANGE] = "ORANGE_ORANGE"
____exports.PillColor.WHITE_WHITE = 4
____exports.PillColor[____exports.PillColor.WHITE_WHITE] = "WHITE_WHITE"
____exports.PillColor.RED_DOTS_RED = 5
____exports.PillColor[____exports.PillColor.RED_DOTS_RED] = "RED_DOTS_RED"
____exports.PillColor.PINK_RED = 6
____exports.PillColor[____exports.PillColor.PINK_RED] = "PINK_RED"
____exports.PillColor.BLUE_CADET_BLUE = 7
____exports.PillColor[____exports.PillColor.BLUE_CADET_BLUE] = "BLUE_CADET_BLUE"
____exports.PillColor.YELLOW_ORANGE = 8
____exports.PillColor[____exports.PillColor.YELLOW_ORANGE] = "YELLOW_ORANGE"
____exports.PillColor.ORANGE_DOTS_WHITE = 9
____exports.PillColor[____exports.PillColor.ORANGE_DOTS_WHITE] = "ORANGE_DOTS_WHITE"
____exports.PillColor.WHITE_AZURE = 10
____exports.PillColor[____exports.PillColor.WHITE_AZURE] = "WHITE_AZURE"
____exports.PillColor.BLACK_YELLOW = 11
____exports.PillColor[____exports.PillColor.BLACK_YELLOW] = "BLACK_YELLOW"
____exports.PillColor.WHITE_BLACK = 12
____exports.PillColor[____exports.PillColor.WHITE_BLACK] = "WHITE_BLACK"
____exports.PillColor.WHITE_YELLOW = 13
____exports.PillColor[____exports.PillColor.WHITE_YELLOW] = "WHITE_YELLOW"
____exports.PillColor.GOLD = 14
____exports.PillColor[____exports.PillColor.GOLD] = "GOLD"
____exports.PillColor.HORSE_BLUE_BLUE = 2049
____exports.PillColor[____exports.PillColor.HORSE_BLUE_BLUE] = "HORSE_BLUE_BLUE"
____exports.PillColor.HORSE_WHITE_BLUE = 2050
____exports.PillColor[____exports.PillColor.HORSE_WHITE_BLUE] = "HORSE_WHITE_BLUE"
____exports.PillColor.HORSE_ORANGE_ORANGE = 2051
____exports.PillColor[____exports.PillColor.HORSE_ORANGE_ORANGE] = "HORSE_ORANGE_ORANGE"
____exports.PillColor.HORSE_WHITE_WHITE = 2052
____exports.PillColor[____exports.PillColor.HORSE_WHITE_WHITE] = "HORSE_WHITE_WHITE"
____exports.PillColor.HORSE_RED_DOTS_RED = 2053
____exports.PillColor[____exports.PillColor.HORSE_RED_DOTS_RED] = "HORSE_RED_DOTS_RED"
____exports.PillColor.HORSE_PINK_RED = 2054
____exports.PillColor[____exports.PillColor.HORSE_PINK_RED] = "HORSE_PINK_RED"
____exports.PillColor.HORSE_BLUE_CADET_BLUE = 2055
____exports.PillColor[____exports.PillColor.HORSE_BLUE_CADET_BLUE] = "HORSE_BLUE_CADET_BLUE"
____exports.PillColor.HORSE_YELLOW_ORANGE = 2056
____exports.PillColor[____exports.PillColor.HORSE_YELLOW_ORANGE] = "HORSE_YELLOW_ORANGE"
____exports.PillColor.HORSE_ORANGE_DOTS_WHITE = 2057
____exports.PillColor[____exports.PillColor.HORSE_ORANGE_DOTS_WHITE] = "HORSE_ORANGE_DOTS_WHITE"
____exports.PillColor.HORSE_WHITE_AZURE = 2058
____exports.PillColor[____exports.PillColor.HORSE_WHITE_AZURE] = "HORSE_WHITE_AZURE"
____exports.PillColor.HORSE_BLACK_YELLOW = 2059
____exports.PillColor[____exports.PillColor.HORSE_BLACK_YELLOW] = "HORSE_BLACK_YELLOW"
____exports.PillColor.HORSE_WHITE_BLACK = 2060
____exports.PillColor[____exports.PillColor.HORSE_WHITE_BLACK] = "HORSE_WHITE_BLACK"
____exports.PillColor.HORSE_WHITE_YELLOW = 2061
____exports.PillColor[____exports.PillColor.HORSE_WHITE_YELLOW] = "HORSE_WHITE_YELLOW"
____exports.PillColor.HORSE_GOLD = 2062
____exports.PillColor[____exports.PillColor.HORSE_GOLD] = "HORSE_GOLD"
--- For `EntityType.PICKUP` (5), `PickupVariant.LIL_BATTERY` (90)
____exports.BatterySubType = {}
____exports.BatterySubType.NULL = 0
____exports.BatterySubType[____exports.BatterySubType.NULL] = "NULL"
____exports.BatterySubType.NORMAL = 1
____exports.BatterySubType[____exports.BatterySubType.NORMAL] = "NORMAL"
____exports.BatterySubType.MICRO = 2
____exports.BatterySubType[____exports.BatterySubType.MICRO] = "MICRO"
____exports.BatterySubType.MEGA = 3
____exports.BatterySubType[____exports.BatterySubType.MEGA] = "MEGA"
____exports.BatterySubType.GOLDEN = 4
____exports.BatterySubType[____exports.BatterySubType.GOLDEN] = "GOLDEN"
--- For `EntityType.PICKUP` (5), `PickupVariant.COLLECTIBLE` (100)
-- 
-- This is the sub-type of a collectible.
____exports.CollectibleType = {}
____exports.CollectibleType.NULL = 0
____exports.CollectibleType[____exports.CollectibleType.NULL] = "NULL"
____exports.CollectibleType.SAD_ONION = 1
____exports.CollectibleType[____exports.CollectibleType.SAD_ONION] = "SAD_ONION"
____exports.CollectibleType.INNER_EYE = 2
____exports.CollectibleType[____exports.CollectibleType.INNER_EYE] = "INNER_EYE"
____exports.CollectibleType.SPOON_BENDER = 3
____exports.CollectibleType[____exports.CollectibleType.SPOON_BENDER] = "SPOON_BENDER"
____exports.CollectibleType.CRICKETS_HEAD = 4
____exports.CollectibleType[____exports.CollectibleType.CRICKETS_HEAD] = "CRICKETS_HEAD"
____exports.CollectibleType.MY_REFLECTION = 5
____exports.CollectibleType[____exports.CollectibleType.MY_REFLECTION] = "MY_REFLECTION"
____exports.CollectibleType.NUMBER_ONE = 6
____exports.CollectibleType[____exports.CollectibleType.NUMBER_ONE] = "NUMBER_ONE"
____exports.CollectibleType.BLOOD_OF_THE_MARTYR = 7
____exports.CollectibleType[____exports.CollectibleType.BLOOD_OF_THE_MARTYR] = "BLOOD_OF_THE_MARTYR"
____exports.CollectibleType.BROTHER_BOBBY = 8
____exports.CollectibleType[____exports.CollectibleType.BROTHER_BOBBY] = "BROTHER_BOBBY"
____exports.CollectibleType.SKATOLE = 9
____exports.CollectibleType[____exports.CollectibleType.SKATOLE] = "SKATOLE"
____exports.CollectibleType.HALO_OF_FLIES = 10
____exports.CollectibleType[____exports.CollectibleType.HALO_OF_FLIES] = "HALO_OF_FLIES"
____exports.CollectibleType.ONE_UP = 11
____exports.CollectibleType[____exports.CollectibleType.ONE_UP] = "ONE_UP"
____exports.CollectibleType.MAGIC_MUSHROOM = 12
____exports.CollectibleType[____exports.CollectibleType.MAGIC_MUSHROOM] = "MAGIC_MUSHROOM"
____exports.CollectibleType.VIRUS = 13
____exports.CollectibleType[____exports.CollectibleType.VIRUS] = "VIRUS"
____exports.CollectibleType.ROID_RAGE = 14
____exports.CollectibleType[____exports.CollectibleType.ROID_RAGE] = "ROID_RAGE"
____exports.CollectibleType.HEART = 15
____exports.CollectibleType[____exports.CollectibleType.HEART] = "HEART"
____exports.CollectibleType.RAW_LIVER = 16
____exports.CollectibleType[____exports.CollectibleType.RAW_LIVER] = "RAW_LIVER"
____exports.CollectibleType.SKELETON_KEY = 17
____exports.CollectibleType[____exports.CollectibleType.SKELETON_KEY] = "SKELETON_KEY"
____exports.CollectibleType.DOLLAR = 18
____exports.CollectibleType[____exports.CollectibleType.DOLLAR] = "DOLLAR"
____exports.CollectibleType.BOOM = 19
____exports.CollectibleType[____exports.CollectibleType.BOOM] = "BOOM"
____exports.CollectibleType.TRANSCENDENCE = 20
____exports.CollectibleType[____exports.CollectibleType.TRANSCENDENCE] = "TRANSCENDENCE"
____exports.CollectibleType.COMPASS = 21
____exports.CollectibleType[____exports.CollectibleType.COMPASS] = "COMPASS"
____exports.CollectibleType.LUNCH = 22
____exports.CollectibleType[____exports.CollectibleType.LUNCH] = "LUNCH"
____exports.CollectibleType.DINNER = 23
____exports.CollectibleType[____exports.CollectibleType.DINNER] = "DINNER"
____exports.CollectibleType.DESSERT = 24
____exports.CollectibleType[____exports.CollectibleType.DESSERT] = "DESSERT"
____exports.CollectibleType.BREAKFAST = 25
____exports.CollectibleType[____exports.CollectibleType.BREAKFAST] = "BREAKFAST"
____exports.CollectibleType.ROTTEN_MEAT = 26
____exports.CollectibleType[____exports.CollectibleType.ROTTEN_MEAT] = "ROTTEN_MEAT"
____exports.CollectibleType.WOODEN_SPOON = 27
____exports.CollectibleType[____exports.CollectibleType.WOODEN_SPOON] = "WOODEN_SPOON"
____exports.CollectibleType.BELT = 28
____exports.CollectibleType[____exports.CollectibleType.BELT] = "BELT"
____exports.CollectibleType.MOMS_UNDERWEAR = 29
____exports.CollectibleType[____exports.CollectibleType.MOMS_UNDERWEAR] = "MOMS_UNDERWEAR"
____exports.CollectibleType.MOMS_HEELS = 30
____exports.CollectibleType[____exports.CollectibleType.MOMS_HEELS] = "MOMS_HEELS"
____exports.CollectibleType.MOMS_LIPSTICK = 31
____exports.CollectibleType[____exports.CollectibleType.MOMS_LIPSTICK] = "MOMS_LIPSTICK"
____exports.CollectibleType.WIRE_COAT_HANGER = 32
____exports.CollectibleType[____exports.CollectibleType.WIRE_COAT_HANGER] = "WIRE_COAT_HANGER"
____exports.CollectibleType.BIBLE = 33
____exports.CollectibleType[____exports.CollectibleType.BIBLE] = "BIBLE"
____exports.CollectibleType.BOOK_OF_BELIAL = 34
____exports.CollectibleType[____exports.CollectibleType.BOOK_OF_BELIAL] = "BOOK_OF_BELIAL"
____exports.CollectibleType.NECRONOMICON = 35
____exports.CollectibleType[____exports.CollectibleType.NECRONOMICON] = "NECRONOMICON"
____exports.CollectibleType.POOP = 36
____exports.CollectibleType[____exports.CollectibleType.POOP] = "POOP"
____exports.CollectibleType.MR_BOOM = 37
____exports.CollectibleType[____exports.CollectibleType.MR_BOOM] = "MR_BOOM"
____exports.CollectibleType.TAMMYS_HEAD = 38
____exports.CollectibleType[____exports.CollectibleType.TAMMYS_HEAD] = "TAMMYS_HEAD"
____exports.CollectibleType.MOMS_BRA = 39
____exports.CollectibleType[____exports.CollectibleType.MOMS_BRA] = "MOMS_BRA"
____exports.CollectibleType.KAMIKAZE = 40
____exports.CollectibleType[____exports.CollectibleType.KAMIKAZE] = "KAMIKAZE"
____exports.CollectibleType.MOMS_PAD = 41
____exports.CollectibleType[____exports.CollectibleType.MOMS_PAD] = "MOMS_PAD"
____exports.CollectibleType.BOBS_ROTTEN_HEAD = 42
____exports.CollectibleType[____exports.CollectibleType.BOBS_ROTTEN_HEAD] = "BOBS_ROTTEN_HEAD"
____exports.CollectibleType.TELEPORT = 44
____exports.CollectibleType[____exports.CollectibleType.TELEPORT] = "TELEPORT"
____exports.CollectibleType.YUM_HEART = 45
____exports.CollectibleType[____exports.CollectibleType.YUM_HEART] = "YUM_HEART"
____exports.CollectibleType.LUCKY_FOOT = 46
____exports.CollectibleType[____exports.CollectibleType.LUCKY_FOOT] = "LUCKY_FOOT"
____exports.CollectibleType.DOCTORS_REMOTE = 47
____exports.CollectibleType[____exports.CollectibleType.DOCTORS_REMOTE] = "DOCTORS_REMOTE"
____exports.CollectibleType.CUPIDS_ARROW = 48
____exports.CollectibleType[____exports.CollectibleType.CUPIDS_ARROW] = "CUPIDS_ARROW"
____exports.CollectibleType.SHOOP_DA_WHOOP = 49
____exports.CollectibleType[____exports.CollectibleType.SHOOP_DA_WHOOP] = "SHOOP_DA_WHOOP"
____exports.CollectibleType.STEVEN = 50
____exports.CollectibleType[____exports.CollectibleType.STEVEN] = "STEVEN"
____exports.CollectibleType.PENTAGRAM = 51
____exports.CollectibleType[____exports.CollectibleType.PENTAGRAM] = "PENTAGRAM"
____exports.CollectibleType.DR_FETUS = 52
____exports.CollectibleType[____exports.CollectibleType.DR_FETUS] = "DR_FETUS"
____exports.CollectibleType.MAGNETO = 53
____exports.CollectibleType[____exports.CollectibleType.MAGNETO] = "MAGNETO"
____exports.CollectibleType.TREASURE_MAP = 54
____exports.CollectibleType[____exports.CollectibleType.TREASURE_MAP] = "TREASURE_MAP"
____exports.CollectibleType.MOMS_EYE = 55
____exports.CollectibleType[____exports.CollectibleType.MOMS_EYE] = "MOMS_EYE"
____exports.CollectibleType.LEMON_MISHAP = 56
____exports.CollectibleType[____exports.CollectibleType.LEMON_MISHAP] = "LEMON_MISHAP"
____exports.CollectibleType.DISTANT_ADMIRATION = 57
____exports.CollectibleType[____exports.CollectibleType.DISTANT_ADMIRATION] = "DISTANT_ADMIRATION"
____exports.CollectibleType.BOOK_OF_SHADOWS = 58
____exports.CollectibleType[____exports.CollectibleType.BOOK_OF_SHADOWS] = "BOOK_OF_SHADOWS"
____exports.CollectibleType.BOOK_OF_BELIAL_PASSIVE = 59
____exports.CollectibleType[____exports.CollectibleType.BOOK_OF_BELIAL_PASSIVE] = "BOOK_OF_BELIAL_PASSIVE"
____exports.CollectibleType.LADDER = 60
____exports.CollectibleType[____exports.CollectibleType.LADDER] = "LADDER"
____exports.CollectibleType.CHARM_VAMPIRE = 62
____exports.CollectibleType[____exports.CollectibleType.CHARM_VAMPIRE] = "CHARM_VAMPIRE"
____exports.CollectibleType.BATTERY = 63
____exports.CollectibleType[____exports.CollectibleType.BATTERY] = "BATTERY"
____exports.CollectibleType.STEAM_SALE = 64
____exports.CollectibleType[____exports.CollectibleType.STEAM_SALE] = "STEAM_SALE"
____exports.CollectibleType.ANARCHIST_COOKBOOK = 65
____exports.CollectibleType[____exports.CollectibleType.ANARCHIST_COOKBOOK] = "ANARCHIST_COOKBOOK"
____exports.CollectibleType.HOURGLASS = 66
____exports.CollectibleType[____exports.CollectibleType.HOURGLASS] = "HOURGLASS"
____exports.CollectibleType.SISTER_MAGGY = 67
____exports.CollectibleType[____exports.CollectibleType.SISTER_MAGGY] = "SISTER_MAGGY"
____exports.CollectibleType.TECHNOLOGY = 68
____exports.CollectibleType[____exports.CollectibleType.TECHNOLOGY] = "TECHNOLOGY"
____exports.CollectibleType.CHOCOLATE_MILK = 69
____exports.CollectibleType[____exports.CollectibleType.CHOCOLATE_MILK] = "CHOCOLATE_MILK"
____exports.CollectibleType.GROWTH_HORMONES = 70
____exports.CollectibleType[____exports.CollectibleType.GROWTH_HORMONES] = "GROWTH_HORMONES"
____exports.CollectibleType.MINI_MUSH = 71
____exports.CollectibleType[____exports.CollectibleType.MINI_MUSH] = "MINI_MUSH"
____exports.CollectibleType.ROSARY = 72
____exports.CollectibleType[____exports.CollectibleType.ROSARY] = "ROSARY"
____exports.CollectibleType.CUBE_OF_MEAT = 73
____exports.CollectibleType[____exports.CollectibleType.CUBE_OF_MEAT] = "CUBE_OF_MEAT"
____exports.CollectibleType.QUARTER = 74
____exports.CollectibleType[____exports.CollectibleType.QUARTER] = "QUARTER"
____exports.CollectibleType.PHD = 75
____exports.CollectibleType[____exports.CollectibleType.PHD] = "PHD"
____exports.CollectibleType.XRAY_VISION = 76
____exports.CollectibleType[____exports.CollectibleType.XRAY_VISION] = "XRAY_VISION"
____exports.CollectibleType.MY_LITTLE_UNICORN = 77
____exports.CollectibleType[____exports.CollectibleType.MY_LITTLE_UNICORN] = "MY_LITTLE_UNICORN"
____exports.CollectibleType.BOOK_OF_REVELATIONS = 78
____exports.CollectibleType[____exports.CollectibleType.BOOK_OF_REVELATIONS] = "BOOK_OF_REVELATIONS"
____exports.CollectibleType.MARK = 79
____exports.CollectibleType[____exports.CollectibleType.MARK] = "MARK"
____exports.CollectibleType.PACT = 80
____exports.CollectibleType[____exports.CollectibleType.PACT] = "PACT"
____exports.CollectibleType.DEAD_CAT = 81
____exports.CollectibleType[____exports.CollectibleType.DEAD_CAT] = "DEAD_CAT"
____exports.CollectibleType.LORD_OF_THE_PIT = 82
____exports.CollectibleType[____exports.CollectibleType.LORD_OF_THE_PIT] = "LORD_OF_THE_PIT"
____exports.CollectibleType.THE_NAIL = 83
____exports.CollectibleType[____exports.CollectibleType.THE_NAIL] = "THE_NAIL"
____exports.CollectibleType.WE_NEED_TO_GO_DEEPER = 84
____exports.CollectibleType[____exports.CollectibleType.WE_NEED_TO_GO_DEEPER] = "WE_NEED_TO_GO_DEEPER"
____exports.CollectibleType.DECK_OF_CARDS = 85
____exports.CollectibleType[____exports.CollectibleType.DECK_OF_CARDS] = "DECK_OF_CARDS"
____exports.CollectibleType.MONSTROS_TOOTH = 86
____exports.CollectibleType[____exports.CollectibleType.MONSTROS_TOOTH] = "MONSTROS_TOOTH"
____exports.CollectibleType.LOKIS_HORNS = 87
____exports.CollectibleType[____exports.CollectibleType.LOKIS_HORNS] = "LOKIS_HORNS"
____exports.CollectibleType.LITTLE_CHUBBY = 88
____exports.CollectibleType[____exports.CollectibleType.LITTLE_CHUBBY] = "LITTLE_CHUBBY"
____exports.CollectibleType.SPIDER_BITE = 89
____exports.CollectibleType[____exports.CollectibleType.SPIDER_BITE] = "SPIDER_BITE"
____exports.CollectibleType.SMALL_ROCK = 90
____exports.CollectibleType[____exports.CollectibleType.SMALL_ROCK] = "SMALL_ROCK"
____exports.CollectibleType.SPELUNKER_HAT = 91
____exports.CollectibleType[____exports.CollectibleType.SPELUNKER_HAT] = "SPELUNKER_HAT"
____exports.CollectibleType.SUPER_BANDAGE = 92
____exports.CollectibleType[____exports.CollectibleType.SUPER_BANDAGE] = "SUPER_BANDAGE"
____exports.CollectibleType.GAMEKID = 93
____exports.CollectibleType[____exports.CollectibleType.GAMEKID] = "GAMEKID"
____exports.CollectibleType.SACK_OF_PENNIES = 94
____exports.CollectibleType[____exports.CollectibleType.SACK_OF_PENNIES] = "SACK_OF_PENNIES"
____exports.CollectibleType.ROBO_BABY = 95
____exports.CollectibleType[____exports.CollectibleType.ROBO_BABY] = "ROBO_BABY"
____exports.CollectibleType.LITTLE_CHAD = 96
____exports.CollectibleType[____exports.CollectibleType.LITTLE_CHAD] = "LITTLE_CHAD"
____exports.CollectibleType.BOOK_OF_SIN = 97
____exports.CollectibleType[____exports.CollectibleType.BOOK_OF_SIN] = "BOOK_OF_SIN"
____exports.CollectibleType.RELIC = 98
____exports.CollectibleType[____exports.CollectibleType.RELIC] = "RELIC"
____exports.CollectibleType.LITTLE_GISH = 99
____exports.CollectibleType[____exports.CollectibleType.LITTLE_GISH] = "LITTLE_GISH"
____exports.CollectibleType.LITTLE_STEVEN = 100
____exports.CollectibleType[____exports.CollectibleType.LITTLE_STEVEN] = "LITTLE_STEVEN"
____exports.CollectibleType.HALO = 101
____exports.CollectibleType[____exports.CollectibleType.HALO] = "HALO"
____exports.CollectibleType.MOMS_BOTTLE_OF_PILLS = 102
____exports.CollectibleType[____exports.CollectibleType.MOMS_BOTTLE_OF_PILLS] = "MOMS_BOTTLE_OF_PILLS"
____exports.CollectibleType.COMMON_COLD = 103
____exports.CollectibleType[____exports.CollectibleType.COMMON_COLD] = "COMMON_COLD"
____exports.CollectibleType.PARASITE = 104
____exports.CollectibleType[____exports.CollectibleType.PARASITE] = "PARASITE"
____exports.CollectibleType.D6 = 105
____exports.CollectibleType[____exports.CollectibleType.D6] = "D6"
____exports.CollectibleType.MR_MEGA = 106
____exports.CollectibleType[____exports.CollectibleType.MR_MEGA] = "MR_MEGA"
____exports.CollectibleType.PINKING_SHEARS = 107
____exports.CollectibleType[____exports.CollectibleType.PINKING_SHEARS] = "PINKING_SHEARS"
____exports.CollectibleType.WAFER = 108
____exports.CollectibleType[____exports.CollectibleType.WAFER] = "WAFER"
____exports.CollectibleType.MONEY_EQUALS_POWER = 109
____exports.CollectibleType[____exports.CollectibleType.MONEY_EQUALS_POWER] = "MONEY_EQUALS_POWER"
____exports.CollectibleType.MOMS_CONTACTS = 110
____exports.CollectibleType[____exports.CollectibleType.MOMS_CONTACTS] = "MOMS_CONTACTS"
____exports.CollectibleType.BEAN = 111
____exports.CollectibleType[____exports.CollectibleType.BEAN] = "BEAN"
____exports.CollectibleType.GUARDIAN_ANGEL = 112
____exports.CollectibleType[____exports.CollectibleType.GUARDIAN_ANGEL] = "GUARDIAN_ANGEL"
____exports.CollectibleType.DEMON_BABY = 113
____exports.CollectibleType[____exports.CollectibleType.DEMON_BABY] = "DEMON_BABY"
____exports.CollectibleType.MOMS_KNIFE = 114
____exports.CollectibleType[____exports.CollectibleType.MOMS_KNIFE] = "MOMS_KNIFE"
____exports.CollectibleType.OUIJA_BOARD = 115
____exports.CollectibleType[____exports.CollectibleType.OUIJA_BOARD] = "OUIJA_BOARD"
____exports.CollectibleType.NINE_VOLT = 116
____exports.CollectibleType[____exports.CollectibleType.NINE_VOLT] = "NINE_VOLT"
____exports.CollectibleType.DEAD_BIRD = 117
____exports.CollectibleType[____exports.CollectibleType.DEAD_BIRD] = "DEAD_BIRD"
____exports.CollectibleType.BRIMSTONE = 118
____exports.CollectibleType[____exports.CollectibleType.BRIMSTONE] = "BRIMSTONE"
____exports.CollectibleType.BLOOD_BAG = 119
____exports.CollectibleType[____exports.CollectibleType.BLOOD_BAG] = "BLOOD_BAG"
____exports.CollectibleType.ODD_MUSHROOM_THIN = 120
____exports.CollectibleType[____exports.CollectibleType.ODD_MUSHROOM_THIN] = "ODD_MUSHROOM_THIN"
____exports.CollectibleType.ODD_MUSHROOM_LARGE = 121
____exports.CollectibleType[____exports.CollectibleType.ODD_MUSHROOM_LARGE] = "ODD_MUSHROOM_LARGE"
____exports.CollectibleType.WHORE_OF_BABYLON = 122
____exports.CollectibleType[____exports.CollectibleType.WHORE_OF_BABYLON] = "WHORE_OF_BABYLON"
____exports.CollectibleType.MONSTER_MANUAL = 123
____exports.CollectibleType[____exports.CollectibleType.MONSTER_MANUAL] = "MONSTER_MANUAL"
____exports.CollectibleType.DEAD_SEA_SCROLLS = 124
____exports.CollectibleType[____exports.CollectibleType.DEAD_SEA_SCROLLS] = "DEAD_SEA_SCROLLS"
____exports.CollectibleType.BOBBY_BOMB = 125
____exports.CollectibleType[____exports.CollectibleType.BOBBY_BOMB] = "BOBBY_BOMB"
____exports.CollectibleType.RAZOR_BLADE = 126
____exports.CollectibleType[____exports.CollectibleType.RAZOR_BLADE] = "RAZOR_BLADE"
____exports.CollectibleType.FORGET_ME_NOW = 127
____exports.CollectibleType[____exports.CollectibleType.FORGET_ME_NOW] = "FORGET_ME_NOW"
____exports.CollectibleType.FOREVER_ALONE = 128
____exports.CollectibleType[____exports.CollectibleType.FOREVER_ALONE] = "FOREVER_ALONE"
____exports.CollectibleType.BUCKET_OF_LARD = 129
____exports.CollectibleType[____exports.CollectibleType.BUCKET_OF_LARD] = "BUCKET_OF_LARD"
____exports.CollectibleType.PONY = 130
____exports.CollectibleType[____exports.CollectibleType.PONY] = "PONY"
____exports.CollectibleType.BOMB_BAG = 131
____exports.CollectibleType[____exports.CollectibleType.BOMB_BAG] = "BOMB_BAG"
____exports.CollectibleType.LUMP_OF_COAL = 132
____exports.CollectibleType[____exports.CollectibleType.LUMP_OF_COAL] = "LUMP_OF_COAL"
____exports.CollectibleType.GUPPYS_PAW = 133
____exports.CollectibleType[____exports.CollectibleType.GUPPYS_PAW] = "GUPPYS_PAW"
____exports.CollectibleType.GUPPYS_TAIL = 134
____exports.CollectibleType[____exports.CollectibleType.GUPPYS_TAIL] = "GUPPYS_TAIL"
____exports.CollectibleType.IV_BAG = 135
____exports.CollectibleType[____exports.CollectibleType.IV_BAG] = "IV_BAG"
____exports.CollectibleType.BEST_FRIEND = 136
____exports.CollectibleType[____exports.CollectibleType.BEST_FRIEND] = "BEST_FRIEND"
____exports.CollectibleType.REMOTE_DETONATOR = 137
____exports.CollectibleType[____exports.CollectibleType.REMOTE_DETONATOR] = "REMOTE_DETONATOR"
____exports.CollectibleType.STIGMATA = 138
____exports.CollectibleType[____exports.CollectibleType.STIGMATA] = "STIGMATA"
____exports.CollectibleType.MOMS_PURSE = 139
____exports.CollectibleType[____exports.CollectibleType.MOMS_PURSE] = "MOMS_PURSE"
____exports.CollectibleType.BOBS_CURSE = 140
____exports.CollectibleType[____exports.CollectibleType.BOBS_CURSE] = "BOBS_CURSE"
____exports.CollectibleType.PAGEANT_BOY = 141
____exports.CollectibleType[____exports.CollectibleType.PAGEANT_BOY] = "PAGEANT_BOY"
____exports.CollectibleType.SCAPULAR = 142
____exports.CollectibleType[____exports.CollectibleType.SCAPULAR] = "SCAPULAR"
____exports.CollectibleType.SPEED_BALL = 143
____exports.CollectibleType[____exports.CollectibleType.SPEED_BALL] = "SPEED_BALL"
____exports.CollectibleType.BUM_FRIEND = 144
____exports.CollectibleType[____exports.CollectibleType.BUM_FRIEND] = "BUM_FRIEND"
____exports.CollectibleType.GUPPYS_HEAD = 145
____exports.CollectibleType[____exports.CollectibleType.GUPPYS_HEAD] = "GUPPYS_HEAD"
____exports.CollectibleType.PRAYER_CARD = 146
____exports.CollectibleType[____exports.CollectibleType.PRAYER_CARD] = "PRAYER_CARD"
____exports.CollectibleType.NOTCHED_AXE = 147
____exports.CollectibleType[____exports.CollectibleType.NOTCHED_AXE] = "NOTCHED_AXE"
____exports.CollectibleType.INFESTATION = 148
____exports.CollectibleType[____exports.CollectibleType.INFESTATION] = "INFESTATION"
____exports.CollectibleType.IPECAC = 149
____exports.CollectibleType[____exports.CollectibleType.IPECAC] = "IPECAC"
____exports.CollectibleType.TOUGH_LOVE = 150
____exports.CollectibleType[____exports.CollectibleType.TOUGH_LOVE] = "TOUGH_LOVE"
____exports.CollectibleType.MULLIGAN = 151
____exports.CollectibleType[____exports.CollectibleType.MULLIGAN] = "MULLIGAN"
____exports.CollectibleType.TECHNOLOGY_2 = 152
____exports.CollectibleType[____exports.CollectibleType.TECHNOLOGY_2] = "TECHNOLOGY_2"
____exports.CollectibleType.MUTANT_SPIDER = 153
____exports.CollectibleType[____exports.CollectibleType.MUTANT_SPIDER] = "MUTANT_SPIDER"
____exports.CollectibleType.CHEMICAL_PEEL = 154
____exports.CollectibleType[____exports.CollectibleType.CHEMICAL_PEEL] = "CHEMICAL_PEEL"
____exports.CollectibleType.PEEPER = 155
____exports.CollectibleType[____exports.CollectibleType.PEEPER] = "PEEPER"
____exports.CollectibleType.HABIT = 156
____exports.CollectibleType[____exports.CollectibleType.HABIT] = "HABIT"
____exports.CollectibleType.BLOODY_LUST = 157
____exports.CollectibleType[____exports.CollectibleType.BLOODY_LUST] = "BLOODY_LUST"
____exports.CollectibleType.CRYSTAL_BALL = 158
____exports.CollectibleType[____exports.CollectibleType.CRYSTAL_BALL] = "CRYSTAL_BALL"
____exports.CollectibleType.SPIRIT_OF_THE_NIGHT = 159
____exports.CollectibleType[____exports.CollectibleType.SPIRIT_OF_THE_NIGHT] = "SPIRIT_OF_THE_NIGHT"
____exports.CollectibleType.CRACK_THE_SKY = 160
____exports.CollectibleType[____exports.CollectibleType.CRACK_THE_SKY] = "CRACK_THE_SKY"
____exports.CollectibleType.ANKH = 161
____exports.CollectibleType[____exports.CollectibleType.ANKH] = "ANKH"
____exports.CollectibleType.CELTIC_CROSS = 162
____exports.CollectibleType[____exports.CollectibleType.CELTIC_CROSS] = "CELTIC_CROSS"
____exports.CollectibleType.GHOST_BABY = 163
____exports.CollectibleType[____exports.CollectibleType.GHOST_BABY] = "GHOST_BABY"
____exports.CollectibleType.CANDLE = 164
____exports.CollectibleType[____exports.CollectibleType.CANDLE] = "CANDLE"
____exports.CollectibleType.CAT_O_NINE_TAILS = 165
____exports.CollectibleType[____exports.CollectibleType.CAT_O_NINE_TAILS] = "CAT_O_NINE_TAILS"
____exports.CollectibleType.D20 = 166
____exports.CollectibleType[____exports.CollectibleType.D20] = "D20"
____exports.CollectibleType.HARLEQUIN_BABY = 167
____exports.CollectibleType[____exports.CollectibleType.HARLEQUIN_BABY] = "HARLEQUIN_BABY"
____exports.CollectibleType.EPIC_FETUS = 168
____exports.CollectibleType[____exports.CollectibleType.EPIC_FETUS] = "EPIC_FETUS"
____exports.CollectibleType.POLYPHEMUS = 169
____exports.CollectibleType[____exports.CollectibleType.POLYPHEMUS] = "POLYPHEMUS"
____exports.CollectibleType.DADDY_LONGLEGS = 170
____exports.CollectibleType[____exports.CollectibleType.DADDY_LONGLEGS] = "DADDY_LONGLEGS"
____exports.CollectibleType.SPIDER_BUTT = 171
____exports.CollectibleType[____exports.CollectibleType.SPIDER_BUTT] = "SPIDER_BUTT"
____exports.CollectibleType.SACRIFICIAL_DAGGER = 172
____exports.CollectibleType[____exports.CollectibleType.SACRIFICIAL_DAGGER] = "SACRIFICIAL_DAGGER"
____exports.CollectibleType.MITRE = 173
____exports.CollectibleType[____exports.CollectibleType.MITRE] = "MITRE"
____exports.CollectibleType.RAINBOW_BABY = 174
____exports.CollectibleType[____exports.CollectibleType.RAINBOW_BABY] = "RAINBOW_BABY"
____exports.CollectibleType.DADS_KEY = 175
____exports.CollectibleType[____exports.CollectibleType.DADS_KEY] = "DADS_KEY"
____exports.CollectibleType.STEM_CELLS = 176
____exports.CollectibleType[____exports.CollectibleType.STEM_CELLS] = "STEM_CELLS"
____exports.CollectibleType.PORTABLE_SLOT = 177
____exports.CollectibleType[____exports.CollectibleType.PORTABLE_SLOT] = "PORTABLE_SLOT"
____exports.CollectibleType.HOLY_WATER = 178
____exports.CollectibleType[____exports.CollectibleType.HOLY_WATER] = "HOLY_WATER"
____exports.CollectibleType.FATE = 179
____exports.CollectibleType[____exports.CollectibleType.FATE] = "FATE"
____exports.CollectibleType.BLACK_BEAN = 180
____exports.CollectibleType[____exports.CollectibleType.BLACK_BEAN] = "BLACK_BEAN"
____exports.CollectibleType.WHITE_PONY = 181
____exports.CollectibleType[____exports.CollectibleType.WHITE_PONY] = "WHITE_PONY"
____exports.CollectibleType.SACRED_HEART = 182
____exports.CollectibleType[____exports.CollectibleType.SACRED_HEART] = "SACRED_HEART"
____exports.CollectibleType.TOOTH_PICKS = 183
____exports.CollectibleType[____exports.CollectibleType.TOOTH_PICKS] = "TOOTH_PICKS"
____exports.CollectibleType.HOLY_GRAIL = 184
____exports.CollectibleType[____exports.CollectibleType.HOLY_GRAIL] = "HOLY_GRAIL"
____exports.CollectibleType.DEAD_DOVE = 185
____exports.CollectibleType[____exports.CollectibleType.DEAD_DOVE] = "DEAD_DOVE"
____exports.CollectibleType.BLOOD_RIGHTS = 186
____exports.CollectibleType[____exports.CollectibleType.BLOOD_RIGHTS] = "BLOOD_RIGHTS"
____exports.CollectibleType.GUPPYS_HAIRBALL = 187
____exports.CollectibleType[____exports.CollectibleType.GUPPYS_HAIRBALL] = "GUPPYS_HAIRBALL"
____exports.CollectibleType.ABEL = 188
____exports.CollectibleType[____exports.CollectibleType.ABEL] = "ABEL"
____exports.CollectibleType.SMB_SUPER_FAN = 189
____exports.CollectibleType[____exports.CollectibleType.SMB_SUPER_FAN] = "SMB_SUPER_FAN"
____exports.CollectibleType.PYRO = 190
____exports.CollectibleType[____exports.CollectibleType.PYRO] = "PYRO"
____exports.CollectibleType.THREE_DOLLAR_BILL = 191
____exports.CollectibleType[____exports.CollectibleType.THREE_DOLLAR_BILL] = "THREE_DOLLAR_BILL"
____exports.CollectibleType.TELEPATHY_BOOK = 192
____exports.CollectibleType[____exports.CollectibleType.TELEPATHY_BOOK] = "TELEPATHY_BOOK"
____exports.CollectibleType.MEAT = 193
____exports.CollectibleType[____exports.CollectibleType.MEAT] = "MEAT"
____exports.CollectibleType.MAGIC_8_BALL = 194
____exports.CollectibleType[____exports.CollectibleType.MAGIC_8_BALL] = "MAGIC_8_BALL"
____exports.CollectibleType.MOMS_COIN_PURSE = 195
____exports.CollectibleType[____exports.CollectibleType.MOMS_COIN_PURSE] = "MOMS_COIN_PURSE"
____exports.CollectibleType.SQUEEZY = 196
____exports.CollectibleType[____exports.CollectibleType.SQUEEZY] = "SQUEEZY"
____exports.CollectibleType.JESUS_JUICE = 197
____exports.CollectibleType[____exports.CollectibleType.JESUS_JUICE] = "JESUS_JUICE"
____exports.CollectibleType.BOX = 198
____exports.CollectibleType[____exports.CollectibleType.BOX] = "BOX"
____exports.CollectibleType.MOMS_KEY = 199
____exports.CollectibleType[____exports.CollectibleType.MOMS_KEY] = "MOMS_KEY"
____exports.CollectibleType.MOMS_EYESHADOW = 200
____exports.CollectibleType[____exports.CollectibleType.MOMS_EYESHADOW] = "MOMS_EYESHADOW"
____exports.CollectibleType.IRON_BAR = 201
____exports.CollectibleType[____exports.CollectibleType.IRON_BAR] = "IRON_BAR"
____exports.CollectibleType.MIDAS_TOUCH = 202
____exports.CollectibleType[____exports.CollectibleType.MIDAS_TOUCH] = "MIDAS_TOUCH"
____exports.CollectibleType.HUMBLING_BUNDLE = 203
____exports.CollectibleType[____exports.CollectibleType.HUMBLING_BUNDLE] = "HUMBLING_BUNDLE"
____exports.CollectibleType.FANNY_PACK = 204
____exports.CollectibleType[____exports.CollectibleType.FANNY_PACK] = "FANNY_PACK"
____exports.CollectibleType.SHARP_PLUG = 205
____exports.CollectibleType[____exports.CollectibleType.SHARP_PLUG] = "SHARP_PLUG"
____exports.CollectibleType.GUILLOTINE = 206
____exports.CollectibleType[____exports.CollectibleType.GUILLOTINE] = "GUILLOTINE"
____exports.CollectibleType.BALL_OF_BANDAGES = 207
____exports.CollectibleType[____exports.CollectibleType.BALL_OF_BANDAGES] = "BALL_OF_BANDAGES"
____exports.CollectibleType.CHAMPION_BELT = 208
____exports.CollectibleType[____exports.CollectibleType.CHAMPION_BELT] = "CHAMPION_BELT"
____exports.CollectibleType.BUTT_BOMBS = 209
____exports.CollectibleType[____exports.CollectibleType.BUTT_BOMBS] = "BUTT_BOMBS"
____exports.CollectibleType.GNAWED_LEAF = 210
____exports.CollectibleType[____exports.CollectibleType.GNAWED_LEAF] = "GNAWED_LEAF"
____exports.CollectibleType.SPIDERBABY = 211
____exports.CollectibleType[____exports.CollectibleType.SPIDERBABY] = "SPIDERBABY"
____exports.CollectibleType.GUPPYS_COLLAR = 212
____exports.CollectibleType[____exports.CollectibleType.GUPPYS_COLLAR] = "GUPPYS_COLLAR"
____exports.CollectibleType.LOST_CONTACT = 213
____exports.CollectibleType[____exports.CollectibleType.LOST_CONTACT] = "LOST_CONTACT"
____exports.CollectibleType.ANEMIC = 214
____exports.CollectibleType[____exports.CollectibleType.ANEMIC] = "ANEMIC"
____exports.CollectibleType.GOAT_HEAD = 215
____exports.CollectibleType[____exports.CollectibleType.GOAT_HEAD] = "GOAT_HEAD"
____exports.CollectibleType.CEREMONIAL_ROBES = 216
____exports.CollectibleType[____exports.CollectibleType.CEREMONIAL_ROBES] = "CEREMONIAL_ROBES"
____exports.CollectibleType.MOMS_WIG = 217
____exports.CollectibleType[____exports.CollectibleType.MOMS_WIG] = "MOMS_WIG"
____exports.CollectibleType.PLACENTA = 218
____exports.CollectibleType[____exports.CollectibleType.PLACENTA] = "PLACENTA"
____exports.CollectibleType.OLD_BANDAGE = 219
____exports.CollectibleType[____exports.CollectibleType.OLD_BANDAGE] = "OLD_BANDAGE"
____exports.CollectibleType.SAD_BOMBS = 220
____exports.CollectibleType[____exports.CollectibleType.SAD_BOMBS] = "SAD_BOMBS"
____exports.CollectibleType.RUBBER_CEMENT = 221
____exports.CollectibleType[____exports.CollectibleType.RUBBER_CEMENT] = "RUBBER_CEMENT"
____exports.CollectibleType.ANTI_GRAVITY = 222
____exports.CollectibleType[____exports.CollectibleType.ANTI_GRAVITY] = "ANTI_GRAVITY"
____exports.CollectibleType.PYROMANIAC = 223
____exports.CollectibleType[____exports.CollectibleType.PYROMANIAC] = "PYROMANIAC"
____exports.CollectibleType.CRICKETS_BODY = 224
____exports.CollectibleType[____exports.CollectibleType.CRICKETS_BODY] = "CRICKETS_BODY"
____exports.CollectibleType.GIMPY = 225
____exports.CollectibleType[____exports.CollectibleType.GIMPY] = "GIMPY"
____exports.CollectibleType.BLACK_LOTUS = 226
____exports.CollectibleType[____exports.CollectibleType.BLACK_LOTUS] = "BLACK_LOTUS"
____exports.CollectibleType.PIGGY_BANK = 227
____exports.CollectibleType[____exports.CollectibleType.PIGGY_BANK] = "PIGGY_BANK"
____exports.CollectibleType.MOMS_PERFUME = 228
____exports.CollectibleType[____exports.CollectibleType.MOMS_PERFUME] = "MOMS_PERFUME"
____exports.CollectibleType.MONSTROS_LUNG = 229
____exports.CollectibleType[____exports.CollectibleType.MONSTROS_LUNG] = "MONSTROS_LUNG"
____exports.CollectibleType.ABADDON = 230
____exports.CollectibleType[____exports.CollectibleType.ABADDON] = "ABADDON"
____exports.CollectibleType.BALL_OF_TAR = 231
____exports.CollectibleType[____exports.CollectibleType.BALL_OF_TAR] = "BALL_OF_TAR"
____exports.CollectibleType.STOP_WATCH = 232
____exports.CollectibleType[____exports.CollectibleType.STOP_WATCH] = "STOP_WATCH"
____exports.CollectibleType.TINY_PLANET = 233
____exports.CollectibleType[____exports.CollectibleType.TINY_PLANET] = "TINY_PLANET"
____exports.CollectibleType.INFESTATION_2 = 234
____exports.CollectibleType[____exports.CollectibleType.INFESTATION_2] = "INFESTATION_2"
____exports.CollectibleType.E_COLI = 236
____exports.CollectibleType[____exports.CollectibleType.E_COLI] = "E_COLI"
____exports.CollectibleType.DEATHS_TOUCH = 237
____exports.CollectibleType[____exports.CollectibleType.DEATHS_TOUCH] = "DEATHS_TOUCH"
____exports.CollectibleType.KEY_PIECE_1 = 238
____exports.CollectibleType[____exports.CollectibleType.KEY_PIECE_1] = "KEY_PIECE_1"
____exports.CollectibleType.KEY_PIECE_2 = 239
____exports.CollectibleType[____exports.CollectibleType.KEY_PIECE_2] = "KEY_PIECE_2"
____exports.CollectibleType.EXPERIMENTAL_TREATMENT = 240
____exports.CollectibleType[____exports.CollectibleType.EXPERIMENTAL_TREATMENT] = "EXPERIMENTAL_TREATMENT"
____exports.CollectibleType.CONTRACT_FROM_BELOW = 241
____exports.CollectibleType[____exports.CollectibleType.CONTRACT_FROM_BELOW] = "CONTRACT_FROM_BELOW"
____exports.CollectibleType.INFAMY = 242
____exports.CollectibleType[____exports.CollectibleType.INFAMY] = "INFAMY"
____exports.CollectibleType.TRINITY_SHIELD = 243
____exports.CollectibleType[____exports.CollectibleType.TRINITY_SHIELD] = "TRINITY_SHIELD"
____exports.CollectibleType.TECH_5 = 244
____exports.CollectibleType[____exports.CollectibleType.TECH_5] = "TECH_5"
____exports.CollectibleType.TWENTY_TWENTY = 245
____exports.CollectibleType[____exports.CollectibleType.TWENTY_TWENTY] = "TWENTY_TWENTY"
____exports.CollectibleType.BLUE_MAP = 246
____exports.CollectibleType[____exports.CollectibleType.BLUE_MAP] = "BLUE_MAP"
____exports.CollectibleType.BFFS = 247
____exports.CollectibleType[____exports.CollectibleType.BFFS] = "BFFS"
____exports.CollectibleType.HIVE_MIND = 248
____exports.CollectibleType[____exports.CollectibleType.HIVE_MIND] = "HIVE_MIND"
____exports.CollectibleType.THERES_OPTIONS = 249
____exports.CollectibleType[____exports.CollectibleType.THERES_OPTIONS] = "THERES_OPTIONS"
____exports.CollectibleType.BOGO_BOMBS = 250
____exports.CollectibleType[____exports.CollectibleType.BOGO_BOMBS] = "BOGO_BOMBS"
____exports.CollectibleType.STARTER_DECK = 251
____exports.CollectibleType[____exports.CollectibleType.STARTER_DECK] = "STARTER_DECK"
____exports.CollectibleType.LITTLE_BAGGY = 252
____exports.CollectibleType[____exports.CollectibleType.LITTLE_BAGGY] = "LITTLE_BAGGY"
____exports.CollectibleType.MAGIC_SCAB = 253
____exports.CollectibleType[____exports.CollectibleType.MAGIC_SCAB] = "MAGIC_SCAB"
____exports.CollectibleType.BLOOD_CLOT = 254
____exports.CollectibleType[____exports.CollectibleType.BLOOD_CLOT] = "BLOOD_CLOT"
____exports.CollectibleType.SCREW = 255
____exports.CollectibleType[____exports.CollectibleType.SCREW] = "SCREW"
____exports.CollectibleType.HOT_BOMBS = 256
____exports.CollectibleType[____exports.CollectibleType.HOT_BOMBS] = "HOT_BOMBS"
____exports.CollectibleType.FIRE_MIND = 257
____exports.CollectibleType[____exports.CollectibleType.FIRE_MIND] = "FIRE_MIND"
____exports.CollectibleType.MISSING_NO = 258
____exports.CollectibleType[____exports.CollectibleType.MISSING_NO] = "MISSING_NO"
____exports.CollectibleType.DARK_MATTER = 259
____exports.CollectibleType[____exports.CollectibleType.DARK_MATTER] = "DARK_MATTER"
____exports.CollectibleType.BLACK_CANDLE = 260
____exports.CollectibleType[____exports.CollectibleType.BLACK_CANDLE] = "BLACK_CANDLE"
____exports.CollectibleType.PROPTOSIS = 261
____exports.CollectibleType[____exports.CollectibleType.PROPTOSIS] = "PROPTOSIS"
____exports.CollectibleType.MISSING_PAGE_2 = 262
____exports.CollectibleType[____exports.CollectibleType.MISSING_PAGE_2] = "MISSING_PAGE_2"
____exports.CollectibleType.CLEAR_RUNE = 263
____exports.CollectibleType[____exports.CollectibleType.CLEAR_RUNE] = "CLEAR_RUNE"
____exports.CollectibleType.SMART_FLY = 264
____exports.CollectibleType[____exports.CollectibleType.SMART_FLY] = "SMART_FLY"
____exports.CollectibleType.DRY_BABY = 265
____exports.CollectibleType[____exports.CollectibleType.DRY_BABY] = "DRY_BABY"
____exports.CollectibleType.JUICY_SACK = 266
____exports.CollectibleType[____exports.CollectibleType.JUICY_SACK] = "JUICY_SACK"
____exports.CollectibleType.ROBO_BABY_2 = 267
____exports.CollectibleType[____exports.CollectibleType.ROBO_BABY_2] = "ROBO_BABY_2"
____exports.CollectibleType.ROTTEN_BABY = 268
____exports.CollectibleType[____exports.CollectibleType.ROTTEN_BABY] = "ROTTEN_BABY"
____exports.CollectibleType.HEADLESS_BABY = 269
____exports.CollectibleType[____exports.CollectibleType.HEADLESS_BABY] = "HEADLESS_BABY"
____exports.CollectibleType.LEECH = 270
____exports.CollectibleType[____exports.CollectibleType.LEECH] = "LEECH"
____exports.CollectibleType.MYSTERY_SACK = 271
____exports.CollectibleType[____exports.CollectibleType.MYSTERY_SACK] = "MYSTERY_SACK"
____exports.CollectibleType.BBF = 272
____exports.CollectibleType[____exports.CollectibleType.BBF] = "BBF"
____exports.CollectibleType.BOBS_BRAIN = 273
____exports.CollectibleType[____exports.CollectibleType.BOBS_BRAIN] = "BOBS_BRAIN"
____exports.CollectibleType.BEST_BUD = 274
____exports.CollectibleType[____exports.CollectibleType.BEST_BUD] = "BEST_BUD"
____exports.CollectibleType.LIL_BRIMSTONE = 275
____exports.CollectibleType[____exports.CollectibleType.LIL_BRIMSTONE] = "LIL_BRIMSTONE"
____exports.CollectibleType.ISAACS_HEART = 276
____exports.CollectibleType[____exports.CollectibleType.ISAACS_HEART] = "ISAACS_HEART"
____exports.CollectibleType.LIL_HAUNT = 277
____exports.CollectibleType[____exports.CollectibleType.LIL_HAUNT] = "LIL_HAUNT"
____exports.CollectibleType.DARK_BUM = 278
____exports.CollectibleType[____exports.CollectibleType.DARK_BUM] = "DARK_BUM"
____exports.CollectibleType.BIG_FAN = 279
____exports.CollectibleType[____exports.CollectibleType.BIG_FAN] = "BIG_FAN"
____exports.CollectibleType.SISSY_LONGLEGS = 280
____exports.CollectibleType[____exports.CollectibleType.SISSY_LONGLEGS] = "SISSY_LONGLEGS"
____exports.CollectibleType.PUNCHING_BAG = 281
____exports.CollectibleType[____exports.CollectibleType.PUNCHING_BAG] = "PUNCHING_BAG"
____exports.CollectibleType.HOW_TO_JUMP = 282
____exports.CollectibleType[____exports.CollectibleType.HOW_TO_JUMP] = "HOW_TO_JUMP"
____exports.CollectibleType.D100 = 283
____exports.CollectibleType[____exports.CollectibleType.D100] = "D100"
____exports.CollectibleType.D4 = 284
____exports.CollectibleType[____exports.CollectibleType.D4] = "D4"
____exports.CollectibleType.D10 = 285
____exports.CollectibleType[____exports.CollectibleType.D10] = "D10"
____exports.CollectibleType.BLANK_CARD = 286
____exports.CollectibleType[____exports.CollectibleType.BLANK_CARD] = "BLANK_CARD"
____exports.CollectibleType.BOOK_OF_SECRETS = 287
____exports.CollectibleType[____exports.CollectibleType.BOOK_OF_SECRETS] = "BOOK_OF_SECRETS"
____exports.CollectibleType.BOX_OF_SPIDERS = 288
____exports.CollectibleType[____exports.CollectibleType.BOX_OF_SPIDERS] = "BOX_OF_SPIDERS"
____exports.CollectibleType.RED_CANDLE = 289
____exports.CollectibleType[____exports.CollectibleType.RED_CANDLE] = "RED_CANDLE"
____exports.CollectibleType.THE_JAR = 290
____exports.CollectibleType[____exports.CollectibleType.THE_JAR] = "THE_JAR"
____exports.CollectibleType.FLUSH = 291
____exports.CollectibleType[____exports.CollectibleType.FLUSH] = "FLUSH"
____exports.CollectibleType.SATANIC_BIBLE = 292
____exports.CollectibleType[____exports.CollectibleType.SATANIC_BIBLE] = "SATANIC_BIBLE"
____exports.CollectibleType.HEAD_OF_KRAMPUS = 293
____exports.CollectibleType[____exports.CollectibleType.HEAD_OF_KRAMPUS] = "HEAD_OF_KRAMPUS"
____exports.CollectibleType.BUTTER_BEAN = 294
____exports.CollectibleType[____exports.CollectibleType.BUTTER_BEAN] = "BUTTER_BEAN"
____exports.CollectibleType.MAGIC_FINGERS = 295
____exports.CollectibleType[____exports.CollectibleType.MAGIC_FINGERS] = "MAGIC_FINGERS"
____exports.CollectibleType.CONVERTER = 296
____exports.CollectibleType[____exports.CollectibleType.CONVERTER] = "CONVERTER"
____exports.CollectibleType.BLUE_BOX = 297
____exports.CollectibleType[____exports.CollectibleType.BLUE_BOX] = "BLUE_BOX"
____exports.CollectibleType.UNICORN_STUMP = 298
____exports.CollectibleType[____exports.CollectibleType.UNICORN_STUMP] = "UNICORN_STUMP"
____exports.CollectibleType.TAURUS = 299
____exports.CollectibleType[____exports.CollectibleType.TAURUS] = "TAURUS"
____exports.CollectibleType.ARIES = 300
____exports.CollectibleType[____exports.CollectibleType.ARIES] = "ARIES"
____exports.CollectibleType.CANCER = 301
____exports.CollectibleType[____exports.CollectibleType.CANCER] = "CANCER"
____exports.CollectibleType.LEO = 302
____exports.CollectibleType[____exports.CollectibleType.LEO] = "LEO"
____exports.CollectibleType.VIRGO = 303
____exports.CollectibleType[____exports.CollectibleType.VIRGO] = "VIRGO"
____exports.CollectibleType.LIBRA = 304
____exports.CollectibleType[____exports.CollectibleType.LIBRA] = "LIBRA"
____exports.CollectibleType.SCORPIO = 305
____exports.CollectibleType[____exports.CollectibleType.SCORPIO] = "SCORPIO"
____exports.CollectibleType.SAGITTARIUS = 306
____exports.CollectibleType[____exports.CollectibleType.SAGITTARIUS] = "SAGITTARIUS"
____exports.CollectibleType.CAPRICORN = 307
____exports.CollectibleType[____exports.CollectibleType.CAPRICORN] = "CAPRICORN"
____exports.CollectibleType.AQUARIUS = 308
____exports.CollectibleType[____exports.CollectibleType.AQUARIUS] = "AQUARIUS"
____exports.CollectibleType.PISCES = 309
____exports.CollectibleType[____exports.CollectibleType.PISCES] = "PISCES"
____exports.CollectibleType.EVES_MASCARA = 310
____exports.CollectibleType[____exports.CollectibleType.EVES_MASCARA] = "EVES_MASCARA"
____exports.CollectibleType.JUDAS_SHADOW = 311
____exports.CollectibleType[____exports.CollectibleType.JUDAS_SHADOW] = "JUDAS_SHADOW"
____exports.CollectibleType.MAGGYS_BOW = 312
____exports.CollectibleType[____exports.CollectibleType.MAGGYS_BOW] = "MAGGYS_BOW"
____exports.CollectibleType.HOLY_MANTLE = 313
____exports.CollectibleType[____exports.CollectibleType.HOLY_MANTLE] = "HOLY_MANTLE"
____exports.CollectibleType.THUNDER_THIGHS = 314
____exports.CollectibleType[____exports.CollectibleType.THUNDER_THIGHS] = "THUNDER_THIGHS"
____exports.CollectibleType.STRANGE_ATTRACTOR = 315
____exports.CollectibleType[____exports.CollectibleType.STRANGE_ATTRACTOR] = "STRANGE_ATTRACTOR"
____exports.CollectibleType.CURSED_EYE = 316
____exports.CollectibleType[____exports.CollectibleType.CURSED_EYE] = "CURSED_EYE"
____exports.CollectibleType.MYSTERIOUS_LIQUID = 317
____exports.CollectibleType[____exports.CollectibleType.MYSTERIOUS_LIQUID] = "MYSTERIOUS_LIQUID"
____exports.CollectibleType.GEMINI = 318
____exports.CollectibleType[____exports.CollectibleType.GEMINI] = "GEMINI"
____exports.CollectibleType.CAINS_OTHER_EYE = 319
____exports.CollectibleType[____exports.CollectibleType.CAINS_OTHER_EYE] = "CAINS_OTHER_EYE"
____exports.CollectibleType.BLUE_BABYS_ONLY_FRIEND = 320
____exports.CollectibleType[____exports.CollectibleType.BLUE_BABYS_ONLY_FRIEND] = "BLUE_BABYS_ONLY_FRIEND"
____exports.CollectibleType.SAMSONS_CHAINS = 321
____exports.CollectibleType[____exports.CollectibleType.SAMSONS_CHAINS] = "SAMSONS_CHAINS"
____exports.CollectibleType.MONGO_BABY = 322
____exports.CollectibleType[____exports.CollectibleType.MONGO_BABY] = "MONGO_BABY"
____exports.CollectibleType.ISAACS_TEARS = 323
____exports.CollectibleType[____exports.CollectibleType.ISAACS_TEARS] = "ISAACS_TEARS"
____exports.CollectibleType.UNDEFINED = 324
____exports.CollectibleType[____exports.CollectibleType.UNDEFINED] = "UNDEFINED"
____exports.CollectibleType.SCISSORS = 325
____exports.CollectibleType[____exports.CollectibleType.SCISSORS] = "SCISSORS"
____exports.CollectibleType.BREATH_OF_LIFE = 326
____exports.CollectibleType[____exports.CollectibleType.BREATH_OF_LIFE] = "BREATH_OF_LIFE"
____exports.CollectibleType.POLAROID = 327
____exports.CollectibleType[____exports.CollectibleType.POLAROID] = "POLAROID"
____exports.CollectibleType.NEGATIVE = 328
____exports.CollectibleType[____exports.CollectibleType.NEGATIVE] = "NEGATIVE"
____exports.CollectibleType.LUDOVICO_TECHNIQUE = 329
____exports.CollectibleType[____exports.CollectibleType.LUDOVICO_TECHNIQUE] = "LUDOVICO_TECHNIQUE"
____exports.CollectibleType.SOY_MILK = 330
____exports.CollectibleType[____exports.CollectibleType.SOY_MILK] = "SOY_MILK"
____exports.CollectibleType.GODHEAD = 331
____exports.CollectibleType[____exports.CollectibleType.GODHEAD] = "GODHEAD"
____exports.CollectibleType.LAZARUS_RAGS = 332
____exports.CollectibleType[____exports.CollectibleType.LAZARUS_RAGS] = "LAZARUS_RAGS"
____exports.CollectibleType.MIND = 333
____exports.CollectibleType[____exports.CollectibleType.MIND] = "MIND"
____exports.CollectibleType.BODY = 334
____exports.CollectibleType[____exports.CollectibleType.BODY] = "BODY"
____exports.CollectibleType.SOUL = 335
____exports.CollectibleType[____exports.CollectibleType.SOUL] = "SOUL"
____exports.CollectibleType.DEAD_ONION = 336
____exports.CollectibleType[____exports.CollectibleType.DEAD_ONION] = "DEAD_ONION"
____exports.CollectibleType.BROKEN_WATCH = 337
____exports.CollectibleType[____exports.CollectibleType.BROKEN_WATCH] = "BROKEN_WATCH"
____exports.CollectibleType.BOOMERANG = 338
____exports.CollectibleType[____exports.CollectibleType.BOOMERANG] = "BOOMERANG"
____exports.CollectibleType.SAFETY_PIN = 339
____exports.CollectibleType[____exports.CollectibleType.SAFETY_PIN] = "SAFETY_PIN"
____exports.CollectibleType.CAFFEINE_PILL = 340
____exports.CollectibleType[____exports.CollectibleType.CAFFEINE_PILL] = "CAFFEINE_PILL"
____exports.CollectibleType.TORN_PHOTO = 341
____exports.CollectibleType[____exports.CollectibleType.TORN_PHOTO] = "TORN_PHOTO"
____exports.CollectibleType.BLUE_CAP = 342
____exports.CollectibleType[____exports.CollectibleType.BLUE_CAP] = "BLUE_CAP"
____exports.CollectibleType.LATCH_KEY = 343
____exports.CollectibleType[____exports.CollectibleType.LATCH_KEY] = "LATCH_KEY"
____exports.CollectibleType.MATCH_BOOK = 344
____exports.CollectibleType[____exports.CollectibleType.MATCH_BOOK] = "MATCH_BOOK"
____exports.CollectibleType.SYNTHOIL = 345
____exports.CollectibleType[____exports.CollectibleType.SYNTHOIL] = "SYNTHOIL"
____exports.CollectibleType.SNACK = 346
____exports.CollectibleType[____exports.CollectibleType.SNACK] = "SNACK"
____exports.CollectibleType.DIPLOPIA = 347
____exports.CollectibleType[____exports.CollectibleType.DIPLOPIA] = "DIPLOPIA"
____exports.CollectibleType.PLACEBO = 348
____exports.CollectibleType[____exports.CollectibleType.PLACEBO] = "PLACEBO"
____exports.CollectibleType.WOODEN_NICKEL = 349
____exports.CollectibleType[____exports.CollectibleType.WOODEN_NICKEL] = "WOODEN_NICKEL"
____exports.CollectibleType.TOXIC_SHOCK = 350
____exports.CollectibleType[____exports.CollectibleType.TOXIC_SHOCK] = "TOXIC_SHOCK"
____exports.CollectibleType.MEGA_BEAN = 351
____exports.CollectibleType[____exports.CollectibleType.MEGA_BEAN] = "MEGA_BEAN"
____exports.CollectibleType.GLASS_CANNON = 352
____exports.CollectibleType[____exports.CollectibleType.GLASS_CANNON] = "GLASS_CANNON"
____exports.CollectibleType.BOMBER_BOY = 353
____exports.CollectibleType[____exports.CollectibleType.BOMBER_BOY] = "BOMBER_BOY"
____exports.CollectibleType.CRACK_JACKS = 354
____exports.CollectibleType[____exports.CollectibleType.CRACK_JACKS] = "CRACK_JACKS"
____exports.CollectibleType.MOMS_PEARLS = 355
____exports.CollectibleType[____exports.CollectibleType.MOMS_PEARLS] = "MOMS_PEARLS"
____exports.CollectibleType.CAR_BATTERY = 356
____exports.CollectibleType[____exports.CollectibleType.CAR_BATTERY] = "CAR_BATTERY"
____exports.CollectibleType.BOX_OF_FRIENDS = 357
____exports.CollectibleType[____exports.CollectibleType.BOX_OF_FRIENDS] = "BOX_OF_FRIENDS"
____exports.CollectibleType.THE_WIZ = 358
____exports.CollectibleType[____exports.CollectibleType.THE_WIZ] = "THE_WIZ"
____exports.CollectibleType.EIGHT_INCH_NAILS = 359
____exports.CollectibleType[____exports.CollectibleType.EIGHT_INCH_NAILS] = "EIGHT_INCH_NAILS"
____exports.CollectibleType.INCUBUS = 360
____exports.CollectibleType[____exports.CollectibleType.INCUBUS] = "INCUBUS"
____exports.CollectibleType.FATES_REWARD = 361
____exports.CollectibleType[____exports.CollectibleType.FATES_REWARD] = "FATES_REWARD"
____exports.CollectibleType.LIL_CHEST = 362
____exports.CollectibleType[____exports.CollectibleType.LIL_CHEST] = "LIL_CHEST"
____exports.CollectibleType.SWORN_PROTECTOR = 363
____exports.CollectibleType[____exports.CollectibleType.SWORN_PROTECTOR] = "SWORN_PROTECTOR"
____exports.CollectibleType.FRIEND_ZONE = 364
____exports.CollectibleType[____exports.CollectibleType.FRIEND_ZONE] = "FRIEND_ZONE"
____exports.CollectibleType.LOST_FLY = 365
____exports.CollectibleType[____exports.CollectibleType.LOST_FLY] = "LOST_FLY"
____exports.CollectibleType.SCATTER_BOMBS = 366
____exports.CollectibleType[____exports.CollectibleType.SCATTER_BOMBS] = "SCATTER_BOMBS"
____exports.CollectibleType.STICKY_BOMBS = 367
____exports.CollectibleType[____exports.CollectibleType.STICKY_BOMBS] = "STICKY_BOMBS"
____exports.CollectibleType.EPIPHORA = 368
____exports.CollectibleType[____exports.CollectibleType.EPIPHORA] = "EPIPHORA"
____exports.CollectibleType.CONTINUUM = 369
____exports.CollectibleType[____exports.CollectibleType.CONTINUUM] = "CONTINUUM"
____exports.CollectibleType.MR_DOLLY = 370
____exports.CollectibleType[____exports.CollectibleType.MR_DOLLY] = "MR_DOLLY"
____exports.CollectibleType.CURSE_OF_THE_TOWER = 371
____exports.CollectibleType[____exports.CollectibleType.CURSE_OF_THE_TOWER] = "CURSE_OF_THE_TOWER"
____exports.CollectibleType.CHARGED_BABY = 372
____exports.CollectibleType[____exports.CollectibleType.CHARGED_BABY] = "CHARGED_BABY"
____exports.CollectibleType.DEAD_EYE = 373
____exports.CollectibleType[____exports.CollectibleType.DEAD_EYE] = "DEAD_EYE"
____exports.CollectibleType.HOLY_LIGHT = 374
____exports.CollectibleType[____exports.CollectibleType.HOLY_LIGHT] = "HOLY_LIGHT"
____exports.CollectibleType.HOST_HAT = 375
____exports.CollectibleType[____exports.CollectibleType.HOST_HAT] = "HOST_HAT"
____exports.CollectibleType.RESTOCK = 376
____exports.CollectibleType[____exports.CollectibleType.RESTOCK] = "RESTOCK"
____exports.CollectibleType.BURSTING_SACK = 377
____exports.CollectibleType[____exports.CollectibleType.BURSTING_SACK] = "BURSTING_SACK"
____exports.CollectibleType.NUMBER_TWO = 378
____exports.CollectibleType[____exports.CollectibleType.NUMBER_TWO] = "NUMBER_TWO"
____exports.CollectibleType.PUPULA_DUPLEX = 379
____exports.CollectibleType[____exports.CollectibleType.PUPULA_DUPLEX] = "PUPULA_DUPLEX"
____exports.CollectibleType.PAY_TO_PLAY = 380
____exports.CollectibleType[____exports.CollectibleType.PAY_TO_PLAY] = "PAY_TO_PLAY"
____exports.CollectibleType.EDENS_BLESSING = 381
____exports.CollectibleType[____exports.CollectibleType.EDENS_BLESSING] = "EDENS_BLESSING"
____exports.CollectibleType.FRIEND_BALL = 382
____exports.CollectibleType[____exports.CollectibleType.FRIEND_BALL] = "FRIEND_BALL"
____exports.CollectibleType.TEAR_DETONATOR = 383
____exports.CollectibleType[____exports.CollectibleType.TEAR_DETONATOR] = "TEAR_DETONATOR"
____exports.CollectibleType.LIL_GURDY = 384
____exports.CollectibleType[____exports.CollectibleType.LIL_GURDY] = "LIL_GURDY"
____exports.CollectibleType.BUMBO = 385
____exports.CollectibleType[____exports.CollectibleType.BUMBO] = "BUMBO"
____exports.CollectibleType.D12 = 386
____exports.CollectibleType[____exports.CollectibleType.D12] = "D12"
____exports.CollectibleType.CENSER = 387
____exports.CollectibleType[____exports.CollectibleType.CENSER] = "CENSER"
____exports.CollectibleType.KEY_BUM = 388
____exports.CollectibleType[____exports.CollectibleType.KEY_BUM] = "KEY_BUM"
____exports.CollectibleType.RUNE_BAG = 389
____exports.CollectibleType[____exports.CollectibleType.RUNE_BAG] = "RUNE_BAG"
____exports.CollectibleType.SERAPHIM = 390
____exports.CollectibleType[____exports.CollectibleType.SERAPHIM] = "SERAPHIM"
____exports.CollectibleType.BETRAYAL = 391
____exports.CollectibleType[____exports.CollectibleType.BETRAYAL] = "BETRAYAL"
____exports.CollectibleType.ZODIAC = 392
____exports.CollectibleType[____exports.CollectibleType.ZODIAC] = "ZODIAC"
____exports.CollectibleType.SERPENTS_KISS = 393
____exports.CollectibleType[____exports.CollectibleType.SERPENTS_KISS] = "SERPENTS_KISS"
____exports.CollectibleType.MARKED = 394
____exports.CollectibleType[____exports.CollectibleType.MARKED] = "MARKED"
____exports.CollectibleType.TECH_X = 395
____exports.CollectibleType[____exports.CollectibleType.TECH_X] = "TECH_X"
____exports.CollectibleType.VENTRICLE_RAZOR = 396
____exports.CollectibleType[____exports.CollectibleType.VENTRICLE_RAZOR] = "VENTRICLE_RAZOR"
____exports.CollectibleType.TRACTOR_BEAM = 397
____exports.CollectibleType[____exports.CollectibleType.TRACTOR_BEAM] = "TRACTOR_BEAM"
____exports.CollectibleType.GODS_FLESH = 398
____exports.CollectibleType[____exports.CollectibleType.GODS_FLESH] = "GODS_FLESH"
____exports.CollectibleType.MAW_OF_THE_VOID = 399
____exports.CollectibleType[____exports.CollectibleType.MAW_OF_THE_VOID] = "MAW_OF_THE_VOID"
____exports.CollectibleType.SPEAR_OF_DESTINY = 400
____exports.CollectibleType[____exports.CollectibleType.SPEAR_OF_DESTINY] = "SPEAR_OF_DESTINY"
____exports.CollectibleType.EXPLOSIVO = 401
____exports.CollectibleType[____exports.CollectibleType.EXPLOSIVO] = "EXPLOSIVO"
____exports.CollectibleType.CHAOS = 402
____exports.CollectibleType[____exports.CollectibleType.CHAOS] = "CHAOS"
____exports.CollectibleType.SPIDER_MOD = 403
____exports.CollectibleType[____exports.CollectibleType.SPIDER_MOD] = "SPIDER_MOD"
____exports.CollectibleType.FARTING_BABY = 404
____exports.CollectibleType[____exports.CollectibleType.FARTING_BABY] = "FARTING_BABY"
____exports.CollectibleType.GB_BUG = 405
____exports.CollectibleType[____exports.CollectibleType.GB_BUG] = "GB_BUG"
____exports.CollectibleType.D8 = 406
____exports.CollectibleType[____exports.CollectibleType.D8] = "D8"
____exports.CollectibleType.PURITY = 407
____exports.CollectibleType[____exports.CollectibleType.PURITY] = "PURITY"
____exports.CollectibleType.ATHAME = 408
____exports.CollectibleType[____exports.CollectibleType.ATHAME] = "ATHAME"
____exports.CollectibleType.EMPTY_VESSEL = 409
____exports.CollectibleType[____exports.CollectibleType.EMPTY_VESSEL] = "EMPTY_VESSEL"
____exports.CollectibleType.EVIL_EYE = 410
____exports.CollectibleType[____exports.CollectibleType.EVIL_EYE] = "EVIL_EYE"
____exports.CollectibleType.LUSTY_BLOOD = 411
____exports.CollectibleType[____exports.CollectibleType.LUSTY_BLOOD] = "LUSTY_BLOOD"
____exports.CollectibleType.CAMBION_CONCEPTION = 412
____exports.CollectibleType[____exports.CollectibleType.CAMBION_CONCEPTION] = "CAMBION_CONCEPTION"
____exports.CollectibleType.IMMACULATE_CONCEPTION = 413
____exports.CollectibleType[____exports.CollectibleType.IMMACULATE_CONCEPTION] = "IMMACULATE_CONCEPTION"
____exports.CollectibleType.MORE_OPTIONS = 414
____exports.CollectibleType[____exports.CollectibleType.MORE_OPTIONS] = "MORE_OPTIONS"
____exports.CollectibleType.CROWN_OF_LIGHT = 415
____exports.CollectibleType[____exports.CollectibleType.CROWN_OF_LIGHT] = "CROWN_OF_LIGHT"
____exports.CollectibleType.DEEP_POCKETS = 416
____exports.CollectibleType[____exports.CollectibleType.DEEP_POCKETS] = "DEEP_POCKETS"
____exports.CollectibleType.SUCCUBUS = 417
____exports.CollectibleType[____exports.CollectibleType.SUCCUBUS] = "SUCCUBUS"
____exports.CollectibleType.FRUIT_CAKE = 418
____exports.CollectibleType[____exports.CollectibleType.FRUIT_CAKE] = "FRUIT_CAKE"
____exports.CollectibleType.TELEPORT_2 = 419
____exports.CollectibleType[____exports.CollectibleType.TELEPORT_2] = "TELEPORT_2"
____exports.CollectibleType.BLACK_POWDER = 420
____exports.CollectibleType[____exports.CollectibleType.BLACK_POWDER] = "BLACK_POWDER"
____exports.CollectibleType.KIDNEY_BEAN = 421
____exports.CollectibleType[____exports.CollectibleType.KIDNEY_BEAN] = "KIDNEY_BEAN"
____exports.CollectibleType.GLOWING_HOUR_GLASS = 422
____exports.CollectibleType[____exports.CollectibleType.GLOWING_HOUR_GLASS] = "GLOWING_HOUR_GLASS"
____exports.CollectibleType.CIRCLE_OF_PROTECTION = 423
____exports.CollectibleType[____exports.CollectibleType.CIRCLE_OF_PROTECTION] = "CIRCLE_OF_PROTECTION"
____exports.CollectibleType.SACK_HEAD = 424
____exports.CollectibleType[____exports.CollectibleType.SACK_HEAD] = "SACK_HEAD"
____exports.CollectibleType.NIGHT_LIGHT = 425
____exports.CollectibleType[____exports.CollectibleType.NIGHT_LIGHT] = "NIGHT_LIGHT"
____exports.CollectibleType.OBSESSED_FAN = 426
____exports.CollectibleType[____exports.CollectibleType.OBSESSED_FAN] = "OBSESSED_FAN"
____exports.CollectibleType.MINE_CRAFTER = 427
____exports.CollectibleType[____exports.CollectibleType.MINE_CRAFTER] = "MINE_CRAFTER"
____exports.CollectibleType.PJS = 428
____exports.CollectibleType[____exports.CollectibleType.PJS] = "PJS"
____exports.CollectibleType.HEAD_OF_THE_KEEPER = 429
____exports.CollectibleType[____exports.CollectibleType.HEAD_OF_THE_KEEPER] = "HEAD_OF_THE_KEEPER"
____exports.CollectibleType.PAPA_FLY = 430
____exports.CollectibleType[____exports.CollectibleType.PAPA_FLY] = "PAPA_FLY"
____exports.CollectibleType.MULTIDIMENSIONAL_BABY = 431
____exports.CollectibleType[____exports.CollectibleType.MULTIDIMENSIONAL_BABY] = "MULTIDIMENSIONAL_BABY"
____exports.CollectibleType.GLITTER_BOMBS = 432
____exports.CollectibleType[____exports.CollectibleType.GLITTER_BOMBS] = "GLITTER_BOMBS"
____exports.CollectibleType.MY_SHADOW = 433
____exports.CollectibleType[____exports.CollectibleType.MY_SHADOW] = "MY_SHADOW"
____exports.CollectibleType.JAR_OF_FLIES = 434
____exports.CollectibleType[____exports.CollectibleType.JAR_OF_FLIES] = "JAR_OF_FLIES"
____exports.CollectibleType.LIL_LOKI = 435
____exports.CollectibleType[____exports.CollectibleType.LIL_LOKI] = "LIL_LOKI"
____exports.CollectibleType.MILK = 436
____exports.CollectibleType[____exports.CollectibleType.MILK] = "MILK"
____exports.CollectibleType.D7 = 437
____exports.CollectibleType[____exports.CollectibleType.D7] = "D7"
____exports.CollectibleType.BINKY = 438
____exports.CollectibleType[____exports.CollectibleType.BINKY] = "BINKY"
____exports.CollectibleType.MOMS_BOX = 439
____exports.CollectibleType[____exports.CollectibleType.MOMS_BOX] = "MOMS_BOX"
____exports.CollectibleType.KIDNEY_STONE = 440
____exports.CollectibleType[____exports.CollectibleType.KIDNEY_STONE] = "KIDNEY_STONE"
____exports.CollectibleType.MEGA_BLAST = 441
____exports.CollectibleType[____exports.CollectibleType.MEGA_BLAST] = "MEGA_BLAST"
____exports.CollectibleType.DARK_PRINCES_CROWN = 442
____exports.CollectibleType[____exports.CollectibleType.DARK_PRINCES_CROWN] = "DARK_PRINCES_CROWN"
____exports.CollectibleType.APPLE = 443
____exports.CollectibleType[____exports.CollectibleType.APPLE] = "APPLE"
____exports.CollectibleType.LEAD_PENCIL = 444
____exports.CollectibleType[____exports.CollectibleType.LEAD_PENCIL] = "LEAD_PENCIL"
____exports.CollectibleType.DOG_TOOTH = 445
____exports.CollectibleType[____exports.CollectibleType.DOG_TOOTH] = "DOG_TOOTH"
____exports.CollectibleType.DEAD_TOOTH = 446
____exports.CollectibleType[____exports.CollectibleType.DEAD_TOOTH] = "DEAD_TOOTH"
____exports.CollectibleType.LINGER_BEAN = 447
____exports.CollectibleType[____exports.CollectibleType.LINGER_BEAN] = "LINGER_BEAN"
____exports.CollectibleType.SHARD_OF_GLASS = 448
____exports.CollectibleType[____exports.CollectibleType.SHARD_OF_GLASS] = "SHARD_OF_GLASS"
____exports.CollectibleType.METAL_PLATE = 449
____exports.CollectibleType[____exports.CollectibleType.METAL_PLATE] = "METAL_PLATE"
____exports.CollectibleType.EYE_OF_GREED = 450
____exports.CollectibleType[____exports.CollectibleType.EYE_OF_GREED] = "EYE_OF_GREED"
____exports.CollectibleType.TAROT_CLOTH = 451
____exports.CollectibleType[____exports.CollectibleType.TAROT_CLOTH] = "TAROT_CLOTH"
____exports.CollectibleType.VARICOSE_VEINS = 452
____exports.CollectibleType[____exports.CollectibleType.VARICOSE_VEINS] = "VARICOSE_VEINS"
____exports.CollectibleType.COMPOUND_FRACTURE = 453
____exports.CollectibleType[____exports.CollectibleType.COMPOUND_FRACTURE] = "COMPOUND_FRACTURE"
____exports.CollectibleType.POLYDACTYLY = 454
____exports.CollectibleType[____exports.CollectibleType.POLYDACTYLY] = "POLYDACTYLY"
____exports.CollectibleType.DADS_LOST_COIN = 455
____exports.CollectibleType[____exports.CollectibleType.DADS_LOST_COIN] = "DADS_LOST_COIN"
____exports.CollectibleType.MIDNIGHT_SNACK = 456
____exports.CollectibleType[____exports.CollectibleType.MIDNIGHT_SNACK] = "MIDNIGHT_SNACK"
____exports.CollectibleType.CONE_HEAD = 457
____exports.CollectibleType[____exports.CollectibleType.CONE_HEAD] = "CONE_HEAD"
____exports.CollectibleType.BELLY_BUTTON = 458
____exports.CollectibleType[____exports.CollectibleType.BELLY_BUTTON] = "BELLY_BUTTON"
____exports.CollectibleType.SINUS_INFECTION = 459
____exports.CollectibleType[____exports.CollectibleType.SINUS_INFECTION] = "SINUS_INFECTION"
____exports.CollectibleType.GLAUCOMA = 460
____exports.CollectibleType[____exports.CollectibleType.GLAUCOMA] = "GLAUCOMA"
____exports.CollectibleType.PARASITOID = 461
____exports.CollectibleType[____exports.CollectibleType.PARASITOID] = "PARASITOID"
____exports.CollectibleType.EYE_OF_BELIAL = 462
____exports.CollectibleType[____exports.CollectibleType.EYE_OF_BELIAL] = "EYE_OF_BELIAL"
____exports.CollectibleType.SULFURIC_ACID = 463
____exports.CollectibleType[____exports.CollectibleType.SULFURIC_ACID] = "SULFURIC_ACID"
____exports.CollectibleType.GLYPH_OF_BALANCE = 464
____exports.CollectibleType[____exports.CollectibleType.GLYPH_OF_BALANCE] = "GLYPH_OF_BALANCE"
____exports.CollectibleType.ANALOG_STICK = 465
____exports.CollectibleType[____exports.CollectibleType.ANALOG_STICK] = "ANALOG_STICK"
____exports.CollectibleType.CONTAGION = 466
____exports.CollectibleType[____exports.CollectibleType.CONTAGION] = "CONTAGION"
____exports.CollectibleType.FINGER = 467
____exports.CollectibleType[____exports.CollectibleType.FINGER] = "FINGER"
____exports.CollectibleType.SHADE = 468
____exports.CollectibleType[____exports.CollectibleType.SHADE] = "SHADE"
____exports.CollectibleType.DEPRESSION = 469
____exports.CollectibleType[____exports.CollectibleType.DEPRESSION] = "DEPRESSION"
____exports.CollectibleType.HUSHY = 470
____exports.CollectibleType[____exports.CollectibleType.HUSHY] = "HUSHY"
____exports.CollectibleType.LIL_MONSTRO = 471
____exports.CollectibleType[____exports.CollectibleType.LIL_MONSTRO] = "LIL_MONSTRO"
____exports.CollectibleType.KING_BABY = 472
____exports.CollectibleType[____exports.CollectibleType.KING_BABY] = "KING_BABY"
____exports.CollectibleType.BIG_CHUBBY = 473
____exports.CollectibleType[____exports.CollectibleType.BIG_CHUBBY] = "BIG_CHUBBY"
____exports.CollectibleType.BROKEN_GLASS_CANNON = 474
____exports.CollectibleType[____exports.CollectibleType.BROKEN_GLASS_CANNON] = "BROKEN_GLASS_CANNON"
____exports.CollectibleType.PLAN_C = 475
____exports.CollectibleType[____exports.CollectibleType.PLAN_C] = "PLAN_C"
____exports.CollectibleType.D1 = 476
____exports.CollectibleType[____exports.CollectibleType.D1] = "D1"
____exports.CollectibleType.VOID = 477
____exports.CollectibleType[____exports.CollectibleType.VOID] = "VOID"
____exports.CollectibleType.PAUSE = 478
____exports.CollectibleType[____exports.CollectibleType.PAUSE] = "PAUSE"
____exports.CollectibleType.SMELTER = 479
____exports.CollectibleType[____exports.CollectibleType.SMELTER] = "SMELTER"
____exports.CollectibleType.COMPOST = 480
____exports.CollectibleType[____exports.CollectibleType.COMPOST] = "COMPOST"
____exports.CollectibleType.DATAMINER = 481
____exports.CollectibleType[____exports.CollectibleType.DATAMINER] = "DATAMINER"
____exports.CollectibleType.CLICKER = 482
____exports.CollectibleType[____exports.CollectibleType.CLICKER] = "CLICKER"
____exports.CollectibleType.MAMA_MEGA = 483
____exports.CollectibleType[____exports.CollectibleType.MAMA_MEGA] = "MAMA_MEGA"
____exports.CollectibleType.WAIT_WHAT = 484
____exports.CollectibleType[____exports.CollectibleType.WAIT_WHAT] = "WAIT_WHAT"
____exports.CollectibleType.CROOKED_PENNY = 485
____exports.CollectibleType[____exports.CollectibleType.CROOKED_PENNY] = "CROOKED_PENNY"
____exports.CollectibleType.DULL_RAZOR = 486
____exports.CollectibleType[____exports.CollectibleType.DULL_RAZOR] = "DULL_RAZOR"
____exports.CollectibleType.POTATO_PEELER = 487
____exports.CollectibleType[____exports.CollectibleType.POTATO_PEELER] = "POTATO_PEELER"
____exports.CollectibleType.METRONOME = 488
____exports.CollectibleType[____exports.CollectibleType.METRONOME] = "METRONOME"
____exports.CollectibleType.D_INFINITY = 489
____exports.CollectibleType[____exports.CollectibleType.D_INFINITY] = "D_INFINITY"
____exports.CollectibleType.EDENS_SOUL = 490
____exports.CollectibleType[____exports.CollectibleType.EDENS_SOUL] = "EDENS_SOUL"
____exports.CollectibleType.ACID_BABY = 491
____exports.CollectibleType[____exports.CollectibleType.ACID_BABY] = "ACID_BABY"
____exports.CollectibleType.YO_LISTEN = 492
____exports.CollectibleType[____exports.CollectibleType.YO_LISTEN] = "YO_LISTEN"
____exports.CollectibleType.ADRENALINE = 493
____exports.CollectibleType[____exports.CollectibleType.ADRENALINE] = "ADRENALINE"
____exports.CollectibleType.JACOBS_LADDER = 494
____exports.CollectibleType[____exports.CollectibleType.JACOBS_LADDER] = "JACOBS_LADDER"
____exports.CollectibleType.GHOST_PEPPER = 495
____exports.CollectibleType[____exports.CollectibleType.GHOST_PEPPER] = "GHOST_PEPPER"
____exports.CollectibleType.EUTHANASIA = 496
____exports.CollectibleType[____exports.CollectibleType.EUTHANASIA] = "EUTHANASIA"
____exports.CollectibleType.CAMO_UNDIES = 497
____exports.CollectibleType[____exports.CollectibleType.CAMO_UNDIES] = "CAMO_UNDIES"
____exports.CollectibleType.DUALITY = 498
____exports.CollectibleType[____exports.CollectibleType.DUALITY] = "DUALITY"
____exports.CollectibleType.EUCHARIST = 499
____exports.CollectibleType[____exports.CollectibleType.EUCHARIST] = "EUCHARIST"
____exports.CollectibleType.SACK_OF_SACKS = 500
____exports.CollectibleType[____exports.CollectibleType.SACK_OF_SACKS] = "SACK_OF_SACKS"
____exports.CollectibleType.GREEDS_GULLET = 501
____exports.CollectibleType[____exports.CollectibleType.GREEDS_GULLET] = "GREEDS_GULLET"
____exports.CollectibleType.LARGE_ZIT = 502
____exports.CollectibleType[____exports.CollectibleType.LARGE_ZIT] = "LARGE_ZIT"
____exports.CollectibleType.LITTLE_HORN = 503
____exports.CollectibleType[____exports.CollectibleType.LITTLE_HORN] = "LITTLE_HORN"
____exports.CollectibleType.BROWN_NUGGET = 504
____exports.CollectibleType[____exports.CollectibleType.BROWN_NUGGET] = "BROWN_NUGGET"
____exports.CollectibleType.POKE_GO = 505
____exports.CollectibleType[____exports.CollectibleType.POKE_GO] = "POKE_GO"
____exports.CollectibleType.BACKSTABBER = 506
____exports.CollectibleType[____exports.CollectibleType.BACKSTABBER] = "BACKSTABBER"
____exports.CollectibleType.SHARP_STRAW = 507
____exports.CollectibleType[____exports.CollectibleType.SHARP_STRAW] = "SHARP_STRAW"
____exports.CollectibleType.MOMS_RAZOR = 508
____exports.CollectibleType[____exports.CollectibleType.MOMS_RAZOR] = "MOMS_RAZOR"
____exports.CollectibleType.BLOODSHOT_EYE = 509
____exports.CollectibleType[____exports.CollectibleType.BLOODSHOT_EYE] = "BLOODSHOT_EYE"
____exports.CollectibleType.DELIRIOUS = 510
____exports.CollectibleType[____exports.CollectibleType.DELIRIOUS] = "DELIRIOUS"
____exports.CollectibleType.ANGRY_FLY = 511
____exports.CollectibleType[____exports.CollectibleType.ANGRY_FLY] = "ANGRY_FLY"
____exports.CollectibleType.BLACK_HOLE = 512
____exports.CollectibleType[____exports.CollectibleType.BLACK_HOLE] = "BLACK_HOLE"
____exports.CollectibleType.BOZO = 513
____exports.CollectibleType[____exports.CollectibleType.BOZO] = "BOZO"
____exports.CollectibleType.BROKEN_MODEM = 514
____exports.CollectibleType[____exports.CollectibleType.BROKEN_MODEM] = "BROKEN_MODEM"
____exports.CollectibleType.MYSTERY_GIFT = 515
____exports.CollectibleType[____exports.CollectibleType.MYSTERY_GIFT] = "MYSTERY_GIFT"
____exports.CollectibleType.SPRINKLER = 516
____exports.CollectibleType[____exports.CollectibleType.SPRINKLER] = "SPRINKLER"
____exports.CollectibleType.FAST_BOMBS = 517
____exports.CollectibleType[____exports.CollectibleType.FAST_BOMBS] = "FAST_BOMBS"
____exports.CollectibleType.BUDDY_IN_A_BOX = 518
____exports.CollectibleType[____exports.CollectibleType.BUDDY_IN_A_BOX] = "BUDDY_IN_A_BOX"
____exports.CollectibleType.LIL_DELIRIUM = 519
____exports.CollectibleType[____exports.CollectibleType.LIL_DELIRIUM] = "LIL_DELIRIUM"
____exports.CollectibleType.JUMPER_CABLES = 520
____exports.CollectibleType[____exports.CollectibleType.JUMPER_CABLES] = "JUMPER_CABLES"
____exports.CollectibleType.COUPON = 521
____exports.CollectibleType[____exports.CollectibleType.COUPON] = "COUPON"
____exports.CollectibleType.TELEKINESIS = 522
____exports.CollectibleType[____exports.CollectibleType.TELEKINESIS] = "TELEKINESIS"
____exports.CollectibleType.MOVING_BOX = 523
____exports.CollectibleType[____exports.CollectibleType.MOVING_BOX] = "MOVING_BOX"
____exports.CollectibleType.TECHNOLOGY_ZERO = 524
____exports.CollectibleType[____exports.CollectibleType.TECHNOLOGY_ZERO] = "TECHNOLOGY_ZERO"
____exports.CollectibleType.LEPROSY = 525
____exports.CollectibleType[____exports.CollectibleType.LEPROSY] = "LEPROSY"
____exports.CollectibleType.SEVEN_SEALS = 526
____exports.CollectibleType[____exports.CollectibleType.SEVEN_SEALS] = "SEVEN_SEALS"
____exports.CollectibleType.MR_ME = 527
____exports.CollectibleType[____exports.CollectibleType.MR_ME] = "MR_ME"
____exports.CollectibleType.ANGELIC_PRISM = 528
____exports.CollectibleType[____exports.CollectibleType.ANGELIC_PRISM] = "ANGELIC_PRISM"
____exports.CollectibleType.POP = 529
____exports.CollectibleType[____exports.CollectibleType.POP] = "POP"
____exports.CollectibleType.DEATHS_LIST = 530
____exports.CollectibleType[____exports.CollectibleType.DEATHS_LIST] = "DEATHS_LIST"
____exports.CollectibleType.HAEMOLACRIA = 531
____exports.CollectibleType[____exports.CollectibleType.HAEMOLACRIA] = "HAEMOLACRIA"
____exports.CollectibleType.LACHRYPHAGY = 532
____exports.CollectibleType[____exports.CollectibleType.LACHRYPHAGY] = "LACHRYPHAGY"
____exports.CollectibleType.TRISAGION = 533
____exports.CollectibleType[____exports.CollectibleType.TRISAGION] = "TRISAGION"
____exports.CollectibleType.SCHOOLBAG = 534
____exports.CollectibleType[____exports.CollectibleType.SCHOOLBAG] = "SCHOOLBAG"
____exports.CollectibleType.BLANKET = 535
____exports.CollectibleType[____exports.CollectibleType.BLANKET] = "BLANKET"
____exports.CollectibleType.SACRIFICIAL_ALTAR = 536
____exports.CollectibleType[____exports.CollectibleType.SACRIFICIAL_ALTAR] = "SACRIFICIAL_ALTAR"
____exports.CollectibleType.LIL_SPEWER = 537
____exports.CollectibleType[____exports.CollectibleType.LIL_SPEWER] = "LIL_SPEWER"
____exports.CollectibleType.MARBLES = 538
____exports.CollectibleType[____exports.CollectibleType.MARBLES] = "MARBLES"
____exports.CollectibleType.MYSTERY_EGG = 539
____exports.CollectibleType[____exports.CollectibleType.MYSTERY_EGG] = "MYSTERY_EGG"
____exports.CollectibleType.FLAT_STONE = 540
____exports.CollectibleType[____exports.CollectibleType.FLAT_STONE] = "FLAT_STONE"
____exports.CollectibleType.MARROW = 541
____exports.CollectibleType[____exports.CollectibleType.MARROW] = "MARROW"
____exports.CollectibleType.SLIPPED_RIB = 542
____exports.CollectibleType[____exports.CollectibleType.SLIPPED_RIB] = "SLIPPED_RIB"
____exports.CollectibleType.HALLOWED_GROUND = 543
____exports.CollectibleType[____exports.CollectibleType.HALLOWED_GROUND] = "HALLOWED_GROUND"
____exports.CollectibleType.POINTY_RIB = 544
____exports.CollectibleType[____exports.CollectibleType.POINTY_RIB] = "POINTY_RIB"
____exports.CollectibleType.BOOK_OF_THE_DEAD = 545
____exports.CollectibleType[____exports.CollectibleType.BOOK_OF_THE_DEAD] = "BOOK_OF_THE_DEAD"
____exports.CollectibleType.DADS_RING = 546
____exports.CollectibleType[____exports.CollectibleType.DADS_RING] = "DADS_RING"
____exports.CollectibleType.DIVORCE_PAPERS = 547
____exports.CollectibleType[____exports.CollectibleType.DIVORCE_PAPERS] = "DIVORCE_PAPERS"
____exports.CollectibleType.JAW_BONE = 548
____exports.CollectibleType[____exports.CollectibleType.JAW_BONE] = "JAW_BONE"
____exports.CollectibleType.BRITTLE_BONES = 549
____exports.CollectibleType[____exports.CollectibleType.BRITTLE_BONES] = "BRITTLE_BONES"
____exports.CollectibleType.BROKEN_SHOVEL_1 = 550
____exports.CollectibleType[____exports.CollectibleType.BROKEN_SHOVEL_1] = "BROKEN_SHOVEL_1"
____exports.CollectibleType.BROKEN_SHOVEL_2 = 551
____exports.CollectibleType[____exports.CollectibleType.BROKEN_SHOVEL_2] = "BROKEN_SHOVEL_2"
____exports.CollectibleType.MOMS_SHOVEL = 552
____exports.CollectibleType[____exports.CollectibleType.MOMS_SHOVEL] = "MOMS_SHOVEL"
____exports.CollectibleType.MUCORMYCOSIS = 553
____exports.CollectibleType[____exports.CollectibleType.MUCORMYCOSIS] = "MUCORMYCOSIS"
____exports.CollectibleType.TWO_SPOOKY = 554
____exports.CollectibleType[____exports.CollectibleType.TWO_SPOOKY] = "TWO_SPOOKY"
____exports.CollectibleType.GOLDEN_RAZOR = 555
____exports.CollectibleType[____exports.CollectibleType.GOLDEN_RAZOR] = "GOLDEN_RAZOR"
____exports.CollectibleType.SULFUR = 556
____exports.CollectibleType[____exports.CollectibleType.SULFUR] = "SULFUR"
____exports.CollectibleType.FORTUNE_COOKIE = 557
____exports.CollectibleType[____exports.CollectibleType.FORTUNE_COOKIE] = "FORTUNE_COOKIE"
____exports.CollectibleType.EYE_SORE = 558
____exports.CollectibleType[____exports.CollectibleType.EYE_SORE] = "EYE_SORE"
____exports.CollectibleType.ONE_HUNDRED_TWENTY_VOLT = 559
____exports.CollectibleType[____exports.CollectibleType.ONE_HUNDRED_TWENTY_VOLT] = "ONE_HUNDRED_TWENTY_VOLT"
____exports.CollectibleType.IT_HURTS = 560
____exports.CollectibleType[____exports.CollectibleType.IT_HURTS] = "IT_HURTS"
____exports.CollectibleType.ALMOND_MILK = 561
____exports.CollectibleType[____exports.CollectibleType.ALMOND_MILK] = "ALMOND_MILK"
____exports.CollectibleType.ROCK_BOTTOM = 562
____exports.CollectibleType[____exports.CollectibleType.ROCK_BOTTOM] = "ROCK_BOTTOM"
____exports.CollectibleType.NANCY_BOMBS = 563
____exports.CollectibleType[____exports.CollectibleType.NANCY_BOMBS] = "NANCY_BOMBS"
____exports.CollectibleType.BAR_OF_SOAP = 564
____exports.CollectibleType[____exports.CollectibleType.BAR_OF_SOAP] = "BAR_OF_SOAP"
____exports.CollectibleType.BLOOD_PUPPY = 565
____exports.CollectibleType[____exports.CollectibleType.BLOOD_PUPPY] = "BLOOD_PUPPY"
____exports.CollectibleType.DREAM_CATCHER = 566
____exports.CollectibleType[____exports.CollectibleType.DREAM_CATCHER] = "DREAM_CATCHER"
____exports.CollectibleType.PASCHAL_CANDLE = 567
____exports.CollectibleType[____exports.CollectibleType.PASCHAL_CANDLE] = "PASCHAL_CANDLE"
____exports.CollectibleType.DIVINE_INTERVENTION = 568
____exports.CollectibleType[____exports.CollectibleType.DIVINE_INTERVENTION] = "DIVINE_INTERVENTION"
____exports.CollectibleType.BLOOD_OATH = 569
____exports.CollectibleType[____exports.CollectibleType.BLOOD_OATH] = "BLOOD_OATH"
____exports.CollectibleType.PLAYDOUGH_COOKIE = 570
____exports.CollectibleType[____exports.CollectibleType.PLAYDOUGH_COOKIE] = "PLAYDOUGH_COOKIE"
____exports.CollectibleType.SOCKS = 571
____exports.CollectibleType[____exports.CollectibleType.SOCKS] = "SOCKS"
____exports.CollectibleType.EYE_OF_THE_OCCULT = 572
____exports.CollectibleType[____exports.CollectibleType.EYE_OF_THE_OCCULT] = "EYE_OF_THE_OCCULT"
____exports.CollectibleType.IMMACULATE_HEART = 573
____exports.CollectibleType[____exports.CollectibleType.IMMACULATE_HEART] = "IMMACULATE_HEART"
____exports.CollectibleType.MONSTRANCE = 574
____exports.CollectibleType[____exports.CollectibleType.MONSTRANCE] = "MONSTRANCE"
____exports.CollectibleType.INTRUDER = 575
____exports.CollectibleType[____exports.CollectibleType.INTRUDER] = "INTRUDER"
____exports.CollectibleType.DIRTY_MIND = 576
____exports.CollectibleType[____exports.CollectibleType.DIRTY_MIND] = "DIRTY_MIND"
____exports.CollectibleType.DAMOCLES = 577
____exports.CollectibleType[____exports.CollectibleType.DAMOCLES] = "DAMOCLES"
____exports.CollectibleType.FREE_LEMONADE = 578
____exports.CollectibleType[____exports.CollectibleType.FREE_LEMONADE] = "FREE_LEMONADE"
____exports.CollectibleType.SPIRIT_SWORD = 579
____exports.CollectibleType[____exports.CollectibleType.SPIRIT_SWORD] = "SPIRIT_SWORD"
____exports.CollectibleType.RED_KEY = 580
____exports.CollectibleType[____exports.CollectibleType.RED_KEY] = "RED_KEY"
____exports.CollectibleType.PSY_FLY = 581
____exports.CollectibleType[____exports.CollectibleType.PSY_FLY] = "PSY_FLY"
____exports.CollectibleType.WAVY_CAP = 582
____exports.CollectibleType[____exports.CollectibleType.WAVY_CAP] = "WAVY_CAP"
____exports.CollectibleType.ROCKET_IN_A_JAR = 583
____exports.CollectibleType[____exports.CollectibleType.ROCKET_IN_A_JAR] = "ROCKET_IN_A_JAR"
____exports.CollectibleType.BOOK_OF_VIRTUES = 584
____exports.CollectibleType[____exports.CollectibleType.BOOK_OF_VIRTUES] = "BOOK_OF_VIRTUES"
____exports.CollectibleType.ALABASTER_BOX = 585
____exports.CollectibleType[____exports.CollectibleType.ALABASTER_BOX] = "ALABASTER_BOX"
____exports.CollectibleType.STAIRWAY = 586
____exports.CollectibleType[____exports.CollectibleType.STAIRWAY] = "STAIRWAY"
____exports.CollectibleType.SOL = 588
____exports.CollectibleType[____exports.CollectibleType.SOL] = "SOL"
____exports.CollectibleType.LUNA = 589
____exports.CollectibleType[____exports.CollectibleType.LUNA] = "LUNA"
____exports.CollectibleType.MERCURIUS = 590
____exports.CollectibleType[____exports.CollectibleType.MERCURIUS] = "MERCURIUS"
____exports.CollectibleType.VENUS = 591
____exports.CollectibleType[____exports.CollectibleType.VENUS] = "VENUS"
____exports.CollectibleType.TERRA = 592
____exports.CollectibleType[____exports.CollectibleType.TERRA] = "TERRA"
____exports.CollectibleType.MARS = 593
____exports.CollectibleType[____exports.CollectibleType.MARS] = "MARS"
____exports.CollectibleType.JUPITER = 594
____exports.CollectibleType[____exports.CollectibleType.JUPITER] = "JUPITER"
____exports.CollectibleType.SATURNUS = 595
____exports.CollectibleType[____exports.CollectibleType.SATURNUS] = "SATURNUS"
____exports.CollectibleType.URANUS = 596
____exports.CollectibleType[____exports.CollectibleType.URANUS] = "URANUS"
____exports.CollectibleType.NEPTUNUS = 597
____exports.CollectibleType[____exports.CollectibleType.NEPTUNUS] = "NEPTUNUS"
____exports.CollectibleType.PLUTO = 598
____exports.CollectibleType[____exports.CollectibleType.PLUTO] = "PLUTO"
____exports.CollectibleType.VOODOO_HEAD = 599
____exports.CollectibleType[____exports.CollectibleType.VOODOO_HEAD] = "VOODOO_HEAD"
____exports.CollectibleType.EYE_DROPS = 600
____exports.CollectibleType[____exports.CollectibleType.EYE_DROPS] = "EYE_DROPS"
____exports.CollectibleType.ACT_OF_CONTRITION = 601
____exports.CollectibleType[____exports.CollectibleType.ACT_OF_CONTRITION] = "ACT_OF_CONTRITION"
____exports.CollectibleType.MEMBER_CARD = 602
____exports.CollectibleType[____exports.CollectibleType.MEMBER_CARD] = "MEMBER_CARD"
____exports.CollectibleType.BATTERY_PACK = 603
____exports.CollectibleType[____exports.CollectibleType.BATTERY_PACK] = "BATTERY_PACK"
____exports.CollectibleType.MOMS_BRACELET = 604
____exports.CollectibleType[____exports.CollectibleType.MOMS_BRACELET] = "MOMS_BRACELET"
____exports.CollectibleType.SCOOPER = 605
____exports.CollectibleType[____exports.CollectibleType.SCOOPER] = "SCOOPER"
____exports.CollectibleType.OCULAR_RIFT = 606
____exports.CollectibleType[____exports.CollectibleType.OCULAR_RIFT] = "OCULAR_RIFT"
____exports.CollectibleType.BOILED_BABY = 607
____exports.CollectibleType[____exports.CollectibleType.BOILED_BABY] = "BOILED_BABY"
____exports.CollectibleType.FREEZER_BABY = 608
____exports.CollectibleType[____exports.CollectibleType.FREEZER_BABY] = "FREEZER_BABY"
____exports.CollectibleType.ETERNAL_D6 = 609
____exports.CollectibleType[____exports.CollectibleType.ETERNAL_D6] = "ETERNAL_D6"
____exports.CollectibleType.BIRD_CAGE = 610
____exports.CollectibleType[____exports.CollectibleType.BIRD_CAGE] = "BIRD_CAGE"
____exports.CollectibleType.LARYNX = 611
____exports.CollectibleType[____exports.CollectibleType.LARYNX] = "LARYNX"
____exports.CollectibleType.LOST_SOUL = 612
____exports.CollectibleType[____exports.CollectibleType.LOST_SOUL] = "LOST_SOUL"
____exports.CollectibleType.BLOOD_BOMBS = 614
____exports.CollectibleType[____exports.CollectibleType.BLOOD_BOMBS] = "BLOOD_BOMBS"
____exports.CollectibleType.LIL_DUMPY = 615
____exports.CollectibleType[____exports.CollectibleType.LIL_DUMPY] = "LIL_DUMPY"
____exports.CollectibleType.BIRDS_EYE = 616
____exports.CollectibleType[____exports.CollectibleType.BIRDS_EYE] = "BIRDS_EYE"
____exports.CollectibleType.LODESTONE = 617
____exports.CollectibleType[____exports.CollectibleType.LODESTONE] = "LODESTONE"
____exports.CollectibleType.ROTTEN_TOMATO = 618
____exports.CollectibleType[____exports.CollectibleType.ROTTEN_TOMATO] = "ROTTEN_TOMATO"
____exports.CollectibleType.BIRTHRIGHT = 619
____exports.CollectibleType[____exports.CollectibleType.BIRTHRIGHT] = "BIRTHRIGHT"
____exports.CollectibleType.RED_STEW = 621
____exports.CollectibleType[____exports.CollectibleType.RED_STEW] = "RED_STEW"
____exports.CollectibleType.GENESIS = 622
____exports.CollectibleType[____exports.CollectibleType.GENESIS] = "GENESIS"
____exports.CollectibleType.SHARP_KEY = 623
____exports.CollectibleType[____exports.CollectibleType.SHARP_KEY] = "SHARP_KEY"
____exports.CollectibleType.BOOSTER_PACK = 624
____exports.CollectibleType[____exports.CollectibleType.BOOSTER_PACK] = "BOOSTER_PACK"
____exports.CollectibleType.MEGA_MUSH = 625
____exports.CollectibleType[____exports.CollectibleType.MEGA_MUSH] = "MEGA_MUSH"
____exports.CollectibleType.KNIFE_PIECE_1 = 626
____exports.CollectibleType[____exports.CollectibleType.KNIFE_PIECE_1] = "KNIFE_PIECE_1"
____exports.CollectibleType.KNIFE_PIECE_2 = 627
____exports.CollectibleType[____exports.CollectibleType.KNIFE_PIECE_2] = "KNIFE_PIECE_2"
____exports.CollectibleType.DEATH_CERTIFICATE = 628
____exports.CollectibleType[____exports.CollectibleType.DEATH_CERTIFICATE] = "DEATH_CERTIFICATE"
____exports.CollectibleType.BOT_FLY = 629
____exports.CollectibleType[____exports.CollectibleType.BOT_FLY] = "BOT_FLY"
____exports.CollectibleType.MEAT_CLEAVER = 631
____exports.CollectibleType[____exports.CollectibleType.MEAT_CLEAVER] = "MEAT_CLEAVER"
____exports.CollectibleType.EVIL_CHARM = 632
____exports.CollectibleType[____exports.CollectibleType.EVIL_CHARM] = "EVIL_CHARM"
____exports.CollectibleType.DOGMA = 633
____exports.CollectibleType[____exports.CollectibleType.DOGMA] = "DOGMA"
____exports.CollectibleType.PURGATORY = 634
____exports.CollectibleType[____exports.CollectibleType.PURGATORY] = "PURGATORY"
____exports.CollectibleType.STITCHES = 635
____exports.CollectibleType[____exports.CollectibleType.STITCHES] = "STITCHES"
____exports.CollectibleType.R_KEY = 636
____exports.CollectibleType[____exports.CollectibleType.R_KEY] = "R_KEY"
____exports.CollectibleType.KNOCKOUT_DROPS = 637
____exports.CollectibleType[____exports.CollectibleType.KNOCKOUT_DROPS] = "KNOCKOUT_DROPS"
____exports.CollectibleType.ERASER = 638
____exports.CollectibleType[____exports.CollectibleType.ERASER] = "ERASER"
____exports.CollectibleType.YUCK_HEART = 639
____exports.CollectibleType[____exports.CollectibleType.YUCK_HEART] = "YUCK_HEART"
____exports.CollectibleType.URN_OF_SOULS = 640
____exports.CollectibleType[____exports.CollectibleType.URN_OF_SOULS] = "URN_OF_SOULS"
____exports.CollectibleType.AKELDAMA = 641
____exports.CollectibleType[____exports.CollectibleType.AKELDAMA] = "AKELDAMA"
____exports.CollectibleType.MAGIC_SKIN = 642
____exports.CollectibleType[____exports.CollectibleType.MAGIC_SKIN] = "MAGIC_SKIN"
____exports.CollectibleType.REVELATION = 643
____exports.CollectibleType[____exports.CollectibleType.REVELATION] = "REVELATION"
____exports.CollectibleType.CONSOLATION_PRIZE = 644
____exports.CollectibleType[____exports.CollectibleType.CONSOLATION_PRIZE] = "CONSOLATION_PRIZE"
____exports.CollectibleType.TINYTOMA = 645
____exports.CollectibleType[____exports.CollectibleType.TINYTOMA] = "TINYTOMA"
____exports.CollectibleType.BRIMSTONE_BOMBS = 646
____exports.CollectibleType[____exports.CollectibleType.BRIMSTONE_BOMBS] = "BRIMSTONE_BOMBS"
____exports.CollectibleType.FOUR_FIVE_VOLT = 647
____exports.CollectibleType[____exports.CollectibleType.FOUR_FIVE_VOLT] = "FOUR_FIVE_VOLT"
____exports.CollectibleType.FRUITY_PLUM = 649
____exports.CollectibleType[____exports.CollectibleType.FRUITY_PLUM] = "FRUITY_PLUM"
____exports.CollectibleType.PLUM_FLUTE = 650
____exports.CollectibleType[____exports.CollectibleType.PLUM_FLUTE] = "PLUM_FLUTE"
____exports.CollectibleType.STAR_OF_BETHLEHEM = 651
____exports.CollectibleType[____exports.CollectibleType.STAR_OF_BETHLEHEM] = "STAR_OF_BETHLEHEM"
____exports.CollectibleType.CUBE_BABY = 652
____exports.CollectibleType[____exports.CollectibleType.CUBE_BABY] = "CUBE_BABY"
____exports.CollectibleType.VADE_RETRO = 653
____exports.CollectibleType[____exports.CollectibleType.VADE_RETRO] = "VADE_RETRO"
____exports.CollectibleType.FALSE_PHD = 654
____exports.CollectibleType[____exports.CollectibleType.FALSE_PHD] = "FALSE_PHD"
____exports.CollectibleType.SPIN_TO_WIN = 655
____exports.CollectibleType[____exports.CollectibleType.SPIN_TO_WIN] = "SPIN_TO_WIN"
____exports.CollectibleType.DAMOCLES_PASSIVE = 656
____exports.CollectibleType[____exports.CollectibleType.DAMOCLES_PASSIVE] = "DAMOCLES_PASSIVE"
____exports.CollectibleType.VASCULITIS = 657
____exports.CollectibleType[____exports.CollectibleType.VASCULITIS] = "VASCULITIS"
____exports.CollectibleType.GIANT_CELL = 658
____exports.CollectibleType[____exports.CollectibleType.GIANT_CELL] = "GIANT_CELL"
____exports.CollectibleType.TROPICAMIDE = 659
____exports.CollectibleType[____exports.CollectibleType.TROPICAMIDE] = "TROPICAMIDE"
____exports.CollectibleType.READING = 660
____exports.CollectibleType[____exports.CollectibleType.READING] = "READING"
____exports.CollectibleType.QUINTS = 661
____exports.CollectibleType[____exports.CollectibleType.QUINTS] = "QUINTS"
____exports.CollectibleType.TOOTH_AND_NAIL = 663
____exports.CollectibleType[____exports.CollectibleType.TOOTH_AND_NAIL] = "TOOTH_AND_NAIL"
____exports.CollectibleType.BINGE_EATER = 664
____exports.CollectibleType[____exports.CollectibleType.BINGE_EATER] = "BINGE_EATER"
____exports.CollectibleType.GUPPYS_EYE = 665
____exports.CollectibleType[____exports.CollectibleType.GUPPYS_EYE] = "GUPPYS_EYE"
____exports.CollectibleType.STRAWMAN = 667
____exports.CollectibleType[____exports.CollectibleType.STRAWMAN] = "STRAWMAN"
____exports.CollectibleType.DADS_NOTE = 668
____exports.CollectibleType[____exports.CollectibleType.DADS_NOTE] = "DADS_NOTE"
____exports.CollectibleType.SAUSAGE = 669
____exports.CollectibleType[____exports.CollectibleType.SAUSAGE] = "SAUSAGE"
____exports.CollectibleType.OPTIONS = 670
____exports.CollectibleType[____exports.CollectibleType.OPTIONS] = "OPTIONS"
____exports.CollectibleType.CANDY_HEART = 671
____exports.CollectibleType[____exports.CollectibleType.CANDY_HEART] = "CANDY_HEART"
____exports.CollectibleType.POUND_OF_FLESH = 672
____exports.CollectibleType[____exports.CollectibleType.POUND_OF_FLESH] = "POUND_OF_FLESH"
____exports.CollectibleType.REDEMPTION = 673
____exports.CollectibleType[____exports.CollectibleType.REDEMPTION] = "REDEMPTION"
____exports.CollectibleType.SPIRIT_SHACKLES = 674
____exports.CollectibleType[____exports.CollectibleType.SPIRIT_SHACKLES] = "SPIRIT_SHACKLES"
____exports.CollectibleType.CRACKED_ORB = 675
____exports.CollectibleType[____exports.CollectibleType.CRACKED_ORB] = "CRACKED_ORB"
____exports.CollectibleType.EMPTY_HEART = 676
____exports.CollectibleType[____exports.CollectibleType.EMPTY_HEART] = "EMPTY_HEART"
____exports.CollectibleType.ASTRAL_PROJECTION = 677
____exports.CollectibleType[____exports.CollectibleType.ASTRAL_PROJECTION] = "ASTRAL_PROJECTION"
____exports.CollectibleType.C_SECTION = 678
____exports.CollectibleType[____exports.CollectibleType.C_SECTION] = "C_SECTION"
____exports.CollectibleType.LIL_ABADDON = 679
____exports.CollectibleType[____exports.CollectibleType.LIL_ABADDON] = "LIL_ABADDON"
____exports.CollectibleType.MONTEZUMAS_REVENGE = 680
____exports.CollectibleType[____exports.CollectibleType.MONTEZUMAS_REVENGE] = "MONTEZUMAS_REVENGE"
____exports.CollectibleType.LIL_PORTAL = 681
____exports.CollectibleType[____exports.CollectibleType.LIL_PORTAL] = "LIL_PORTAL"
____exports.CollectibleType.WORM_FRIEND = 682
____exports.CollectibleType[____exports.CollectibleType.WORM_FRIEND] = "WORM_FRIEND"
____exports.CollectibleType.BONE_SPURS = 683
____exports.CollectibleType[____exports.CollectibleType.BONE_SPURS] = "BONE_SPURS"
____exports.CollectibleType.HUNGRY_SOUL = 684
____exports.CollectibleType[____exports.CollectibleType.HUNGRY_SOUL] = "HUNGRY_SOUL"
____exports.CollectibleType.JAR_OF_WISPS = 685
____exports.CollectibleType[____exports.CollectibleType.JAR_OF_WISPS] = "JAR_OF_WISPS"
____exports.CollectibleType.SOUL_LOCKET = 686
____exports.CollectibleType[____exports.CollectibleType.SOUL_LOCKET] = "SOUL_LOCKET"
____exports.CollectibleType.FRIEND_FINDER = 687
____exports.CollectibleType[____exports.CollectibleType.FRIEND_FINDER] = "FRIEND_FINDER"
____exports.CollectibleType.INNER_CHILD = 688
____exports.CollectibleType[____exports.CollectibleType.INNER_CHILD] = "INNER_CHILD"
____exports.CollectibleType.GLITCHED_CROWN = 689
____exports.CollectibleType[____exports.CollectibleType.GLITCHED_CROWN] = "GLITCHED_CROWN"
____exports.CollectibleType.JELLY_BELLY = 690
____exports.CollectibleType[____exports.CollectibleType.JELLY_BELLY] = "JELLY_BELLY"
____exports.CollectibleType.SACRED_ORB = 691
____exports.CollectibleType[____exports.CollectibleType.SACRED_ORB] = "SACRED_ORB"
____exports.CollectibleType.SANGUINE_BOND = 692
____exports.CollectibleType[____exports.CollectibleType.SANGUINE_BOND] = "SANGUINE_BOND"
____exports.CollectibleType.SWARM = 693
____exports.CollectibleType[____exports.CollectibleType.SWARM] = "SWARM"
____exports.CollectibleType.HEARTBREAK = 694
____exports.CollectibleType[____exports.CollectibleType.HEARTBREAK] = "HEARTBREAK"
____exports.CollectibleType.BLOODY_GUST = 695
____exports.CollectibleType[____exports.CollectibleType.BLOODY_GUST] = "BLOODY_GUST"
____exports.CollectibleType.SALVATION = 696
____exports.CollectibleType[____exports.CollectibleType.SALVATION] = "SALVATION"
____exports.CollectibleType.VANISHING_TWIN = 697
____exports.CollectibleType[____exports.CollectibleType.VANISHING_TWIN] = "VANISHING_TWIN"
____exports.CollectibleType.TWISTED_PAIR = 698
____exports.CollectibleType[____exports.CollectibleType.TWISTED_PAIR] = "TWISTED_PAIR"
____exports.CollectibleType.AZAZELS_RAGE = 699
____exports.CollectibleType[____exports.CollectibleType.AZAZELS_RAGE] = "AZAZELS_RAGE"
____exports.CollectibleType.ECHO_CHAMBER = 700
____exports.CollectibleType[____exports.CollectibleType.ECHO_CHAMBER] = "ECHO_CHAMBER"
____exports.CollectibleType.ISAACS_TOMB = 701
____exports.CollectibleType[____exports.CollectibleType.ISAACS_TOMB] = "ISAACS_TOMB"
____exports.CollectibleType.VENGEFUL_SPIRIT = 702
____exports.CollectibleType[____exports.CollectibleType.VENGEFUL_SPIRIT] = "VENGEFUL_SPIRIT"
____exports.CollectibleType.ESAU_JR = 703
____exports.CollectibleType[____exports.CollectibleType.ESAU_JR] = "ESAU_JR"
____exports.CollectibleType.BERSERK = 704
____exports.CollectibleType[____exports.CollectibleType.BERSERK] = "BERSERK"
____exports.CollectibleType.DARK_ARTS = 705
____exports.CollectibleType[____exports.CollectibleType.DARK_ARTS] = "DARK_ARTS"
____exports.CollectibleType.ABYSS = 706
____exports.CollectibleType[____exports.CollectibleType.ABYSS] = "ABYSS"
____exports.CollectibleType.SUPPER = 707
____exports.CollectibleType[____exports.CollectibleType.SUPPER] = "SUPPER"
____exports.CollectibleType.STAPLER = 708
____exports.CollectibleType[____exports.CollectibleType.STAPLER] = "STAPLER"
____exports.CollectibleType.SUPLEX = 709
____exports.CollectibleType[____exports.CollectibleType.SUPLEX] = "SUPLEX"
____exports.CollectibleType.BAG_OF_CRAFTING = 710
____exports.CollectibleType[____exports.CollectibleType.BAG_OF_CRAFTING] = "BAG_OF_CRAFTING"
____exports.CollectibleType.FLIP = 711
____exports.CollectibleType[____exports.CollectibleType.FLIP] = "FLIP"
____exports.CollectibleType.LEMEGETON = 712
____exports.CollectibleType[____exports.CollectibleType.LEMEGETON] = "LEMEGETON"
____exports.CollectibleType.SUMPTORIUM = 713
____exports.CollectibleType[____exports.CollectibleType.SUMPTORIUM] = "SUMPTORIUM"
____exports.CollectibleType.RECALL = 714
____exports.CollectibleType[____exports.CollectibleType.RECALL] = "RECALL"
____exports.CollectibleType.HOLD = 715
____exports.CollectibleType[____exports.CollectibleType.HOLD] = "HOLD"
____exports.CollectibleType.KEEPERS_SACK = 716
____exports.CollectibleType[____exports.CollectibleType.KEEPERS_SACK] = "KEEPERS_SACK"
____exports.CollectibleType.KEEPERS_KIN = 717
____exports.CollectibleType[____exports.CollectibleType.KEEPERS_KIN] = "KEEPERS_KIN"
____exports.CollectibleType.KEEPERS_BOX = 719
____exports.CollectibleType[____exports.CollectibleType.KEEPERS_BOX] = "KEEPERS_BOX"
____exports.CollectibleType.EVERYTHING_JAR = 720
____exports.CollectibleType[____exports.CollectibleType.EVERYTHING_JAR] = "EVERYTHING_JAR"
____exports.CollectibleType.TMTRAINER = 721
____exports.CollectibleType[____exports.CollectibleType.TMTRAINER] = "TMTRAINER"
____exports.CollectibleType.ANIMA_SOLA = 722
____exports.CollectibleType[____exports.CollectibleType.ANIMA_SOLA] = "ANIMA_SOLA"
____exports.CollectibleType.SPINDOWN_DICE = 723
____exports.CollectibleType[____exports.CollectibleType.SPINDOWN_DICE] = "SPINDOWN_DICE"
____exports.CollectibleType.HYPERCOAGULATION = 724
____exports.CollectibleType[____exports.CollectibleType.HYPERCOAGULATION] = "HYPERCOAGULATION"
____exports.CollectibleType.IBS = 725
____exports.CollectibleType[____exports.CollectibleType.IBS] = "IBS"
____exports.CollectibleType.HEMOPTYSIS = 726
____exports.CollectibleType[____exports.CollectibleType.HEMOPTYSIS] = "HEMOPTYSIS"
____exports.CollectibleType.GHOST_BOMBS = 727
____exports.CollectibleType[____exports.CollectibleType.GHOST_BOMBS] = "GHOST_BOMBS"
____exports.CollectibleType.GELLO = 728
____exports.CollectibleType[____exports.CollectibleType.GELLO] = "GELLO"
____exports.CollectibleType.DECAP_ATTACK = 729
____exports.CollectibleType[____exports.CollectibleType.DECAP_ATTACK] = "DECAP_ATTACK"
____exports.CollectibleType.GLASS_EYE = 730
____exports.CollectibleType[____exports.CollectibleType.GLASS_EYE] = "GLASS_EYE"
____exports.CollectibleType.STYE = 731
____exports.CollectibleType[____exports.CollectibleType.STYE] = "STYE"
____exports.CollectibleType.MOMS_RING = 732
____exports.CollectibleType[____exports.CollectibleType.MOMS_RING] = "MOMS_RING"
--- For `EntityType.PICKUP` (5), `PickupVariant.TAROT_CARD` (300)
-- 
-- This is the sub-type of a card.
____exports.Card = {}
____exports.Card.NULL = 0
____exports.Card[____exports.Card.NULL] = "NULL"
____exports.Card.FOOL = 1
____exports.Card[____exports.Card.FOOL] = "FOOL"
____exports.Card.MAGICIAN = 2
____exports.Card[____exports.Card.MAGICIAN] = "MAGICIAN"
____exports.Card.HIGH_PRIESTESS = 3
____exports.Card[____exports.Card.HIGH_PRIESTESS] = "HIGH_PRIESTESS"
____exports.Card.EMPRESS = 4
____exports.Card[____exports.Card.EMPRESS] = "EMPRESS"
____exports.Card.EMPEROR = 5
____exports.Card[____exports.Card.EMPEROR] = "EMPEROR"
____exports.Card.HIEROPHANT = 6
____exports.Card[____exports.Card.HIEROPHANT] = "HIEROPHANT"
____exports.Card.LOVERS = 7
____exports.Card[____exports.Card.LOVERS] = "LOVERS"
____exports.Card.CHARIOT = 8
____exports.Card[____exports.Card.CHARIOT] = "CHARIOT"
____exports.Card.JUSTICE = 9
____exports.Card[____exports.Card.JUSTICE] = "JUSTICE"
____exports.Card.HERMIT = 10
____exports.Card[____exports.Card.HERMIT] = "HERMIT"
____exports.Card.WHEEL_OF_FORTUNE = 11
____exports.Card[____exports.Card.WHEEL_OF_FORTUNE] = "WHEEL_OF_FORTUNE"
____exports.Card.STRENGTH = 12
____exports.Card[____exports.Card.STRENGTH] = "STRENGTH"
____exports.Card.HANGED_MAN = 13
____exports.Card[____exports.Card.HANGED_MAN] = "HANGED_MAN"
____exports.Card.DEATH = 14
____exports.Card[____exports.Card.DEATH] = "DEATH"
____exports.Card.TEMPERANCE = 15
____exports.Card[____exports.Card.TEMPERANCE] = "TEMPERANCE"
____exports.Card.DEVIL = 16
____exports.Card[____exports.Card.DEVIL] = "DEVIL"
____exports.Card.TOWER = 17
____exports.Card[____exports.Card.TOWER] = "TOWER"
____exports.Card.STARS = 18
____exports.Card[____exports.Card.STARS] = "STARS"
____exports.Card.MOON = 19
____exports.Card[____exports.Card.MOON] = "MOON"
____exports.Card.SUN = 20
____exports.Card[____exports.Card.SUN] = "SUN"
____exports.Card.JUDGEMENT = 21
____exports.Card[____exports.Card.JUDGEMENT] = "JUDGEMENT"
____exports.Card.WORLD = 22
____exports.Card[____exports.Card.WORLD] = "WORLD"
____exports.Card.CLUBS_2 = 23
____exports.Card[____exports.Card.CLUBS_2] = "CLUBS_2"
____exports.Card.DIAMONDS_2 = 24
____exports.Card[____exports.Card.DIAMONDS_2] = "DIAMONDS_2"
____exports.Card.SPADES_2 = 25
____exports.Card[____exports.Card.SPADES_2] = "SPADES_2"
____exports.Card.HEARTS_2 = 26
____exports.Card[____exports.Card.HEARTS_2] = "HEARTS_2"
____exports.Card.ACE_OF_CLUBS = 27
____exports.Card[____exports.Card.ACE_OF_CLUBS] = "ACE_OF_CLUBS"
____exports.Card.ACE_OF_DIAMONDS = 28
____exports.Card[____exports.Card.ACE_OF_DIAMONDS] = "ACE_OF_DIAMONDS"
____exports.Card.ACE_OF_SPADES = 29
____exports.Card[____exports.Card.ACE_OF_SPADES] = "ACE_OF_SPADES"
____exports.Card.ACE_OF_HEARTS = 30
____exports.Card[____exports.Card.ACE_OF_HEARTS] = "ACE_OF_HEARTS"
____exports.Card.JOKER = 31
____exports.Card[____exports.Card.JOKER] = "JOKER"
____exports.Card.RUNE_HAGALAZ = 32
____exports.Card[____exports.Card.RUNE_HAGALAZ] = "RUNE_HAGALAZ"
____exports.Card.RUNE_JERA = 33
____exports.Card[____exports.Card.RUNE_JERA] = "RUNE_JERA"
____exports.Card.RUNE_EHWAZ = 34
____exports.Card[____exports.Card.RUNE_EHWAZ] = "RUNE_EHWAZ"
____exports.Card.RUNE_DAGAZ = 35
____exports.Card[____exports.Card.RUNE_DAGAZ] = "RUNE_DAGAZ"
____exports.Card.RUNE_ANSUZ = 36
____exports.Card[____exports.Card.RUNE_ANSUZ] = "RUNE_ANSUZ"
____exports.Card.RUNE_PERTHRO = 37
____exports.Card[____exports.Card.RUNE_PERTHRO] = "RUNE_PERTHRO"
____exports.Card.RUNE_BERKANO = 38
____exports.Card[____exports.Card.RUNE_BERKANO] = "RUNE_BERKANO"
____exports.Card.RUNE_ALGIZ = 39
____exports.Card[____exports.Card.RUNE_ALGIZ] = "RUNE_ALGIZ"
____exports.Card.RUNE_BLANK = 40
____exports.Card[____exports.Card.RUNE_BLANK] = "RUNE_BLANK"
____exports.Card.RUNE_BLACK = 41
____exports.Card[____exports.Card.RUNE_BLACK] = "RUNE_BLACK"
____exports.Card.CHAOS = 42
____exports.Card[____exports.Card.CHAOS] = "CHAOS"
____exports.Card.CREDIT = 43
____exports.Card[____exports.Card.CREDIT] = "CREDIT"
____exports.Card.RULES = 44
____exports.Card[____exports.Card.RULES] = "RULES"
____exports.Card.AGAINST_HUMANITY = 45
____exports.Card[____exports.Card.AGAINST_HUMANITY] = "AGAINST_HUMANITY"
____exports.Card.SUICIDE_KING = 46
____exports.Card[____exports.Card.SUICIDE_KING] = "SUICIDE_KING"
____exports.Card.GET_OUT_OF_JAIL_FREE = 47
____exports.Card[____exports.Card.GET_OUT_OF_JAIL_FREE] = "GET_OUT_OF_JAIL_FREE"
____exports.Card.QUESTION_MARK = 48
____exports.Card[____exports.Card.QUESTION_MARK] = "QUESTION_MARK"
____exports.Card.DICE_SHARD = 49
____exports.Card[____exports.Card.DICE_SHARD] = "DICE_SHARD"
____exports.Card.EMERGENCY_CONTACT = 50
____exports.Card[____exports.Card.EMERGENCY_CONTACT] = "EMERGENCY_CONTACT"
____exports.Card.HOLY = 51
____exports.Card[____exports.Card.HOLY] = "HOLY"
____exports.Card.HUGE_GROWTH = 52
____exports.Card[____exports.Card.HUGE_GROWTH] = "HUGE_GROWTH"
____exports.Card.ANCIENT_RECALL = 53
____exports.Card[____exports.Card.ANCIENT_RECALL] = "ANCIENT_RECALL"
____exports.Card.ERA_WALK = 54
____exports.Card[____exports.Card.ERA_WALK] = "ERA_WALK"
____exports.Card.RUNE_SHARD = 55
____exports.Card[____exports.Card.RUNE_SHARD] = "RUNE_SHARD"
____exports.Card.REVERSE_FOOL = 56
____exports.Card[____exports.Card.REVERSE_FOOL] = "REVERSE_FOOL"
____exports.Card.REVERSE_MAGICIAN = 57
____exports.Card[____exports.Card.REVERSE_MAGICIAN] = "REVERSE_MAGICIAN"
____exports.Card.REVERSE_HIGH_PRIESTESS = 58
____exports.Card[____exports.Card.REVERSE_HIGH_PRIESTESS] = "REVERSE_HIGH_PRIESTESS"
____exports.Card.REVERSE_EMPRESS = 59
____exports.Card[____exports.Card.REVERSE_EMPRESS] = "REVERSE_EMPRESS"
____exports.Card.REVERSE_EMPEROR = 60
____exports.Card[____exports.Card.REVERSE_EMPEROR] = "REVERSE_EMPEROR"
____exports.Card.REVERSE_HIEROPHANT = 61
____exports.Card[____exports.Card.REVERSE_HIEROPHANT] = "REVERSE_HIEROPHANT"
____exports.Card.REVERSE_LOVERS = 62
____exports.Card[____exports.Card.REVERSE_LOVERS] = "REVERSE_LOVERS"
____exports.Card.REVERSE_CHARIOT = 63
____exports.Card[____exports.Card.REVERSE_CHARIOT] = "REVERSE_CHARIOT"
____exports.Card.REVERSE_JUSTICE = 64
____exports.Card[____exports.Card.REVERSE_JUSTICE] = "REVERSE_JUSTICE"
____exports.Card.REVERSE_HERMIT = 65
____exports.Card[____exports.Card.REVERSE_HERMIT] = "REVERSE_HERMIT"
____exports.Card.REVERSE_WHEEL_OF_FORTUNE = 66
____exports.Card[____exports.Card.REVERSE_WHEEL_OF_FORTUNE] = "REVERSE_WHEEL_OF_FORTUNE"
____exports.Card.REVERSE_STRENGTH = 67
____exports.Card[____exports.Card.REVERSE_STRENGTH] = "REVERSE_STRENGTH"
____exports.Card.REVERSE_HANGED_MAN = 68
____exports.Card[____exports.Card.REVERSE_HANGED_MAN] = "REVERSE_HANGED_MAN"
____exports.Card.REVERSE_DEATH = 69
____exports.Card[____exports.Card.REVERSE_DEATH] = "REVERSE_DEATH"
____exports.Card.REVERSE_TEMPERANCE = 70
____exports.Card[____exports.Card.REVERSE_TEMPERANCE] = "REVERSE_TEMPERANCE"
____exports.Card.REVERSE_DEVIL = 71
____exports.Card[____exports.Card.REVERSE_DEVIL] = "REVERSE_DEVIL"
____exports.Card.REVERSE_TOWER = 72
____exports.Card[____exports.Card.REVERSE_TOWER] = "REVERSE_TOWER"
____exports.Card.REVERSE_STARS = 73
____exports.Card[____exports.Card.REVERSE_STARS] = "REVERSE_STARS"
____exports.Card.REVERSE_MOON = 74
____exports.Card[____exports.Card.REVERSE_MOON] = "REVERSE_MOON"
____exports.Card.REVERSE_SUN = 75
____exports.Card[____exports.Card.REVERSE_SUN] = "REVERSE_SUN"
____exports.Card.REVERSE_JUDGEMENT = 76
____exports.Card[____exports.Card.REVERSE_JUDGEMENT] = "REVERSE_JUDGEMENT"
____exports.Card.REVERSE_WORLD = 77
____exports.Card[____exports.Card.REVERSE_WORLD] = "REVERSE_WORLD"
____exports.Card.CRACKED_KEY = 78
____exports.Card[____exports.Card.CRACKED_KEY] = "CRACKED_KEY"
____exports.Card.QUEEN_OF_HEARTS = 79
____exports.Card[____exports.Card.QUEEN_OF_HEARTS] = "QUEEN_OF_HEARTS"
____exports.Card.WILD = 80
____exports.Card[____exports.Card.WILD] = "WILD"
____exports.Card.SOUL_ISAAC = 81
____exports.Card[____exports.Card.SOUL_ISAAC] = "SOUL_ISAAC"
____exports.Card.SOUL_MAGDALENE = 82
____exports.Card[____exports.Card.SOUL_MAGDALENE] = "SOUL_MAGDALENE"
____exports.Card.SOUL_CAIN = 83
____exports.Card[____exports.Card.SOUL_CAIN] = "SOUL_CAIN"
____exports.Card.SOUL_JUDAS = 84
____exports.Card[____exports.Card.SOUL_JUDAS] = "SOUL_JUDAS"
____exports.Card.SOUL_BLUE_BABY = 85
____exports.Card[____exports.Card.SOUL_BLUE_BABY] = "SOUL_BLUE_BABY"
____exports.Card.SOUL_EVE = 86
____exports.Card[____exports.Card.SOUL_EVE] = "SOUL_EVE"
____exports.Card.SOUL_SAMSON = 87
____exports.Card[____exports.Card.SOUL_SAMSON] = "SOUL_SAMSON"
____exports.Card.SOUL_AZAZEL = 88
____exports.Card[____exports.Card.SOUL_AZAZEL] = "SOUL_AZAZEL"
____exports.Card.SOUL_LAZARUS = 89
____exports.Card[____exports.Card.SOUL_LAZARUS] = "SOUL_LAZARUS"
____exports.Card.SOUL_EDEN = 90
____exports.Card[____exports.Card.SOUL_EDEN] = "SOUL_EDEN"
____exports.Card.SOUL_LOST = 91
____exports.Card[____exports.Card.SOUL_LOST] = "SOUL_LOST"
____exports.Card.SOUL_LILITH = 92
____exports.Card[____exports.Card.SOUL_LILITH] = "SOUL_LILITH"
____exports.Card.SOUL_KEEPER = 93
____exports.Card[____exports.Card.SOUL_KEEPER] = "SOUL_KEEPER"
____exports.Card.SOUL_APOLLYON = 94
____exports.Card[____exports.Card.SOUL_APOLLYON] = "SOUL_APOLLYON"
____exports.Card.SOUL_FORGOTTEN = 95
____exports.Card[____exports.Card.SOUL_FORGOTTEN] = "SOUL_FORGOTTEN"
____exports.Card.SOUL_BETHANY = 96
____exports.Card[____exports.Card.SOUL_BETHANY] = "SOUL_BETHANY"
____exports.Card.SOUL_JACOB = 97
____exports.Card[____exports.Card.SOUL_JACOB] = "SOUL_JACOB"
--- For `EntityType.PICKUP` (5), `PickupVariant.TRINKET` (350)
-- 
-- This is the sub-type of a trinket.
____exports.TrinketType = {}
____exports.TrinketType.NULL = 0
____exports.TrinketType[____exports.TrinketType.NULL] = "NULL"
____exports.TrinketType.SWALLOWED_PENNY = 1
____exports.TrinketType[____exports.TrinketType.SWALLOWED_PENNY] = "SWALLOWED_PENNY"
____exports.TrinketType.PETRIFIED_POOP = 2
____exports.TrinketType[____exports.TrinketType.PETRIFIED_POOP] = "PETRIFIED_POOP"
____exports.TrinketType.AAA_BATTERY = 3
____exports.TrinketType[____exports.TrinketType.AAA_BATTERY] = "AAA_BATTERY"
____exports.TrinketType.BROKEN_REMOTE = 4
____exports.TrinketType[____exports.TrinketType.BROKEN_REMOTE] = "BROKEN_REMOTE"
____exports.TrinketType.PURPLE_HEART = 5
____exports.TrinketType[____exports.TrinketType.PURPLE_HEART] = "PURPLE_HEART"
____exports.TrinketType.BROKEN_MAGNET = 6
____exports.TrinketType[____exports.TrinketType.BROKEN_MAGNET] = "BROKEN_MAGNET"
____exports.TrinketType.ROSARY_BEAD = 7
____exports.TrinketType[____exports.TrinketType.ROSARY_BEAD] = "ROSARY_BEAD"
____exports.TrinketType.CARTRIDGE = 8
____exports.TrinketType[____exports.TrinketType.CARTRIDGE] = "CARTRIDGE"
____exports.TrinketType.PULSE_WORM = 9
____exports.TrinketType[____exports.TrinketType.PULSE_WORM] = "PULSE_WORM"
____exports.TrinketType.WIGGLE_WORM = 10
____exports.TrinketType[____exports.TrinketType.WIGGLE_WORM] = "WIGGLE_WORM"
____exports.TrinketType.RING_WORM = 11
____exports.TrinketType[____exports.TrinketType.RING_WORM] = "RING_WORM"
____exports.TrinketType.FLAT_WORM = 12
____exports.TrinketType[____exports.TrinketType.FLAT_WORM] = "FLAT_WORM"
____exports.TrinketType.STORE_CREDIT = 13
____exports.TrinketType[____exports.TrinketType.STORE_CREDIT] = "STORE_CREDIT"
____exports.TrinketType.CALLUS = 14
____exports.TrinketType[____exports.TrinketType.CALLUS] = "CALLUS"
____exports.TrinketType.LUCKY_ROCK = 15
____exports.TrinketType[____exports.TrinketType.LUCKY_ROCK] = "LUCKY_ROCK"
____exports.TrinketType.MOMS_TOENAIL = 16
____exports.TrinketType[____exports.TrinketType.MOMS_TOENAIL] = "MOMS_TOENAIL"
____exports.TrinketType.BLACK_LIPSTICK = 17
____exports.TrinketType[____exports.TrinketType.BLACK_LIPSTICK] = "BLACK_LIPSTICK"
____exports.TrinketType.BIBLE_TRACT = 18
____exports.TrinketType[____exports.TrinketType.BIBLE_TRACT] = "BIBLE_TRACT"
____exports.TrinketType.PAPER_CLIP = 19
____exports.TrinketType[____exports.TrinketType.PAPER_CLIP] = "PAPER_CLIP"
____exports.TrinketType.MONKEY_PAW = 20
____exports.TrinketType[____exports.TrinketType.MONKEY_PAW] = "MONKEY_PAW"
____exports.TrinketType.MYSTERIOUS_PAPER = 21
____exports.TrinketType[____exports.TrinketType.MYSTERIOUS_PAPER] = "MYSTERIOUS_PAPER"
____exports.TrinketType.DAEMONS_TAIL = 22
____exports.TrinketType[____exports.TrinketType.DAEMONS_TAIL] = "DAEMONS_TAIL"
____exports.TrinketType.MISSING_POSTER = 23
____exports.TrinketType[____exports.TrinketType.MISSING_POSTER] = "MISSING_POSTER"
____exports.TrinketType.BUTT_PENNY = 24
____exports.TrinketType[____exports.TrinketType.BUTT_PENNY] = "BUTT_PENNY"
____exports.TrinketType.MYSTERIOUS_CANDY = 25
____exports.TrinketType[____exports.TrinketType.MYSTERIOUS_CANDY] = "MYSTERIOUS_CANDY"
____exports.TrinketType.HOOK_WORM = 26
____exports.TrinketType[____exports.TrinketType.HOOK_WORM] = "HOOK_WORM"
____exports.TrinketType.WHIP_WORM = 27
____exports.TrinketType[____exports.TrinketType.WHIP_WORM] = "WHIP_WORM"
____exports.TrinketType.BROKEN_ANKH = 28
____exports.TrinketType[____exports.TrinketType.BROKEN_ANKH] = "BROKEN_ANKH"
____exports.TrinketType.FISH_HEAD = 29
____exports.TrinketType[____exports.TrinketType.FISH_HEAD] = "FISH_HEAD"
____exports.TrinketType.PINKY_EYE = 30
____exports.TrinketType[____exports.TrinketType.PINKY_EYE] = "PINKY_EYE"
____exports.TrinketType.PUSH_PIN = 31
____exports.TrinketType[____exports.TrinketType.PUSH_PIN] = "PUSH_PIN"
____exports.TrinketType.LIBERTY_CAP = 32
____exports.TrinketType[____exports.TrinketType.LIBERTY_CAP] = "LIBERTY_CAP"
____exports.TrinketType.UMBILICAL_CORD = 33
____exports.TrinketType[____exports.TrinketType.UMBILICAL_CORD] = "UMBILICAL_CORD"
____exports.TrinketType.CHILDS_HEART = 34
____exports.TrinketType[____exports.TrinketType.CHILDS_HEART] = "CHILDS_HEART"
____exports.TrinketType.CURVED_HORN = 35
____exports.TrinketType[____exports.TrinketType.CURVED_HORN] = "CURVED_HORN"
____exports.TrinketType.RUSTED_KEY = 36
____exports.TrinketType[____exports.TrinketType.RUSTED_KEY] = "RUSTED_KEY"
____exports.TrinketType.GOAT_HOOF = 37
____exports.TrinketType[____exports.TrinketType.GOAT_HOOF] = "GOAT_HOOF"
____exports.TrinketType.MOMS_PEARL = 38
____exports.TrinketType[____exports.TrinketType.MOMS_PEARL] = "MOMS_PEARL"
____exports.TrinketType.CANCER = 39
____exports.TrinketType[____exports.TrinketType.CANCER] = "CANCER"
____exports.TrinketType.RED_PATCH = 40
____exports.TrinketType[____exports.TrinketType.RED_PATCH] = "RED_PATCH"
____exports.TrinketType.MATCH_STICK = 41
____exports.TrinketType[____exports.TrinketType.MATCH_STICK] = "MATCH_STICK"
____exports.TrinketType.LUCKY_TOE = 42
____exports.TrinketType[____exports.TrinketType.LUCKY_TOE] = "LUCKY_TOE"
____exports.TrinketType.CURSED_SKULL = 43
____exports.TrinketType[____exports.TrinketType.CURSED_SKULL] = "CURSED_SKULL"
____exports.TrinketType.SAFETY_CAP = 44
____exports.TrinketType[____exports.TrinketType.SAFETY_CAP] = "SAFETY_CAP"
____exports.TrinketType.ACE_SPADES = 45
____exports.TrinketType[____exports.TrinketType.ACE_SPADES] = "ACE_SPADES"
____exports.TrinketType.ISAACS_FORK = 46
____exports.TrinketType[____exports.TrinketType.ISAACS_FORK] = "ISAACS_FORK"
____exports.TrinketType.POLAROID_OBSOLETE = 47
____exports.TrinketType[____exports.TrinketType.POLAROID_OBSOLETE] = "POLAROID_OBSOLETE"
____exports.TrinketType.MISSING_PAGE = 48
____exports.TrinketType[____exports.TrinketType.MISSING_PAGE] = "MISSING_PAGE"
____exports.TrinketType.BLOODY_PENNY = 49
____exports.TrinketType[____exports.TrinketType.BLOODY_PENNY] = "BLOODY_PENNY"
____exports.TrinketType.BURNT_PENNY = 50
____exports.TrinketType[____exports.TrinketType.BURNT_PENNY] = "BURNT_PENNY"
____exports.TrinketType.FLAT_PENNY = 51
____exports.TrinketType[____exports.TrinketType.FLAT_PENNY] = "FLAT_PENNY"
____exports.TrinketType.COUNTERFEIT_PENNY = 52
____exports.TrinketType[____exports.TrinketType.COUNTERFEIT_PENNY] = "COUNTERFEIT_PENNY"
____exports.TrinketType.TICK = 53
____exports.TrinketType[____exports.TrinketType.TICK] = "TICK"
____exports.TrinketType.ISAACS_HEAD = 54
____exports.TrinketType[____exports.TrinketType.ISAACS_HEAD] = "ISAACS_HEAD"
____exports.TrinketType.MAGGYS_FAITH = 55
____exports.TrinketType[____exports.TrinketType.MAGGYS_FAITH] = "MAGGYS_FAITH"
____exports.TrinketType.JUDAS_TONGUE = 56
____exports.TrinketType[____exports.TrinketType.JUDAS_TONGUE] = "JUDAS_TONGUE"
____exports.TrinketType.SOUL = 57
____exports.TrinketType[____exports.TrinketType.SOUL] = "SOUL"
____exports.TrinketType.SAMSONS_LOCK = 58
____exports.TrinketType[____exports.TrinketType.SAMSONS_LOCK] = "SAMSONS_LOCK"
____exports.TrinketType.CAINS_EYE = 59
____exports.TrinketType[____exports.TrinketType.CAINS_EYE] = "CAINS_EYE"
____exports.TrinketType.EVES_BIRD_FOOT = 60
____exports.TrinketType[____exports.TrinketType.EVES_BIRD_FOOT] = "EVES_BIRD_FOOT"
____exports.TrinketType.LEFT_HAND = 61
____exports.TrinketType[____exports.TrinketType.LEFT_HAND] = "LEFT_HAND"
____exports.TrinketType.SHINY_ROCK = 62
____exports.TrinketType[____exports.TrinketType.SHINY_ROCK] = "SHINY_ROCK"
____exports.TrinketType.SAFETY_SCISSORS = 63
____exports.TrinketType[____exports.TrinketType.SAFETY_SCISSORS] = "SAFETY_SCISSORS"
____exports.TrinketType.RAINBOW_WORM = 64
____exports.TrinketType[____exports.TrinketType.RAINBOW_WORM] = "RAINBOW_WORM"
____exports.TrinketType.TAPE_WORM = 65
____exports.TrinketType[____exports.TrinketType.TAPE_WORM] = "TAPE_WORM"
____exports.TrinketType.LAZY_WORM = 66
____exports.TrinketType[____exports.TrinketType.LAZY_WORM] = "LAZY_WORM"
____exports.TrinketType.CRACKED_DICE = 67
____exports.TrinketType[____exports.TrinketType.CRACKED_DICE] = "CRACKED_DICE"
____exports.TrinketType.SUPER_MAGNET = 68
____exports.TrinketType[____exports.TrinketType.SUPER_MAGNET] = "SUPER_MAGNET"
____exports.TrinketType.FADED_POLAROID = 69
____exports.TrinketType[____exports.TrinketType.FADED_POLAROID] = "FADED_POLAROID"
____exports.TrinketType.LOUSE = 70
____exports.TrinketType[____exports.TrinketType.LOUSE] = "LOUSE"
____exports.TrinketType.BOBS_BLADDER = 71
____exports.TrinketType[____exports.TrinketType.BOBS_BLADDER] = "BOBS_BLADDER"
____exports.TrinketType.WATCH_BATTERY = 72
____exports.TrinketType[____exports.TrinketType.WATCH_BATTERY] = "WATCH_BATTERY"
____exports.TrinketType.BLASTING_CAP = 73
____exports.TrinketType[____exports.TrinketType.BLASTING_CAP] = "BLASTING_CAP"
____exports.TrinketType.STUD_FINDER = 74
____exports.TrinketType[____exports.TrinketType.STUD_FINDER] = "STUD_FINDER"
____exports.TrinketType.ERROR = 75
____exports.TrinketType[____exports.TrinketType.ERROR] = "ERROR"
____exports.TrinketType.POKER_CHIP = 76
____exports.TrinketType[____exports.TrinketType.POKER_CHIP] = "POKER_CHIP"
____exports.TrinketType.BLISTER = 77
____exports.TrinketType[____exports.TrinketType.BLISTER] = "BLISTER"
____exports.TrinketType.SECOND_HAND = 78
____exports.TrinketType[____exports.TrinketType.SECOND_HAND] = "SECOND_HAND"
____exports.TrinketType.ENDLESS_NAMELESS = 79
____exports.TrinketType[____exports.TrinketType.ENDLESS_NAMELESS] = "ENDLESS_NAMELESS"
____exports.TrinketType.BLACK_FEATHER = 80
____exports.TrinketType[____exports.TrinketType.BLACK_FEATHER] = "BLACK_FEATHER"
____exports.TrinketType.BLIND_RAGE = 81
____exports.TrinketType[____exports.TrinketType.BLIND_RAGE] = "BLIND_RAGE"
____exports.TrinketType.GOLDEN_HORSE_SHOE = 82
____exports.TrinketType[____exports.TrinketType.GOLDEN_HORSE_SHOE] = "GOLDEN_HORSE_SHOE"
____exports.TrinketType.STORE_KEY = 83
____exports.TrinketType[____exports.TrinketType.STORE_KEY] = "STORE_KEY"
____exports.TrinketType.RIB_OF_GREED = 84
____exports.TrinketType[____exports.TrinketType.RIB_OF_GREED] = "RIB_OF_GREED"
____exports.TrinketType.KARMA = 85
____exports.TrinketType[____exports.TrinketType.KARMA] = "KARMA"
____exports.TrinketType.LIL_LARVA = 86
____exports.TrinketType[____exports.TrinketType.LIL_LARVA] = "LIL_LARVA"
____exports.TrinketType.MOMS_LOCKET = 87
____exports.TrinketType[____exports.TrinketType.MOMS_LOCKET] = "MOMS_LOCKET"
____exports.TrinketType.NO = 88
____exports.TrinketType[____exports.TrinketType.NO] = "NO"
____exports.TrinketType.CHILD_LEASH = 89
____exports.TrinketType[____exports.TrinketType.CHILD_LEASH] = "CHILD_LEASH"
____exports.TrinketType.BROWN_CAP = 90
____exports.TrinketType[____exports.TrinketType.BROWN_CAP] = "BROWN_CAP"
____exports.TrinketType.MECONIUM = 91
____exports.TrinketType[____exports.TrinketType.MECONIUM] = "MECONIUM"
____exports.TrinketType.CRACKED_CROWN = 92
____exports.TrinketType[____exports.TrinketType.CRACKED_CROWN] = "CRACKED_CROWN"
____exports.TrinketType.USED_DIAPER = 93
____exports.TrinketType[____exports.TrinketType.USED_DIAPER] = "USED_DIAPER"
____exports.TrinketType.FISH_TAIL = 94
____exports.TrinketType[____exports.TrinketType.FISH_TAIL] = "FISH_TAIL"
____exports.TrinketType.BLACK_TOOTH = 95
____exports.TrinketType[____exports.TrinketType.BLACK_TOOTH] = "BLACK_TOOTH"
____exports.TrinketType.OUROBOROS_WORM = 96
____exports.TrinketType[____exports.TrinketType.OUROBOROS_WORM] = "OUROBOROS_WORM"
____exports.TrinketType.TONSIL = 97
____exports.TrinketType[____exports.TrinketType.TONSIL] = "TONSIL"
____exports.TrinketType.NOSE_GOBLIN = 98
____exports.TrinketType[____exports.TrinketType.NOSE_GOBLIN] = "NOSE_GOBLIN"
____exports.TrinketType.SUPER_BALL = 99
____exports.TrinketType[____exports.TrinketType.SUPER_BALL] = "SUPER_BALL"
____exports.TrinketType.VIBRANT_BULB = 100
____exports.TrinketType[____exports.TrinketType.VIBRANT_BULB] = "VIBRANT_BULB"
____exports.TrinketType.DIM_BULB = 101
____exports.TrinketType[____exports.TrinketType.DIM_BULB] = "DIM_BULB"
____exports.TrinketType.FRAGMENTED_CARD = 102
____exports.TrinketType[____exports.TrinketType.FRAGMENTED_CARD] = "FRAGMENTED_CARD"
____exports.TrinketType.EQUALITY = 103
____exports.TrinketType[____exports.TrinketType.EQUALITY] = "EQUALITY"
____exports.TrinketType.WISH_BONE = 104
____exports.TrinketType[____exports.TrinketType.WISH_BONE] = "WISH_BONE"
____exports.TrinketType.BAG_LUNCH = 105
____exports.TrinketType[____exports.TrinketType.BAG_LUNCH] = "BAG_LUNCH"
____exports.TrinketType.LOST_CORK = 106
____exports.TrinketType[____exports.TrinketType.LOST_CORK] = "LOST_CORK"
____exports.TrinketType.CROW_HEART = 107
____exports.TrinketType[____exports.TrinketType.CROW_HEART] = "CROW_HEART"
____exports.TrinketType.WALNUT = 108
____exports.TrinketType[____exports.TrinketType.WALNUT] = "WALNUT"
____exports.TrinketType.DUCT_TAPE = 109
____exports.TrinketType[____exports.TrinketType.DUCT_TAPE] = "DUCT_TAPE"
____exports.TrinketType.SILVER_DOLLAR = 110
____exports.TrinketType[____exports.TrinketType.SILVER_DOLLAR] = "SILVER_DOLLAR"
____exports.TrinketType.BLOODY_CROWN = 111
____exports.TrinketType[____exports.TrinketType.BLOODY_CROWN] = "BLOODY_CROWN"
____exports.TrinketType.PAY_TO_WIN = 112
____exports.TrinketType[____exports.TrinketType.PAY_TO_WIN] = "PAY_TO_WIN"
____exports.TrinketType.LOCUST_OF_WRATH = 113
____exports.TrinketType[____exports.TrinketType.LOCUST_OF_WRATH] = "LOCUST_OF_WRATH"
____exports.TrinketType.LOCUST_OF_PESTILENCE = 114
____exports.TrinketType[____exports.TrinketType.LOCUST_OF_PESTILENCE] = "LOCUST_OF_PESTILENCE"
____exports.TrinketType.LOCUST_OF_FAMINE = 115
____exports.TrinketType[____exports.TrinketType.LOCUST_OF_FAMINE] = "LOCUST_OF_FAMINE"
____exports.TrinketType.LOCUST_OF_DEATH = 116
____exports.TrinketType[____exports.TrinketType.LOCUST_OF_DEATH] = "LOCUST_OF_DEATH"
____exports.TrinketType.LOCUST_OF_CONQUEST = 117
____exports.TrinketType[____exports.TrinketType.LOCUST_OF_CONQUEST] = "LOCUST_OF_CONQUEST"
____exports.TrinketType.BAT_WING = 118
____exports.TrinketType[____exports.TrinketType.BAT_WING] = "BAT_WING"
____exports.TrinketType.STEM_CELL = 119
____exports.TrinketType[____exports.TrinketType.STEM_CELL] = "STEM_CELL"
____exports.TrinketType.HAIRPIN = 120
____exports.TrinketType[____exports.TrinketType.HAIRPIN] = "HAIRPIN"
____exports.TrinketType.WOODEN_CROSS = 121
____exports.TrinketType[____exports.TrinketType.WOODEN_CROSS] = "WOODEN_CROSS"
____exports.TrinketType.BUTTER = 122
____exports.TrinketType[____exports.TrinketType.BUTTER] = "BUTTER"
____exports.TrinketType.FILIGREE_FEATHERS = 123
____exports.TrinketType[____exports.TrinketType.FILIGREE_FEATHERS] = "FILIGREE_FEATHERS"
____exports.TrinketType.DOOR_STOP = 124
____exports.TrinketType[____exports.TrinketType.DOOR_STOP] = "DOOR_STOP"
____exports.TrinketType.EXTENSION_CORD = 125
____exports.TrinketType[____exports.TrinketType.EXTENSION_CORD] = "EXTENSION_CORD"
____exports.TrinketType.ROTTEN_PENNY = 126
____exports.TrinketType[____exports.TrinketType.ROTTEN_PENNY] = "ROTTEN_PENNY"
____exports.TrinketType.BABY_BENDER = 127
____exports.TrinketType[____exports.TrinketType.BABY_BENDER] = "BABY_BENDER"
____exports.TrinketType.FINGER_BONE = 128
____exports.TrinketType[____exports.TrinketType.FINGER_BONE] = "FINGER_BONE"
____exports.TrinketType.JAW_BREAKER = 129
____exports.TrinketType[____exports.TrinketType.JAW_BREAKER] = "JAW_BREAKER"
____exports.TrinketType.CHEWED_PEN = 130
____exports.TrinketType[____exports.TrinketType.CHEWED_PEN] = "CHEWED_PEN"
____exports.TrinketType.BLESSED_PENNY = 131
____exports.TrinketType[____exports.TrinketType.BLESSED_PENNY] = "BLESSED_PENNY"
____exports.TrinketType.BROKEN_SYRINGE = 132
____exports.TrinketType[____exports.TrinketType.BROKEN_SYRINGE] = "BROKEN_SYRINGE"
____exports.TrinketType.SHORT_FUSE = 133
____exports.TrinketType[____exports.TrinketType.SHORT_FUSE] = "SHORT_FUSE"
____exports.TrinketType.GIGANTE_BEAN = 134
____exports.TrinketType[____exports.TrinketType.GIGANTE_BEAN] = "GIGANTE_BEAN"
____exports.TrinketType.LIGHTER = 135
____exports.TrinketType[____exports.TrinketType.LIGHTER] = "LIGHTER"
____exports.TrinketType.BROKEN_PADLOCK = 136
____exports.TrinketType[____exports.TrinketType.BROKEN_PADLOCK] = "BROKEN_PADLOCK"
____exports.TrinketType.MYOSOTIS = 137
____exports.TrinketType[____exports.TrinketType.MYOSOTIS] = "MYOSOTIS"
____exports.TrinketType.M = 138
____exports.TrinketType[____exports.TrinketType.M] = "M"
____exports.TrinketType.TEARDROP_CHARM = 139
____exports.TrinketType[____exports.TrinketType.TEARDROP_CHARM] = "TEARDROP_CHARM"
____exports.TrinketType.APPLE_OF_SODOM = 140
____exports.TrinketType[____exports.TrinketType.APPLE_OF_SODOM] = "APPLE_OF_SODOM"
____exports.TrinketType.FORGOTTEN_LULLABY = 141
____exports.TrinketType[____exports.TrinketType.FORGOTTEN_LULLABY] = "FORGOTTEN_LULLABY"
____exports.TrinketType.BETHS_FAITH = 142
____exports.TrinketType[____exports.TrinketType.BETHS_FAITH] = "BETHS_FAITH"
____exports.TrinketType.OLD_CAPACITOR = 143
____exports.TrinketType[____exports.TrinketType.OLD_CAPACITOR] = "OLD_CAPACITOR"
____exports.TrinketType.BRAIN_WORM = 144
____exports.TrinketType[____exports.TrinketType.BRAIN_WORM] = "BRAIN_WORM"
____exports.TrinketType.PERFECTION = 145
____exports.TrinketType[____exports.TrinketType.PERFECTION] = "PERFECTION"
____exports.TrinketType.DEVILS_CROWN = 146
____exports.TrinketType[____exports.TrinketType.DEVILS_CROWN] = "DEVILS_CROWN"
____exports.TrinketType.CHARGED_PENNY = 147
____exports.TrinketType[____exports.TrinketType.CHARGED_PENNY] = "CHARGED_PENNY"
____exports.TrinketType.FRIENDSHIP_NECKLACE = 148
____exports.TrinketType[____exports.TrinketType.FRIENDSHIP_NECKLACE] = "FRIENDSHIP_NECKLACE"
____exports.TrinketType.PANIC_BUTTON = 149
____exports.TrinketType[____exports.TrinketType.PANIC_BUTTON] = "PANIC_BUTTON"
____exports.TrinketType.BLUE_KEY = 150
____exports.TrinketType[____exports.TrinketType.BLUE_KEY] = "BLUE_KEY"
____exports.TrinketType.FLAT_FILE = 151
____exports.TrinketType[____exports.TrinketType.FLAT_FILE] = "FLAT_FILE"
____exports.TrinketType.TELESCOPE_LENS = 152
____exports.TrinketType[____exports.TrinketType.TELESCOPE_LENS] = "TELESCOPE_LENS"
____exports.TrinketType.MOMS_LOCK = 153
____exports.TrinketType[____exports.TrinketType.MOMS_LOCK] = "MOMS_LOCK"
____exports.TrinketType.DICE_BAG = 154
____exports.TrinketType[____exports.TrinketType.DICE_BAG] = "DICE_BAG"
____exports.TrinketType.HOLY_CROWN = 155
____exports.TrinketType[____exports.TrinketType.HOLY_CROWN] = "HOLY_CROWN"
____exports.TrinketType.MOTHERS_KISS = 156
____exports.TrinketType[____exports.TrinketType.MOTHERS_KISS] = "MOTHERS_KISS"
____exports.TrinketType.TORN_CARD = 157
____exports.TrinketType[____exports.TrinketType.TORN_CARD] = "TORN_CARD"
____exports.TrinketType.TORN_POCKET = 158
____exports.TrinketType[____exports.TrinketType.TORN_POCKET] = "TORN_POCKET"
____exports.TrinketType.GILDED_KEY = 159
____exports.TrinketType[____exports.TrinketType.GILDED_KEY] = "GILDED_KEY"
____exports.TrinketType.LUCKY_SACK = 160
____exports.TrinketType[____exports.TrinketType.LUCKY_SACK] = "LUCKY_SACK"
____exports.TrinketType.WICKED_CROWN = 161
____exports.TrinketType[____exports.TrinketType.WICKED_CROWN] = "WICKED_CROWN"
____exports.TrinketType.AZAZELS_STUMP = 162
____exports.TrinketType[____exports.TrinketType.AZAZELS_STUMP] = "AZAZELS_STUMP"
____exports.TrinketType.DINGLE_BERRY = 163
____exports.TrinketType[____exports.TrinketType.DINGLE_BERRY] = "DINGLE_BERRY"
____exports.TrinketType.RING_CAP = 164
____exports.TrinketType[____exports.TrinketType.RING_CAP] = "RING_CAP"
____exports.TrinketType.NUH_UH = 165
____exports.TrinketType[____exports.TrinketType.NUH_UH] = "NUH_UH"
____exports.TrinketType.MODELING_CLAY = 166
____exports.TrinketType[____exports.TrinketType.MODELING_CLAY] = "MODELING_CLAY"
____exports.TrinketType.POLISHED_BONE = 167
____exports.TrinketType[____exports.TrinketType.POLISHED_BONE] = "POLISHED_BONE"
____exports.TrinketType.HOLLOW_HEART = 168
____exports.TrinketType[____exports.TrinketType.HOLLOW_HEART] = "HOLLOW_HEART"
____exports.TrinketType.KIDS_DRAWING = 169
____exports.TrinketType[____exports.TrinketType.KIDS_DRAWING] = "KIDS_DRAWING"
____exports.TrinketType.CRYSTAL_KEY = 170
____exports.TrinketType[____exports.TrinketType.CRYSTAL_KEY] = "CRYSTAL_KEY"
____exports.TrinketType.KEEPERS_BARGAIN = 171
____exports.TrinketType[____exports.TrinketType.KEEPERS_BARGAIN] = "KEEPERS_BARGAIN"
____exports.TrinketType.CURSED_PENNY = 172
____exports.TrinketType[____exports.TrinketType.CURSED_PENNY] = "CURSED_PENNY"
____exports.TrinketType.YOUR_SOUL = 173
____exports.TrinketType[____exports.TrinketType.YOUR_SOUL] = "YOUR_SOUL"
____exports.TrinketType.NUMBER_MAGNET = 174
____exports.TrinketType[____exports.TrinketType.NUMBER_MAGNET] = "NUMBER_MAGNET"
____exports.TrinketType.STRANGE_KEY = 175
____exports.TrinketType[____exports.TrinketType.STRANGE_KEY] = "STRANGE_KEY"
____exports.TrinketType.LIL_CLOT = 176
____exports.TrinketType[____exports.TrinketType.LIL_CLOT] = "LIL_CLOT"
____exports.TrinketType.TEMPORARY_TATTOO = 177
____exports.TrinketType[____exports.TrinketType.TEMPORARY_TATTOO] = "TEMPORARY_TATTOO"
____exports.TrinketType.SWALLOWED_M80 = 178
____exports.TrinketType[____exports.TrinketType.SWALLOWED_M80] = "SWALLOWED_M80"
____exports.TrinketType.RC_REMOTE = 179
____exports.TrinketType[____exports.TrinketType.RC_REMOTE] = "RC_REMOTE"
____exports.TrinketType.FOUND_SOUL = 180
____exports.TrinketType[____exports.TrinketType.FOUND_SOUL] = "FOUND_SOUL"
____exports.TrinketType.EXPANSION_PACK = 181
____exports.TrinketType[____exports.TrinketType.EXPANSION_PACK] = "EXPANSION_PACK"
____exports.TrinketType.BETHS_ESSENCE = 182
____exports.TrinketType[____exports.TrinketType.BETHS_ESSENCE] = "BETHS_ESSENCE"
____exports.TrinketType.THE_TWINS = 183
____exports.TrinketType[____exports.TrinketType.THE_TWINS] = "THE_TWINS"
____exports.TrinketType.ADOPTION_PAPERS = 184
____exports.TrinketType[____exports.TrinketType.ADOPTION_PAPERS] = "ADOPTION_PAPERS"
____exports.TrinketType.CRICKET_LEG = 185
____exports.TrinketType[____exports.TrinketType.CRICKET_LEG] = "CRICKET_LEG"
____exports.TrinketType.APOLLYONS_BEST_FRIEND = 186
____exports.TrinketType[____exports.TrinketType.APOLLYONS_BEST_FRIEND] = "APOLLYONS_BEST_FRIEND"
____exports.TrinketType.BROKEN_GLASSES = 187
____exports.TrinketType[____exports.TrinketType.BROKEN_GLASSES] = "BROKEN_GLASSES"
____exports.TrinketType.ICE_CUBE = 188
____exports.TrinketType[____exports.TrinketType.ICE_CUBE] = "ICE_CUBE"
____exports.TrinketType.SIGIL_OF_BAPHOMET = 189
____exports.TrinketType[____exports.TrinketType.SIGIL_OF_BAPHOMET] = "SIGIL_OF_BAPHOMET"
--- For `EntityType.PICKUP` (5), `PickupVariant.BED` (380)
____exports.BedSubType = {}
____exports.BedSubType.ISAAC = 0
____exports.BedSubType[____exports.BedSubType.ISAAC] = "ISAAC"
____exports.BedSubType.MOM = 1
____exports.BedSubType[____exports.BedSubType.MOM] = "MOM"
--- For `EntityType.LASER` (7)
____exports.LaserSubType = {}
____exports.LaserSubType.LINEAR = 0
____exports.LaserSubType[____exports.LaserSubType.LINEAR] = "LINEAR"
____exports.LaserSubType.RING_LUDOVICO = 1
____exports.LaserSubType[____exports.LaserSubType.RING_LUDOVICO] = "RING_LUDOVICO"
____exports.LaserSubType.RING_PROJECTILE = 2
____exports.LaserSubType[____exports.LaserSubType.RING_PROJECTILE] = "RING_PROJECTILE"
____exports.LaserSubType.RING_FOLLOW_PARENT = 3
____exports.LaserSubType[____exports.LaserSubType.RING_FOLLOW_PARENT] = "RING_FOLLOW_PARENT"
____exports.LaserSubType.NO_IMPACT = 4
____exports.LaserSubType[____exports.LaserSubType.NO_IMPACT] = "NO_IMPACT"
--- For `EntityType.CHARGER` (23), `ChargerVariant.CHARGER` (0)
____exports.ChargerSubType = {}
____exports.ChargerSubType.CHARGER = 0
____exports.ChargerSubType[____exports.ChargerSubType.CHARGER] = "CHARGER"
____exports.ChargerSubType.MY_SHADOW = 1
____exports.ChargerSubType[____exports.ChargerSubType.MY_SHADOW] = "MY_SHADOW"
--- For `EntityType.CONSTANT_STONE_SHOOTER` (202),
-- `ConstantStoneShooterVariant.CONSTANT_STONE_SHOOTER` (0)
-- 
-- This is the same as the `Direction` enum.
____exports.ConstantStoneShooterSubType = {}
____exports.ConstantStoneShooterSubType.LEFT = 0
____exports.ConstantStoneShooterSubType[____exports.ConstantStoneShooterSubType.LEFT] = "LEFT"
____exports.ConstantStoneShooterSubType.UP = 1
____exports.ConstantStoneShooterSubType[____exports.ConstantStoneShooterSubType.UP] = "UP"
____exports.ConstantStoneShooterSubType.RIGHT = 2
____exports.ConstantStoneShooterSubType[____exports.ConstantStoneShooterSubType.RIGHT] = "RIGHT"
____exports.ConstantStoneShooterSubType.DOWN = 3
____exports.ConstantStoneShooterSubType[____exports.ConstantStoneShooterSubType.DOWN] = "DOWN"
--- For `EntityType.MOTHER` (912), `MotherVariant.MOTHER_1` (0)
____exports.MotherSubType = {}
____exports.MotherSubType.PHASE_1 = 0
____exports.MotherSubType[____exports.MotherSubType.PHASE_1] = "PHASE_1"
____exports.MotherSubType.PHASE_2 = 1
____exports.MotherSubType[____exports.MotherSubType.PHASE_2] = "PHASE_2"
--- For `EntityType.EFFECT` (1000), `EffectVariant.BLOOD_EXPLOSION` (2)
____exports.BloodExplosionSubType = {}
____exports.BloodExplosionSubType.MEDIUM_WITH_LEFTOVER_BLOOD = 0
____exports.BloodExplosionSubType[____exports.BloodExplosionSubType.MEDIUM_WITH_LEFTOVER_BLOOD] = "MEDIUM_WITH_LEFTOVER_BLOOD"
____exports.BloodExplosionSubType.SMALL = 1
____exports.BloodExplosionSubType[____exports.BloodExplosionSubType.SMALL] = "SMALL"
____exports.BloodExplosionSubType.MEDIUM = 2
____exports.BloodExplosionSubType[____exports.BloodExplosionSubType.MEDIUM] = "MEDIUM"
____exports.BloodExplosionSubType.LARGE = 3
____exports.BloodExplosionSubType[____exports.BloodExplosionSubType.LARGE] = "LARGE"
____exports.BloodExplosionSubType.GIANT = 4
____exports.BloodExplosionSubType[____exports.BloodExplosionSubType.GIANT] = "GIANT"
____exports.BloodExplosionSubType.SWIRL = 5
____exports.BloodExplosionSubType[____exports.BloodExplosionSubType.SWIRL] = "SWIRL"
--- For `EntityType.EFFECT` (1000), `EffectVariant.POOF_1` (15)
____exports.PoofSubType = {}
____exports.PoofSubType.NORMAL = 0
____exports.PoofSubType[____exports.PoofSubType.NORMAL] = "NORMAL"
____exports.PoofSubType.SMALL = 1
____exports.PoofSubType[____exports.PoofSubType.SMALL] = "SMALL"
____exports.PoofSubType.LARGE = 3
____exports.PoofSubType[____exports.PoofSubType.LARGE] = "LARGE"
--- For `EntityType.EFFECT` (1000), `EffectVariant.HEAVEN_LIGHT_DOOR` (39)
____exports.HeavenLightDoorSubType = {}
____exports.HeavenLightDoorSubType.HEAVEN_DOOR = 0
____exports.HeavenLightDoorSubType[____exports.HeavenLightDoorSubType.HEAVEN_DOOR] = "HEAVEN_DOOR"
____exports.HeavenLightDoorSubType.MOONLIGHT = 1
____exports.HeavenLightDoorSubType[____exports.HeavenLightDoorSubType.MOONLIGHT] = "MOONLIGHT"
--- For `EntityType.EFFECT` (1000), `EffectVariant.DICE_FLOOR` (76)
____exports.DiceFloorSubType = {}
____exports.DiceFloorSubType.ONE_PIP = 0
____exports.DiceFloorSubType[____exports.DiceFloorSubType.ONE_PIP] = "ONE_PIP"
____exports.DiceFloorSubType.TWO_PIP = 1
____exports.DiceFloorSubType[____exports.DiceFloorSubType.TWO_PIP] = "TWO_PIP"
____exports.DiceFloorSubType.THREE_PIP = 2
____exports.DiceFloorSubType[____exports.DiceFloorSubType.THREE_PIP] = "THREE_PIP"
____exports.DiceFloorSubType.FOUR_PIP = 3
____exports.DiceFloorSubType[____exports.DiceFloorSubType.FOUR_PIP] = "FOUR_PIP"
____exports.DiceFloorSubType.FIVE_PIP = 4
____exports.DiceFloorSubType[____exports.DiceFloorSubType.FIVE_PIP] = "FIVE_PIP"
____exports.DiceFloorSubType.SIX_PIP = 5
____exports.DiceFloorSubType[____exports.DiceFloorSubType.SIX_PIP] = "SIX_PIP"
--- For `EntityType.EFFECT` (1000), `EffectVariant.TALL_LADDER` (156)
____exports.LadderSubType = {}
____exports.LadderSubType.TALL_LADDER = 0
____exports.LadderSubType[____exports.LadderSubType.TALL_LADDER] = "TALL_LADDER"
____exports.LadderSubType.STAIRWAY = 1
____exports.LadderSubType[____exports.LadderSubType.STAIRWAY] = "STAIRWAY"
--- For `EntityType.EFFECT` (1000), `EffectVariant.PURGATORY` (189)
____exports.PurgatorySubType = {}
____exports.PurgatorySubType.RIFT = 0
____exports.PurgatorySubType[____exports.PurgatorySubType.RIFT] = "RIFT"
____exports.PurgatorySubType.GHOST = 1
____exports.PurgatorySubType[____exports.PurgatorySubType.GHOST] = "GHOST"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.collections.variants"] = function(...) 
local ____exports = {}
--- For `EntityType.PLAYER` (1)
____exports.PlayerVariant = {}
____exports.PlayerVariant.PLAYER = 0
____exports.PlayerVariant[____exports.PlayerVariant.PLAYER] = "PLAYER"
____exports.PlayerVariant.COOP_BABY = 1
____exports.PlayerVariant[____exports.PlayerVariant.COOP_BABY] = "COOP_BABY"
--- For `EntityType.TEAR` (2)
____exports.TearVariant = {}
____exports.TearVariant.BLUE = 0
____exports.TearVariant[____exports.TearVariant.BLUE] = "BLUE"
____exports.TearVariant.BLOOD = 1
____exports.TearVariant[____exports.TearVariant.BLOOD] = "BLOOD"
____exports.TearVariant.TOOTH = 2
____exports.TearVariant[____exports.TearVariant.TOOTH] = "TOOTH"
____exports.TearVariant.METALLIC = 3
____exports.TearVariant[____exports.TearVariant.METALLIC] = "METALLIC"
____exports.TearVariant.BOBS_HEAD = 4
____exports.TearVariant[____exports.TearVariant.BOBS_HEAD] = "BOBS_HEAD"
____exports.TearVariant.FIRE_MIND = 5
____exports.TearVariant[____exports.TearVariant.FIRE_MIND] = "FIRE_MIND"
____exports.TearVariant.DARK_MATTER = 6
____exports.TearVariant[____exports.TearVariant.DARK_MATTER] = "DARK_MATTER"
____exports.TearVariant.MYSTERIOUS = 7
____exports.TearVariant[____exports.TearVariant.MYSTERIOUS] = "MYSTERIOUS"
____exports.TearVariant.SCHYTHE = 8
____exports.TearVariant[____exports.TearVariant.SCHYTHE] = "SCHYTHE"
____exports.TearVariant.CHAOS_CARD = 9
____exports.TearVariant[____exports.TearVariant.CHAOS_CARD] = "CHAOS_CARD"
____exports.TearVariant.LOST_CONTACT = 10
____exports.TearVariant[____exports.TearVariant.LOST_CONTACT] = "LOST_CONTACT"
____exports.TearVariant.CUPID_BLUE = 11
____exports.TearVariant[____exports.TearVariant.CUPID_BLUE] = "CUPID_BLUE"
____exports.TearVariant.CUPID_BLOOD = 12
____exports.TearVariant[____exports.TearVariant.CUPID_BLOOD] = "CUPID_BLOOD"
____exports.TearVariant.NAIL = 13
____exports.TearVariant[____exports.TearVariant.NAIL] = "NAIL"
____exports.TearVariant.PUPULA = 14
____exports.TearVariant[____exports.TearVariant.PUPULA] = "PUPULA"
____exports.TearVariant.PUPULA_BLOOD = 15
____exports.TearVariant[____exports.TearVariant.PUPULA_BLOOD] = "PUPULA_BLOOD"
____exports.TearVariant.GODS_FLESH = 16
____exports.TearVariant[____exports.TearVariant.GODS_FLESH] = "GODS_FLESH"
____exports.TearVariant.GODS_FLESH_BLOOD = 17
____exports.TearVariant[____exports.TearVariant.GODS_FLESH_BLOOD] = "GODS_FLESH_BLOOD"
____exports.TearVariant.DIAMOND = 18
____exports.TearVariant[____exports.TearVariant.DIAMOND] = "DIAMOND"
____exports.TearVariant.EXPLOSIVO = 19
____exports.TearVariant[____exports.TearVariant.EXPLOSIVO] = "EXPLOSIVO"
____exports.TearVariant.COIN = 20
____exports.TearVariant[____exports.TearVariant.COIN] = "COIN"
____exports.TearVariant.MULTIDIMENSIONAL = 21
____exports.TearVariant[____exports.TearVariant.MULTIDIMENSIONAL] = "MULTIDIMENSIONAL"
____exports.TearVariant.STONE = 22
____exports.TearVariant[____exports.TearVariant.STONE] = "STONE"
____exports.TearVariant.NAIL_BLOOD = 23
____exports.TearVariant[____exports.TearVariant.NAIL_BLOOD] = "NAIL_BLOOD"
____exports.TearVariant.GLAUCOMA = 24
____exports.TearVariant[____exports.TearVariant.GLAUCOMA] = "GLAUCOMA"
____exports.TearVariant.GLAUCOMA_BLOOD = 25
____exports.TearVariant[____exports.TearVariant.GLAUCOMA_BLOOD] = "GLAUCOMA_BLOOD"
____exports.TearVariant.BOOGER = 26
____exports.TearVariant[____exports.TearVariant.BOOGER] = "BOOGER"
____exports.TearVariant.EGG = 27
____exports.TearVariant[____exports.TearVariant.EGG] = "EGG"
____exports.TearVariant.RAZOR = 28
____exports.TearVariant[____exports.TearVariant.RAZOR] = "RAZOR"
____exports.TearVariant.BONE = 29
____exports.TearVariant[____exports.TearVariant.BONE] = "BONE"
____exports.TearVariant.BLACK_TOOTH = 30
____exports.TearVariant[____exports.TearVariant.BLACK_TOOTH] = "BLACK_TOOTH"
____exports.TearVariant.NEEDLE = 31
____exports.TearVariant[____exports.TearVariant.NEEDLE] = "NEEDLE"
____exports.TearVariant.BELIAL = 32
____exports.TearVariant[____exports.TearVariant.BELIAL] = "BELIAL"
____exports.TearVariant.EYE = 33
____exports.TearVariant[____exports.TearVariant.EYE] = "EYE"
____exports.TearVariant.EYE_BLOOD = 34
____exports.TearVariant[____exports.TearVariant.EYE_BLOOD] = "EYE_BLOOD"
____exports.TearVariant.BALLOON = 35
____exports.TearVariant[____exports.TearVariant.BALLOON] = "BALLOON"
____exports.TearVariant.HUNGRY = 36
____exports.TearVariant[____exports.TearVariant.HUNGRY] = "HUNGRY"
____exports.TearVariant.BALLOON_BRIMSTONE = 37
____exports.TearVariant[____exports.TearVariant.BALLOON_BRIMSTONE] = "BALLOON_BRIMSTONE"
____exports.TearVariant.BALLOON_BOMB = 38
____exports.TearVariant[____exports.TearVariant.BALLOON_BOMB] = "BALLOON_BOMB"
____exports.TearVariant.FIST = 39
____exports.TearVariant[____exports.TearVariant.FIST] = "FIST"
____exports.TearVariant.GRID_ENTITY = 40
____exports.TearVariant[____exports.TearVariant.GRID_ENTITY] = "GRID_ENTITY"
____exports.TearVariant.ICE = 41
____exports.TearVariant[____exports.TearVariant.ICE] = "ICE"
____exports.TearVariant.ROCK = 42
____exports.TearVariant[____exports.TearVariant.ROCK] = "ROCK"
____exports.TearVariant.KEY = 43
____exports.TearVariant[____exports.TearVariant.KEY] = "KEY"
____exports.TearVariant.KEY_BLOOD = 44
____exports.TearVariant[____exports.TearVariant.KEY_BLOOD] = "KEY_BLOOD"
____exports.TearVariant.ERASER = 45
____exports.TearVariant[____exports.TearVariant.ERASER] = "ERASER"
____exports.TearVariant.FIRE = 46
____exports.TearVariant[____exports.TearVariant.FIRE] = "FIRE"
____exports.TearVariant.SWORD_BEAM = 47
____exports.TearVariant[____exports.TearVariant.SWORD_BEAM] = "SWORD_BEAM"
____exports.TearVariant.SPORE = 48
____exports.TearVariant[____exports.TearVariant.SPORE] = "SPORE"
____exports.TearVariant.TECH_SWORD_BEAM = 49
____exports.TearVariant[____exports.TearVariant.TECH_SWORD_BEAM] = "TECH_SWORD_BEAM"
--- For `EntityType.FAMILIAR` (3)
____exports.FamiliarVariant = {}
____exports.FamiliarVariant.FAMILIAR_NULL = 0
____exports.FamiliarVariant[____exports.FamiliarVariant.FAMILIAR_NULL] = "FAMILIAR_NULL"
____exports.FamiliarVariant.BROTHER_BOBBY = 1
____exports.FamiliarVariant[____exports.FamiliarVariant.BROTHER_BOBBY] = "BROTHER_BOBBY"
____exports.FamiliarVariant.DEMON_BABY = 2
____exports.FamiliarVariant[____exports.FamiliarVariant.DEMON_BABY] = "DEMON_BABY"
____exports.FamiliarVariant.LITTLE_CHUBBY = 3
____exports.FamiliarVariant[____exports.FamiliarVariant.LITTLE_CHUBBY] = "LITTLE_CHUBBY"
____exports.FamiliarVariant.LITTLE_GISH = 4
____exports.FamiliarVariant[____exports.FamiliarVariant.LITTLE_GISH] = "LITTLE_GISH"
____exports.FamiliarVariant.LITTLE_STEVEN = 5
____exports.FamiliarVariant[____exports.FamiliarVariant.LITTLE_STEVEN] = "LITTLE_STEVEN"
____exports.FamiliarVariant.ROBO_BABY = 6
____exports.FamiliarVariant[____exports.FamiliarVariant.ROBO_BABY] = "ROBO_BABY"
____exports.FamiliarVariant.SISTER_MAGGY = 7
____exports.FamiliarVariant[____exports.FamiliarVariant.SISTER_MAGGY] = "SISTER_MAGGY"
____exports.FamiliarVariant.ABEL = 8
____exports.FamiliarVariant[____exports.FamiliarVariant.ABEL] = "ABEL"
____exports.FamiliarVariant.GHOST_BABY = 9
____exports.FamiliarVariant[____exports.FamiliarVariant.GHOST_BABY] = "GHOST_BABY"
____exports.FamiliarVariant.HARLEQUIN_BABY = 10
____exports.FamiliarVariant[____exports.FamiliarVariant.HARLEQUIN_BABY] = "HARLEQUIN_BABY"
____exports.FamiliarVariant.RAINBOW_BABY = 11
____exports.FamiliarVariant[____exports.FamiliarVariant.RAINBOW_BABY] = "RAINBOW_BABY"
____exports.FamiliarVariant.ISAACS_HEAD = 12
____exports.FamiliarVariant[____exports.FamiliarVariant.ISAACS_HEAD] = "ISAACS_HEAD"
____exports.FamiliarVariant.BLUE_BABY_SOUL = 13
____exports.FamiliarVariant[____exports.FamiliarVariant.BLUE_BABY_SOUL] = "BLUE_BABY_SOUL"
____exports.FamiliarVariant.DEAD_BIRD = 14
____exports.FamiliarVariant[____exports.FamiliarVariant.DEAD_BIRD] = "DEAD_BIRD"
____exports.FamiliarVariant.EVES_BIRD_FOOT = 15
____exports.FamiliarVariant[____exports.FamiliarVariant.EVES_BIRD_FOOT] = "EVES_BIRD_FOOT"
____exports.FamiliarVariant.DADDY_LONGLEGS = 16
____exports.FamiliarVariant[____exports.FamiliarVariant.DADDY_LONGLEGS] = "DADDY_LONGLEGS"
____exports.FamiliarVariant.PEEPER = 17
____exports.FamiliarVariant[____exports.FamiliarVariant.PEEPER] = "PEEPER"
____exports.FamiliarVariant.BOMB_BAG = 20
____exports.FamiliarVariant[____exports.FamiliarVariant.BOMB_BAG] = "BOMB_BAG"
____exports.FamiliarVariant.SACK_OF_PENNIES = 21
____exports.FamiliarVariant[____exports.FamiliarVariant.SACK_OF_PENNIES] = "SACK_OF_PENNIES"
____exports.FamiliarVariant.LITTLE_CHAD = 22
____exports.FamiliarVariant[____exports.FamiliarVariant.LITTLE_CHAD] = "LITTLE_CHAD"
____exports.FamiliarVariant.RELIC = 23
____exports.FamiliarVariant[____exports.FamiliarVariant.RELIC] = "RELIC"
____exports.FamiliarVariant.BUM_FRIEND = 24
____exports.FamiliarVariant[____exports.FamiliarVariant.BUM_FRIEND] = "BUM_FRIEND"
____exports.FamiliarVariant.HOLY_WATER = 25
____exports.FamiliarVariant[____exports.FamiliarVariant.HOLY_WATER] = "HOLY_WATER"
____exports.FamiliarVariant.KEY_PIECE_1 = 26
____exports.FamiliarVariant[____exports.FamiliarVariant.KEY_PIECE_1] = "KEY_PIECE_1"
____exports.FamiliarVariant.KEY_PIECE_2 = 27
____exports.FamiliarVariant[____exports.FamiliarVariant.KEY_PIECE_2] = "KEY_PIECE_2"
____exports.FamiliarVariant.KEY_FULL = 28
____exports.FamiliarVariant[____exports.FamiliarVariant.KEY_FULL] = "KEY_FULL"
____exports.FamiliarVariant.FOREVER_ALONE = 30
____exports.FamiliarVariant[____exports.FamiliarVariant.FOREVER_ALONE] = "FOREVER_ALONE"
____exports.FamiliarVariant.DISTANT_ADMIRATION = 31
____exports.FamiliarVariant[____exports.FamiliarVariant.DISTANT_ADMIRATION] = "DISTANT_ADMIRATION"
____exports.FamiliarVariant.GUARDIAN_ANGEL = 32
____exports.FamiliarVariant[____exports.FamiliarVariant.GUARDIAN_ANGEL] = "GUARDIAN_ANGEL"
____exports.FamiliarVariant.FLY_ORBITAL = 33
____exports.FamiliarVariant[____exports.FamiliarVariant.FLY_ORBITAL] = "FLY_ORBITAL"
____exports.FamiliarVariant.SACRIFICIAL_DAGGER = 35
____exports.FamiliarVariant[____exports.FamiliarVariant.SACRIFICIAL_DAGGER] = "SACRIFICIAL_DAGGER"
____exports.FamiliarVariant.DEAD_CAT = 40
____exports.FamiliarVariant[____exports.FamiliarVariant.DEAD_CAT] = "DEAD_CAT"
____exports.FamiliarVariant.ONE_UP = 41
____exports.FamiliarVariant[____exports.FamiliarVariant.ONE_UP] = "ONE_UP"
____exports.FamiliarVariant.GUPPYS_HAIRBALL = 42
____exports.FamiliarVariant[____exports.FamiliarVariant.GUPPYS_HAIRBALL] = "GUPPYS_HAIRBALL"
____exports.FamiliarVariant.BLUE_FLY = 43
____exports.FamiliarVariant[____exports.FamiliarVariant.BLUE_FLY] = "BLUE_FLY"
____exports.FamiliarVariant.CUBE_OF_MEAT_1 = 44
____exports.FamiliarVariant[____exports.FamiliarVariant.CUBE_OF_MEAT_1] = "CUBE_OF_MEAT_1"
____exports.FamiliarVariant.CUBE_OF_MEAT_2 = 45
____exports.FamiliarVariant[____exports.FamiliarVariant.CUBE_OF_MEAT_2] = "CUBE_OF_MEAT_2"
____exports.FamiliarVariant.CUBE_OF_MEAT_3 = 46
____exports.FamiliarVariant[____exports.FamiliarVariant.CUBE_OF_MEAT_3] = "CUBE_OF_MEAT_3"
____exports.FamiliarVariant.CUBE_OF_MEAT_4 = 47
____exports.FamiliarVariant[____exports.FamiliarVariant.CUBE_OF_MEAT_4] = "CUBE_OF_MEAT_4"
____exports.FamiliarVariant.ISAACS_BODY = 48
____exports.FamiliarVariant[____exports.FamiliarVariant.ISAACS_BODY] = "ISAACS_BODY"
____exports.FamiliarVariant.SMART_FLY = 50
____exports.FamiliarVariant[____exports.FamiliarVariant.SMART_FLY] = "SMART_FLY"
____exports.FamiliarVariant.DRY_BABY = 51
____exports.FamiliarVariant[____exports.FamiliarVariant.DRY_BABY] = "DRY_BABY"
____exports.FamiliarVariant.JUICY_SACK = 52
____exports.FamiliarVariant[____exports.FamiliarVariant.JUICY_SACK] = "JUICY_SACK"
____exports.FamiliarVariant.ROBO_BABY_2 = 53
____exports.FamiliarVariant[____exports.FamiliarVariant.ROBO_BABY_2] = "ROBO_BABY_2"
____exports.FamiliarVariant.ROTTEN_BABY = 54
____exports.FamiliarVariant[____exports.FamiliarVariant.ROTTEN_BABY] = "ROTTEN_BABY"
____exports.FamiliarVariant.HEADLESS_BABY = 55
____exports.FamiliarVariant[____exports.FamiliarVariant.HEADLESS_BABY] = "HEADLESS_BABY"
____exports.FamiliarVariant.LEECH = 56
____exports.FamiliarVariant[____exports.FamiliarVariant.LEECH] = "LEECH"
____exports.FamiliarVariant.MYSTERY_SACK = 57
____exports.FamiliarVariant[____exports.FamiliarVariant.MYSTERY_SACK] = "MYSTERY_SACK"
____exports.FamiliarVariant.BBF = 58
____exports.FamiliarVariant[____exports.FamiliarVariant.BBF] = "BBF"
____exports.FamiliarVariant.BOBS_BRAIN = 59
____exports.FamiliarVariant[____exports.FamiliarVariant.BOBS_BRAIN] = "BOBS_BRAIN"
____exports.FamiliarVariant.BEST_BUD = 60
____exports.FamiliarVariant[____exports.FamiliarVariant.BEST_BUD] = "BEST_BUD"
____exports.FamiliarVariant.LIL_BRIMSTONE = 61
____exports.FamiliarVariant[____exports.FamiliarVariant.LIL_BRIMSTONE] = "LIL_BRIMSTONE"
____exports.FamiliarVariant.ISAACS_HEART = 62
____exports.FamiliarVariant[____exports.FamiliarVariant.ISAACS_HEART] = "ISAACS_HEART"
____exports.FamiliarVariant.LIL_HAUNT = 63
____exports.FamiliarVariant[____exports.FamiliarVariant.LIL_HAUNT] = "LIL_HAUNT"
____exports.FamiliarVariant.DARK_BUM = 64
____exports.FamiliarVariant[____exports.FamiliarVariant.DARK_BUM] = "DARK_BUM"
____exports.FamiliarVariant.BIG_FAN = 65
____exports.FamiliarVariant[____exports.FamiliarVariant.BIG_FAN] = "BIG_FAN"
____exports.FamiliarVariant.SISSY_LONGLEGS = 66
____exports.FamiliarVariant[____exports.FamiliarVariant.SISSY_LONGLEGS] = "SISSY_LONGLEGS"
____exports.FamiliarVariant.PUNCHING_BAG = 67
____exports.FamiliarVariant[____exports.FamiliarVariant.PUNCHING_BAG] = "PUNCHING_BAG"
____exports.FamiliarVariant.GUILLOTINE = 68
____exports.FamiliarVariant[____exports.FamiliarVariant.GUILLOTINE] = "GUILLOTINE"
____exports.FamiliarVariant.BALL_OF_BANDAGES_1 = 69
____exports.FamiliarVariant[____exports.FamiliarVariant.BALL_OF_BANDAGES_1] = "BALL_OF_BANDAGES_1"
____exports.FamiliarVariant.BALL_OF_BANDAGES_2 = 70
____exports.FamiliarVariant[____exports.FamiliarVariant.BALL_OF_BANDAGES_2] = "BALL_OF_BANDAGES_2"
____exports.FamiliarVariant.BALL_OF_BANDAGES_3 = 71
____exports.FamiliarVariant[____exports.FamiliarVariant.BALL_OF_BANDAGES_3] = "BALL_OF_BANDAGES_3"
____exports.FamiliarVariant.BALL_OF_BANDAGES_4 = 72
____exports.FamiliarVariant[____exports.FamiliarVariant.BALL_OF_BANDAGES_4] = "BALL_OF_BANDAGES_4"
____exports.FamiliarVariant.BLUE_SPIDER = 73
____exports.FamiliarVariant[____exports.FamiliarVariant.BLUE_SPIDER] = "BLUE_SPIDER"
____exports.FamiliarVariant.MONGO_BABY = 74
____exports.FamiliarVariant[____exports.FamiliarVariant.MONGO_BABY] = "MONGO_BABY"
____exports.FamiliarVariant.SAMSONS_CHAINS = 75
____exports.FamiliarVariant[____exports.FamiliarVariant.SAMSONS_CHAINS] = "SAMSONS_CHAINS"
____exports.FamiliarVariant.CAINS_OTHER_EYE = 76
____exports.FamiliarVariant[____exports.FamiliarVariant.CAINS_OTHER_EYE] = "CAINS_OTHER_EYE"
____exports.FamiliarVariant.BLUE_BABYS_ONLY_FRIEND = 77
____exports.FamiliarVariant[____exports.FamiliarVariant.BLUE_BABYS_ONLY_FRIEND] = "BLUE_BABYS_ONLY_FRIEND"
____exports.FamiliarVariant.SCISSORS = 78
____exports.FamiliarVariant[____exports.FamiliarVariant.SCISSORS] = "SCISSORS"
____exports.FamiliarVariant.GEMINI = 79
____exports.FamiliarVariant[____exports.FamiliarVariant.GEMINI] = "GEMINI"
____exports.FamiliarVariant.INCUBUS = 80
____exports.FamiliarVariant[____exports.FamiliarVariant.INCUBUS] = "INCUBUS"
____exports.FamiliarVariant.FATES_REWARD = 81
____exports.FamiliarVariant[____exports.FamiliarVariant.FATES_REWARD] = "FATES_REWARD"
____exports.FamiliarVariant.LIL_CHEST = 82
____exports.FamiliarVariant[____exports.FamiliarVariant.LIL_CHEST] = "LIL_CHEST"
____exports.FamiliarVariant.SWORN_PROTECTOR = 83
____exports.FamiliarVariant[____exports.FamiliarVariant.SWORN_PROTECTOR] = "SWORN_PROTECTOR"
____exports.FamiliarVariant.FRIEND_ZONE = 84
____exports.FamiliarVariant[____exports.FamiliarVariant.FRIEND_ZONE] = "FRIEND_ZONE"
____exports.FamiliarVariant.LOST_FLY = 85
____exports.FamiliarVariant[____exports.FamiliarVariant.LOST_FLY] = "LOST_FLY"
____exports.FamiliarVariant.CHARGED_BABY = 86
____exports.FamiliarVariant[____exports.FamiliarVariant.CHARGED_BABY] = "CHARGED_BABY"
____exports.FamiliarVariant.LIL_GURDY = 87
____exports.FamiliarVariant[____exports.FamiliarVariant.LIL_GURDY] = "LIL_GURDY"
____exports.FamiliarVariant.BUMBO = 88
____exports.FamiliarVariant[____exports.FamiliarVariant.BUMBO] = "BUMBO"
____exports.FamiliarVariant.CENSER = 89
____exports.FamiliarVariant[____exports.FamiliarVariant.CENSER] = "CENSER"
____exports.FamiliarVariant.KEY_BUM = 90
____exports.FamiliarVariant[____exports.FamiliarVariant.KEY_BUM] = "KEY_BUM"
____exports.FamiliarVariant.RUNE_BAG = 91
____exports.FamiliarVariant[____exports.FamiliarVariant.RUNE_BAG] = "RUNE_BAG"
____exports.FamiliarVariant.SERAPHIM = 92
____exports.FamiliarVariant[____exports.FamiliarVariant.SERAPHIM] = "SERAPHIM"
____exports.FamiliarVariant.GB_BUG = 93
____exports.FamiliarVariant[____exports.FamiliarVariant.GB_BUG] = "GB_BUG"
____exports.FamiliarVariant.SPIDER_MOD = 94
____exports.FamiliarVariant[____exports.FamiliarVariant.SPIDER_MOD] = "SPIDER_MOD"
____exports.FamiliarVariant.FARTING_BABY = 95
____exports.FamiliarVariant[____exports.FamiliarVariant.FARTING_BABY] = "FARTING_BABY"
____exports.FamiliarVariant.SUCCUBUS = 96
____exports.FamiliarVariant[____exports.FamiliarVariant.SUCCUBUS] = "SUCCUBUS"
____exports.FamiliarVariant.LIL_LOKI = 97
____exports.FamiliarVariant[____exports.FamiliarVariant.LIL_LOKI] = "LIL_LOKI"
____exports.FamiliarVariant.OBSESSED_FAN = 98
____exports.FamiliarVariant[____exports.FamiliarVariant.OBSESSED_FAN] = "OBSESSED_FAN"
____exports.FamiliarVariant.PAPA_FLY = 99
____exports.FamiliarVariant[____exports.FamiliarVariant.PAPA_FLY] = "PAPA_FLY"
____exports.FamiliarVariant.MILK = 100
____exports.FamiliarVariant[____exports.FamiliarVariant.MILK] = "MILK"
____exports.FamiliarVariant.MULTIDIMENSIONAL_BABY = 101
____exports.FamiliarVariant[____exports.FamiliarVariant.MULTIDIMENSIONAL_BABY] = "MULTIDIMENSIONAL_BABY"
____exports.FamiliarVariant.SUPER_BUM = 102
____exports.FamiliarVariant[____exports.FamiliarVariant.SUPER_BUM] = "SUPER_BUM"
____exports.FamiliarVariant.TONSIL = 103
____exports.FamiliarVariant[____exports.FamiliarVariant.TONSIL] = "TONSIL"
____exports.FamiliarVariant.BIG_CHUBBY = 104
____exports.FamiliarVariant[____exports.FamiliarVariant.BIG_CHUBBY] = "BIG_CHUBBY"
____exports.FamiliarVariant.DEPRESSION = 105
____exports.FamiliarVariant[____exports.FamiliarVariant.DEPRESSION] = "DEPRESSION"
____exports.FamiliarVariant.SHADE = 106
____exports.FamiliarVariant[____exports.FamiliarVariant.SHADE] = "SHADE"
____exports.FamiliarVariant.HUSHY = 107
____exports.FamiliarVariant[____exports.FamiliarVariant.HUSHY] = "HUSHY"
____exports.FamiliarVariant.LIL_MONSTRO = 108
____exports.FamiliarVariant[____exports.FamiliarVariant.LIL_MONSTRO] = "LIL_MONSTRO"
____exports.FamiliarVariant.KING_BABY = 109
____exports.FamiliarVariant[____exports.FamiliarVariant.KING_BABY] = "KING_BABY"
____exports.FamiliarVariant.FINGER = 110
____exports.FamiliarVariant[____exports.FamiliarVariant.FINGER] = "FINGER"
____exports.FamiliarVariant.YO_LISTEN = 111
____exports.FamiliarVariant[____exports.FamiliarVariant.YO_LISTEN] = "YO_LISTEN"
____exports.FamiliarVariant.ACID_BABY = 112
____exports.FamiliarVariant[____exports.FamiliarVariant.ACID_BABY] = "ACID_BABY"
____exports.FamiliarVariant.SPIDER_BABY = 113
____exports.FamiliarVariant[____exports.FamiliarVariant.SPIDER_BABY] = "SPIDER_BABY"
____exports.FamiliarVariant.SACK_OF_SACKS = 114
____exports.FamiliarVariant[____exports.FamiliarVariant.SACK_OF_SACKS] = "SACK_OF_SACKS"
____exports.FamiliarVariant.BROWN_NUGGET_POOTER = 115
____exports.FamiliarVariant[____exports.FamiliarVariant.BROWN_NUGGET_POOTER] = "BROWN_NUGGET_POOTER"
____exports.FamiliarVariant.BLOODSHOT_EYE = 116
____exports.FamiliarVariant[____exports.FamiliarVariant.BLOODSHOT_EYE] = "BLOODSHOT_EYE"
____exports.FamiliarVariant.MOMS_RAZOR = 117
____exports.FamiliarVariant[____exports.FamiliarVariant.MOMS_RAZOR] = "MOMS_RAZOR"
____exports.FamiliarVariant.ANGRY_FLY = 118
____exports.FamiliarVariant[____exports.FamiliarVariant.ANGRY_FLY] = "ANGRY_FLY"
____exports.FamiliarVariant.BUDDY_IN_A_BOX = 119
____exports.FamiliarVariant[____exports.FamiliarVariant.BUDDY_IN_A_BOX] = "BUDDY_IN_A_BOX"
____exports.FamiliarVariant.SPRINKLER = 120
____exports.FamiliarVariant[____exports.FamiliarVariant.SPRINKLER] = "SPRINKLER"
____exports.FamiliarVariant.LEPROSY = 121
____exports.FamiliarVariant[____exports.FamiliarVariant.LEPROSY] = "LEPROSY"
____exports.FamiliarVariant.LIL_HARBINGERS = 122
____exports.FamiliarVariant[____exports.FamiliarVariant.LIL_HARBINGERS] = "LIL_HARBINGERS"
____exports.FamiliarVariant.ANGELIC_PRISM = 123
____exports.FamiliarVariant[____exports.FamiliarVariant.ANGELIC_PRISM] = "ANGELIC_PRISM"
____exports.FamiliarVariant.MYSTERY_EGG = 124
____exports.FamiliarVariant[____exports.FamiliarVariant.MYSTERY_EGG] = "MYSTERY_EGG"
____exports.FamiliarVariant.LIL_SPEWER = 125
____exports.FamiliarVariant[____exports.FamiliarVariant.LIL_SPEWER] = "LIL_SPEWER"
____exports.FamiliarVariant.SLIPPED_RIB = 126
____exports.FamiliarVariant[____exports.FamiliarVariant.SLIPPED_RIB] = "SLIPPED_RIB"
____exports.FamiliarVariant.POINTY_RIB = 127
____exports.FamiliarVariant[____exports.FamiliarVariant.POINTY_RIB] = "POINTY_RIB"
____exports.FamiliarVariant.BONE_ORBITAL = 128
____exports.FamiliarVariant[____exports.FamiliarVariant.BONE_ORBITAL] = "BONE_ORBITAL"
____exports.FamiliarVariant.HALLOWED_GROUND = 129
____exports.FamiliarVariant[____exports.FamiliarVariant.HALLOWED_GROUND] = "HALLOWED_GROUND"
____exports.FamiliarVariant.JAW_BONE = 130
____exports.FamiliarVariant[____exports.FamiliarVariant.JAW_BONE] = "JAW_BONE"
____exports.FamiliarVariant.INTRUDER = 200
____exports.FamiliarVariant[____exports.FamiliarVariant.INTRUDER] = "INTRUDER"
____exports.FamiliarVariant.DIP = 201
____exports.FamiliarVariant[____exports.FamiliarVariant.DIP] = "DIP"
____exports.FamiliarVariant.DAMOCLES = 202
____exports.FamiliarVariant[____exports.FamiliarVariant.DAMOCLES] = "DAMOCLES"
____exports.FamiliarVariant.BLOOD_OATH = 203
____exports.FamiliarVariant[____exports.FamiliarVariant.BLOOD_OATH] = "BLOOD_OATH"
____exports.FamiliarVariant.PSY_FLY = 204
____exports.FamiliarVariant[____exports.FamiliarVariant.PSY_FLY] = "PSY_FLY"
____exports.FamiliarVariant.MENORAH = 205
____exports.FamiliarVariant[____exports.FamiliarVariant.MENORAH] = "MENORAH"
____exports.FamiliarVariant.WISP = 206
____exports.FamiliarVariant[____exports.FamiliarVariant.WISP] = "WISP"
____exports.FamiliarVariant.PEEPER_2 = 207
____exports.FamiliarVariant[____exports.FamiliarVariant.PEEPER_2] = "PEEPER_2"
____exports.FamiliarVariant.BOILED_BABY = 208
____exports.FamiliarVariant[____exports.FamiliarVariant.BOILED_BABY] = "BOILED_BABY"
____exports.FamiliarVariant.FREEZER_BABY = 209
____exports.FamiliarVariant[____exports.FamiliarVariant.FREEZER_BABY] = "FREEZER_BABY"
____exports.FamiliarVariant.BIRD_CAGE = 210
____exports.FamiliarVariant[____exports.FamiliarVariant.BIRD_CAGE] = "BIRD_CAGE"
____exports.FamiliarVariant.LOST_SOUL = 211
____exports.FamiliarVariant[____exports.FamiliarVariant.LOST_SOUL] = "LOST_SOUL"
____exports.FamiliarVariant.LIL_DUMPY = 212
____exports.FamiliarVariant[____exports.FamiliarVariant.LIL_DUMPY] = "LIL_DUMPY"
____exports.FamiliarVariant.KNIFE_PIECE_1 = 213
____exports.FamiliarVariant[____exports.FamiliarVariant.KNIFE_PIECE_1] = "KNIFE_PIECE_1"
____exports.FamiliarVariant.KNIFE_PIECE_2 = 214
____exports.FamiliarVariant[____exports.FamiliarVariant.KNIFE_PIECE_2] = "KNIFE_PIECE_2"
____exports.FamiliarVariant.TINYTOMA = 216
____exports.FamiliarVariant[____exports.FamiliarVariant.TINYTOMA] = "TINYTOMA"
____exports.FamiliarVariant.TINYTOMA_2 = 217
____exports.FamiliarVariant[____exports.FamiliarVariant.TINYTOMA_2] = "TINYTOMA_2"
____exports.FamiliarVariant.BOT_FLY = 218
____exports.FamiliarVariant[____exports.FamiliarVariant.BOT_FLY] = "BOT_FLY"
____exports.FamiliarVariant.SIREN_MINION = 220
____exports.FamiliarVariant[____exports.FamiliarVariant.SIREN_MINION] = "SIREN_MINION"
____exports.FamiliarVariant.PASCHAL_CANDLE = 221
____exports.FamiliarVariant[____exports.FamiliarVariant.PASCHAL_CANDLE] = "PASCHAL_CANDLE"
____exports.FamiliarVariant.STITCHES = 222
____exports.FamiliarVariant[____exports.FamiliarVariant.STITCHES] = "STITCHES"
____exports.FamiliarVariant.KNIFE_FULL = 223
____exports.FamiliarVariant[____exports.FamiliarVariant.KNIFE_FULL] = "KNIFE_FULL"
____exports.FamiliarVariant.BABY_PLUM = 224
____exports.FamiliarVariant[____exports.FamiliarVariant.BABY_PLUM] = "BABY_PLUM"
____exports.FamiliarVariant.FRUITY_PLUM = 225
____exports.FamiliarVariant[____exports.FamiliarVariant.FRUITY_PLUM] = "FRUITY_PLUM"
____exports.FamiliarVariant.SPIN_TO_WIN = 226
____exports.FamiliarVariant[____exports.FamiliarVariant.SPIN_TO_WIN] = "SPIN_TO_WIN"
____exports.FamiliarVariant.MINISAAC = 228
____exports.FamiliarVariant[____exports.FamiliarVariant.MINISAAC] = "MINISAAC"
____exports.FamiliarVariant.SWARM_FLY_ORBITAL = 229
____exports.FamiliarVariant[____exports.FamiliarVariant.SWARM_FLY_ORBITAL] = "SWARM_FLY_ORBITAL"
____exports.FamiliarVariant.LIL_ABADDON = 230
____exports.FamiliarVariant[____exports.FamiliarVariant.LIL_ABADDON] = "LIL_ABADDON"
____exports.FamiliarVariant.ABYSS_LOCUST = 231
____exports.FamiliarVariant[____exports.FamiliarVariant.ABYSS_LOCUST] = "ABYSS_LOCUST"
____exports.FamiliarVariant.LIL_PORTAL = 232
____exports.FamiliarVariant[____exports.FamiliarVariant.LIL_PORTAL] = "LIL_PORTAL"
____exports.FamiliarVariant.WORM_FRIEND = 233
____exports.FamiliarVariant[____exports.FamiliarVariant.WORM_FRIEND] = "WORM_FRIEND"
____exports.FamiliarVariant.BONE_SPUR = 234
____exports.FamiliarVariant[____exports.FamiliarVariant.BONE_SPUR] = "BONE_SPUR"
____exports.FamiliarVariant.TWISTED_BABY = 235
____exports.FamiliarVariant[____exports.FamiliarVariant.TWISTED_BABY] = "TWISTED_BABY"
____exports.FamiliarVariant.STAR_OF_BETHLEHEM = 236
____exports.FamiliarVariant[____exports.FamiliarVariant.STAR_OF_BETHLEHEM] = "STAR_OF_BETHLEHEM"
____exports.FamiliarVariant.ITEM_WISP = 237
____exports.FamiliarVariant[____exports.FamiliarVariant.ITEM_WISP] = "ITEM_WISP"
____exports.FamiliarVariant.BLOOD_BABY = 238
____exports.FamiliarVariant[____exports.FamiliarVariant.BLOOD_BABY] = "BLOOD_BABY"
____exports.FamiliarVariant.CUBE_BABY = 239
____exports.FamiliarVariant[____exports.FamiliarVariant.CUBE_BABY] = "CUBE_BABY"
____exports.FamiliarVariant.UMBILICAL_BABY = 240
____exports.FamiliarVariant[____exports.FamiliarVariant.UMBILICAL_BABY] = "UMBILICAL_BABY"
____exports.FamiliarVariant.BLOOD_PUPPY = 241
____exports.FamiliarVariant[____exports.FamiliarVariant.BLOOD_PUPPY] = "BLOOD_PUPPY"
____exports.FamiliarVariant.VANISHING_TWIN = 242
____exports.FamiliarVariant[____exports.FamiliarVariant.VANISHING_TWIN] = "VANISHING_TWIN"
____exports.FamiliarVariant.DECAP_ATTACK = 243
____exports.FamiliarVariant[____exports.FamiliarVariant.DECAP_ATTACK] = "DECAP_ATTACK"
____exports.FamiliarVariant.FORGOTTEN_BODY = 900
____exports.FamiliarVariant[____exports.FamiliarVariant.FORGOTTEN_BODY] = "FORGOTTEN_BODY"
--- For `EntityType.BOMB` (4)
____exports.BombVariant = {}
____exports.BombVariant.NORMAL = 0
____exports.BombVariant[____exports.BombVariant.NORMAL] = "NORMAL"
____exports.BombVariant.BIG = 1
____exports.BombVariant[____exports.BombVariant.BIG] = "BIG"
____exports.BombVariant.DECOY = 2
____exports.BombVariant[____exports.BombVariant.DECOY] = "DECOY"
____exports.BombVariant.TROLL = 3
____exports.BombVariant[____exports.BombVariant.TROLL] = "TROLL"
____exports.BombVariant.MEGA_TROLL = 4
____exports.BombVariant[____exports.BombVariant.MEGA_TROLL] = "MEGA_TROLL"
____exports.BombVariant.POISON = 5
____exports.BombVariant[____exports.BombVariant.POISON] = "POISON"
____exports.BombVariant.POISON_BIG = 6
____exports.BombVariant[____exports.BombVariant.POISON_BIG] = "POISON_BIG"
____exports.BombVariant.SAD = 7
____exports.BombVariant[____exports.BombVariant.SAD] = "SAD"
____exports.BombVariant.HOT = 8
____exports.BombVariant[____exports.BombVariant.HOT] = "HOT"
____exports.BombVariant.BUTT = 9
____exports.BombVariant[____exports.BombVariant.BUTT] = "BUTT"
____exports.BombVariant.MR_MEGA = 10
____exports.BombVariant[____exports.BombVariant.MR_MEGA] = "MR_MEGA"
____exports.BombVariant.BOBBY = 11
____exports.BombVariant[____exports.BombVariant.BOBBY] = "BOBBY"
____exports.BombVariant.GLITTER = 12
____exports.BombVariant[____exports.BombVariant.GLITTER] = "GLITTER"
____exports.BombVariant.THROWABLE = 13
____exports.BombVariant[____exports.BombVariant.THROWABLE] = "THROWABLE"
____exports.BombVariant.SMALL = 14
____exports.BombVariant[____exports.BombVariant.SMALL] = "SMALL"
____exports.BombVariant.BRIMSTONE = 15
____exports.BombVariant[____exports.BombVariant.BRIMSTONE] = "BRIMSTONE"
____exports.BombVariant.SAD_BLOOD = 16
____exports.BombVariant[____exports.BombVariant.SAD_BLOOD] = "SAD_BLOOD"
____exports.BombVariant.GIGA = 17
____exports.BombVariant[____exports.BombVariant.GIGA] = "GIGA"
____exports.BombVariant.GOLDEN_TROLL = 18
____exports.BombVariant[____exports.BombVariant.GOLDEN_TROLL] = "GOLDEN_TROLL"
____exports.BombVariant.ROCKET = 19
____exports.BombVariant[____exports.BombVariant.ROCKET] = "ROCKET"
____exports.BombVariant.ROCKET_GIGA = 20
____exports.BombVariant[____exports.BombVariant.ROCKET_GIGA] = "ROCKET_GIGA"
--- For `EntityType.PICKUP` (5)
____exports.PickupVariant = {}
____exports.PickupVariant.NULL = 0
____exports.PickupVariant[____exports.PickupVariant.NULL] = "NULL"
____exports.PickupVariant.HEART = 10
____exports.PickupVariant[____exports.PickupVariant.HEART] = "HEART"
____exports.PickupVariant.COIN = 20
____exports.PickupVariant[____exports.PickupVariant.COIN] = "COIN"
____exports.PickupVariant.KEY = 30
____exports.PickupVariant[____exports.PickupVariant.KEY] = "KEY"
____exports.PickupVariant.BOMB = 40
____exports.PickupVariant[____exports.PickupVariant.BOMB] = "BOMB"
____exports.PickupVariant.THROWABLE_BOMB = 41
____exports.PickupVariant[____exports.PickupVariant.THROWABLE_BOMB] = "THROWABLE_BOMB"
____exports.PickupVariant.POOP = 42
____exports.PickupVariant[____exports.PickupVariant.POOP] = "POOP"
____exports.PickupVariant.CHEST = 50
____exports.PickupVariant[____exports.PickupVariant.CHEST] = "CHEST"
____exports.PickupVariant.BOMB_CHEST = 51
____exports.PickupVariant[____exports.PickupVariant.BOMB_CHEST] = "BOMB_CHEST"
____exports.PickupVariant.SPIKED_CHEST = 52
____exports.PickupVariant[____exports.PickupVariant.SPIKED_CHEST] = "SPIKED_CHEST"
____exports.PickupVariant.ETERNAL_CHEST = 53
____exports.PickupVariant[____exports.PickupVariant.ETERNAL_CHEST] = "ETERNAL_CHEST"
____exports.PickupVariant.MIMIC_CHEST = 54
____exports.PickupVariant[____exports.PickupVariant.MIMIC_CHEST] = "MIMIC_CHEST"
____exports.PickupVariant.OLD_CHEST = 55
____exports.PickupVariant[____exports.PickupVariant.OLD_CHEST] = "OLD_CHEST"
____exports.PickupVariant.WOODEN_CHEST = 56
____exports.PickupVariant[____exports.PickupVariant.WOODEN_CHEST] = "WOODEN_CHEST"
____exports.PickupVariant.MEGA_CHEST = 57
____exports.PickupVariant[____exports.PickupVariant.MEGA_CHEST] = "MEGA_CHEST"
____exports.PickupVariant.HAUNTED_CHEST = 58
____exports.PickupVariant[____exports.PickupVariant.HAUNTED_CHEST] = "HAUNTED_CHEST"
____exports.PickupVariant.LOCKED_CHEST = 60
____exports.PickupVariant[____exports.PickupVariant.LOCKED_CHEST] = "LOCKED_CHEST"
____exports.PickupVariant.SACK = 69
____exports.PickupVariant[____exports.PickupVariant.SACK] = "SACK"
____exports.PickupVariant.PILL = 70
____exports.PickupVariant[____exports.PickupVariant.PILL] = "PILL"
____exports.PickupVariant.LIL_BATTERY = 90
____exports.PickupVariant[____exports.PickupVariant.LIL_BATTERY] = "LIL_BATTERY"
____exports.PickupVariant.COLLECTIBLE = 100
____exports.PickupVariant[____exports.PickupVariant.COLLECTIBLE] = "COLLECTIBLE"
____exports.PickupVariant.BROKEN_SHOVEL = 110
____exports.PickupVariant[____exports.PickupVariant.BROKEN_SHOVEL] = "BROKEN_SHOVEL"
____exports.PickupVariant.SHOP_ITEM = 150
____exports.PickupVariant[____exports.PickupVariant.SHOP_ITEM] = "SHOP_ITEM"
____exports.PickupVariant.TAROT_CARD = 300
____exports.PickupVariant[____exports.PickupVariant.TAROT_CARD] = "TAROT_CARD"
____exports.PickupVariant.BIG_CHEST = 340
____exports.PickupVariant[____exports.PickupVariant.BIG_CHEST] = "BIG_CHEST"
____exports.PickupVariant.TRINKET = 350
____exports.PickupVariant[____exports.PickupVariant.TRINKET] = "TRINKET"
____exports.PickupVariant.RED_CHEST = 360
____exports.PickupVariant[____exports.PickupVariant.RED_CHEST] = "RED_CHEST"
____exports.PickupVariant.TROPHY = 370
____exports.PickupVariant[____exports.PickupVariant.TROPHY] = "TROPHY"
____exports.PickupVariant.BED = 380
____exports.PickupVariant[____exports.PickupVariant.BED] = "BED"
____exports.PickupVariant.MOMS_CHEST = 390
____exports.PickupVariant[____exports.PickupVariant.MOMS_CHEST] = "MOMS_CHEST"
--- For `EntityType.SLOT` (6)
____exports.SlotVariant = {}
____exports.SlotVariant.SLOT_MACHINE = 1
____exports.SlotVariant[____exports.SlotVariant.SLOT_MACHINE] = "SLOT_MACHINE"
____exports.SlotVariant.BLOOD_DONATION_MACHINE = 2
____exports.SlotVariant[____exports.SlotVariant.BLOOD_DONATION_MACHINE] = "BLOOD_DONATION_MACHINE"
____exports.SlotVariant.FORTUNE_TELLING_MACHINE = 3
____exports.SlotVariant[____exports.SlotVariant.FORTUNE_TELLING_MACHINE] = "FORTUNE_TELLING_MACHINE"
____exports.SlotVariant.BEGGAR = 4
____exports.SlotVariant[____exports.SlotVariant.BEGGAR] = "BEGGAR"
____exports.SlotVariant.DEVIL_BEGGAR = 5
____exports.SlotVariant[____exports.SlotVariant.DEVIL_BEGGAR] = "DEVIL_BEGGAR"
____exports.SlotVariant.SHELL_GAME = 6
____exports.SlotVariant[____exports.SlotVariant.SHELL_GAME] = "SHELL_GAME"
____exports.SlotVariant.KEY_MASTER = 7
____exports.SlotVariant[____exports.SlotVariant.KEY_MASTER] = "KEY_MASTER"
____exports.SlotVariant.DONATION_MACHINE = 8
____exports.SlotVariant[____exports.SlotVariant.DONATION_MACHINE] = "DONATION_MACHINE"
____exports.SlotVariant.BOMB_BUM = 9
____exports.SlotVariant[____exports.SlotVariant.BOMB_BUM] = "BOMB_BUM"
____exports.SlotVariant.SHOP_RESTOCK_MACHINE = 10
____exports.SlotVariant[____exports.SlotVariant.SHOP_RESTOCK_MACHINE] = "SHOP_RESTOCK_MACHINE"
____exports.SlotVariant.GREED_DONATION_MACHINE = 11
____exports.SlotVariant[____exports.SlotVariant.GREED_DONATION_MACHINE] = "GREED_DONATION_MACHINE"
____exports.SlotVariant.MOMS_DRESSING_TABLE = 12
____exports.SlotVariant[____exports.SlotVariant.MOMS_DRESSING_TABLE] = "MOMS_DRESSING_TABLE"
____exports.SlotVariant.BATTERY_BUM = 13
____exports.SlotVariant[____exports.SlotVariant.BATTERY_BUM] = "BATTERY_BUM"
____exports.SlotVariant.ISAAC_SECRET = 14
____exports.SlotVariant[____exports.SlotVariant.ISAAC_SECRET] = "ISAAC_SECRET"
____exports.SlotVariant.HELL_GAME = 15
____exports.SlotVariant[____exports.SlotVariant.HELL_GAME] = "HELL_GAME"
____exports.SlotVariant.CRANE_GAME = 16
____exports.SlotVariant[____exports.SlotVariant.CRANE_GAME] = "CRANE_GAME"
____exports.SlotVariant.CONFESSIONAL = 17
____exports.SlotVariant[____exports.SlotVariant.CONFESSIONAL] = "CONFESSIONAL"
____exports.SlotVariant.ROTTEN_BEGGAR = 18
____exports.SlotVariant[____exports.SlotVariant.ROTTEN_BEGGAR] = "ROTTEN_BEGGAR"
--- For `EntityType.LASER` (7)
____exports.LaserVariant = {}
____exports.LaserVariant.THICK_RED = 1
____exports.LaserVariant[____exports.LaserVariant.THICK_RED] = "THICK_RED"
____exports.LaserVariant.THIN_RED = 2
____exports.LaserVariant[____exports.LaserVariant.THIN_RED] = "THIN_RED"
____exports.LaserVariant.SHOOP_DA_WHOOP = 3
____exports.LaserVariant[____exports.LaserVariant.SHOOP_DA_WHOOP] = "SHOOP_DA_WHOOP"
____exports.LaserVariant.PRIDE = 4
____exports.LaserVariant[____exports.LaserVariant.PRIDE] = "PRIDE"
____exports.LaserVariant.LIGHT_BEAM = 5
____exports.LaserVariant[____exports.LaserVariant.LIGHT_BEAM] = "LIGHT_BEAM"
____exports.LaserVariant.GIANT_RED = 6
____exports.LaserVariant[____exports.LaserVariant.GIANT_RED] = "GIANT_RED"
____exports.LaserVariant.TRACTOR_BEAM = 7
____exports.LaserVariant[____exports.LaserVariant.TRACTOR_BEAM] = "TRACTOR_BEAM"
____exports.LaserVariant.LIGHT_RING = 8
____exports.LaserVariant[____exports.LaserVariant.LIGHT_RING] = "LIGHT_RING"
____exports.LaserVariant.BRIMSTONE_TECHNOLOGY = 9
____exports.LaserVariant[____exports.LaserVariant.BRIMSTONE_TECHNOLOGY] = "BRIMSTONE_TECHNOLOGY"
____exports.LaserVariant.ELECTRIC = 10
____exports.LaserVariant[____exports.LaserVariant.ELECTRIC] = "ELECTRIC"
____exports.LaserVariant.THICKER_RED = 11
____exports.LaserVariant[____exports.LaserVariant.THICKER_RED] = "THICKER_RED"
____exports.LaserVariant.THICK_BROWN = 12
____exports.LaserVariant[____exports.LaserVariant.THICK_BROWN] = "THICK_BROWN"
____exports.LaserVariant.BEAST = 13
____exports.LaserVariant[____exports.LaserVariant.BEAST] = "BEAST"
____exports.LaserVariant.THICKER_BRIMSTONE_TECHNOLOGY = 14
____exports.LaserVariant[____exports.LaserVariant.THICKER_BRIMSTONE_TECHNOLOGY] = "THICKER_BRIMSTONE_TECHNOLOGY"
____exports.LaserVariant.GIANT_BRIMSTONE_TECHNOLOGY = 15
____exports.LaserVariant[____exports.LaserVariant.GIANT_BRIMSTONE_TECHNOLOGY] = "GIANT_BRIMSTONE_TECHNOLOGY"
--- For `EntityType.KNIFE` (8)
____exports.KnifeVariant = {}
____exports.KnifeVariant.MOMS_KNIFE = 8
____exports.KnifeVariant[____exports.KnifeVariant.MOMS_KNIFE] = "MOMS_KNIFE"
____exports.KnifeVariant.BONE_CLUB = 1
____exports.KnifeVariant[____exports.KnifeVariant.BONE_CLUB] = "BONE_CLUB"
____exports.KnifeVariant.BONE_SCYTHE = 2
____exports.KnifeVariant[____exports.KnifeVariant.BONE_SCYTHE] = "BONE_SCYTHE"
____exports.KnifeVariant.DONKEY_JAWBONE = 3
____exports.KnifeVariant[____exports.KnifeVariant.DONKEY_JAWBONE] = "DONKEY_JAWBONE"
____exports.KnifeVariant.BAG_OF_CRAFTING = 4
____exports.KnifeVariant[____exports.KnifeVariant.BAG_OF_CRAFTING] = "BAG_OF_CRAFTING"
____exports.KnifeVariant.SUMPTORIUM = 5
____exports.KnifeVariant[____exports.KnifeVariant.SUMPTORIUM] = "SUMPTORIUM"
____exports.KnifeVariant.NOTCHED_AXE = 9
____exports.KnifeVariant[____exports.KnifeVariant.NOTCHED_AXE] = "NOTCHED_AXE"
____exports.KnifeVariant.SPIRIT_SWORD = 10
____exports.KnifeVariant[____exports.KnifeVariant.SPIRIT_SWORD] = "SPIRIT_SWORD"
____exports.KnifeVariant.TECH_SWORD = 11
____exports.KnifeVariant[____exports.KnifeVariant.TECH_SWORD] = "TECH_SWORD"
--- For `EntityType.PROJECTILE` (9)
____exports.ProjectileVariant = {}
____exports.ProjectileVariant.NORMAL = 0
____exports.ProjectileVariant[____exports.ProjectileVariant.NORMAL] = "NORMAL"
____exports.ProjectileVariant.BONE = 1
____exports.ProjectileVariant[____exports.ProjectileVariant.BONE] = "BONE"
____exports.ProjectileVariant.FIRE = 2
____exports.ProjectileVariant[____exports.ProjectileVariant.FIRE] = "FIRE"
____exports.ProjectileVariant.PUKE = 3
____exports.ProjectileVariant[____exports.ProjectileVariant.PUKE] = "PUKE"
____exports.ProjectileVariant.TEAR = 4
____exports.ProjectileVariant[____exports.ProjectileVariant.TEAR] = "TEAR"
____exports.ProjectileVariant.CORN = 5
____exports.ProjectileVariant[____exports.ProjectileVariant.CORN] = "CORN"
____exports.ProjectileVariant.HUSH = 6
____exports.ProjectileVariant[____exports.ProjectileVariant.HUSH] = "HUSH"
____exports.ProjectileVariant.COIN = 7
____exports.ProjectileVariant[____exports.ProjectileVariant.COIN] = "COIN"
____exports.ProjectileVariant.GRID = 8
____exports.ProjectileVariant[____exports.ProjectileVariant.GRID] = "GRID"
____exports.ProjectileVariant.ROCK = 9
____exports.ProjectileVariant[____exports.ProjectileVariant.ROCK] = "ROCK"
____exports.ProjectileVariant.RING = 10
____exports.ProjectileVariant[____exports.ProjectileVariant.RING] = "RING"
____exports.ProjectileVariant.MEAT = 11
____exports.ProjectileVariant[____exports.ProjectileVariant.MEAT] = "MEAT"
____exports.ProjectileVariant.FCUK = 12
____exports.ProjectileVariant[____exports.ProjectileVariant.FCUK] = "FCUK"
____exports.ProjectileVariant.WING = 13
____exports.ProjectileVariant[____exports.ProjectileVariant.WING] = "WING"
____exports.ProjectileVariant.LAVA = 14
____exports.ProjectileVariant[____exports.ProjectileVariant.LAVA] = "LAVA"
____exports.ProjectileVariant.HEAD = 15
____exports.ProjectileVariant[____exports.ProjectileVariant.HEAD] = "HEAD"
____exports.ProjectileVariant.PEEP = 16
____exports.ProjectileVariant[____exports.ProjectileVariant.PEEP] = "PEEP"
--- For `EntityType.GAPER` (10)
____exports.GaperVariant = {}
____exports.GaperVariant.FROWNING_GAPER = 0
____exports.GaperVariant[____exports.GaperVariant.FROWNING_GAPER] = "FROWNING_GAPER"
____exports.GaperVariant.GAPER = 1
____exports.GaperVariant[____exports.GaperVariant.GAPER] = "GAPER"
____exports.GaperVariant.FLAMING_GAPER = 2
____exports.GaperVariant[____exports.GaperVariant.FLAMING_GAPER] = "FLAMING_GAPER"
____exports.GaperVariant.ROTTEN_GAPER = 3
____exports.GaperVariant[____exports.GaperVariant.ROTTEN_GAPER] = "ROTTEN_GAPER"
--- For `EntityType.GUSHER` (11)
____exports.GusherVariant = {}
____exports.GusherVariant.GUSHER = 0
____exports.GusherVariant[____exports.GusherVariant.GUSHER] = "GUSHER"
____exports.GusherVariant.PACER = 1
____exports.GusherVariant[____exports.GusherVariant.PACER] = "PACER"
--- For `EntityType.POOTER` (14)
____exports.PooterVariant = {}
____exports.PooterVariant.POOTER = 0
____exports.PooterVariant[____exports.PooterVariant.POOTER] = "POOTER"
____exports.PooterVariant.SUPER_POOTER = 1
____exports.PooterVariant[____exports.PooterVariant.SUPER_POOTER] = "SUPER_POOTER"
____exports.PooterVariant.TAINTED_POOTER = 2
____exports.PooterVariant[____exports.PooterVariant.TAINTED_POOTER] = "TAINTED_POOTER"
--- For `EntityType.CLOTTY` (15)
____exports.ClottyVariant = {}
____exports.ClottyVariant.CLOTTY = 0
____exports.ClottyVariant[____exports.ClottyVariant.CLOTTY] = "CLOTTY"
____exports.ClottyVariant.CLOT = 1
____exports.ClottyVariant[____exports.ClottyVariant.CLOT] = "CLOT"
____exports.ClottyVariant.BLOB = 2
____exports.ClottyVariant[____exports.ClottyVariant.BLOB] = "BLOB"
____exports.ClottyVariant.GRILLED_CLOTTY = 3
____exports.ClottyVariant[____exports.ClottyVariant.GRILLED_CLOTTY] = "GRILLED_CLOTTY"
--- For `EntityType.MULLIGAN` (16)
____exports.MulliganVariant = {}
____exports.MulliganVariant.MULLIGAN = 16
____exports.MulliganVariant[____exports.MulliganVariant.MULLIGAN] = "MULLIGAN"
____exports.MulliganVariant.MULLIGOON = 1
____exports.MulliganVariant[____exports.MulliganVariant.MULLIGOON] = "MULLIGOON"
____exports.MulliganVariant.MULLIBOOM = 2
____exports.MulliganVariant[____exports.MulliganVariant.MULLIBOOM] = "MULLIBOOM"
--- For `EntityType.SHOPKEEPER` (17)
____exports.ShopkeeperVariant = {}
____exports.ShopkeeperVariant.SHOPKEEPER = 0
____exports.ShopkeeperVariant[____exports.ShopkeeperVariant.SHOPKEEPER] = "SHOPKEEPER"
____exports.ShopkeeperVariant.SECRET_ROOM_KEEPER = 1
____exports.ShopkeeperVariant[____exports.ShopkeeperVariant.SECRET_ROOM_KEEPER] = "SECRET_ROOM_KEEPER"
____exports.ShopkeeperVariant.ERROR_ROOM_KEEPER = 2
____exports.ShopkeeperVariant[____exports.ShopkeeperVariant.ERROR_ROOM_KEEPER] = "ERROR_ROOM_KEEPER"
____exports.ShopkeeperVariant.SPECIAL_SHOPKEEPER = 3
____exports.ShopkeeperVariant[____exports.ShopkeeperVariant.SPECIAL_SHOPKEEPER] = "SPECIAL_SHOPKEEPER"
____exports.ShopkeeperVariant.SPECIAL_SECRET_ROOM_KEEPER = 4
____exports.ShopkeeperVariant[____exports.ShopkeeperVariant.SPECIAL_SECRET_ROOM_KEEPER] = "SPECIAL_SECRET_ROOM_KEEPER"
--- For `EntityType.LARRY_JR` (19)
____exports.LarryJrVariant = {}
____exports.LarryJrVariant.LARRY_JR = 0
____exports.LarryJrVariant[____exports.LarryJrVariant.LARRY_JR] = "LARRY_JR"
____exports.LarryJrVariant.THE_HOLLOW = 1
____exports.LarryJrVariant[____exports.LarryJrVariant.THE_HOLLOW] = "THE_HOLLOW"
____exports.LarryJrVariant.TUFF_TWIN = 2
____exports.LarryJrVariant[____exports.LarryJrVariant.TUFF_TWIN] = "TUFF_TWIN"
____exports.LarryJrVariant.THE_SHELL = 3
____exports.LarryJrVariant[____exports.LarryJrVariant.THE_SHELL] = "THE_SHELL"
--- For `EntityType.HIVE` (22)
____exports.HiveVariant = {}
____exports.HiveVariant.HIVE = 0
____exports.HiveVariant[____exports.HiveVariant.HIVE] = "HIVE"
____exports.HiveVariant.DROWNED_HIVE = 1
____exports.HiveVariant[____exports.HiveVariant.DROWNED_HIVE] = "DROWNED_HIVE"
____exports.HiveVariant.HOLY_MULLIGAN = 2
____exports.HiveVariant[____exports.HiveVariant.HOLY_MULLIGAN] = "HOLY_MULLIGAN"
____exports.HiveVariant.TAINTED_MULLIGAN = 3
____exports.HiveVariant[____exports.HiveVariant.TAINTED_MULLIGAN] = "TAINTED_MULLIGAN"
--- For `EntityType.CHARGER` (23)
____exports.ChargerVariant = {}
____exports.ChargerVariant.CHARGER = 0
____exports.ChargerVariant[____exports.ChargerVariant.CHARGER] = "CHARGER"
____exports.ChargerVariant.DROWNED_CHARGER = 1
____exports.ChargerVariant[____exports.ChargerVariant.DROWNED_CHARGER] = "DROWNED_CHARGER"
____exports.ChargerVariant.DANK_CHARGER = 2
____exports.ChargerVariant[____exports.ChargerVariant.DANK_CHARGER] = "DANK_CHARGER"
____exports.ChargerVariant.CARRION_PRINCESS = 3
____exports.ChargerVariant[____exports.ChargerVariant.CARRION_PRINCESS] = "CARRION_PRINCESS"
--- For `EntityType.GLOBIN` (24)
____exports.GlobinVariant = {}
____exports.GlobinVariant.GLOBIN = 0
____exports.GlobinVariant[____exports.GlobinVariant.GLOBIN] = "GLOBIN"
____exports.GlobinVariant.GAZING_GLOBIN = 1
____exports.GlobinVariant[____exports.GlobinVariant.GAZING_GLOBIN] = "GAZING_GLOBIN"
____exports.GlobinVariant.DANK_GLOBIN = 2
____exports.GlobinVariant[____exports.GlobinVariant.DANK_GLOBIN] = "DANK_GLOBIN"
____exports.GlobinVariant.CURSED_GLOBIN = 3
____exports.GlobinVariant[____exports.GlobinVariant.CURSED_GLOBIN] = "CURSED_GLOBIN"
--- For `EntityType.BOOM_FLY` (25)
____exports.BoomFlyVariant = {}
____exports.BoomFlyVariant.BOOM_FLY = 0
____exports.BoomFlyVariant[____exports.BoomFlyVariant.BOOM_FLY] = "BOOM_FLY"
____exports.BoomFlyVariant.RED_BOOM_FLY = 1
____exports.BoomFlyVariant[____exports.BoomFlyVariant.RED_BOOM_FLY] = "RED_BOOM_FLY"
____exports.BoomFlyVariant.DROWNED_BOOM_FLY = 2
____exports.BoomFlyVariant[____exports.BoomFlyVariant.DROWNED_BOOM_FLY] = "DROWNED_BOOM_FLY"
____exports.BoomFlyVariant.DRAGON_FLY = 3
____exports.BoomFlyVariant[____exports.BoomFlyVariant.DRAGON_FLY] = "DRAGON_FLY"
____exports.BoomFlyVariant.BONE_FLY = 4
____exports.BoomFlyVariant[____exports.BoomFlyVariant.BONE_FLY] = "BONE_FLY"
____exports.BoomFlyVariant.SICK_BOOM_FLY = 5
____exports.BoomFlyVariant[____exports.BoomFlyVariant.SICK_BOOM_FLY] = "SICK_BOOM_FLY"
____exports.BoomFlyVariant.TAINTED_BOOM_FLY = 6
____exports.BoomFlyVariant[____exports.BoomFlyVariant.TAINTED_BOOM_FLY] = "TAINTED_BOOM_FLY"
--- For `EntityType.MAW` (26)
____exports.MawVariant = {}
____exports.MawVariant.MAW = 0
____exports.MawVariant[____exports.MawVariant.MAW] = "MAW"
____exports.MawVariant.RED_MAW = 1
____exports.MawVariant[____exports.MawVariant.RED_MAW] = "RED_MAW"
____exports.MawVariant.PSYCHIC_MAW = 2
____exports.MawVariant[____exports.MawVariant.PSYCHIC_MAW] = "PSYCHIC_MAW"
--- For `EntityType.HOST` (27)
____exports.HostVariant = {}
____exports.HostVariant.HOST = 0
____exports.HostVariant[____exports.HostVariant.HOST] = "HOST"
____exports.HostVariant.RED_HOST = 1
____exports.HostVariant[____exports.HostVariant.RED_HOST] = "RED_HOST"
____exports.HostVariant.HARD_HOST = 2
____exports.HostVariant[____exports.HostVariant.HARD_HOST] = "HARD_HOST"
--- For `EntityType.CHUB` (28)
____exports.ChubVariant = {}
____exports.ChubVariant.CHUB = 0
____exports.ChubVariant[____exports.ChubVariant.CHUB] = "CHUB"
____exports.ChubVariant.CHAD = 1
____exports.ChubVariant[____exports.ChubVariant.CHAD] = "CHAD"
____exports.ChubVariant.CARRION_QUEEN = 2
____exports.ChubVariant[____exports.ChubVariant.CARRION_QUEEN] = "CARRION_QUEEN"
--- For `EntityType.HOPPER` (29)
____exports.HopperVariant = {}
____exports.HopperVariant.HOPPER = 0
____exports.HopperVariant[____exports.HopperVariant.HOPPER] = "HOPPER"
____exports.HopperVariant.TRITE = 1
____exports.HopperVariant[____exports.HopperVariant.TRITE] = "TRITE"
____exports.HopperVariant.EGGY = 2
____exports.HopperVariant[____exports.HopperVariant.EGGY] = "EGGY"
____exports.HopperVariant.TAINTED_HOPPER = 3
____exports.HopperVariant[____exports.HopperVariant.TAINTED_HOPPER] = "TAINTED_HOPPER"
--- For `EntityType.BOIL` (30)
____exports.BoilVariant = {}
____exports.BoilVariant.BOIL = 0
____exports.BoilVariant[____exports.BoilVariant.BOIL] = "BOIL"
____exports.BoilVariant.GUT = 1
____exports.BoilVariant[____exports.BoilVariant.GUT] = "GUT"
____exports.BoilVariant.SACK = 2
____exports.BoilVariant[____exports.BoilVariant.SACK] = "SACK"
--- For `EntityType.SPITTY` (31)
____exports.SpittyVariant = {}
____exports.SpittyVariant.SPITTY = 0
____exports.SpittyVariant[____exports.SpittyVariant.SPITTY] = "SPITTY"
____exports.SpittyVariant.TAINTED_SPITTY = 1
____exports.SpittyVariant[____exports.SpittyVariant.TAINTED_SPITTY] = "TAINTED_SPITTY"
--- For `EntityType.FIREPLACE` (33)
____exports.FireplaceVariant = {}
____exports.FireplaceVariant.NORMAL = 0
____exports.FireplaceVariant[____exports.FireplaceVariant.NORMAL] = "NORMAL"
____exports.FireplaceVariant.RED = 1
____exports.FireplaceVariant[____exports.FireplaceVariant.RED] = "RED"
____exports.FireplaceVariant.BLUE = 2
____exports.FireplaceVariant[____exports.FireplaceVariant.BLUE] = "BLUE"
____exports.FireplaceVariant.PURPLE = 3
____exports.FireplaceVariant[____exports.FireplaceVariant.PURPLE] = "PURPLE"
____exports.FireplaceVariant.WHITE = 4
____exports.FireplaceVariant[____exports.FireplaceVariant.WHITE] = "WHITE"
____exports.FireplaceVariant.MOVEABLE = 10
____exports.FireplaceVariant[____exports.FireplaceVariant.MOVEABLE] = "MOVEABLE"
____exports.FireplaceVariant.COAL = 11
____exports.FireplaceVariant[____exports.FireplaceVariant.COAL] = "COAL"
____exports.FireplaceVariant.MOVEABLE_BLUE = 12
____exports.FireplaceVariant[____exports.FireplaceVariant.MOVEABLE_BLUE] = "MOVEABLE_BLUE"
____exports.FireplaceVariant.MOVEABLE_PURPLE = 13
____exports.FireplaceVariant[____exports.FireplaceVariant.MOVEABLE_PURPLE] = "MOVEABLE_PURPLE"
--- For `EntityType.LEAPER` (34)
____exports.LeaperVariant = {}
____exports.LeaperVariant.LEAPER = 0
____exports.LeaperVariant[____exports.LeaperVariant.LEAPER] = "LEAPER"
____exports.LeaperVariant.STICKY_LEAPER = 1
____exports.LeaperVariant[____exports.LeaperVariant.STICKY_LEAPER] = "STICKY_LEAPER"
--- For `EntityType.MR_MAW` (35)
____exports.MrMawVariant = {}
____exports.MrMawVariant.MR_MAW = 0
____exports.MrMawVariant[____exports.MrMawVariant.MR_MAW] = "MR_MAW"
____exports.MrMawVariant.MR_MAW_HEAD = 1
____exports.MrMawVariant[____exports.MrMawVariant.MR_MAW_HEAD] = "MR_MAW_HEAD"
____exports.MrMawVariant.MR_RED_MAW = 2
____exports.MrMawVariant[____exports.MrMawVariant.MR_RED_MAW] = "MR_RED_MAW"
____exports.MrMawVariant.MR_RED_MAW_HEAD = 3
____exports.MrMawVariant[____exports.MrMawVariant.MR_RED_MAW_HEAD] = "MR_RED_MAW_HEAD"
____exports.MrMawVariant.MR_MAW_NECK = 10
____exports.MrMawVariant[____exports.MrMawVariant.MR_MAW_NECK] = "MR_MAW_NECK"
--- For `EntityType.BABY` (38)
____exports.BabyVariant = {}
____exports.BabyVariant.BABY = 0
____exports.BabyVariant[____exports.BabyVariant.BABY] = "BABY"
____exports.BabyVariant.ANGELIC_BABY = 1
____exports.BabyVariant[____exports.BabyVariant.ANGELIC_BABY] = "ANGELIC_BABY"
____exports.BabyVariant.ULTRA_PRIDE_BABY = 2
____exports.BabyVariant[____exports.BabyVariant.ULTRA_PRIDE_BABY] = "ULTRA_PRIDE_BABY"
____exports.BabyVariant.WRINKLY_BABY = 3
____exports.BabyVariant[____exports.BabyVariant.WRINKLY_BABY] = "WRINKLY_BABY"
--- For `EntityType.VIS` (39)
____exports.VisVariant = {}
____exports.VisVariant.VIS = 0
____exports.VisVariant[____exports.VisVariant.VIS] = "VIS"
____exports.VisVariant.DOUBLE_VIS = 1
____exports.VisVariant[____exports.VisVariant.DOUBLE_VIS] = "DOUBLE_VIS"
____exports.VisVariant.CHUBBER = 2
____exports.VisVariant[____exports.VisVariant.CHUBBER] = "CHUBBER"
____exports.VisVariant.SCARRED_DOUBLE_VIS = 3
____exports.VisVariant[____exports.VisVariant.SCARRED_DOUBLE_VIS] = "SCARRED_DOUBLE_VIS"
____exports.VisVariant.CHUBBER_PROJECTILE = 22
____exports.VisVariant[____exports.VisVariant.CHUBBER_PROJECTILE] = "CHUBBER_PROJECTILE"
--- For `EntityType.GUTS` (40)
____exports.GutsVariant = {}
____exports.GutsVariant.GUTS = 0
____exports.GutsVariant[____exports.GutsVariant.GUTS] = "GUTS"
____exports.GutsVariant.SCARRED_GUTS = 1
____exports.GutsVariant[____exports.GutsVariant.SCARRED_GUTS] = "SCARRED_GUTS"
____exports.GutsVariant.SLOG = 2
____exports.GutsVariant[____exports.GutsVariant.SLOG] = "SLOG"
--- For `EntityType.KNIGHT` (41)
____exports.KnightVariant = {}
____exports.KnightVariant.KNIGHT = 0
____exports.KnightVariant[____exports.KnightVariant.KNIGHT] = "KNIGHT"
____exports.KnightVariant.SELFLESS_KNIGHT = 1
____exports.KnightVariant[____exports.KnightVariant.SELFLESS_KNIGHT] = "SELFLESS_KNIGHT"
____exports.KnightVariant.LOOSE_KNIGHT = 2
____exports.KnightVariant[____exports.KnightVariant.LOOSE_KNIGHT] = "LOOSE_KNIGHT"
____exports.KnightVariant.BRAINLESS_KNIGHT = 3
____exports.KnightVariant[____exports.KnightVariant.BRAINLESS_KNIGHT] = "BRAINLESS_KNIGHT"
____exports.KnightVariant.BLACK_KNIGHT = 4
____exports.KnightVariant[____exports.KnightVariant.BLACK_KNIGHT] = "BLACK_KNIGHT"
--- For `EntityType.GRIMACE` (42)
____exports.GrimaceVariant = {}
____exports.GrimaceVariant.STONE_GRIMACE = 0
____exports.GrimaceVariant[____exports.GrimaceVariant.STONE_GRIMACE] = "STONE_GRIMACE"
____exports.GrimaceVariant.VOMIT_GRIMACE = 1
____exports.GrimaceVariant[____exports.GrimaceVariant.VOMIT_GRIMACE] = "VOMIT_GRIMACE"
____exports.GrimaceVariant.TRIPLE_GRIMACE = 2
____exports.GrimaceVariant[____exports.GrimaceVariant.TRIPLE_GRIMACE] = "TRIPLE_GRIMACE"
--- For `EntityType.MONSTRO_2` (43)
____exports.Monstro2Variant = {}
____exports.Monstro2Variant.MONSTRO_2 = 0
____exports.Monstro2Variant[____exports.Monstro2Variant.MONSTRO_2] = "MONSTRO_2"
____exports.Monstro2Variant.GISH = 1
____exports.Monstro2Variant[____exports.Monstro2Variant.GISH] = "GISH"
--- For `EntityType.POKY` (44)
____exports.PokyVariant = {}
____exports.PokyVariant.POKY = 0
____exports.PokyVariant[____exports.PokyVariant.POKY] = "POKY"
____exports.PokyVariant.SLIDE = 1
____exports.PokyVariant[____exports.PokyVariant.SLIDE] = "SLIDE"
--- For `EntityType.MOM` (45)
____exports.MomVariant = {}
____exports.MomVariant.MOM = 0
____exports.MomVariant[____exports.MomVariant.MOM] = "MOM"
____exports.MomVariant.STOMP = 10
____exports.MomVariant[____exports.MomVariant.STOMP] = "STOMP"
--- For `EntityType.SLOTH` (46)
____exports.SlothVariant = {}
____exports.SlothVariant.SLOTH = 0
____exports.SlothVariant[____exports.SlothVariant.SLOTH] = "SLOTH"
____exports.SlothVariant.SUPER_SLOTH = 1
____exports.SlothVariant[____exports.SlothVariant.SUPER_SLOTH] = "SUPER_SLOTH"
____exports.SlothVariant.ULTRA_PRIDE = 2
____exports.SlothVariant[____exports.SlothVariant.ULTRA_PRIDE] = "ULTRA_PRIDE"
--- For `EntityType.LUST` (47)
____exports.LustVariant = {}
____exports.LustVariant.LUST = 0
____exports.LustVariant[____exports.LustVariant.LUST] = "LUST"
____exports.LustVariant.SUPER_LUST = 1
____exports.LustVariant[____exports.LustVariant.SUPER_LUST] = "SUPER_LUST"
--- For `EntityType.WRATH` (48)
____exports.WrathVariant = {}
____exports.WrathVariant.WRATH = 0
____exports.WrathVariant[____exports.WrathVariant.WRATH] = "WRATH"
____exports.WrathVariant.SUPER_WRATH = 1
____exports.WrathVariant[____exports.WrathVariant.SUPER_WRATH] = "SUPER_WRATH"
--- For `EntityType.GLUTTONY` (49)
____exports.GluttonyVariant = {}
____exports.GluttonyVariant.GLUTTONY = 0
____exports.GluttonyVariant[____exports.GluttonyVariant.GLUTTONY] = "GLUTTONY"
____exports.GluttonyVariant.SUPER_GLUTTONY = 1
____exports.GluttonyVariant[____exports.GluttonyVariant.SUPER_GLUTTONY] = "SUPER_GLUTTONY"
--- For `EntityType.GREED` (50)
____exports.GreedVariant = {}
____exports.GreedVariant.GREED = 0
____exports.GreedVariant[____exports.GreedVariant.GREED] = "GREED"
____exports.GreedVariant.SUPER_GREED = 1
____exports.GreedVariant[____exports.GreedVariant.SUPER_GREED] = "SUPER_GREED"
--- For `EntityType.ENVY` (51)
____exports.EnvyVariant = {}
____exports.EnvyVariant.ENVY = 0
____exports.EnvyVariant[____exports.EnvyVariant.ENVY] = "ENVY"
____exports.EnvyVariant.SUPER_ENVY = 1
____exports.EnvyVariant[____exports.EnvyVariant.SUPER_ENVY] = "SUPER_ENVY"
____exports.EnvyVariant.ENVY_BIG = 10
____exports.EnvyVariant[____exports.EnvyVariant.ENVY_BIG] = "ENVY_BIG"
____exports.EnvyVariant.SUPER_ENVY_BIG = 11
____exports.EnvyVariant[____exports.EnvyVariant.SUPER_ENVY_BIG] = "SUPER_ENVY_BIG"
____exports.EnvyVariant.ENVY_MEDIUM = 20
____exports.EnvyVariant[____exports.EnvyVariant.ENVY_MEDIUM] = "ENVY_MEDIUM"
____exports.EnvyVariant.SUPER_ENVY_MEDIUM = 21
____exports.EnvyVariant[____exports.EnvyVariant.SUPER_ENVY_MEDIUM] = "SUPER_ENVY_MEDIUM"
____exports.EnvyVariant.ENVY_SMALL = 30
____exports.EnvyVariant[____exports.EnvyVariant.ENVY_SMALL] = "ENVY_SMALL"
____exports.EnvyVariant.SUPER_ENVY_SMALL = 31
____exports.EnvyVariant[____exports.EnvyVariant.SUPER_ENVY_SMALL] = "SUPER_ENVY_SMALL"
--- For `EntityType.PRIDE` (52)
____exports.PrideVariant = {}
____exports.PrideVariant.PRIDE = 0
____exports.PrideVariant[____exports.PrideVariant.PRIDE] = "PRIDE"
____exports.PrideVariant.SUPER_PRIDE = 1
____exports.PrideVariant[____exports.PrideVariant.SUPER_PRIDE] = "SUPER_PRIDE"
--- For `EntityType.DOPLE` (53)
____exports.DopleVariant = {}
____exports.DopleVariant.DOPLE = 0
____exports.DopleVariant[____exports.DopleVariant.DOPLE] = "DOPLE"
____exports.DopleVariant.EVIL_TWIN = 1
____exports.DopleVariant[____exports.DopleVariant.EVIL_TWIN] = "EVIL_TWIN"
--- For `EntityType.LEECH` (55)
____exports.LeechVariant = {}
____exports.LeechVariant.LEECH = 0
____exports.LeechVariant[____exports.LeechVariant.LEECH] = "LEECH"
____exports.LeechVariant.KAMIKAZE_LEECH = 1
____exports.LeechVariant[____exports.LeechVariant.KAMIKAZE_LEECH] = "KAMIKAZE_LEECH"
____exports.LeechVariant.HOLY_LEECH = 2
____exports.LeechVariant[____exports.LeechVariant.HOLY_LEECH] = "HOLY_LEECH"
--- For `EntityType.MEMBRAIN` (57)
____exports.MemBrainVariant = {}
____exports.MemBrainVariant.MEMBRAIN = 0
____exports.MemBrainVariant[____exports.MemBrainVariant.MEMBRAIN] = "MEMBRAIN"
____exports.MemBrainVariant.MAMA_GUTS = 1
____exports.MemBrainVariant[____exports.MemBrainVariant.MAMA_GUTS] = "MAMA_GUTS"
____exports.MemBrainVariant.DEAD_MEAT = 2
____exports.MemBrainVariant[____exports.MemBrainVariant.DEAD_MEAT] = "DEAD_MEAT"
--- For `EntityType.PARA_BITE` (58)
____exports.ParaBiteVariant = {}
____exports.ParaBiteVariant.PARA_BITE = 0
____exports.ParaBiteVariant[____exports.ParaBiteVariant.PARA_BITE] = "PARA_BITE"
____exports.ParaBiteVariant.SCARRED_PARA_BITE = 1
____exports.ParaBiteVariant[____exports.ParaBiteVariant.SCARRED_PARA_BITE] = "SCARRED_PARA_BITE"
--- For `EntityType.EYE` (60)
____exports.EyeVariant = {}
____exports.EyeVariant.EYE = 0
____exports.EyeVariant[____exports.EyeVariant.EYE] = "EYE"
____exports.EyeVariant.BLOODSHOT_EYE = 1
____exports.EyeVariant[____exports.EyeVariant.BLOODSHOT_EYE] = "BLOODSHOT_EYE"
____exports.EyeVariant.HOLY_EYE = 2
____exports.EyeVariant[____exports.EyeVariant.HOLY_EYE] = "HOLY_EYE"
--- For `EntityType.SUCKER` (61)
____exports.SuckerVariant = {}
____exports.SuckerVariant.SUCKER = 0
____exports.SuckerVariant[____exports.SuckerVariant.SUCKER] = "SUCKER"
____exports.SuckerVariant.SPIT = 1
____exports.SuckerVariant[____exports.SuckerVariant.SPIT] = "SPIT"
____exports.SuckerVariant.SOUL_SUCKER = 2
____exports.SuckerVariant[____exports.SuckerVariant.SOUL_SUCKER] = "SOUL_SUCKER"
____exports.SuckerVariant.INK = 3
____exports.SuckerVariant[____exports.SuckerVariant.INK] = "INK"
____exports.SuckerVariant.MAMA_FLY = 4
____exports.SuckerVariant[____exports.SuckerVariant.MAMA_FLY] = "MAMA_FLY"
____exports.SuckerVariant.BULB = 5
____exports.SuckerVariant[____exports.SuckerVariant.BULB] = "BULB"
____exports.SuckerVariant.BLOOD_FLY = 6
____exports.SuckerVariant[____exports.SuckerVariant.BLOOD_FLY] = "BLOOD_FLY"
____exports.SuckerVariant.TAINTED_SUCKER = 7
____exports.SuckerVariant[____exports.SuckerVariant.TAINTED_SUCKER] = "TAINTED_SUCKER"
--- For `EntityType.PIN` (62)
____exports.PinVariant = {}
____exports.PinVariant.PIN = 0
____exports.PinVariant[____exports.PinVariant.PIN] = "PIN"
____exports.PinVariant.SCOLEX = 1
____exports.PinVariant[____exports.PinVariant.SCOLEX] = "SCOLEX"
____exports.PinVariant.FRAIL = 2
____exports.PinVariant[____exports.PinVariant.FRAIL] = "FRAIL"
____exports.PinVariant.WORMWOOD = 3
____exports.PinVariant[____exports.PinVariant.WORMWOOD] = "WORMWOOD"
--- For `EntityType.WAR` (65)
____exports.WarVariant = {}
____exports.WarVariant.WAR = 0
____exports.WarVariant[____exports.WarVariant.WAR] = "WAR"
____exports.WarVariant.CONQUEST = 1
____exports.WarVariant[____exports.WarVariant.CONQUEST] = "CONQUEST"
____exports.WarVariant.WAR_WITHOUT_HORSE = 2
____exports.WarVariant[____exports.WarVariant.WAR_WITHOUT_HORSE] = "WAR_WITHOUT_HORSE"
--- For `EntityType.DEATH` (66)
____exports.DeathVariant = {}
____exports.DeathVariant.DEATH = 0
____exports.DeathVariant[____exports.DeathVariant.DEATH] = "DEATH"
____exports.DeathVariant.DEATH_SCYTHE = 10
____exports.DeathVariant[____exports.DeathVariant.DEATH_SCYTHE] = "DEATH_SCYTHE"
____exports.DeathVariant.DEATH_HORSE = 20
____exports.DeathVariant[____exports.DeathVariant.DEATH_HORSE] = "DEATH_HORSE"
____exports.DeathVariant.DEATH_WITHOUT_HORSE = 30
____exports.DeathVariant[____exports.DeathVariant.DEATH_WITHOUT_HORSE] = "DEATH_WITHOUT_HORSE"
--- For `EntityType.DUKE` (67)
____exports.DukeVariant = {}
____exports.DukeVariant.DUKE_OF_FLIES = 0
____exports.DukeVariant[____exports.DukeVariant.DUKE_OF_FLIES] = "DUKE_OF_FLIES"
____exports.DukeVariant.THE_HUSK = 1
____exports.DukeVariant[____exports.DukeVariant.THE_HUSK] = "THE_HUSK"
--- For `EntityType.PEEP` (68)
____exports.PeepVariant = {}
____exports.PeepVariant.PEEP = 0
____exports.PeepVariant[____exports.PeepVariant.PEEP] = "PEEP"
____exports.PeepVariant.BLOAT = 1
____exports.PeepVariant[____exports.PeepVariant.BLOAT] = "BLOAT"
____exports.PeepVariant.PEEP_EYE = 10
____exports.PeepVariant[____exports.PeepVariant.PEEP_EYE] = "PEEP_EYE"
____exports.PeepVariant.BLOAT_EYE = 11
____exports.PeepVariant[____exports.PeepVariant.BLOAT_EYE] = "BLOAT_EYE"
--- For `EntityType.LOKI` (69)
____exports.LokiVariant = {}
____exports.LokiVariant.LOKI = 0
____exports.LokiVariant[____exports.LokiVariant.LOKI] = "LOKI"
____exports.LokiVariant.LOKII = 1
____exports.LokiVariant[____exports.LokiVariant.LOKII] = "LOKII"
--- For:
-- - `EntityType.FISTULA_BIG` (71)
-- - `EntityType.FISTULA_MEDIUM` (72)
-- - `EntityType.FISTULA_SMALL` (73)
____exports.FistulaVariant = {}
____exports.FistulaVariant.FISTULA = 0
____exports.FistulaVariant[____exports.FistulaVariant.FISTULA] = "FISTULA"
____exports.FistulaVariant.TERATOMA = 1
____exports.FistulaVariant[____exports.FistulaVariant.TERATOMA] = "TERATOMA"
--- For `EntityType.MOMS_HEART` (78)
____exports.MomsHeartVariant = {}
____exports.MomsHeartVariant.MOMS_HEART = 0
____exports.MomsHeartVariant[____exports.MomsHeartVariant.MOMS_HEART] = "MOMS_HEART"
____exports.MomsHeartVariant.IT_LIVES = 1
____exports.MomsHeartVariant[____exports.MomsHeartVariant.IT_LIVES] = "IT_LIVES"
____exports.MomsHeartVariant.MOMS_GUTS = 2
____exports.MomsHeartVariant[____exports.MomsHeartVariant.MOMS_GUTS] = "MOMS_GUTS"
--- For `EntityType.GEMINI` (79)
____exports.GeminiVariant = {}
____exports.GeminiVariant.GEMINI = 0
____exports.GeminiVariant[____exports.GeminiVariant.GEMINI] = "GEMINI"
____exports.GeminiVariant.STEVEN = 1
____exports.GeminiVariant[____exports.GeminiVariant.STEVEN] = "STEVEN"
____exports.GeminiVariant.BLIGHTED_OVUM = 2
____exports.GeminiVariant[____exports.GeminiVariant.BLIGHTED_OVUM] = "BLIGHTED_OVUM"
____exports.GeminiVariant.GEMINI_BABY = 10
____exports.GeminiVariant[____exports.GeminiVariant.GEMINI_BABY] = "GEMINI_BABY"
____exports.GeminiVariant.STEVEN_BABY = 11
____exports.GeminiVariant[____exports.GeminiVariant.STEVEN_BABY] = "STEVEN_BABY"
____exports.GeminiVariant.BLIGHTED_OVUM_BABY = 12
____exports.GeminiVariant[____exports.GeminiVariant.BLIGHTED_OVUM_BABY] = "BLIGHTED_OVUM_BABY"
____exports.GeminiVariant.UMBILICAL_CORD = 20
____exports.GeminiVariant[____exports.GeminiVariant.UMBILICAL_CORD] = "UMBILICAL_CORD"
--- For `EntityType.FALLEN` (81)
____exports.FallenVariant = {}
____exports.FallenVariant.FALLEN = 0
____exports.FallenVariant[____exports.FallenVariant.FALLEN] = "FALLEN"
____exports.FallenVariant.KRAMPUS = 1
____exports.FallenVariant[____exports.FallenVariant.KRAMPUS] = "KRAMPUS"
--- For `EntityType.SATAN` (84)
____exports.SatanVariant = {}
____exports.SatanVariant.SATAN = 0
____exports.SatanVariant[____exports.SatanVariant.SATAN] = "SATAN"
____exports.SatanVariant.STOMP = 10
____exports.SatanVariant[____exports.SatanVariant.STOMP] = "STOMP"
--- For `EntityType.GURGLE` (87)
____exports.GurgleVariant = {}
____exports.GurgleVariant.GURGLE = 0
____exports.GurgleVariant[____exports.GurgleVariant.GURGLE] = "GURGLE"
____exports.GurgleVariant.CRACKLE = 1
____exports.GurgleVariant[____exports.GurgleVariant.CRACKLE] = "CRACKLE"
--- For `EntityType.WALKING_BOIL` (88)
____exports.WalkingBoilVariant = {}
____exports.WalkingBoilVariant.WALKING_BOIL = 0
____exports.WalkingBoilVariant[____exports.WalkingBoilVariant.WALKING_BOIL] = "WALKING_BOIL"
____exports.WalkingBoilVariant.WALKING_GUT = 1
____exports.WalkingBoilVariant[____exports.WalkingBoilVariant.WALKING_GUT] = "WALKING_GUT"
____exports.WalkingBoilVariant.WALKING_SACK = 2
____exports.WalkingBoilVariant[____exports.WalkingBoilVariant.WALKING_SACK] = "WALKING_SACK"
--- For `EntityType.HEART` (92)
____exports.HeartVariant = {}
____exports.HeartVariant.HEART = 0
____exports.HeartVariant[____exports.HeartVariant.HEART] = "HEART"
____exports.HeartVariant.HALF_HEART = 1
____exports.HeartVariant[____exports.HeartVariant.HALF_HEART] = "HALF_HEART"
--- For `EntityType.MASK` (93)
____exports.MaskVariant = {}
____exports.MaskVariant.MASK = 0
____exports.MaskVariant[____exports.MaskVariant.MASK] = "MASK"
____exports.MaskVariant.MASK_2 = 1
____exports.MaskVariant[____exports.MaskVariant.MASK_2] = "MASK_2"
--- For `EntityType.WIDOW` (100)
____exports.WidowVariant = {}
____exports.WidowVariant.WIDOW = 0
____exports.WidowVariant[____exports.WidowVariant.WIDOW] = "WIDOW"
____exports.WidowVariant.THE_WRETCHED = 1
____exports.WidowVariant[____exports.WidowVariant.THE_WRETCHED] = "THE_WRETCHED"
--- For `EntityType.DADDY_LONG_LEGS` (101)
____exports.DaddyLongLegsVariant = {}
____exports.DaddyLongLegsVariant.DADDY_LONG_LEGS = 0
____exports.DaddyLongLegsVariant[____exports.DaddyLongLegsVariant.DADDY_LONG_LEGS] = "DADDY_LONG_LEGS"
____exports.DaddyLongLegsVariant.TRIACHNID = 1
____exports.DaddyLongLegsVariant[____exports.DaddyLongLegsVariant.TRIACHNID] = "TRIACHNID"
--- For `EntityType.ISAAC` (102)
____exports.IsaacVariant = {}
____exports.IsaacVariant.ISAAC = 0
____exports.IsaacVariant[____exports.IsaacVariant.ISAAC] = "ISAAC"
____exports.IsaacVariant.BLUE_BABY = 1
____exports.IsaacVariant[____exports.IsaacVariant.BLUE_BABY] = "BLUE_BABY"
____exports.IsaacVariant.BLUE_BABY_HUSH = 2
____exports.IsaacVariant[____exports.IsaacVariant.BLUE_BABY_HUSH] = "BLUE_BABY_HUSH"
--- For `EntityType.CONSTANT_STONE_SHOOTER` (202)
____exports.ConstantStoneShooterVariant = {}
____exports.ConstantStoneShooterVariant.CONSTANT_STONE_SHOOTER = 0
____exports.ConstantStoneShooterVariant[____exports.ConstantStoneShooterVariant.CONSTANT_STONE_SHOOTER] = "CONSTANT_STONE_SHOOTER"
____exports.ConstantStoneShooterVariant.CROSS_STONE_SHOOTER = 10
____exports.ConstantStoneShooterVariant[____exports.ConstantStoneShooterVariant.CROSS_STONE_SHOOTER] = "CROSS_STONE_SHOOTER"
____exports.ConstantStoneShooterVariant.CROSS_STONE_SHOOTER_ALWAYS_ON = 11
____exports.ConstantStoneShooterVariant[____exports.ConstantStoneShooterVariant.CROSS_STONE_SHOOTER_ALWAYS_ON] = "CROSS_STONE_SHOOTER_ALWAYS_ON"
--- For `EntityType.BABY_LONG_LEGS` (206)
____exports.BabyLongLegsVariant = {}
____exports.BabyLongLegsVariant.BABY_LONG_LEGS = 0
____exports.BabyLongLegsVariant[____exports.BabyLongLegsVariant.BABY_LONG_LEGS] = "BABY_LONG_LEGS"
____exports.BabyLongLegsVariant.SMALL_BABY_LONG_LEGS = 1
____exports.BabyLongLegsVariant[____exports.BabyLongLegsVariant.SMALL_BABY_LONG_LEGS] = "SMALL_BABY_LONG_LEGS"
--- For `EntityType.CRAZY_LONG_LEGS` (207)
____exports.CrazyLongLegsVariant = {}
____exports.CrazyLongLegsVariant.CRAZY_LONG_LEGS = 0
____exports.CrazyLongLegsVariant[____exports.CrazyLongLegsVariant.CRAZY_LONG_LEGS] = "CRAZY_LONG_LEGS"
____exports.CrazyLongLegsVariant.SMALL_CRAZY_LONG_LEGS = 1
____exports.CrazyLongLegsVariant[____exports.CrazyLongLegsVariant.SMALL_CRAZY_LONG_LEGS] = "SMALL_CRAZY_LONG_LEGS"
--- For `EntityType.FATTY` (208)
____exports.FattyVariant = {}
____exports.FattyVariant.FATTY = 0
____exports.FattyVariant[____exports.FattyVariant.FATTY] = "FATTY"
____exports.FattyVariant.PALE_FATTY = 1
____exports.FattyVariant[____exports.FattyVariant.PALE_FATTY] = "PALE_FATTY"
____exports.FattyVariant.FLAMING_FATTY = 2
____exports.FattyVariant[____exports.FattyVariant.FLAMING_FATTY] = "FLAMING_FATTY"
--- For `EntityType.DEATHS_HEAD` (212)
____exports.DeathsHeadVariant = {}
____exports.DeathsHeadVariant.DEATHS_HEAD = 0
____exports.DeathsHeadVariant[____exports.DeathsHeadVariant.DEATHS_HEAD] = "DEATHS_HEAD"
____exports.DeathsHeadVariant.DANK_DEATHS_HEAD = 1
____exports.DeathsHeadVariant[____exports.DeathsHeadVariant.DANK_DEATHS_HEAD] = "DANK_DEATHS_HEAD"
____exports.DeathsHeadVariant.CURSED_DEATHS_HEAD = 2
____exports.DeathsHeadVariant[____exports.DeathsHeadVariant.CURSED_DEATHS_HEAD] = "CURSED_DEATHS_HEAD"
____exports.DeathsHeadVariant.BRIMSTONE_DEATHS_HEAD = 3
____exports.DeathsHeadVariant[____exports.DeathsHeadVariant.BRIMSTONE_DEATHS_HEAD] = "BRIMSTONE_DEATHS_HEAD"
____exports.DeathsHeadVariant.RED_SKULL = 4
____exports.DeathsHeadVariant[____exports.DeathsHeadVariant.RED_SKULL] = "RED_SKULL"
--- For `EntityType.SWINGER` (216)
____exports.SwingerVariant = {}
____exports.SwingerVariant.SWINGER = 0
____exports.SwingerVariant[____exports.SwingerVariant.SWINGER] = "SWINGER"
____exports.SwingerVariant.SWINGER_HEAD = 1
____exports.SwingerVariant[____exports.SwingerVariant.SWINGER_HEAD] = "SWINGER_HEAD"
____exports.SwingerVariant.SWINGER_NECK = 2
____exports.SwingerVariant[____exports.SwingerVariant.SWINGER_NECK] = "SWINGER_NECK"
--- For `EntityType.DIP` (217)
____exports.DipVariant = {}
____exports.DipVariant.DIP = 0
____exports.DipVariant[____exports.DipVariant.DIP] = "DIP"
____exports.DipVariant.CORN = 1
____exports.DipVariant[____exports.DipVariant.CORN] = "CORN"
____exports.DipVariant.BROWNIE_CORN = 2
____exports.DipVariant[____exports.DipVariant.BROWNIE_CORN] = "BROWNIE_CORN"
____exports.DipVariant.BIG_CORN = 3
____exports.DipVariant[____exports.DipVariant.BIG_CORN] = "BIG_CORN"
--- For `EntityType.SQUIRT` (220)
____exports.SquirtVariant = {}
____exports.SquirtVariant.SQUIRT = 0
____exports.SquirtVariant[____exports.SquirtVariant.SQUIRT] = "SQUIRT"
____exports.SquirtVariant.DANK_SQUIRT = 1
____exports.SquirtVariant[____exports.SquirtVariant.DANK_SQUIRT] = "DANK_SQUIRT"
--- For `EntityType.SKINNY` (226)
____exports.SkinnyVariant = {}
____exports.SkinnyVariant.SKINNY = 0
____exports.SkinnyVariant[____exports.SkinnyVariant.SKINNY] = "SKINNY"
____exports.SkinnyVariant.ROTTY = 1
____exports.SkinnyVariant[____exports.SkinnyVariant.ROTTY] = "ROTTY"
____exports.SkinnyVariant.CRISPY = 2
____exports.SkinnyVariant[____exports.SkinnyVariant.CRISPY] = "CRISPY"
--- For `EntityType.BONY` (227)
____exports.BonyVariant = {}
____exports.BonyVariant.BONY = 0
____exports.BonyVariant[____exports.BonyVariant.BONY] = "BONY"
____exports.BonyVariant.HOLY_BONY = 1
____exports.BonyVariant[____exports.BonyVariant.HOLY_BONY] = "HOLY_BONY"
--- For `EntityType.HOMUNCULUS` (228)
____exports.HomunculusVariant = {}
____exports.HomunculusVariant.HOMUNCULUS = 0
____exports.HomunculusVariant[____exports.HomunculusVariant.HOMUNCULUS] = "HOMUNCULUS"
____exports.HomunculusVariant.HOMUNCULUS_CORD = 10
____exports.HomunculusVariant[____exports.HomunculusVariant.HOMUNCULUS_CORD] = "HOMUNCULUS_CORD"
--- For `EntityType.TUMOR` (229)
____exports.TumorVariant = {}
____exports.TumorVariant.TUMOR = 0
____exports.TumorVariant[____exports.TumorVariant.TUMOR] = "TUMOR"
____exports.TumorVariant.PLANETOID = 1
____exports.TumorVariant[____exports.TumorVariant.PLANETOID] = "PLANETOID"
--- For `EntityType.NERVE_ENDING` (231)
____exports.NerveEndingVariant = {}
____exports.NerveEndingVariant.NERVE_ENDING = 0
____exports.NerveEndingVariant[____exports.NerveEndingVariant.NERVE_ENDING] = "NERVE_ENDING"
____exports.NerveEndingVariant.NERVE_ENDING_2 = 1
____exports.NerveEndingVariant[____exports.NerveEndingVariant.NERVE_ENDING_2] = "NERVE_ENDING_2"
--- For `EntityType.GURGLING` (237)
____exports.GurglingVariant = {}
____exports.GurglingVariant.GURGLING = 0
____exports.GurglingVariant[____exports.GurglingVariant.GURGLING] = "GURGLING"
____exports.GurglingVariant.GURGLING_BOSS = 1
____exports.GurglingVariant[____exports.GurglingVariant.GURGLING_BOSS] = "GURGLING_BOSS"
____exports.GurglingVariant.TURDLING = 2
____exports.GurglingVariant[____exports.GurglingVariant.TURDLING] = "TURDLING"
--- For `EntityType.GRUB` (239)
____exports.GrubVariant = {}
____exports.GrubVariant.GRUB = 0
____exports.GrubVariant[____exports.GrubVariant.GRUB] = "GRUB"
____exports.GrubVariant.CORPSE_EATER = 1
____exports.GrubVariant[____exports.GrubVariant.CORPSE_EATER] = "CORPSE_EATER"
____exports.GrubVariant.CARRION_RIDER = 2
____exports.GrubVariant[____exports.GrubVariant.CARRION_RIDER] = "CARRION_RIDER"
--- For `EntityType.WALL_CREEP` (240)
____exports.WallCreepVariant = {}
____exports.WallCreepVariant.WALL_CREEP = 0
____exports.WallCreepVariant[____exports.WallCreepVariant.WALL_CREEP] = "WALL_CREEP"
____exports.WallCreepVariant.SOY_CREEP = 1
____exports.WallCreepVariant[____exports.WallCreepVariant.SOY_CREEP] = "SOY_CREEP"
____exports.WallCreepVariant.RAG_CREEP = 2
____exports.WallCreepVariant[____exports.WallCreepVariant.RAG_CREEP] = "RAG_CREEP"
____exports.WallCreepVariant.TAINTED_SOY_CREEP = 3
____exports.WallCreepVariant[____exports.WallCreepVariant.TAINTED_SOY_CREEP] = "TAINTED_SOY_CREEP"
--- For `EntityType.RAGE_CREEP` (241)
____exports.RageCreepVariant = {}
____exports.RageCreepVariant.RAGE_CREEP = 0
____exports.RageCreepVariant[____exports.RageCreepVariant.RAGE_CREEP] = "RAGE_CREEP"
____exports.RageCreepVariant.SPLIT_RAGE_CREEP = 1
____exports.RageCreepVariant[____exports.RageCreepVariant.SPLIT_RAGE_CREEP] = "SPLIT_RAGE_CREEP"
--- For `EntityType.ROUND_WORM` (244)
____exports.RoundWormVariant = {}
____exports.RoundWormVariant.ROUND_WORM = 0
____exports.RoundWormVariant[____exports.RoundWormVariant.ROUND_WORM] = "ROUND_WORM"
____exports.RoundWormVariant.TUBE_WORM = 1
____exports.RoundWormVariant[____exports.RoundWormVariant.TUBE_WORM] = "TUBE_WORM"
____exports.RoundWormVariant.TAINTED_ROUND_WORM = 2
____exports.RoundWormVariant[____exports.RoundWormVariant.TAINTED_ROUND_WORM] = "TAINTED_ROUND_WORM"
____exports.RoundWormVariant.TAINTED_TUBE_WORM = 3
____exports.RoundWormVariant[____exports.RoundWormVariant.TAINTED_TUBE_WORM] = "TAINTED_TUBE_WORM"
--- For `EntityType.POOP` (245)
____exports.PoopEntityVariant = {}
____exports.PoopEntityVariant.NORMAL = 0
____exports.PoopEntityVariant[____exports.PoopEntityVariant.NORMAL] = "NORMAL"
____exports.PoopEntityVariant.GOLDEN = 1
____exports.PoopEntityVariant[____exports.PoopEntityVariant.GOLDEN] = "GOLDEN"
____exports.PoopEntityVariant.STONE = 11
____exports.PoopEntityVariant[____exports.PoopEntityVariant.STONE] = "STONE"
____exports.PoopEntityVariant.CORNY = 12
____exports.PoopEntityVariant[____exports.PoopEntityVariant.CORNY] = "CORNY"
____exports.PoopEntityVariant.BURNING = 13
____exports.PoopEntityVariant[____exports.PoopEntityVariant.BURNING] = "BURNING"
____exports.PoopEntityVariant.STINKY = 14
____exports.PoopEntityVariant[____exports.PoopEntityVariant.STINKY] = "STINKY"
____exports.PoopEntityVariant.BLACK = 15
____exports.PoopEntityVariant[____exports.PoopEntityVariant.BLACK] = "BLACK"
____exports.PoopEntityVariant.HOLY = 16
____exports.PoopEntityVariant[____exports.PoopEntityVariant.HOLY] = "HOLY"
--- For `EntityType.RAGLING` (246)
____exports.RaglingVariant = {}
____exports.RaglingVariant.RAGLING = 0
____exports.RaglingVariant[____exports.RaglingVariant.RAGLING] = "RAGLING"
____exports.RaglingVariant.RAG_MANS_RAGLING = 1
____exports.RaglingVariant[____exports.RaglingVariant.RAG_MANS_RAGLING] = "RAG_MANS_RAGLING"
--- For `EntityType.BEGOTTEN` (251)
____exports.BegottenVariant = {}
____exports.BegottenVariant.BEGOTTEN = 0
____exports.BegottenVariant[____exports.BegottenVariant.BEGOTTEN] = "BEGOTTEN"
____exports.BegottenVariant.BEGOTTEN_CHAIN = 10
____exports.BegottenVariant[____exports.BegottenVariant.BEGOTTEN_CHAIN] = "BEGOTTEN_CHAIN"
--- For `EntityType.CONJOINED_FATTY` (257)
____exports.ConjoinedFattyVariant = {}
____exports.ConjoinedFattyVariant.CONJOINED_FATTY = 0
____exports.ConjoinedFattyVariant[____exports.ConjoinedFattyVariant.CONJOINED_FATTY] = "CONJOINED_FATTY"
____exports.ConjoinedFattyVariant.BLUE_CONJOINED_FATTY = 1
____exports.ConjoinedFattyVariant[____exports.ConjoinedFattyVariant.BLUE_CONJOINED_FATTY] = "BLUE_CONJOINED_FATTY"
--- For `EntityType.THE_HAUNT` (260)
____exports.HauntVariant = {}
____exports.HauntVariant.HAUNT = 0
____exports.HauntVariant[____exports.HauntVariant.HAUNT] = "HAUNT"
____exports.HauntVariant.LIL_HAUNT = 10
____exports.HauntVariant[____exports.HauntVariant.LIL_HAUNT] = "LIL_HAUNT"
--- For `EntityType.DINGLE` (261)
____exports.DingleVariant = {}
____exports.DingleVariant.DINGLE = 0
____exports.DingleVariant[____exports.DingleVariant.DINGLE] = "DINGLE"
____exports.DingleVariant.DANGLE = 1
____exports.DingleVariant[____exports.DingleVariant.DANGLE] = "DANGLE"
--- For `EntityType.MAMA_GURDY` (266)
____exports.MamaGurdyVariant = {}
____exports.MamaGurdyVariant.MAMA_GURDY = 0
____exports.MamaGurdyVariant[____exports.MamaGurdyVariant.MAMA_GURDY] = "MAMA_GURDY"
____exports.MamaGurdyVariant.LEFT_HAND = 1
____exports.MamaGurdyVariant[____exports.MamaGurdyVariant.LEFT_HAND] = "LEFT_HAND"
____exports.MamaGurdyVariant.RIGHT_HAND = 2
____exports.MamaGurdyVariant[____exports.MamaGurdyVariant.RIGHT_HAND] = "RIGHT_HAND"
--- For `EntityType.POLYCEPHALUS` (269)
____exports.PolycephalusVariant = {}
____exports.PolycephalusVariant.POLYCEPHALUS = 0
____exports.PolycephalusVariant[____exports.PolycephalusVariant.POLYCEPHALUS] = "POLYCEPHALUS"
____exports.PolycephalusVariant.THE_PILE = 1
____exports.PolycephalusVariant[____exports.PolycephalusVariant.THE_PILE] = "THE_PILE"
--- For `EntityType.URIEL` (271) and `EntityType.GABRIEL` (272)
____exports.AngelVariant = {}
____exports.AngelVariant.NORMAL = 0
____exports.AngelVariant[____exports.AngelVariant.NORMAL] = "NORMAL"
____exports.AngelVariant.FALLEN = 1
____exports.AngelVariant[____exports.AngelVariant.FALLEN] = "FALLEN"
--- For `EntityType.THE_LAMB` (273)
____exports.LambVariant = {}
____exports.LambVariant.LAMB = 0
____exports.LambVariant[____exports.LambVariant.LAMB] = "LAMB"
____exports.LambVariant.BODY = 10
____exports.LambVariant[____exports.LambVariant.BODY] = "BODY"
--- For `EntityType.MEGA_SATAN` (274) and `EntityType.MEGA_SATAN_2` (275)
____exports.MegaSatanVariant = {}
____exports.MegaSatanVariant.MEGA_SATAN = 0
____exports.MegaSatanVariant[____exports.MegaSatanVariant.MEGA_SATAN] = "MEGA_SATAN"
____exports.MegaSatanVariant.MEGA_SATAN_RIGHT_HAND = 1
____exports.MegaSatanVariant[____exports.MegaSatanVariant.MEGA_SATAN_RIGHT_HAND] = "MEGA_SATAN_RIGHT_HAND"
____exports.MegaSatanVariant.MEGA_SATAN_LEFT_HAND = 2
____exports.MegaSatanVariant[____exports.MegaSatanVariant.MEGA_SATAN_LEFT_HAND] = "MEGA_SATAN_LEFT_HAND"
--- For `EntityType.PITFALL` (291)
____exports.PitfallVariant = {}
____exports.PitfallVariant.PITFALL = 0
____exports.PitfallVariant[____exports.PitfallVariant.PITFALL] = "PITFALL"
____exports.PitfallVariant.SUCTION_PITFALL = 1
____exports.PitfallVariant[____exports.PitfallVariant.SUCTION_PITFALL] = "SUCTION_PITFALL"
____exports.PitfallVariant.TELEPORT_PITFALL = 2
____exports.PitfallVariant[____exports.PitfallVariant.TELEPORT_PITFALL] = "TELEPORT_PITFALL"
--- For `EntityType.MOVABLE_TNT` (292)
____exports.MoveableTNTVariant = {}
____exports.MoveableTNTVariant.MOVEABLE_TNT = 0
____exports.MoveableTNTVariant[____exports.MoveableTNTVariant.MOVEABLE_TNT] = "MOVEABLE_TNT"
____exports.MoveableTNTVariant.MINE_CRAFTER = 1
____exports.MoveableTNTVariant[____exports.MoveableTNTVariant.MINE_CRAFTER] = "MINE_CRAFTER"
--- For `EntityType.ULTRA_COIN` (293)
____exports.UltraCoinVariant = {}
____exports.UltraCoinVariant.SPINNER = 0
____exports.UltraCoinVariant[____exports.UltraCoinVariant.SPINNER] = "SPINNER"
____exports.UltraCoinVariant.KEY = 1
____exports.UltraCoinVariant[____exports.UltraCoinVariant.KEY] = "KEY"
____exports.UltraCoinVariant.BOMB = 2
____exports.UltraCoinVariant[____exports.UltraCoinVariant.BOMB] = "BOMB"
____exports.UltraCoinVariant.HEART = 3
____exports.UltraCoinVariant[____exports.UltraCoinVariant.HEART] = "HEART"
--- For `EntityType.STONEY` (302)
____exports.StoneyVariant = {}
____exports.StoneyVariant.STONEY = 0
____exports.StoneyVariant[____exports.StoneyVariant.STONEY] = "STONEY"
____exports.StoneyVariant.CROSS_STONEY = 10
____exports.StoneyVariant[____exports.StoneyVariant.CROSS_STONEY] = "CROSS_STONEY"
--- For `EntityType.PORTAL` (306)
____exports.PortalVariant = {}
____exports.PortalVariant.PORTAL = 0
____exports.PortalVariant[____exports.PortalVariant.PORTAL] = "PORTAL"
____exports.PortalVariant.LIL_PORTAL = 1
____exports.PortalVariant[____exports.PortalVariant.LIL_PORTAL] = "LIL_PORTAL"
--- For `EntityType.LEPER` (310)
____exports.LeperVariant = {}
____exports.LeperVariant.LEPER = 0
____exports.LeperVariant[____exports.LeperVariant.LEPER] = "LEPER"
____exports.LeperVariant.LEPER_FLESH = 1
____exports.LeperVariant[____exports.LeperVariant.LEPER_FLESH] = "LEPER_FLESH"
--- For `EntityType.MR_MINE` (311)
____exports.MrMineVariant = {}
____exports.MrMineVariant.MR_MINE = 0
____exports.MrMineVariant[____exports.MrMineVariant.MR_MINE] = "MR_MINE"
____exports.MrMineVariant.MR_MINE_NECK = 10
____exports.MrMineVariant[____exports.MrMineVariant.MR_MINE_NECK] = "MR_MINE_NECK"
--- For `EntityType.LITTLE_HORN` (404)
____exports.LittleHornVariant = {}
____exports.LittleHornVariant.LITTLE_HORN = 0
____exports.LittleHornVariant[____exports.LittleHornVariant.LITTLE_HORN] = "LITTLE_HORN"
____exports.LittleHornVariant.DARK_BALL = 1
____exports.LittleHornVariant[____exports.LittleHornVariant.DARK_BALL] = "DARK_BALL"
--- For `EntityType.RAG_MAN` (405)
____exports.RagManVariant = {}
____exports.RagManVariant.RAG_MAN = 0
____exports.RagManVariant[____exports.RagManVariant.RAG_MAN] = "RAG_MAN"
____exports.RagManVariant.RAG_MAN_HEAD = 1
____exports.RagManVariant[____exports.RagManVariant.RAG_MAN_HEAD] = "RAG_MAN_HEAD"
--- For `EntityType.ULTRA_GREED` (406)
____exports.UltraGreedVariant = {}
____exports.UltraGreedVariant.ULTRA_GREED = 0
____exports.UltraGreedVariant[____exports.UltraGreedVariant.ULTRA_GREED] = "ULTRA_GREED"
____exports.UltraGreedVariant.ULTRA_GREEDIER = 1
____exports.UltraGreedVariant[____exports.UltraGreedVariant.ULTRA_GREEDIER] = "ULTRA_GREEDIER"
--- For `EntityType.RAG_MEGA` (409)
____exports.RagMegaVariant = {}
____exports.RagMegaVariant.RAG_MEGA = 0
____exports.RagMegaVariant[____exports.RagMegaVariant.RAG_MEGA] = "RAG_MEGA"
____exports.RagMegaVariant.PURPLE_BALL = 1
____exports.RagMegaVariant[____exports.RagMegaVariant.PURPLE_BALL] = "PURPLE_BALL"
____exports.RagMegaVariant.REBIRTH_PILLAR = 2
____exports.RagMegaVariant[____exports.RagMegaVariant.REBIRTH_PILLAR] = "REBIRTH_PILLAR"
--- For `EntityType.BIG_HORN` (411)
____exports.BigHornVariant = {}
____exports.BigHornVariant.BIG_HORN = 0
____exports.BigHornVariant[____exports.BigHornVariant.BIG_HORN] = "BIG_HORN"
____exports.BigHornVariant.SMALL_HOLE = 1
____exports.BigHornVariant[____exports.BigHornVariant.SMALL_HOLE] = "SMALL_HOLE"
____exports.BigHornVariant.BIG_HOLE = 2
____exports.BigHornVariant[____exports.BigHornVariant.BIG_HOLE] = "BIG_HOLE"
--- For `EntityType.BLOOD_PUPPY` (802)
____exports.BloodPuppyVariant = {}
____exports.BloodPuppyVariant.SMALL = 0
____exports.BloodPuppyVariant[____exports.BloodPuppyVariant.SMALL] = "SMALL"
____exports.BloodPuppyVariant.LARGE = 1
____exports.BloodPuppyVariant[____exports.BloodPuppyVariant.LARGE] = "LARGE"
--- For `EntityType.SUB_HORF` (812)
____exports.SubHorfVariant = {}
____exports.SubHorfVariant.SUB_HORF = 0
____exports.SubHorfVariant[____exports.SubHorfVariant.SUB_HORF] = "SUB_HORF"
____exports.SubHorfVariant.TAINTED_SUB_HORF = 1
____exports.SubHorfVariant[____exports.SubHorfVariant.TAINTED_SUB_HORF] = "TAINTED_SUB_HORF"
--- For `EntityType.POLTY` (816)
____exports.PoltyVariant = {}
____exports.PoltyVariant.POLTY = 0
____exports.PoltyVariant[____exports.PoltyVariant.POLTY] = "POLTY"
____exports.PoltyVariant.KINETI = 1
____exports.PoltyVariant[____exports.PoltyVariant.KINETI] = "KINETI"
--- For `EntityType.PREY` (817)
____exports.PreyVariant = {}
____exports.PreyVariant.PREY = 0
____exports.PreyVariant[____exports.PreyVariant.PREY] = "PREY"
____exports.PreyVariant.MULLIGHOUL = 1
____exports.PreyVariant[____exports.PreyVariant.MULLIGHOUL] = "MULLIGHOUL"
--- For `EntityType.ROCK_SPIDER` (818)
____exports.RockSpiderVariant = {}
____exports.RockSpiderVariant.ROCK_SPIDER = 0
____exports.RockSpiderVariant[____exports.RockSpiderVariant.ROCK_SPIDER] = "ROCK_SPIDER"
____exports.RockSpiderVariant.TINTED_ROCK_SPIDER = 1
____exports.RockSpiderVariant[____exports.RockSpiderVariant.TINTED_ROCK_SPIDER] = "TINTED_ROCK_SPIDER"
____exports.RockSpiderVariant.COAL_SPIDER = 2
____exports.RockSpiderVariant[____exports.RockSpiderVariant.COAL_SPIDER] = "COAL_SPIDER"
--- For `EntityType.FLY_BOMB` (819)
____exports.FlyBombVariant = {}
____exports.FlyBombVariant.FLY_BOMB = 0
____exports.FlyBombVariant[____exports.FlyBombVariant.FLY_BOMB] = "FLY_BOMB"
____exports.FlyBombVariant.ETERNAL_FLY_BOMB = 1
____exports.FlyBombVariant[____exports.FlyBombVariant.ETERNAL_FLY_BOMB] = "ETERNAL_FLY_BOMB"
--- For `EntityType.DANNY` (820)
____exports.DannyVariant = {}
____exports.DannyVariant.DANNY = 0
____exports.DannyVariant[____exports.DannyVariant.DANNY] = "DANNY"
____exports.DannyVariant.COAL_BOY = 1
____exports.DannyVariant[____exports.DannyVariant.COAL_BOY] = "COAL_BOY"
--- For `EntityType.GYRO` (824)
____exports.GyroVariant = {}
____exports.GyroVariant.GYRO = 0
____exports.GyroVariant[____exports.GyroVariant.GYRO] = "GYRO"
____exports.GyroVariant.GRILLED_GYRO = 1
____exports.GyroVariant[____exports.GyroVariant.GRILLED_GYRO] = "GRILLED_GYRO"
--- For `EntityType.FACELESS` (827)
____exports.FacelessVariant = {}
____exports.FacelessVariant.FACELESS = 0
____exports.FacelessVariant[____exports.FacelessVariant.FACELESS] = "FACELESS"
____exports.FacelessVariant.TAINTED_FACELESS = 1
____exports.FacelessVariant[____exports.FacelessVariant.TAINTED_FACELESS] = "TAINTED_FACELESS"
--- For `EntityType.MOLE` (829)
____exports.MoleVariant = {}
____exports.MoleVariant.MOLE = 0
____exports.MoleVariant[____exports.MoleVariant.MOLE] = "MOLE"
____exports.MoleVariant.TAINTED_MOLE = 1
____exports.MoleVariant[____exports.MoleVariant.TAINTED_MOLE] = "TAINTED_MOLE"
--- For `EntityType.BIG_BONY` (830)
____exports.BigBonyVariant = {}
____exports.BigBonyVariant.BIG_BONY = 0
____exports.BigBonyVariant[____exports.BigBonyVariant.BIG_BONY] = "BIG_BONY"
____exports.BigBonyVariant.BIG_BONE = 10
____exports.BigBonyVariant[____exports.BigBonyVariant.BIG_BONE] = "BIG_BONE"
--- For `EntityType.GUTTED_FATTY` (831)
____exports.GuttyFattyVariant = {}
____exports.GuttyFattyVariant.GUTTED_FATTY = 0
____exports.GuttyFattyVariant[____exports.GuttyFattyVariant.GUTTED_FATTY] = "GUTTED_FATTY"
____exports.GuttyFattyVariant.GUTTY_FATTY_EYE = 10
____exports.GuttyFattyVariant[____exports.GuttyFattyVariant.GUTTY_FATTY_EYE] = "GUTTY_FATTY_EYE"
____exports.GuttyFattyVariant.FESTERING_GUTS = 20
____exports.GuttyFattyVariant[____exports.GuttyFattyVariant.FESTERING_GUTS] = "FESTERING_GUTS"
--- For `EntityType.EXORCIST` (832)
____exports.ExorcistVariant = {}
____exports.ExorcistVariant.EXORCIST = 0
____exports.ExorcistVariant[____exports.ExorcistVariant.EXORCIST] = "EXORCIST"
____exports.ExorcistVariant.FANATIC = 1
____exports.ExorcistVariant[____exports.ExorcistVariant.FANATIC] = "FANATIC"
--- For `EntityType.WHIPPER` (834)
____exports.WhipperVariant = {}
____exports.WhipperVariant.WHIPPER = 0
____exports.WhipperVariant[____exports.WhipperVariant.WHIPPER] = "WHIPPER"
____exports.WhipperVariant.SNAPPER = 1
____exports.WhipperVariant[____exports.WhipperVariant.SNAPPER] = "SNAPPER"
____exports.WhipperVariant.FLAGELLANT = 2
____exports.WhipperVariant[____exports.WhipperVariant.FLAGELLANT] = "FLAGELLANT"
--- For `EntityType.PEEPER_FATTY` (835)
____exports.PeeperFattyVariant = {}
____exports.PeeperFattyVariant.PEEPING_FATTY = 0
____exports.PeeperFattyVariant[____exports.PeeperFattyVariant.PEEPING_FATTY] = "PEEPING_FATTY"
____exports.PeeperFattyVariant.PEEPING_FATTY_EYE = 10
____exports.PeeperFattyVariant[____exports.PeeperFattyVariant.PEEPING_FATTY_EYE] = "PEEPING_FATTY_EYE"
--- For `EntityType.REVENANT` (841)
____exports.RevenantVariant = {}
____exports.RevenantVariant.REVENANT = 0
____exports.RevenantVariant[____exports.RevenantVariant.REVENANT] = "REVENANT"
____exports.RevenantVariant.QUAD_REVENANT = 1
____exports.RevenantVariant[____exports.RevenantVariant.QUAD_REVENANT] = "QUAD_REVENANT"
--- For `EntityType.CANARY` (843)
____exports.CanaryVariant = {}
____exports.CanaryVariant.CANARY = 0
____exports.CanaryVariant[____exports.CanaryVariant.CANARY] = "CANARY"
____exports.CanaryVariant.FOREIGNER = 1
____exports.CanaryVariant[____exports.CanaryVariant.FOREIGNER] = "FOREIGNER"
--- For `EntityType.GAPER_L2` (850)
____exports.Gaper2Variant = {}
____exports.Gaper2Variant.GAPER = 0
____exports.Gaper2Variant[____exports.Gaper2Variant.GAPER] = "GAPER"
____exports.Gaper2Variant.HORF = 1
____exports.Gaper2Variant[____exports.Gaper2Variant.HORF] = "HORF"
____exports.Gaper2Variant.GUSHER = 2
____exports.Gaper2Variant[____exports.Gaper2Variant.GUSHER] = "GUSHER"
--- For `EntityType.CHARGER_L2` (855)
____exports.Charger2Variant = {}
____exports.Charger2Variant.CHARGER = 0
____exports.Charger2Variant[____exports.Charger2Variant.CHARGER] = "CHARGER"
____exports.Charger2Variant.ELLEECH = 1
____exports.Charger2Variant[____exports.Charger2Variant.ELLEECH] = "ELLEECH"
--- For `EntityType.EVIS` (865)
____exports.EvisVariant = {}
____exports.EvisVariant.EVIS = 0
____exports.EvisVariant[____exports.EvisVariant.EVIS] = "EVIS"
____exports.EvisVariant.EVIS_GUTS = 10
____exports.EvisVariant[____exports.EvisVariant.EVIS_GUTS] = "EVIS_GUTS"
--- For `EntityType.DARK_ESAU` (866)
____exports.DarkEsauVariant = {}
____exports.DarkEsauVariant.DARK_ESAU = 0
____exports.DarkEsauVariant[____exports.DarkEsauVariant.DARK_ESAU] = "DARK_ESAU"
____exports.DarkEsauVariant.PIT = 1
____exports.DarkEsauVariant[____exports.DarkEsauVariant.PIT] = "PIT"
--- For `EntityType.DUMP` (876)
____exports.DumpVariant = {}
____exports.DumpVariant.DUMP = 0
____exports.DumpVariant[____exports.DumpVariant.DUMP] = "DUMP"
____exports.DumpVariant.DUMP_HEAD = 1
____exports.DumpVariant[____exports.DumpVariant.DUMP_HEAD] = "DUMP_HEAD"
--- For `EntityType.NEEDLE` (881)
____exports.NeedleVariant = {}
____exports.NeedleVariant.NEEDLE = 0
____exports.NeedleVariant[____exports.NeedleVariant.NEEDLE] = "NEEDLE"
____exports.NeedleVariant.PASTY = 1
____exports.NeedleVariant[____exports.NeedleVariant.PASTY] = "PASTY"
--- For `EntityType.CULTIST` (885)
____exports.CultistVariant = {}
____exports.CultistVariant.CULTIST = 0
____exports.CultistVariant[____exports.CultistVariant.CULTIST] = "CULTIST"
____exports.CultistVariant.BLOOD_CULTIST = 1
____exports.CultistVariant[____exports.CultistVariant.BLOOD_CULTIST] = "BLOOD_CULTIST"
____exports.CultistVariant.BONE_TRAP = 10
____exports.CultistVariant[____exports.CultistVariant.BONE_TRAP] = "BONE_TRAP"
--- For `EntityType.VIS_FATTY` (886)
____exports.VisFattyVariant = {}
____exports.VisFattyVariant.VIS_FATTY = 0
____exports.VisFattyVariant[____exports.VisFattyVariant.VIS_FATTY] = "VIS_FATTY"
____exports.VisFattyVariant.FETAL_DEMON = 1
____exports.VisFattyVariant[____exports.VisFattyVariant.FETAL_DEMON] = "FETAL_DEMON"
--- For `EntityType.GOAT` (891)
____exports.GoatVariant = {}
____exports.GoatVariant.GOAT = 0
____exports.GoatVariant[____exports.GoatVariant.GOAT] = "GOAT"
____exports.GoatVariant.BLACK_GOAT = 1
____exports.GoatVariant[____exports.GoatVariant.BLACK_GOAT] = "BLACK_GOAT"
--- For `EntityType.VISAGE` (903)
____exports.VisageVariant = {}
____exports.VisageVariant.VISAGE = 0
____exports.VisageVariant[____exports.VisageVariant.VISAGE] = "VISAGE"
____exports.VisageVariant.VISAGE_MASK = 1
____exports.VisageVariant[____exports.VisageVariant.VISAGE_MASK] = "VISAGE_MASK"
____exports.VisageVariant.VISAGE_CHAIN = 10
____exports.VisageVariant[____exports.VisageVariant.VISAGE_CHAIN] = "VISAGE_CHAIN"
____exports.VisageVariant.VISAGE_PLASMA = 20
____exports.VisageVariant[____exports.VisageVariant.VISAGE_PLASMA] = "VISAGE_PLASMA"
--- For `EntityType.SIREN` (904)
____exports.SirenVariant = {}
____exports.SirenVariant.SIREN = 0
____exports.SirenVariant[____exports.SirenVariant.SIREN] = "SIREN"
____exports.SirenVariant.SIREN_SKULL = 1
____exports.SirenVariant[____exports.SirenVariant.SIREN_SKULL] = "SIREN_SKULL"
____exports.SirenVariant.SIREN_HELPER_PROJECTILE = 10
____exports.SirenVariant[____exports.SirenVariant.SIREN_HELPER_PROJECTILE] = "SIREN_HELPER_PROJECTILE"
--- For `EntityType.SCOURGE` (909)
____exports.ScourgeVariant = {}
____exports.ScourgeVariant.SCOURGE = 0
____exports.ScourgeVariant[____exports.ScourgeVariant.SCOURGE] = "SCOURGE"
____exports.ScourgeVariant.SCOURGE_CHAIN = 10
____exports.ScourgeVariant[____exports.ScourgeVariant.SCOURGE_CHAIN] = "SCOURGE_CHAIN"
--- For `EntityType.CHIMERA` (910)
____exports.ChimeraVariant = {}
____exports.ChimeraVariant.CHIMERA = 0
____exports.ChimeraVariant[____exports.ChimeraVariant.CHIMERA] = "CHIMERA"
____exports.ChimeraVariant.CHIMERA_BODY = 1
____exports.ChimeraVariant[____exports.ChimeraVariant.CHIMERA_BODY] = "CHIMERA_BODY"
____exports.ChimeraVariant.CHIMERA_HEAD = 2
____exports.ChimeraVariant[____exports.ChimeraVariant.CHIMERA_HEAD] = "CHIMERA_HEAD"
--- For `EntityType.ROTGUT` (911)
____exports.RotgutVariant = {}
____exports.RotgutVariant.PHASE_1_HEAD = 0
____exports.RotgutVariant[____exports.RotgutVariant.PHASE_1_HEAD] = "PHASE_1_HEAD"
____exports.RotgutVariant.PHASE_2_MAGGOT = 1
____exports.RotgutVariant[____exports.RotgutVariant.PHASE_2_MAGGOT] = "PHASE_2_MAGGOT"
____exports.RotgutVariant.PHASE_3_HEART = 2
____exports.RotgutVariant[____exports.RotgutVariant.PHASE_3_HEART] = "PHASE_3_HEART"
--- For `EntityType.MOTHER` (912)
____exports.MotherVariant = {}
____exports.MotherVariant.MOTHER_1 = 0
____exports.MotherVariant[____exports.MotherVariant.MOTHER_1] = "MOTHER_1"
____exports.MotherVariant.MOTHER_2 = 10
____exports.MotherVariant[____exports.MotherVariant.MOTHER_2] = "MOTHER_2"
____exports.MotherVariant.BALL = 100
____exports.MotherVariant[____exports.MotherVariant.BALL] = "BALL"
--- For `EntityType.SINGE` (915)
____exports.SingeVariant = {}
____exports.SingeVariant.SINGE = 0
____exports.SingeVariant[____exports.SingeVariant.SINGE] = "SINGE"
____exports.SingeVariant.SINGE_BALL = 1
____exports.SingeVariant[____exports.SingeVariant.SINGE_BALL] = "SINGE_BALL"
--- For `EntityType.RAGLICH` (919)
____exports.RaglichVariant = {}
____exports.RaglichVariant.RAGLICH = 0
____exports.RaglichVariant[____exports.RaglichVariant.RAGLICH] = "RAGLICH"
____exports.RaglichVariant.RAGLICH_ARM = 1
____exports.RaglichVariant[____exports.RaglichVariant.RAGLICH_ARM] = "RAGLICH_ARM"
--- For `EntityType.CLUTCH` (921)
____exports.ClutchVariant = {}
____exports.ClutchVariant.CLUTCH = 0
____exports.ClutchVariant[____exports.ClutchVariant.CLUTCH] = "CLUTCH"
____exports.ClutchVariant.CLUTCH_ORBITAL = 1
____exports.ClutchVariant[____exports.ClutchVariant.CLUTCH_ORBITAL] = "CLUTCH_ORBITAL"
--- For `EntityType.DOGMA` (950)
____exports.DogmaVariant = {}
____exports.DogmaVariant.DOGMA_PHASE_1 = 0
____exports.DogmaVariant[____exports.DogmaVariant.DOGMA_PHASE_1] = "DOGMA_PHASE_1"
____exports.DogmaVariant.TV = 1
____exports.DogmaVariant[____exports.DogmaVariant.TV] = "TV"
____exports.DogmaVariant.ANGEL_PHASE_2 = 2
____exports.DogmaVariant[____exports.DogmaVariant.ANGEL_PHASE_2] = "ANGEL_PHASE_2"
____exports.DogmaVariant.ANGEL_BABY_UNUSED = 10
____exports.DogmaVariant[____exports.DogmaVariant.ANGEL_BABY_UNUSED] = "ANGEL_BABY_UNUSED"
--- For `EntityType.BEAST` (951)
____exports.BeastVariant = {}
____exports.BeastVariant.BEAST = 0
____exports.BeastVariant[____exports.BeastVariant.BEAST] = "BEAST"
____exports.BeastVariant.STALACTITE = 1
____exports.BeastVariant[____exports.BeastVariant.STALACTITE] = "STALACTITE"
____exports.BeastVariant.ROCK_PROJECTILE = 2
____exports.BeastVariant[____exports.BeastVariant.ROCK_PROJECTILE] = "ROCK_PROJECTILE"
____exports.BeastVariant.SOUL = 3
____exports.BeastVariant[____exports.BeastVariant.SOUL] = "SOUL"
____exports.BeastVariant.ULTRA_FAMINE = 10
____exports.BeastVariant[____exports.BeastVariant.ULTRA_FAMINE] = "ULTRA_FAMINE"
____exports.BeastVariant.ULTRA_FAMINE_FLY = 11
____exports.BeastVariant[____exports.BeastVariant.ULTRA_FAMINE_FLY] = "ULTRA_FAMINE_FLY"
____exports.BeastVariant.ULTRA_PESTILENCE = 20
____exports.BeastVariant[____exports.BeastVariant.ULTRA_PESTILENCE] = "ULTRA_PESTILENCE"
____exports.BeastVariant.ULTRA_PESTILENCE_FLY = 21
____exports.BeastVariant[____exports.BeastVariant.ULTRA_PESTILENCE_FLY] = "ULTRA_PESTILENCE_FLY"
____exports.BeastVariant.ULTRA_PESTILENCE_MAGGOT = 22
____exports.BeastVariant[____exports.BeastVariant.ULTRA_PESTILENCE_MAGGOT] = "ULTRA_PESTILENCE_MAGGOT"
____exports.BeastVariant.ULTRA_PESTILENCE_FLY_BALL = 23
____exports.BeastVariant[____exports.BeastVariant.ULTRA_PESTILENCE_FLY_BALL] = "ULTRA_PESTILENCE_FLY_BALL"
____exports.BeastVariant.ULTRA_WAR = 30
____exports.BeastVariant[____exports.BeastVariant.ULTRA_WAR] = "ULTRA_WAR"
____exports.BeastVariant.ULTRA_WAR_BOMB = 31
____exports.BeastVariant[____exports.BeastVariant.ULTRA_WAR_BOMB] = "ULTRA_WAR_BOMB"
____exports.BeastVariant.ULTRA_DEATH = 40
____exports.BeastVariant[____exports.BeastVariant.ULTRA_DEATH] = "ULTRA_DEATH"
____exports.BeastVariant.ULTRA_DEATH_SCYTHE = 41
____exports.BeastVariant[____exports.BeastVariant.ULTRA_DEATH_SCYTHE] = "ULTRA_DEATH_SCYTHE"
____exports.BeastVariant.ULTRA_DEATH_HEAD = 42
____exports.BeastVariant[____exports.BeastVariant.ULTRA_DEATH_HEAD] = "ULTRA_DEATH_HEAD"
____exports.BeastVariant.BACKGROUND_BEAST = 100
____exports.BeastVariant[____exports.BeastVariant.BACKGROUND_BEAST] = "BACKGROUND_BEAST"
____exports.BeastVariant.BACKGROUND_FAMINE = 101
____exports.BeastVariant[____exports.BeastVariant.BACKGROUND_FAMINE] = "BACKGROUND_FAMINE"
____exports.BeastVariant.BACKGROUND_PESTILENCE = 102
____exports.BeastVariant[____exports.BeastVariant.BACKGROUND_PESTILENCE] = "BACKGROUND_PESTILENCE"
____exports.BeastVariant.BACKGROUND_WAR = 103
____exports.BeastVariant[____exports.BeastVariant.BACKGROUND_WAR] = "BACKGROUND_WAR"
____exports.BeastVariant.BACKGROUND_DEATH = 104
____exports.BeastVariant[____exports.BeastVariant.BACKGROUND_DEATH] = "BACKGROUND_DEATH"
--- For `EntityType.GENERIC_PROP` (960)
____exports.GenericPropVariant = {}
____exports.GenericPropVariant.GENERIC_PROP = 0
____exports.GenericPropVariant[____exports.GenericPropVariant.GENERIC_PROP] = "GENERIC_PROP"
____exports.GenericPropVariant.MOMS_DRESSER = 1
____exports.GenericPropVariant[____exports.GenericPropVariant.MOMS_DRESSER] = "MOMS_DRESSER"
____exports.GenericPropVariant.MOMS_VANITY = 2
____exports.GenericPropVariant[____exports.GenericPropVariant.MOMS_VANITY] = "MOMS_VANITY"
____exports.GenericPropVariant.COUCH = 3
____exports.GenericPropVariant[____exports.GenericPropVariant.COUCH] = "COUCH"
____exports.GenericPropVariant.TV = 4
____exports.GenericPropVariant[____exports.GenericPropVariant.TV] = "TV"
--- For `EntityType.EFFECT` (1000)
____exports.EffectVariant = {}
____exports.EffectVariant.EFFECT_NULL = 0
____exports.EffectVariant[____exports.EffectVariant.EFFECT_NULL] = "EFFECT_NULL"
____exports.EffectVariant.BOMB_EXPLOSION = 1
____exports.EffectVariant[____exports.EffectVariant.BOMB_EXPLOSION] = "BOMB_EXPLOSION"
____exports.EffectVariant.BLOOD_EXPLOSION = 2
____exports.EffectVariant[____exports.EffectVariant.BLOOD_EXPLOSION] = "BLOOD_EXPLOSION"
____exports.EffectVariant.FLY_EXPLOSION = 3
____exports.EffectVariant[____exports.EffectVariant.FLY_EXPLOSION] = "FLY_EXPLOSION"
____exports.EffectVariant.ROCK_PARTICLE = 4
____exports.EffectVariant[____exports.EffectVariant.ROCK_PARTICLE] = "ROCK_PARTICLE"
____exports.EffectVariant.BLOOD_PARTICLE = 5
____exports.EffectVariant[____exports.EffectVariant.BLOOD_PARTICLE] = "BLOOD_PARTICLE"
____exports.EffectVariant.DEVIL = 6
____exports.EffectVariant[____exports.EffectVariant.DEVIL] = "DEVIL"
____exports.EffectVariant.BLOOD_SPLAT = 7
____exports.EffectVariant[____exports.EffectVariant.BLOOD_SPLAT] = "BLOOD_SPLAT"
____exports.EffectVariant.LADDER = 8
____exports.EffectVariant[____exports.EffectVariant.LADDER] = "LADDER"
____exports.EffectVariant.ANGEL = 9
____exports.EffectVariant[____exports.EffectVariant.ANGEL] = "ANGEL"
____exports.EffectVariant.BLUE_FLAME = 10
____exports.EffectVariant[____exports.EffectVariant.BLUE_FLAME] = "BLUE_FLAME"
____exports.EffectVariant.BULLET_POOF = 11
____exports.EffectVariant[____exports.EffectVariant.BULLET_POOF] = "BULLET_POOF"
____exports.EffectVariant.TEAR_POOF_A = 12
____exports.EffectVariant[____exports.EffectVariant.TEAR_POOF_A] = "TEAR_POOF_A"
____exports.EffectVariant.TEAR_POOF_B = 13
____exports.EffectVariant[____exports.EffectVariant.TEAR_POOF_B] = "TEAR_POOF_B"
____exports.EffectVariant.RIPPLE_POOF = 14
____exports.EffectVariant[____exports.EffectVariant.RIPPLE_POOF] = "RIPPLE_POOF"
____exports.EffectVariant.POOF_1 = 15
____exports.EffectVariant[____exports.EffectVariant.POOF_1] = "POOF_1"
____exports.EffectVariant.POOF_2 = 16
____exports.EffectVariant[____exports.EffectVariant.POOF_2] = "POOF_2"
____exports.EffectVariant.POOF_4 = 17
____exports.EffectVariant[____exports.EffectVariant.POOF_4] = "POOF_4"
____exports.EffectVariant.BOMB_CRATER = 18
____exports.EffectVariant[____exports.EffectVariant.BOMB_CRATER] = "BOMB_CRATER"
____exports.EffectVariant.CRACK_THE_SKY = 19
____exports.EffectVariant[____exports.EffectVariant.CRACK_THE_SKY] = "CRACK_THE_SKY"
____exports.EffectVariant.SCYTHE_BREAK = 20
____exports.EffectVariant[____exports.EffectVariant.SCYTHE_BREAK] = "SCYTHE_BREAK"
____exports.EffectVariant.TINY_BUG = 21
____exports.EffectVariant[____exports.EffectVariant.TINY_BUG] = "TINY_BUG"
____exports.EffectVariant.CREEP_RED = 22
____exports.EffectVariant[____exports.EffectVariant.CREEP_RED] = "CREEP_RED"
____exports.EffectVariant.CREEP_GREEN = 23
____exports.EffectVariant[____exports.EffectVariant.CREEP_GREEN] = "CREEP_GREEN"
____exports.EffectVariant.CREEP_YELLOW = 24
____exports.EffectVariant[____exports.EffectVariant.CREEP_YELLOW] = "CREEP_YELLOW"
____exports.EffectVariant.CREEP_WHITE = 25
____exports.EffectVariant[____exports.EffectVariant.CREEP_WHITE] = "CREEP_WHITE"
____exports.EffectVariant.CREEP_BLACK = 26
____exports.EffectVariant[____exports.EffectVariant.CREEP_BLACK] = "CREEP_BLACK"
____exports.EffectVariant.WOOD_PARTICLE = 27
____exports.EffectVariant[____exports.EffectVariant.WOOD_PARTICLE] = "WOOD_PARTICLE"
____exports.EffectVariant.MONSTROS_TOOTH = 28
____exports.EffectVariant[____exports.EffectVariant.MONSTROS_TOOTH] = "MONSTROS_TOOTH"
____exports.EffectVariant.MOM_FOOT_STOMP = 29
____exports.EffectVariant[____exports.EffectVariant.MOM_FOOT_STOMP] = "MOM_FOOT_STOMP"
____exports.EffectVariant.TARGET = 30
____exports.EffectVariant[____exports.EffectVariant.TARGET] = "TARGET"
____exports.EffectVariant.ROCKET = 31
____exports.EffectVariant[____exports.EffectVariant.ROCKET] = "ROCKET"
____exports.EffectVariant.PLAYER_CREEP_LEMON_MISHAP = 32
____exports.EffectVariant[____exports.EffectVariant.PLAYER_CREEP_LEMON_MISHAP] = "PLAYER_CREEP_LEMON_MISHAP"
____exports.EffectVariant.TINY_FLY = 33
____exports.EffectVariant[____exports.EffectVariant.TINY_FLY] = "TINY_FLY"
____exports.EffectVariant.FART = 34
____exports.EffectVariant[____exports.EffectVariant.FART] = "FART"
____exports.EffectVariant.TOOTH_PARTICLE = 35
____exports.EffectVariant[____exports.EffectVariant.TOOTH_PARTICLE] = "TOOTH_PARTICLE"
____exports.EffectVariant.XRAY_WALL = 36
____exports.EffectVariant[____exports.EffectVariant.XRAY_WALL] = "XRAY_WALL"
____exports.EffectVariant.PLAYER_CREEP_HOLY_WATER = 37
____exports.EffectVariant[____exports.EffectVariant.PLAYER_CREEP_HOLY_WATER] = "PLAYER_CREEP_HOLY_WATER"
____exports.EffectVariant.SPIDER_EXPLOSION = 38
____exports.EffectVariant[____exports.EffectVariant.SPIDER_EXPLOSION] = "SPIDER_EXPLOSION"
____exports.EffectVariant.HEAVEN_LIGHT_DOOR = 39
____exports.EffectVariant[____exports.EffectVariant.HEAVEN_LIGHT_DOOR] = "HEAVEN_LIGHT_DOOR"
____exports.EffectVariant.STAR_FLASH = 40
____exports.EffectVariant[____exports.EffectVariant.STAR_FLASH] = "STAR_FLASH"
____exports.EffectVariant.WATER_DROPLET = 41
____exports.EffectVariant[____exports.EffectVariant.WATER_DROPLET] = "WATER_DROPLET"
____exports.EffectVariant.BLOOD_GUSH = 42
____exports.EffectVariant[____exports.EffectVariant.BLOOD_GUSH] = "BLOOD_GUSH"
____exports.EffectVariant.POOP_EXPLOSION = 43
____exports.EffectVariant[____exports.EffectVariant.POOP_EXPLOSION] = "POOP_EXPLOSION"
____exports.EffectVariant.PLAYER_CREEP_WHITE = 44
____exports.EffectVariant[____exports.EffectVariant.PLAYER_CREEP_WHITE] = "PLAYER_CREEP_WHITE"
____exports.EffectVariant.PLAYER_CREEP_BLACK = 45
____exports.EffectVariant[____exports.EffectVariant.PLAYER_CREEP_BLACK] = "PLAYER_CREEP_BLACK"
____exports.EffectVariant.PLAYER_CREEP_RED = 46
____exports.EffectVariant[____exports.EffectVariant.PLAYER_CREEP_RED] = "PLAYER_CREEP_RED"
____exports.EffectVariant.TRINITY_SHIELD = 47
____exports.EffectVariant[____exports.EffectVariant.TRINITY_SHIELD] = "TRINITY_SHIELD"
____exports.EffectVariant.BATTERY = 48
____exports.EffectVariant[____exports.EffectVariant.BATTERY] = "BATTERY"
____exports.EffectVariant.HEART = 49
____exports.EffectVariant[____exports.EffectVariant.HEART] = "HEART"
____exports.EffectVariant.LASER_IMPACT = 50
____exports.EffectVariant[____exports.EffectVariant.LASER_IMPACT] = "LASER_IMPACT"
____exports.EffectVariant.HOT_BOMB_FIRE = 51
____exports.EffectVariant[____exports.EffectVariant.HOT_BOMB_FIRE] = "HOT_BOMB_FIRE"
____exports.EffectVariant.RED_CANDLE_FLAME = 52
____exports.EffectVariant[____exports.EffectVariant.RED_CANDLE_FLAME] = "RED_CANDLE_FLAME"
____exports.EffectVariant.PLAYER_CREEP_GREEN = 53
____exports.EffectVariant[____exports.EffectVariant.PLAYER_CREEP_GREEN] = "PLAYER_CREEP_GREEN"
____exports.EffectVariant.PLAYER_CREEP_HOLY_WATER_TRAIL = 54
____exports.EffectVariant[____exports.EffectVariant.PLAYER_CREEP_HOLY_WATER_TRAIL] = "PLAYER_CREEP_HOLY_WATER_TRAIL"
____exports.EffectVariant.SPIKE = 55
____exports.EffectVariant[____exports.EffectVariant.SPIKE] = "SPIKE"
____exports.EffectVariant.CREEP_BROWN = 56
____exports.EffectVariant[____exports.EffectVariant.CREEP_BROWN] = "CREEP_BROWN"
____exports.EffectVariant.PULLING_EFFECT = 57
____exports.EffectVariant[____exports.EffectVariant.PULLING_EFFECT] = "PULLING_EFFECT"
____exports.EffectVariant.POOP_PARTICLE = 58
____exports.EffectVariant[____exports.EffectVariant.POOP_PARTICLE] = "POOP_PARTICLE"
____exports.EffectVariant.DUST_CLOUD = 59
____exports.EffectVariant[____exports.EffectVariant.DUST_CLOUD] = "DUST_CLOUD"
____exports.EffectVariant.BOOMERANG = 60
____exports.EffectVariant[____exports.EffectVariant.BOOMERANG] = "BOOMERANG"
____exports.EffectVariant.SHOCKWAVE = 61
____exports.EffectVariant[____exports.EffectVariant.SHOCKWAVE] = "SHOCKWAVE"
____exports.EffectVariant.ROCK_EXPLOSION = 62
____exports.EffectVariant[____exports.EffectVariant.ROCK_EXPLOSION] = "ROCK_EXPLOSION"
____exports.EffectVariant.WORM = 63
____exports.EffectVariant[____exports.EffectVariant.WORM] = "WORM"
____exports.EffectVariant.BEETLE = 64
____exports.EffectVariant[____exports.EffectVariant.BEETLE] = "BEETLE"
____exports.EffectVariant.WISP = 65
____exports.EffectVariant[____exports.EffectVariant.WISP] = "WISP"
____exports.EffectVariant.EMBER_PARTICLE = 66
____exports.EffectVariant[____exports.EffectVariant.EMBER_PARTICLE] = "EMBER_PARTICLE"
____exports.EffectVariant.SHOCKWAVE_DIRECTIONAL = 67
____exports.EffectVariant[____exports.EffectVariant.SHOCKWAVE_DIRECTIONAL] = "SHOCKWAVE_DIRECTIONAL"
____exports.EffectVariant.WALL_BUG = 68
____exports.EffectVariant[____exports.EffectVariant.WALL_BUG] = "WALL_BUG"
____exports.EffectVariant.BUTTERFLY = 69
____exports.EffectVariant[____exports.EffectVariant.BUTTERFLY] = "BUTTERFLY"
____exports.EffectVariant.BLOOD_DROP = 70
____exports.EffectVariant[____exports.EffectVariant.BLOOD_DROP] = "BLOOD_DROP"
____exports.EffectVariant.BRIMSTONE_SWIRL = 71
____exports.EffectVariant[____exports.EffectVariant.BRIMSTONE_SWIRL] = "BRIMSTONE_SWIRL"
____exports.EffectVariant.CRACK_WAVE = 72
____exports.EffectVariant[____exports.EffectVariant.CRACK_WAVE] = "CRACK_WAVE"
____exports.EffectVariant.SHOCKWAVE_RANDOM = 73
____exports.EffectVariant[____exports.EffectVariant.SHOCKWAVE_RANDOM] = "SHOCKWAVE_RANDOM"
____exports.EffectVariant.ISAACS_CARPET = 74
____exports.EffectVariant[____exports.EffectVariant.ISAACS_CARPET] = "ISAACS_CARPET"
____exports.EffectVariant.BAR_PARTICLE = 75
____exports.EffectVariant[____exports.EffectVariant.BAR_PARTICLE] = "BAR_PARTICLE"
____exports.EffectVariant.DICE_FLOOR = 76
____exports.EffectVariant[____exports.EffectVariant.DICE_FLOOR] = "DICE_FLOOR"
____exports.EffectVariant.LARGE_BLOOD_EXPLOSION = 77
____exports.EffectVariant[____exports.EffectVariant.LARGE_BLOOD_EXPLOSION] = "LARGE_BLOOD_EXPLOSION"
____exports.EffectVariant.PLAYER_CREEP_LEMON_PARTY = 78
____exports.EffectVariant[____exports.EffectVariant.PLAYER_CREEP_LEMON_PARTY] = "PLAYER_CREEP_LEMON_PARTY"
____exports.EffectVariant.TEAR_POOF_SMALL = 79
____exports.EffectVariant[____exports.EffectVariant.TEAR_POOF_SMALL] = "TEAR_POOF_SMALL"
____exports.EffectVariant.TEAR_POOF_VERY_SMALL = 80
____exports.EffectVariant[____exports.EffectVariant.TEAR_POOF_VERY_SMALL] = "TEAR_POOF_VERY_SMALL"
____exports.EffectVariant.FRIEND_BALL = 81
____exports.EffectVariant[____exports.EffectVariant.FRIEND_BALL] = "FRIEND_BALL"
____exports.EffectVariant.WOMB_TELEPORT = 82
____exports.EffectVariant[____exports.EffectVariant.WOMB_TELEPORT] = "WOMB_TELEPORT"
____exports.EffectVariant.SPEAR_OF_DESTINY = 83
____exports.EffectVariant[____exports.EffectVariant.SPEAR_OF_DESTINY] = "SPEAR_OF_DESTINY"
____exports.EffectVariant.EVIL_EYE = 84
____exports.EffectVariant[____exports.EffectVariant.EVIL_EYE] = "EVIL_EYE"
____exports.EffectVariant.DIAMOND_PARTICLE = 85
____exports.EffectVariant[____exports.EffectVariant.DIAMOND_PARTICLE] = "DIAMOND_PARTICLE"
____exports.EffectVariant.NAIL_PARTICLE = 86
____exports.EffectVariant[____exports.EffectVariant.NAIL_PARTICLE] = "NAIL_PARTICLE"
____exports.EffectVariant.FALLING_EMBER = 87
____exports.EffectVariant[____exports.EffectVariant.FALLING_EMBER] = "FALLING_EMBER"
____exports.EffectVariant.DARK_BALL_SMOKE_PARTICLE = 88
____exports.EffectVariant[____exports.EffectVariant.DARK_BALL_SMOKE_PARTICLE] = "DARK_BALL_SMOKE_PARTICLE"
____exports.EffectVariant.ULTRA_GREED_FOOTPRINT = 89
____exports.EffectVariant[____exports.EffectVariant.ULTRA_GREED_FOOTPRINT] = "ULTRA_GREED_FOOTPRINT"
____exports.EffectVariant.PLAYER_CREEP_PUDDLE_MILK = 90
____exports.EffectVariant[____exports.EffectVariant.PLAYER_CREEP_PUDDLE_MILK] = "PLAYER_CREEP_PUDDLE_MILK"
____exports.EffectVariant.MOMS_HAND = 91
____exports.EffectVariant[____exports.EffectVariant.MOMS_HAND] = "MOMS_HAND"
____exports.EffectVariant.PLAYER_CREEP_BLACK_POWDER = 92
____exports.EffectVariant[____exports.EffectVariant.PLAYER_CREEP_BLACK_POWDER] = "PLAYER_CREEP_BLACK_POWDER"
____exports.EffectVariant.PENTAGRAM_BLACK_POWDER = 93
____exports.EffectVariant[____exports.EffectVariant.PENTAGRAM_BLACK_POWDER] = "PENTAGRAM_BLACK_POWDER"
____exports.EffectVariant.CREEP_SLIPPERY_BROWN = 94
____exports.EffectVariant[____exports.EffectVariant.CREEP_SLIPPERY_BROWN] = "CREEP_SLIPPERY_BROWN"
____exports.EffectVariant.GOLD_PARTICLE = 95
____exports.EffectVariant[____exports.EffectVariant.GOLD_PARTICLE] = "GOLD_PARTICLE"
____exports.EffectVariant.HUSH_LASER = 96
____exports.EffectVariant[____exports.EffectVariant.HUSH_LASER] = "HUSH_LASER"
____exports.EffectVariant.IMPACT = 97
____exports.EffectVariant[____exports.EffectVariant.IMPACT] = "IMPACT"
____exports.EffectVariant.COIN_PARTICLE = 98
____exports.EffectVariant[____exports.EffectVariant.COIN_PARTICLE] = "COIN_PARTICLE"
____exports.EffectVariant.WATER_SPLASH = 99
____exports.EffectVariant[____exports.EffectVariant.WATER_SPLASH] = "WATER_SPLASH"
____exports.EffectVariant.HUSH_ASHES = 100
____exports.EffectVariant[____exports.EffectVariant.HUSH_ASHES] = "HUSH_ASHES"
____exports.EffectVariant.HUSH_LASER_UP = 101
____exports.EffectVariant[____exports.EffectVariant.HUSH_LASER_UP] = "HUSH_LASER_UP"
____exports.EffectVariant.BULLET_POOF_HUSH = 102
____exports.EffectVariant[____exports.EffectVariant.BULLET_POOF_HUSH] = "BULLET_POOF_HUSH"
____exports.EffectVariant.ULTRA_GREED_BLING = 103
____exports.EffectVariant[____exports.EffectVariant.ULTRA_GREED_BLING] = "ULTRA_GREED_BLING"
____exports.EffectVariant.FIREWORKS = 104
____exports.EffectVariant[____exports.EffectVariant.FIREWORKS] = "FIREWORKS"
____exports.EffectVariant.BROWN_CLOUD = 105
____exports.EffectVariant[____exports.EffectVariant.BROWN_CLOUD] = "BROWN_CLOUD"
____exports.EffectVariant.FART_RING = 106
____exports.EffectVariant[____exports.EffectVariant.FART_RING] = "FART_RING"
____exports.EffectVariant.BLACK_HOLE = 107
____exports.EffectVariant[____exports.EffectVariant.BLACK_HOLE] = "BLACK_HOLE"
____exports.EffectVariant.MR_ME = 108
____exports.EffectVariant[____exports.EffectVariant.MR_ME] = "MR_ME"
____exports.EffectVariant.DEATH_SKULL = 109
____exports.EffectVariant[____exports.EffectVariant.DEATH_SKULL] = "DEATH_SKULL"
____exports.EffectVariant.ENEMY_BRIMSTONE_SWIRL = 110
____exports.EffectVariant[____exports.EffectVariant.ENEMY_BRIMSTONE_SWIRL] = "ENEMY_BRIMSTONE_SWIRL"
____exports.EffectVariant.HAEMO_TRAIL = 111
____exports.EffectVariant[____exports.EffectVariant.HAEMO_TRAIL] = "HAEMO_TRAIL"
____exports.EffectVariant.HALLOWED_GROUND = 112
____exports.EffectVariant[____exports.EffectVariant.HALLOWED_GROUND] = "HALLOWED_GROUND"
____exports.EffectVariant.BRIMSTONE_BALL = 113
____exports.EffectVariant[____exports.EffectVariant.BRIMSTONE_BALL] = "BRIMSTONE_BALL"
____exports.EffectVariant.FORGOTTEN_CHAIN = 114
____exports.EffectVariant[____exports.EffectVariant.FORGOTTEN_CHAIN] = "FORGOTTEN_CHAIN"
____exports.EffectVariant.BROKEN_SHOVEL_SHADOW = 115
____exports.EffectVariant[____exports.EffectVariant.BROKEN_SHOVEL_SHADOW] = "BROKEN_SHOVEL_SHADOW"
____exports.EffectVariant.DIRT_PATCH = 116
____exports.EffectVariant[____exports.EffectVariant.DIRT_PATCH] = "DIRT_PATCH"
____exports.EffectVariant.FORGOTTEN_SOUL = 117
____exports.EffectVariant[____exports.EffectVariant.FORGOTTEN_SOUL] = "FORGOTTEN_SOUL"
____exports.EffectVariant.SMALL_ROCKET = 118
____exports.EffectVariant[____exports.EffectVariant.SMALL_ROCKET] = "SMALL_ROCKET"
____exports.EffectVariant.TIMER = 119
____exports.EffectVariant[____exports.EffectVariant.TIMER] = "TIMER"
____exports.EffectVariant.SPAWNER = 120
____exports.EffectVariant[____exports.EffectVariant.SPAWNER] = "SPAWNER"
____exports.EffectVariant.LIGHT = 121
____exports.EffectVariant[____exports.EffectVariant.LIGHT] = "LIGHT"
____exports.EffectVariant.BIG_HORN_HOLE_HELPER = 122
____exports.EffectVariant[____exports.EffectVariant.BIG_HORN_HOLE_HELPER] = "BIG_HORN_HOLE_HELPER"
____exports.EffectVariant.HALO = 123
____exports.EffectVariant[____exports.EffectVariant.HALO] = "HALO"
____exports.EffectVariant.TAR_BUBBLE = 124
____exports.EffectVariant[____exports.EffectVariant.TAR_BUBBLE] = "TAR_BUBBLE"
____exports.EffectVariant.BIG_HORN_HAND = 125
____exports.EffectVariant[____exports.EffectVariant.BIG_HORN_HAND] = "BIG_HORN_HAND"
____exports.EffectVariant.TECH_DOT = 126
____exports.EffectVariant[____exports.EffectVariant.TECH_DOT] = "TECH_DOT"
____exports.EffectVariant.MAMA_MEGA_EXPLOSION = 127
____exports.EffectVariant[____exports.EffectVariant.MAMA_MEGA_EXPLOSION] = "MAMA_MEGA_EXPLOSION"
____exports.EffectVariant.OPTION_LINE = 128
____exports.EffectVariant[____exports.EffectVariant.OPTION_LINE] = "OPTION_LINE"
____exports.EffectVariant.LEECH_EXPLOSION = 130
____exports.EffectVariant[____exports.EffectVariant.LEECH_EXPLOSION] = "LEECH_EXPLOSION"
____exports.EffectVariant.MAGGOT_EXPLOSION = 131
____exports.EffectVariant[____exports.EffectVariant.MAGGOT_EXPLOSION] = "MAGGOT_EXPLOSION"
____exports.EffectVariant.BIG_SPLASH = 132
____exports.EffectVariant[____exports.EffectVariant.BIG_SPLASH] = "BIG_SPLASH"
____exports.EffectVariant.WATER_RIPPLE = 133
____exports.EffectVariant[____exports.EffectVariant.WATER_RIPPLE] = "WATER_RIPPLE"
____exports.EffectVariant.PEDESTAL_RIPPLE = 134
____exports.EffectVariant[____exports.EffectVariant.PEDESTAL_RIPPLE] = "PEDESTAL_RIPPLE"
____exports.EffectVariant.RAIN_DROP = 135
____exports.EffectVariant[____exports.EffectVariant.RAIN_DROP] = "RAIN_DROP"
____exports.EffectVariant.GRID_ENTITY_PROJECTILE_HELPER = 136
____exports.EffectVariant[____exports.EffectVariant.GRID_ENTITY_PROJECTILE_HELPER] = "GRID_ENTITY_PROJECTILE_HELPER"
____exports.EffectVariant.WORMWOOD_HOLE = 137
____exports.EffectVariant[____exports.EffectVariant.WORMWOOD_HOLE] = "WORMWOOD_HOLE"
____exports.EffectVariant.MIST = 138
____exports.EffectVariant[____exports.EffectVariant.MIST] = "MIST"
____exports.EffectVariant.TRAPDOOR_COVER = 139
____exports.EffectVariant[____exports.EffectVariant.TRAPDOOR_COVER] = "TRAPDOOR_COVER"
____exports.EffectVariant.BACKDROP_DECORATION = 140
____exports.EffectVariant[____exports.EffectVariant.BACKDROP_DECORATION] = "BACKDROP_DECORATION"
____exports.EffectVariant.SMOKE_CLOUD = 141
____exports.EffectVariant[____exports.EffectVariant.SMOKE_CLOUD] = "SMOKE_CLOUD"
____exports.EffectVariant.WHIRLPOOL = 142
____exports.EffectVariant[____exports.EffectVariant.WHIRLPOOL] = "WHIRLPOOL"
____exports.EffectVariant.FART_WAVE = 143
____exports.EffectVariant[____exports.EffectVariant.FART_WAVE] = "FART_WAVE"
____exports.EffectVariant.ENEMY_GHOST = 144
____exports.EffectVariant[____exports.EffectVariant.ENEMY_GHOST] = "ENEMY_GHOST"
____exports.EffectVariant.ROCK_POOF = 145
____exports.EffectVariant[____exports.EffectVariant.ROCK_POOF] = "ROCK_POOF"
____exports.EffectVariant.DIRT_PILE = 146
____exports.EffectVariant[____exports.EffectVariant.DIRT_PILE] = "DIRT_PILE"
____exports.EffectVariant.FIRE_JET = 147
____exports.EffectVariant[____exports.EffectVariant.FIRE_JET] = "FIRE_JET"
____exports.EffectVariant.FIRE_WAVE = 148
____exports.EffectVariant[____exports.EffectVariant.FIRE_WAVE] = "FIRE_WAVE"
____exports.EffectVariant.BIG_ROCK_EXPLOSION = 149
____exports.EffectVariant[____exports.EffectVariant.BIG_ROCK_EXPLOSION] = "BIG_ROCK_EXPLOSION"
____exports.EffectVariant.BIG_CRACK_WAVE = 150
____exports.EffectVariant[____exports.EffectVariant.BIG_CRACK_WAVE] = "BIG_CRACK_WAVE"
____exports.EffectVariant.BIG_ATTRACT = 151
____exports.EffectVariant[____exports.EffectVariant.BIG_ATTRACT] = "BIG_ATTRACT"
____exports.EffectVariant.HORNFEL_ROOM_CONTROLLER = 152
____exports.EffectVariant[____exports.EffectVariant.HORNFEL_ROOM_CONTROLLER] = "HORNFEL_ROOM_CONTROLLER"
____exports.EffectVariant.OCCULT_TARGET = 153
____exports.EffectVariant[____exports.EffectVariant.OCCULT_TARGET] = "OCCULT_TARGET"
____exports.EffectVariant.DOOR_OUTLINE = 154
____exports.EffectVariant[____exports.EffectVariant.DOOR_OUTLINE] = "DOOR_OUTLINE"
____exports.EffectVariant.CREEP_SLIPPERY_BROWN_GROWING = 155
____exports.EffectVariant[____exports.EffectVariant.CREEP_SLIPPERY_BROWN_GROWING] = "CREEP_SLIPPERY_BROWN_GROWING"
____exports.EffectVariant.TALL_LADDER = 156
____exports.EffectVariant[____exports.EffectVariant.TALL_LADDER] = "TALL_LADDER"
____exports.EffectVariant.WILLO_SPAWNER = 157
____exports.EffectVariant[____exports.EffectVariant.WILLO_SPAWNER] = "WILLO_SPAWNER"
____exports.EffectVariant.TADPOLE = 158
____exports.EffectVariant[____exports.EffectVariant.TADPOLE] = "TADPOLE"
____exports.EffectVariant.LIL_GHOST = 159
____exports.EffectVariant[____exports.EffectVariant.LIL_GHOST] = "LIL_GHOST"
____exports.EffectVariant.BISHOP_SHIELD = 160
____exports.EffectVariant[____exports.EffectVariant.BISHOP_SHIELD] = "BISHOP_SHIELD"
____exports.EffectVariant.PORTAL_TELEPORT = 161
____exports.EffectVariant[____exports.EffectVariant.PORTAL_TELEPORT] = "PORTAL_TELEPORT"
____exports.EffectVariant.HERETIC_PENTAGRAM = 162
____exports.EffectVariant[____exports.EffectVariant.HERETIC_PENTAGRAM] = "HERETIC_PENTAGRAM"
____exports.EffectVariant.CHAIN_GIB = 163
____exports.EffectVariant[____exports.EffectVariant.CHAIN_GIB] = "CHAIN_GIB"
____exports.EffectVariant.SIREN_RING = 164
____exports.EffectVariant[____exports.EffectVariant.SIREN_RING] = "SIREN_RING"
____exports.EffectVariant.CHARM_EFFECT = 165
____exports.EffectVariant[____exports.EffectVariant.CHARM_EFFECT] = "CHARM_EFFECT"
____exports.EffectVariant.SPRITE_TRAIL = 166
____exports.EffectVariant[____exports.EffectVariant.SPRITE_TRAIL] = "SPRITE_TRAIL"
____exports.EffectVariant.CHAIN_LIGHTNING = 167
____exports.EffectVariant[____exports.EffectVariant.CHAIN_LIGHTNING] = "CHAIN_LIGHTNING"
____exports.EffectVariant.COLOSTOMIA_PUDDLE = 168
____exports.EffectVariant[____exports.EffectVariant.COLOSTOMIA_PUDDLE] = "COLOSTOMIA_PUDDLE"
____exports.EffectVariant.CREEP_STATIC = 169
____exports.EffectVariant[____exports.EffectVariant.CREEP_STATIC] = "CREEP_STATIC"
____exports.EffectVariant.DOGMA_DEBRIS = 170
____exports.EffectVariant[____exports.EffectVariant.DOGMA_DEBRIS] = "DOGMA_DEBRIS"
____exports.EffectVariant.DOGMA_BLACK_HOLE = 171
____exports.EffectVariant[____exports.EffectVariant.DOGMA_BLACK_HOLE] = "DOGMA_BLACK_HOLE"
____exports.EffectVariant.DOGMA_ORB = 172
____exports.EffectVariant[____exports.EffectVariant.DOGMA_ORB] = "DOGMA_ORB"
____exports.EffectVariant.CRACKED_ORB_POOF = 173
____exports.EffectVariant[____exports.EffectVariant.CRACKED_ORB_POOF] = "CRACKED_ORB_POOF"
____exports.EffectVariant.SHOP_SPIKES = 174
____exports.EffectVariant[____exports.EffectVariant.SHOP_SPIKES] = "SHOP_SPIKES"
____exports.EffectVariant.KINETI_BEAM = 175
____exports.EffectVariant[____exports.EffectVariant.KINETI_BEAM] = "KINETI_BEAM"
____exports.EffectVariant.CLEAVER_SLASH = 176
____exports.EffectVariant[____exports.EffectVariant.CLEAVER_SLASH] = "CLEAVER_SLASH"
____exports.EffectVariant.REVERSE_EXPLOSION = 177
____exports.EffectVariant[____exports.EffectVariant.REVERSE_EXPLOSION] = "REVERSE_EXPLOSION"
____exports.EffectVariant.URN_OF_SOULS = 178
____exports.EffectVariant[____exports.EffectVariant.URN_OF_SOULS] = "URN_OF_SOULS"
____exports.EffectVariant.ENEMY_SOUL = 179
____exports.EffectVariant[____exports.EffectVariant.ENEMY_SOUL] = "ENEMY_SOUL"
____exports.EffectVariant.RIFT = 180
____exports.EffectVariant[____exports.EffectVariant.RIFT] = "RIFT"
____exports.EffectVariant.LAVA_SPAWNER = 181
____exports.EffectVariant[____exports.EffectVariant.LAVA_SPAWNER] = "LAVA_SPAWNER"
____exports.EffectVariant.BIG_KNIFE = 182
____exports.EffectVariant[____exports.EffectVariant.BIG_KNIFE] = "BIG_KNIFE"
____exports.EffectVariant.MOTHER_SHOCKWAVE = 183
____exports.EffectVariant[____exports.EffectVariant.MOTHER_SHOCKWAVE] = "MOTHER_SHOCKWAVE"
____exports.EffectVariant.WORM_FRIEND_SNARE = 184
____exports.EffectVariant[____exports.EffectVariant.WORM_FRIEND_SNARE] = "WORM_FRIEND_SNARE"
____exports.EffectVariant.REDEMPTION = 185
____exports.EffectVariant[____exports.EffectVariant.REDEMPTION] = "REDEMPTION"
____exports.EffectVariant.HUNGRY_SOUL = 186
____exports.EffectVariant[____exports.EffectVariant.HUNGRY_SOUL] = "HUNGRY_SOUL"
____exports.EffectVariant.EXPLOSION_WAVE = 187
____exports.EffectVariant[____exports.EffectVariant.EXPLOSION_WAVE] = "EXPLOSION_WAVE"
____exports.EffectVariant.DIVINE_INTERVENTION = 188
____exports.EffectVariant[____exports.EffectVariant.DIVINE_INTERVENTION] = "DIVINE_INTERVENTION"
____exports.EffectVariant.PURGATORY = 189
____exports.EffectVariant[____exports.EffectVariant.PURGATORY] = "PURGATORY"
____exports.EffectVariant.MOTHER_TRACER = 190
____exports.EffectVariant[____exports.EffectVariant.MOTHER_TRACER] = "MOTHER_TRACER"
____exports.EffectVariant.PICKUP_GHOST = 191
____exports.EffectVariant[____exports.EffectVariant.PICKUP_GHOST] = "PICKUP_GHOST"
____exports.EffectVariant.FISSURE_SPAWNER = 192
____exports.EffectVariant[____exports.EffectVariant.FISSURE_SPAWNER] = "FISSURE_SPAWNER"
____exports.EffectVariant.ANIMA_CHAIN = 193
____exports.EffectVariant[____exports.EffectVariant.ANIMA_CHAIN] = "ANIMA_CHAIN"
____exports.EffectVariant.DARK_SNARE = 194
____exports.EffectVariant[____exports.EffectVariant.DARK_SNARE] = "DARK_SNARE"
____exports.EffectVariant.CREEP_LIQUID_POOP = 195
____exports.EffectVariant[____exports.EffectVariant.CREEP_LIQUID_POOP] = "CREEP_LIQUID_POOP"
____exports.EffectVariant.GROUND_GLOW = 196
____exports.EffectVariant[____exports.EffectVariant.GROUND_GLOW] = "GROUND_GLOW"
____exports.EffectVariant.DEAD_BIRD = 197
____exports.EffectVariant[____exports.EffectVariant.DEAD_BIRD] = "DEAD_BIRD"
____exports.EffectVariant.GENERIC_TRACER = 198
____exports.EffectVariant[____exports.EffectVariant.GENERIC_TRACER] = "GENERIC_TRACER"
____exports.EffectVariant.ULTRA_DEATH_SCYTHE = 199
____exports.EffectVariant[____exports.EffectVariant.ULTRA_DEATH_SCYTHE] = "ULTRA_DEATH_SCYTHE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.Controller"] = function(...) 
local ____exports = {}
--- These enums loop after 31, so 32 = D_PAD_LEFT, 63 = D_PAD_LEFT, and so on.
-- 
-- There appears to be no input key for joystick movement.
____exports.Controller = {}
____exports.Controller.D_PAD_LEFT = 0
____exports.Controller[____exports.Controller.D_PAD_LEFT] = "D_PAD_LEFT"
____exports.Controller.D_PAD_RIGHT = 1
____exports.Controller[____exports.Controller.D_PAD_RIGHT] = "D_PAD_RIGHT"
____exports.Controller.D_PAD_UP = 2
____exports.Controller[____exports.Controller.D_PAD_UP] = "D_PAD_UP"
____exports.Controller.D_PAD_DOWN = 3
____exports.Controller[____exports.Controller.D_PAD_DOWN] = "D_PAD_DOWN"
____exports.Controller.BUTTON_A = 4
____exports.Controller[____exports.Controller.BUTTON_A] = "BUTTON_A"
____exports.Controller.BUTTON_B = 5
____exports.Controller[____exports.Controller.BUTTON_B] = "BUTTON_B"
____exports.Controller.BUTTON_X = 6
____exports.Controller[____exports.Controller.BUTTON_X] = "BUTTON_X"
____exports.Controller.BUTTON_Y = 7
____exports.Controller[____exports.Controller.BUTTON_Y] = "BUTTON_Y"
____exports.Controller.BUMPER_LEFT = 8
____exports.Controller[____exports.Controller.BUMPER_LEFT] = "BUMPER_LEFT"
____exports.Controller.TRIGGER_LEFT = 9
____exports.Controller[____exports.Controller.TRIGGER_LEFT] = "TRIGGER_LEFT"
____exports.Controller.STICK_LEFT = 10
____exports.Controller[____exports.Controller.STICK_LEFT] = "STICK_LEFT"
____exports.Controller.BUMPER_RIGHT = 11
____exports.Controller[____exports.Controller.BUMPER_RIGHT] = "BUMPER_RIGHT"
____exports.Controller.TRIGGER_RIGHT = 12
____exports.Controller[____exports.Controller.TRIGGER_RIGHT] = "TRIGGER_RIGHT"
____exports.Controller.STICK_RIGHT = 13
____exports.Controller[____exports.Controller.STICK_RIGHT] = "STICK_RIGHT"
____exports.Controller.BUTTON_BACK = 14
____exports.Controller[____exports.Controller.BUTTON_BACK] = "BUTTON_BACK"
____exports.Controller.BUTTON_START = 15
____exports.Controller[____exports.Controller.BUTTON_START] = "BUTTON_START"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ControllerIndex"] = function(...) 
local ____exports = {}
____exports.ControllerIndex = {}
____exports.ControllerIndex.KEYBOARD = 0
____exports.ControllerIndex[____exports.ControllerIndex.KEYBOARD] = "KEYBOARD"
____exports.ControllerIndex.CONTROLLER_1 = 1
____exports.ControllerIndex[____exports.ControllerIndex.CONTROLLER_1] = "CONTROLLER_1"
____exports.ControllerIndex.CONTROLLER_2 = 2
____exports.ControllerIndex[____exports.ControllerIndex.CONTROLLER_2] = "CONTROLLER_2"
____exports.ControllerIndex.CONTROLLER_3 = 3
____exports.ControllerIndex[____exports.ControllerIndex.CONTROLLER_3] = "CONTROLLER_3"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.Difficulty"] = function(...) 
local ____exports = {}
____exports.Difficulty = {}
____exports.Difficulty.NORMAL = 0
____exports.Difficulty[____exports.Difficulty.NORMAL] = "NORMAL"
____exports.Difficulty.HARD = 1
____exports.Difficulty[____exports.Difficulty.HARD] = "HARD"
____exports.Difficulty.GREED = 2
____exports.Difficulty[____exports.Difficulty.GREED] = "GREED"
____exports.Difficulty.GREEDIER = 3
____exports.Difficulty[____exports.Difficulty.GREEDIER] = "GREEDIER"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.Dimension"] = function(...) 
local ____exports = {}
____exports.Dimension = {}
____exports.Dimension.CURRENT = -1
____exports.Dimension[____exports.Dimension.CURRENT] = "CURRENT"
____exports.Dimension.MAIN = 0
____exports.Dimension[____exports.Dimension.MAIN] = "MAIN"
____exports.Dimension.SECONDARY = 1
____exports.Dimension[____exports.Dimension.SECONDARY] = "SECONDARY"
____exports.Dimension.DEATH_CERTIFICATE = 2
____exports.Dimension[____exports.Dimension.DEATH_CERTIFICATE] = "DEATH_CERTIFICATE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.Direction"] = function(...) 
local ____exports = {}
____exports.Direction = {}
____exports.Direction.NO_DIRECTION = -1
____exports.Direction[____exports.Direction.NO_DIRECTION] = "NO_DIRECTION"
____exports.Direction.LEFT = 0
____exports.Direction[____exports.Direction.LEFT] = "LEFT"
____exports.Direction.UP = 1
____exports.Direction[____exports.Direction.UP] = "UP"
____exports.Direction.RIGHT = 2
____exports.Direction[____exports.Direction.RIGHT] = "RIGHT"
____exports.Direction.DOWN = 3
____exports.Direction[____exports.Direction.DOWN] = "DOWN"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.DoorSlot"] = function(...) 
local ____exports = {}
____exports.DoorSlot = {}
____exports.DoorSlot.NO_DOOR_SLOT = -1
____exports.DoorSlot[____exports.DoorSlot.NO_DOOR_SLOT] = "NO_DOOR_SLOT"
____exports.DoorSlot.LEFT_0 = 0
____exports.DoorSlot[____exports.DoorSlot.LEFT_0] = "LEFT_0"
____exports.DoorSlot.UP_0 = 1
____exports.DoorSlot[____exports.DoorSlot.UP_0] = "UP_0"
____exports.DoorSlot.RIGHT_0 = 2
____exports.DoorSlot[____exports.DoorSlot.RIGHT_0] = "RIGHT_0"
____exports.DoorSlot.DOWN_0 = 3
____exports.DoorSlot[____exports.DoorSlot.DOWN_0] = "DOWN_0"
____exports.DoorSlot.LEFT_1 = 4
____exports.DoorSlot[____exports.DoorSlot.LEFT_1] = "LEFT_1"
____exports.DoorSlot.UP_1 = 5
____exports.DoorSlot[____exports.DoorSlot.UP_1] = "UP_1"
____exports.DoorSlot.RIGHT_1 = 6
____exports.DoorSlot[____exports.DoorSlot.RIGHT_1] = "RIGHT_1"
____exports.DoorSlot.DOWN_1 = 7
____exports.DoorSlot[____exports.DoorSlot.DOWN_1] = "DOWN_1"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.Ending"] = function(...) 
local ____exports = {}
--- Matches the entries in the "cutscenes.xml" file.
____exports.Ending = {}
____exports.Ending.INTRO = 1
____exports.Ending[____exports.Ending.INTRO] = "INTRO"
____exports.Ending.CREDITS = 2
____exports.Ending[____exports.Ending.CREDITS] = "CREDITS"
____exports.Ending.EPILOGUE = 3
____exports.Ending[____exports.Ending.EPILOGUE] = "EPILOGUE"
____exports.Ending.WOMB_EDEN = 4
____exports.Ending[____exports.Ending.WOMB_EDEN] = "WOMB_EDEN"
____exports.Ending.WOMB_RUBBER_CEMENT = 5
____exports.Ending[____exports.Ending.WOMB_RUBBER_CEMENT] = "WOMB_RUBBER_CEMENT"
____exports.Ending.WOMB_NOOSE = 6
____exports.Ending[____exports.Ending.WOMB_NOOSE] = "WOMB_NOOSE"
____exports.Ending.WOMB_WIRE_COAT_HANGER = 7
____exports.Ending[____exports.Ending.WOMB_WIRE_COAT_HANGER] = "WOMB_WIRE_COAT_HANGER"
____exports.Ending.WOMB_EVERYTHING_IS_TERRIBLE = 8
____exports.Ending[____exports.Ending.WOMB_EVERYTHING_IS_TERRIBLE] = "WOMB_EVERYTHING_IS_TERRIBLE"
____exports.Ending.WOMB_IPECAC = 9
____exports.Ending[____exports.Ending.WOMB_IPECAC] = "WOMB_IPECAC"
____exports.Ending.WOMB_EXPERIMENTAL_TREATMENT = 10
____exports.Ending[____exports.Ending.WOMB_EXPERIMENTAL_TREATMENT] = "WOMB_EXPERIMENTAL_TREATMENT"
____exports.Ending.WOMB_A_QUARTER = 11
____exports.Ending[____exports.Ending.WOMB_A_QUARTER] = "WOMB_A_QUARTER"
____exports.Ending.WOMB_DR_FETUS = 12
____exports.Ending[____exports.Ending.WOMB_DR_FETUS] = "WOMB_DR_FETUS"
____exports.Ending.WOMB_BLUE_BABY = 13
____exports.Ending[____exports.Ending.WOMB_BLUE_BABY] = "WOMB_BLUE_BABY"
____exports.Ending.WOMB_IT_LIVES = 14
____exports.Ending[____exports.Ending.WOMB_IT_LIVES] = "WOMB_IT_LIVES"
____exports.Ending.SHEOL = 15
____exports.Ending[____exports.Ending.SHEOL] = "SHEOL"
____exports.Ending.CATHEDRAL = 16
____exports.Ending[____exports.Ending.CATHEDRAL] = "CATHEDRAL"
____exports.Ending.CHEST = 17
____exports.Ending[____exports.Ending.CHEST] = "CHEST"
____exports.Ending.DARK_ROOM = 18
____exports.Ending[____exports.Ending.DARK_ROOM] = "DARK_ROOM"
____exports.Ending.MEGA_SATAN = 19
____exports.Ending[____exports.Ending.MEGA_SATAN] = "MEGA_SATAN"
____exports.Ending.BLUE_WOMB = 20
____exports.Ending[____exports.Ending.BLUE_WOMB] = "BLUE_WOMB"
____exports.Ending.GREED_MODE = 21
____exports.Ending[____exports.Ending.GREED_MODE] = "GREED_MODE"
____exports.Ending.THE_VOID = 22
____exports.Ending[____exports.Ending.THE_VOID] = "THE_VOID"
____exports.Ending.GREEDIER = 23
____exports.Ending[____exports.Ending.GREEDIER] = "GREEDIER"
____exports.Ending.MOTHER = 24
____exports.Ending[____exports.Ending.MOTHER] = "MOTHER"
____exports.Ending.DOGMA = 25
____exports.Ending[____exports.Ending.DOGMA] = "DOGMA"
____exports.Ending.BEAST = 26
____exports.Ending[____exports.Ending.BEAST] = "BEAST"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.EntityCollisionClass"] = function(...) 
local ____exports = {}
____exports.EntityCollisionClass = {}
____exports.EntityCollisionClass.NONE = 0
____exports.EntityCollisionClass[____exports.EntityCollisionClass.NONE] = "NONE"
____exports.EntityCollisionClass.PLAYER_ONLY = 1
____exports.EntityCollisionClass[____exports.EntityCollisionClass.PLAYER_ONLY] = "PLAYER_ONLY"
____exports.EntityCollisionClass.PLAYER_OBJECTS = 2
____exports.EntityCollisionClass[____exports.EntityCollisionClass.PLAYER_OBJECTS] = "PLAYER_OBJECTS"
____exports.EntityCollisionClass.ENEMIES = 3
____exports.EntityCollisionClass[____exports.EntityCollisionClass.ENEMIES] = "ENEMIES"
____exports.EntityCollisionClass.ALL = 4
____exports.EntityCollisionClass[____exports.EntityCollisionClass.ALL] = "ALL"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.EntityGridCollisionClass"] = function(...) 
local ____exports = {}
____exports.EntityGridCollisionClass = {}
____exports.EntityGridCollisionClass.NONE = 0
____exports.EntityGridCollisionClass[____exports.EntityGridCollisionClass.NONE] = "NONE"
____exports.EntityGridCollisionClass.WALLS_X = 1
____exports.EntityGridCollisionClass[____exports.EntityGridCollisionClass.WALLS_X] = "WALLS_X"
____exports.EntityGridCollisionClass.WALLS_Y = 2
____exports.EntityGridCollisionClass[____exports.EntityGridCollisionClass.WALLS_Y] = "WALLS_Y"
____exports.EntityGridCollisionClass.WALLS = 3
____exports.EntityGridCollisionClass[____exports.EntityGridCollisionClass.WALLS] = "WALLS"
____exports.EntityGridCollisionClass.BULLET = 4
____exports.EntityGridCollisionClass[____exports.EntityGridCollisionClass.BULLET] = "BULLET"
____exports.EntityGridCollisionClass.GROUND = 5
____exports.EntityGridCollisionClass[____exports.EntityGridCollisionClass.GROUND] = "GROUND"
____exports.EntityGridCollisionClass.NO_PITS = 6
____exports.EntityGridCollisionClass[____exports.EntityGridCollisionClass.NO_PITS] = "NO_PITS"
____exports.EntityGridCollisionClass.PITS_ONLY = 7
____exports.EntityGridCollisionClass[____exports.EntityGridCollisionClass.PITS_ONLY] = "PITS_ONLY"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.EntityType"] = function(...) 
local ____exports = {}
____exports.EntityType = {}
____exports.EntityType.NULL = 0
____exports.EntityType[____exports.EntityType.NULL] = "NULL"
____exports.EntityType.PLAYER = 1
____exports.EntityType[____exports.EntityType.PLAYER] = "PLAYER"
____exports.EntityType.TEAR = 2
____exports.EntityType[____exports.EntityType.TEAR] = "TEAR"
____exports.EntityType.FAMILIAR = 3
____exports.EntityType[____exports.EntityType.FAMILIAR] = "FAMILIAR"
____exports.EntityType.BOMB = 4
____exports.EntityType[____exports.EntityType.BOMB] = "BOMB"
____exports.EntityType.PICKUP = 5
____exports.EntityType[____exports.EntityType.PICKUP] = "PICKUP"
____exports.EntityType.SLOT = 6
____exports.EntityType[____exports.EntityType.SLOT] = "SLOT"
____exports.EntityType.LASER = 7
____exports.EntityType[____exports.EntityType.LASER] = "LASER"
____exports.EntityType.KNIFE = 8
____exports.EntityType[____exports.EntityType.KNIFE] = "KNIFE"
____exports.EntityType.PROJECTILE = 9
____exports.EntityType[____exports.EntityType.PROJECTILE] = "PROJECTILE"
____exports.EntityType.GAPER = 10
____exports.EntityType[____exports.EntityType.GAPER] = "GAPER"
____exports.EntityType.GUSHER = 11
____exports.EntityType[____exports.EntityType.GUSHER] = "GUSHER"
____exports.EntityType.HORF = 12
____exports.EntityType[____exports.EntityType.HORF] = "HORF"
____exports.EntityType.FLY = 13
____exports.EntityType[____exports.EntityType.FLY] = "FLY"
____exports.EntityType.POOTER = 14
____exports.EntityType[____exports.EntityType.POOTER] = "POOTER"
____exports.EntityType.CLOTTY = 15
____exports.EntityType[____exports.EntityType.CLOTTY] = "CLOTTY"
____exports.EntityType.MULLIGAN = 16
____exports.EntityType[____exports.EntityType.MULLIGAN] = "MULLIGAN"
____exports.EntityType.SHOPKEEPER = 17
____exports.EntityType[____exports.EntityType.SHOPKEEPER] = "SHOPKEEPER"
____exports.EntityType.ATTACK_FLY = 18
____exports.EntityType[____exports.EntityType.ATTACK_FLY] = "ATTACK_FLY"
____exports.EntityType.LARRY_JR = 19
____exports.EntityType[____exports.EntityType.LARRY_JR] = "LARRY_JR"
____exports.EntityType.MONSTRO = 20
____exports.EntityType[____exports.EntityType.MONSTRO] = "MONSTRO"
____exports.EntityType.MAGGOT = 21
____exports.EntityType[____exports.EntityType.MAGGOT] = "MAGGOT"
____exports.EntityType.HIVE = 22
____exports.EntityType[____exports.EntityType.HIVE] = "HIVE"
____exports.EntityType.CHARGER = 23
____exports.EntityType[____exports.EntityType.CHARGER] = "CHARGER"
____exports.EntityType.GLOBIN = 24
____exports.EntityType[____exports.EntityType.GLOBIN] = "GLOBIN"
____exports.EntityType.BOOM_FLY = 25
____exports.EntityType[____exports.EntityType.BOOM_FLY] = "BOOM_FLY"
____exports.EntityType.MAW = 26
____exports.EntityType[____exports.EntityType.MAW] = "MAW"
____exports.EntityType.HOST = 27
____exports.EntityType[____exports.EntityType.HOST] = "HOST"
____exports.EntityType.CHUB = 28
____exports.EntityType[____exports.EntityType.CHUB] = "CHUB"
____exports.EntityType.HOPPER = 29
____exports.EntityType[____exports.EntityType.HOPPER] = "HOPPER"
____exports.EntityType.BOIL = 30
____exports.EntityType[____exports.EntityType.BOIL] = "BOIL"
____exports.EntityType.SPITTY = 31
____exports.EntityType[____exports.EntityType.SPITTY] = "SPITTY"
____exports.EntityType.BRAIN = 32
____exports.EntityType[____exports.EntityType.BRAIN] = "BRAIN"
____exports.EntityType.FIREPLACE = 33
____exports.EntityType[____exports.EntityType.FIREPLACE] = "FIREPLACE"
____exports.EntityType.LEAPER = 34
____exports.EntityType[____exports.EntityType.LEAPER] = "LEAPER"
____exports.EntityType.MR_MAW = 35
____exports.EntityType[____exports.EntityType.MR_MAW] = "MR_MAW"
____exports.EntityType.GURDY = 36
____exports.EntityType[____exports.EntityType.GURDY] = "GURDY"
____exports.EntityType.BABY = 38
____exports.EntityType[____exports.EntityType.BABY] = "BABY"
____exports.EntityType.VIS = 39
____exports.EntityType[____exports.EntityType.VIS] = "VIS"
____exports.EntityType.GUTS = 40
____exports.EntityType[____exports.EntityType.GUTS] = "GUTS"
____exports.EntityType.KNIGHT = 41
____exports.EntityType[____exports.EntityType.KNIGHT] = "KNIGHT"
____exports.EntityType.GRIMACE = 42
____exports.EntityType[____exports.EntityType.GRIMACE] = "GRIMACE"
____exports.EntityType.MONSTRO_2 = 43
____exports.EntityType[____exports.EntityType.MONSTRO_2] = "MONSTRO_2"
____exports.EntityType.POKY = 44
____exports.EntityType[____exports.EntityType.POKY] = "POKY"
____exports.EntityType.MOM = 45
____exports.EntityType[____exports.EntityType.MOM] = "MOM"
____exports.EntityType.SLOTH = 46
____exports.EntityType[____exports.EntityType.SLOTH] = "SLOTH"
____exports.EntityType.LUST = 47
____exports.EntityType[____exports.EntityType.LUST] = "LUST"
____exports.EntityType.WRATH = 48
____exports.EntityType[____exports.EntityType.WRATH] = "WRATH"
____exports.EntityType.GLUTTONY = 49
____exports.EntityType[____exports.EntityType.GLUTTONY] = "GLUTTONY"
____exports.EntityType.GREED = 50
____exports.EntityType[____exports.EntityType.GREED] = "GREED"
____exports.EntityType.ENVY = 51
____exports.EntityType[____exports.EntityType.ENVY] = "ENVY"
____exports.EntityType.PRIDE = 52
____exports.EntityType[____exports.EntityType.PRIDE] = "PRIDE"
____exports.EntityType.DOPLE = 53
____exports.EntityType[____exports.EntityType.DOPLE] = "DOPLE"
____exports.EntityType.FLAMING_HOPPER = 54
____exports.EntityType[____exports.EntityType.FLAMING_HOPPER] = "FLAMING_HOPPER"
____exports.EntityType.LEECH = 55
____exports.EntityType[____exports.EntityType.LEECH] = "LEECH"
____exports.EntityType.LUMP = 56
____exports.EntityType[____exports.EntityType.LUMP] = "LUMP"
____exports.EntityType.MEMBRAIN = 57
____exports.EntityType[____exports.EntityType.MEMBRAIN] = "MEMBRAIN"
____exports.EntityType.PARA_BITE = 58
____exports.EntityType[____exports.EntityType.PARA_BITE] = "PARA_BITE"
____exports.EntityType.FRED = 59
____exports.EntityType[____exports.EntityType.FRED] = "FRED"
____exports.EntityType.EYE = 60
____exports.EntityType[____exports.EntityType.EYE] = "EYE"
____exports.EntityType.SUCKER = 61
____exports.EntityType[____exports.EntityType.SUCKER] = "SUCKER"
____exports.EntityType.PIN = 62
____exports.EntityType[____exports.EntityType.PIN] = "PIN"
____exports.EntityType.FAMINE = 63
____exports.EntityType[____exports.EntityType.FAMINE] = "FAMINE"
____exports.EntityType.PESTILENCE = 64
____exports.EntityType[____exports.EntityType.PESTILENCE] = "PESTILENCE"
____exports.EntityType.WAR = 65
____exports.EntityType[____exports.EntityType.WAR] = "WAR"
____exports.EntityType.DEATH = 66
____exports.EntityType[____exports.EntityType.DEATH] = "DEATH"
____exports.EntityType.DUKE = 67
____exports.EntityType[____exports.EntityType.DUKE] = "DUKE"
____exports.EntityType.PEEP = 68
____exports.EntityType[____exports.EntityType.PEEP] = "PEEP"
____exports.EntityType.LOKI = 69
____exports.EntityType[____exports.EntityType.LOKI] = "LOKI"
____exports.EntityType.FISTULA_BIG = 71
____exports.EntityType[____exports.EntityType.FISTULA_BIG] = "FISTULA_BIG"
____exports.EntityType.FISTULA_MEDIUM = 72
____exports.EntityType[____exports.EntityType.FISTULA_MEDIUM] = "FISTULA_MEDIUM"
____exports.EntityType.FISTULA_SMALL = 73
____exports.EntityType[____exports.EntityType.FISTULA_SMALL] = "FISTULA_SMALL"
____exports.EntityType.BLASTOCYST_BIG = 74
____exports.EntityType[____exports.EntityType.BLASTOCYST_BIG] = "BLASTOCYST_BIG"
____exports.EntityType.BLASTOCYST_MEDIUM = 75
____exports.EntityType[____exports.EntityType.BLASTOCYST_MEDIUM] = "BLASTOCYST_MEDIUM"
____exports.EntityType.BLASTOCYST_SMALL = 76
____exports.EntityType[____exports.EntityType.BLASTOCYST_SMALL] = "BLASTOCYST_SMALL"
____exports.EntityType.EMBRYO = 77
____exports.EntityType[____exports.EntityType.EMBRYO] = "EMBRYO"
____exports.EntityType.MOMS_HEART = 78
____exports.EntityType[____exports.EntityType.MOMS_HEART] = "MOMS_HEART"
____exports.EntityType.GEMINI = 79
____exports.EntityType[____exports.EntityType.GEMINI] = "GEMINI"
____exports.EntityType.MOTER = 80
____exports.EntityType[____exports.EntityType.MOTER] = "MOTER"
____exports.EntityType.FALLEN = 81
____exports.EntityType[____exports.EntityType.FALLEN] = "FALLEN"
____exports.EntityType.HEADLESS_HORSEMAN = 82
____exports.EntityType[____exports.EntityType.HEADLESS_HORSEMAN] = "HEADLESS_HORSEMAN"
____exports.EntityType.HORSEMAN_HEAD = 83
____exports.EntityType[____exports.EntityType.HORSEMAN_HEAD] = "HORSEMAN_HEAD"
____exports.EntityType.SATAN = 84
____exports.EntityType[____exports.EntityType.SATAN] = "SATAN"
____exports.EntityType.SPIDER = 85
____exports.EntityType[____exports.EntityType.SPIDER] = "SPIDER"
____exports.EntityType.KEEPER = 86
____exports.EntityType[____exports.EntityType.KEEPER] = "KEEPER"
____exports.EntityType.GURGLE = 87
____exports.EntityType[____exports.EntityType.GURGLE] = "GURGLE"
____exports.EntityType.WALKING_BOIL = 88
____exports.EntityType[____exports.EntityType.WALKING_BOIL] = "WALKING_BOIL"
____exports.EntityType.BUTTLICKER = 89
____exports.EntityType[____exports.EntityType.BUTTLICKER] = "BUTTLICKER"
____exports.EntityType.HANGER = 90
____exports.EntityType[____exports.EntityType.HANGER] = "HANGER"
____exports.EntityType.SWARMER = 91
____exports.EntityType[____exports.EntityType.SWARMER] = "SWARMER"
____exports.EntityType.HEART = 92
____exports.EntityType[____exports.EntityType.HEART] = "HEART"
____exports.EntityType.MASK = 93
____exports.EntityType[____exports.EntityType.MASK] = "MASK"
____exports.EntityType.BIG_SPIDER = 94
____exports.EntityType[____exports.EntityType.BIG_SPIDER] = "BIG_SPIDER"
____exports.EntityType.ETERNAL_FLY = 96
____exports.EntityType[____exports.EntityType.ETERNAL_FLY] = "ETERNAL_FLY"
____exports.EntityType.MASK_OF_INFAMY = 97
____exports.EntityType[____exports.EntityType.MASK_OF_INFAMY] = "MASK_OF_INFAMY"
____exports.EntityType.HEART_OF_INFAMY = 98
____exports.EntityType[____exports.EntityType.HEART_OF_INFAMY] = "HEART_OF_INFAMY"
____exports.EntityType.GURDY_JR = 99
____exports.EntityType[____exports.EntityType.GURDY_JR] = "GURDY_JR"
____exports.EntityType.WIDOW = 100
____exports.EntityType[____exports.EntityType.WIDOW] = "WIDOW"
____exports.EntityType.DADDY_LONG_LEGS = 101
____exports.EntityType[____exports.EntityType.DADDY_LONG_LEGS] = "DADDY_LONG_LEGS"
____exports.EntityType.ISAAC = 102
____exports.EntityType[____exports.EntityType.ISAAC] = "ISAAC"
____exports.EntityType.STONE_EYE = 201
____exports.EntityType[____exports.EntityType.STONE_EYE] = "STONE_EYE"
____exports.EntityType.CONSTANT_STONE_SHOOTER = 202
____exports.EntityType[____exports.EntityType.CONSTANT_STONE_SHOOTER] = "CONSTANT_STONE_SHOOTER"
____exports.EntityType.BRIMSTONE_HEAD = 203
____exports.EntityType[____exports.EntityType.BRIMSTONE_HEAD] = "BRIMSTONE_HEAD"
____exports.EntityType.MOBILE_HOST = 204
____exports.EntityType[____exports.EntityType.MOBILE_HOST] = "MOBILE_HOST"
____exports.EntityType.NEST = 205
____exports.EntityType[____exports.EntityType.NEST] = "NEST"
____exports.EntityType.BABY_LONG_LEGS = 206
____exports.EntityType[____exports.EntityType.BABY_LONG_LEGS] = "BABY_LONG_LEGS"
____exports.EntityType.CRAZY_LONG_LEGS = 207
____exports.EntityType[____exports.EntityType.CRAZY_LONG_LEGS] = "CRAZY_LONG_LEGS"
____exports.EntityType.FATTY = 208
____exports.EntityType[____exports.EntityType.FATTY] = "FATTY"
____exports.EntityType.FAT_SACK = 209
____exports.EntityType[____exports.EntityType.FAT_SACK] = "FAT_SACK"
____exports.EntityType.BLUBBER = 210
____exports.EntityType[____exports.EntityType.BLUBBER] = "BLUBBER"
____exports.EntityType.HALF_SACK = 211
____exports.EntityType[____exports.EntityType.HALF_SACK] = "HALF_SACK"
____exports.EntityType.DEATHS_HEAD = 212
____exports.EntityType[____exports.EntityType.DEATHS_HEAD] = "DEATHS_HEAD"
____exports.EntityType.MOMS_HAND = 213
____exports.EntityType[____exports.EntityType.MOMS_HAND] = "MOMS_HAND"
____exports.EntityType.FLY_L2 = 214
____exports.EntityType[____exports.EntityType.FLY_L2] = "FLY_L2"
____exports.EntityType.SPIDER_L2 = 215
____exports.EntityType[____exports.EntityType.SPIDER_L2] = "SPIDER_L2"
____exports.EntityType.SWINGER = 216
____exports.EntityType[____exports.EntityType.SWINGER] = "SWINGER"
____exports.EntityType.DIP = 217
____exports.EntityType[____exports.EntityType.DIP] = "DIP"
____exports.EntityType.WALL_HUGGER = 218
____exports.EntityType[____exports.EntityType.WALL_HUGGER] = "WALL_HUGGER"
____exports.EntityType.WIZOOB = 219
____exports.EntityType[____exports.EntityType.WIZOOB] = "WIZOOB"
____exports.EntityType.SQUIRT = 220
____exports.EntityType[____exports.EntityType.SQUIRT] = "SQUIRT"
____exports.EntityType.COD_WORM = 221
____exports.EntityType[____exports.EntityType.COD_WORM] = "COD_WORM"
____exports.EntityType.RING_OF_FLIES = 222
____exports.EntityType[____exports.EntityType.RING_OF_FLIES] = "RING_OF_FLIES"
____exports.EntityType.DINGA = 223
____exports.EntityType[____exports.EntityType.DINGA] = "DINGA"
____exports.EntityType.OOB = 224
____exports.EntityType[____exports.EntityType.OOB] = "OOB"
____exports.EntityType.BLACK_MAW = 225
____exports.EntityType[____exports.EntityType.BLACK_MAW] = "BLACK_MAW"
____exports.EntityType.SKINNY = 226
____exports.EntityType[____exports.EntityType.SKINNY] = "SKINNY"
____exports.EntityType.BONY = 227
____exports.EntityType[____exports.EntityType.BONY] = "BONY"
____exports.EntityType.HOMUNCULUS = 228
____exports.EntityType[____exports.EntityType.HOMUNCULUS] = "HOMUNCULUS"
____exports.EntityType.TUMOR = 229
____exports.EntityType[____exports.EntityType.TUMOR] = "TUMOR"
____exports.EntityType.CAMILLO_JR = 230
____exports.EntityType[____exports.EntityType.CAMILLO_JR] = "CAMILLO_JR"
____exports.EntityType.NERVE_ENDING = 231
____exports.EntityType[____exports.EntityType.NERVE_ENDING] = "NERVE_ENDING"
____exports.EntityType.ONE_TOOTH = 234
____exports.EntityType[____exports.EntityType.ONE_TOOTH] = "ONE_TOOTH"
____exports.EntityType.GAPING_MAW = 235
____exports.EntityType[____exports.EntityType.GAPING_MAW] = "GAPING_MAW"
____exports.EntityType.BROKEN_GAPING_MAW = 236
____exports.EntityType[____exports.EntityType.BROKEN_GAPING_MAW] = "BROKEN_GAPING_MAW"
____exports.EntityType.GURGLING = 237
____exports.EntityType[____exports.EntityType.GURGLING] = "GURGLING"
____exports.EntityType.SPLASHER = 238
____exports.EntityType[____exports.EntityType.SPLASHER] = "SPLASHER"
____exports.EntityType.GRUB = 239
____exports.EntityType[____exports.EntityType.GRUB] = "GRUB"
____exports.EntityType.WALL_CREEP = 240
____exports.EntityType[____exports.EntityType.WALL_CREEP] = "WALL_CREEP"
____exports.EntityType.RAGE_CREEP = 241
____exports.EntityType[____exports.EntityType.RAGE_CREEP] = "RAGE_CREEP"
____exports.EntityType.BLIND_CREEP = 242
____exports.EntityType[____exports.EntityType.BLIND_CREEP] = "BLIND_CREEP"
____exports.EntityType.CONJOINED_SPITTY = 243
____exports.EntityType[____exports.EntityType.CONJOINED_SPITTY] = "CONJOINED_SPITTY"
____exports.EntityType.ROUND_WORM = 244
____exports.EntityType[____exports.EntityType.ROUND_WORM] = "ROUND_WORM"
____exports.EntityType.POOP = 245
____exports.EntityType[____exports.EntityType.POOP] = "POOP"
____exports.EntityType.RAGLING = 246
____exports.EntityType[____exports.EntityType.RAGLING] = "RAGLING"
____exports.EntityType.FLESH_MOBILE_HOST = 247
____exports.EntityType[____exports.EntityType.FLESH_MOBILE_HOST] = "FLESH_MOBILE_HOST"
____exports.EntityType.PSY_HORF = 248
____exports.EntityType[____exports.EntityType.PSY_HORF] = "PSY_HORF"
____exports.EntityType.FULL_FLY = 249
____exports.EntityType[____exports.EntityType.FULL_FLY] = "FULL_FLY"
____exports.EntityType.TICKING_SPIDER = 250
____exports.EntityType[____exports.EntityType.TICKING_SPIDER] = "TICKING_SPIDER"
____exports.EntityType.BEGOTTEN = 251
____exports.EntityType[____exports.EntityType.BEGOTTEN] = "BEGOTTEN"
____exports.EntityType.NULLS = 252
____exports.EntityType[____exports.EntityType.NULLS] = "NULLS"
____exports.EntityType.PSY_TUMOR = 253
____exports.EntityType[____exports.EntityType.PSY_TUMOR] = "PSY_TUMOR"
____exports.EntityType.FLOATING_KNIGHT = 254
____exports.EntityType[____exports.EntityType.FLOATING_KNIGHT] = "FLOATING_KNIGHT"
____exports.EntityType.NIGHT_CRAWLER = 255
____exports.EntityType[____exports.EntityType.NIGHT_CRAWLER] = "NIGHT_CRAWLER"
____exports.EntityType.DART_FLY = 256
____exports.EntityType[____exports.EntityType.DART_FLY] = "DART_FLY"
____exports.EntityType.CONJOINED_FATTY = 257
____exports.EntityType[____exports.EntityType.CONJOINED_FATTY] = "CONJOINED_FATTY"
____exports.EntityType.FAT_BAT = 258
____exports.EntityType[____exports.EntityType.FAT_BAT] = "FAT_BAT"
____exports.EntityType.IMP = 259
____exports.EntityType[____exports.EntityType.IMP] = "IMP"
____exports.EntityType.THE_HAUNT = 260
____exports.EntityType[____exports.EntityType.THE_HAUNT] = "THE_HAUNT"
____exports.EntityType.DINGLE = 261
____exports.EntityType[____exports.EntityType.DINGLE] = "DINGLE"
____exports.EntityType.MEGA_MAW = 262
____exports.EntityType[____exports.EntityType.MEGA_MAW] = "MEGA_MAW"
____exports.EntityType.GATE = 263
____exports.EntityType[____exports.EntityType.GATE] = "GATE"
____exports.EntityType.MEGA_FATTY = 264
____exports.EntityType[____exports.EntityType.MEGA_FATTY] = "MEGA_FATTY"
____exports.EntityType.CAGE = 265
____exports.EntityType[____exports.EntityType.CAGE] = "CAGE"
____exports.EntityType.MAMA_GURDY = 266
____exports.EntityType[____exports.EntityType.MAMA_GURDY] = "MAMA_GURDY"
____exports.EntityType.DARK_ONE = 267
____exports.EntityType[____exports.EntityType.DARK_ONE] = "DARK_ONE"
____exports.EntityType.ADVERSARY = 268
____exports.EntityType[____exports.EntityType.ADVERSARY] = "ADVERSARY"
____exports.EntityType.POLYCEPHALUS = 269
____exports.EntityType[____exports.EntityType.POLYCEPHALUS] = "POLYCEPHALUS"
____exports.EntityType.MR_FRED = 270
____exports.EntityType[____exports.EntityType.MR_FRED] = "MR_FRED"
____exports.EntityType.URIEL = 271
____exports.EntityType[____exports.EntityType.URIEL] = "URIEL"
____exports.EntityType.GABRIEL = 272
____exports.EntityType[____exports.EntityType.GABRIEL] = "GABRIEL"
____exports.EntityType.THE_LAMB = 273
____exports.EntityType[____exports.EntityType.THE_LAMB] = "THE_LAMB"
____exports.EntityType.MEGA_SATAN = 274
____exports.EntityType[____exports.EntityType.MEGA_SATAN] = "MEGA_SATAN"
____exports.EntityType.MEGA_SATAN_2 = 275
____exports.EntityType[____exports.EntityType.MEGA_SATAN_2] = "MEGA_SATAN_2"
____exports.EntityType.ROUNDY = 276
____exports.EntityType[____exports.EntityType.ROUNDY] = "ROUNDY"
____exports.EntityType.BLACK_BONY = 277
____exports.EntityType[____exports.EntityType.BLACK_BONY] = "BLACK_BONY"
____exports.EntityType.BLACK_GLOBIN = 278
____exports.EntityType[____exports.EntityType.BLACK_GLOBIN] = "BLACK_GLOBIN"
____exports.EntityType.BLACK_GLOBIN_HEAD = 279
____exports.EntityType[____exports.EntityType.BLACK_GLOBIN_HEAD] = "BLACK_GLOBIN_HEAD"
____exports.EntityType.BLACK_GLOBIN_BODY = 280
____exports.EntityType[____exports.EntityType.BLACK_GLOBIN_BODY] = "BLACK_GLOBIN_BODY"
____exports.EntityType.SWARM = 281
____exports.EntityType[____exports.EntityType.SWARM] = "SWARM"
____exports.EntityType.MEGA_CLOTTY = 282
____exports.EntityType[____exports.EntityType.MEGA_CLOTTY] = "MEGA_CLOTTY"
____exports.EntityType.BONE_KNIGHT = 283
____exports.EntityType[____exports.EntityType.BONE_KNIGHT] = "BONE_KNIGHT"
____exports.EntityType.CYCLOPIA = 284
____exports.EntityType[____exports.EntityType.CYCLOPIA] = "CYCLOPIA"
____exports.EntityType.RED_GHOST = 285
____exports.EntityType[____exports.EntityType.RED_GHOST] = "RED_GHOST"
____exports.EntityType.FLESH_DEATHS_HEAD = 286
____exports.EntityType[____exports.EntityType.FLESH_DEATHS_HEAD] = "FLESH_DEATHS_HEAD"
____exports.EntityType.MOMS_DEAD_HAND = 287
____exports.EntityType[____exports.EntityType.MOMS_DEAD_HAND] = "MOMS_DEAD_HAND"
____exports.EntityType.DUKIE = 288
____exports.EntityType[____exports.EntityType.DUKIE] = "DUKIE"
____exports.EntityType.ULCER = 289
____exports.EntityType[____exports.EntityType.ULCER] = "ULCER"
____exports.EntityType.MEATBALL = 290
____exports.EntityType[____exports.EntityType.MEATBALL] = "MEATBALL"
____exports.EntityType.PITFALL = 291
____exports.EntityType[____exports.EntityType.PITFALL] = "PITFALL"
____exports.EntityType.MOVABLE_TNT = 292
____exports.EntityType[____exports.EntityType.MOVABLE_TNT] = "MOVABLE_TNT"
____exports.EntityType.ULTRA_COIN = 293
____exports.EntityType[____exports.EntityType.ULTRA_COIN] = "ULTRA_COIN"
____exports.EntityType.ULTRA_DOOR = 294
____exports.EntityType[____exports.EntityType.ULTRA_DOOR] = "ULTRA_DOOR"
____exports.EntityType.CORN_MINE = 295
____exports.EntityType[____exports.EntityType.CORN_MINE] = "CORN_MINE"
____exports.EntityType.HUSH_FLY = 296
____exports.EntityType[____exports.EntityType.HUSH_FLY] = "HUSH_FLY"
____exports.EntityType.HUSH_GAPER = 297
____exports.EntityType[____exports.EntityType.HUSH_GAPER] = "HUSH_GAPER"
____exports.EntityType.HUSH_BOIL = 298
____exports.EntityType[____exports.EntityType.HUSH_BOIL] = "HUSH_BOIL"
____exports.EntityType.GREED_GAPER = 299
____exports.EntityType[____exports.EntityType.GREED_GAPER] = "GREED_GAPER"
____exports.EntityType.MUSHROOM = 300
____exports.EntityType[____exports.EntityType.MUSHROOM] = "MUSHROOM"
____exports.EntityType.POISON_MIND = 301
____exports.EntityType[____exports.EntityType.POISON_MIND] = "POISON_MIND"
____exports.EntityType.STONEY = 302
____exports.EntityType[____exports.EntityType.STONEY] = "STONEY"
____exports.EntityType.BLISTER = 303
____exports.EntityType[____exports.EntityType.BLISTER] = "BLISTER"
____exports.EntityType.THE_THING = 304
____exports.EntityType[____exports.EntityType.THE_THING] = "THE_THING"
____exports.EntityType.MINISTRO = 305
____exports.EntityType[____exports.EntityType.MINISTRO] = "MINISTRO"
____exports.EntityType.PORTAL = 306
____exports.EntityType[____exports.EntityType.PORTAL] = "PORTAL"
____exports.EntityType.TAR_BOY = 307
____exports.EntityType[____exports.EntityType.TAR_BOY] = "TAR_BOY"
____exports.EntityType.FISTULOID = 308
____exports.EntityType[____exports.EntityType.FISTULOID] = "FISTULOID"
____exports.EntityType.GUSH = 309
____exports.EntityType[____exports.EntityType.GUSH] = "GUSH"
____exports.EntityType.LEPER = 310
____exports.EntityType[____exports.EntityType.LEPER] = "LEPER"
____exports.EntityType.MR_MINE = 311
____exports.EntityType[____exports.EntityType.MR_MINE] = "MR_MINE"
____exports.EntityType.STAIN = 401
____exports.EntityType[____exports.EntityType.STAIN] = "STAIN"
____exports.EntityType.BROWNIE = 402
____exports.EntityType[____exports.EntityType.BROWNIE] = "BROWNIE"
____exports.EntityType.FORSAKEN = 403
____exports.EntityType[____exports.EntityType.FORSAKEN] = "FORSAKEN"
____exports.EntityType.LITTLE_HORN = 404
____exports.EntityType[____exports.EntityType.LITTLE_HORN] = "LITTLE_HORN"
____exports.EntityType.RAG_MAN = 405
____exports.EntityType[____exports.EntityType.RAG_MAN] = "RAG_MAN"
____exports.EntityType.ULTRA_GREED = 406
____exports.EntityType[____exports.EntityType.ULTRA_GREED] = "ULTRA_GREED"
____exports.EntityType.HUSH = 407
____exports.EntityType[____exports.EntityType.HUSH] = "HUSH"
____exports.EntityType.HUSH_SKINLESS = 408
____exports.EntityType[____exports.EntityType.HUSH_SKINLESS] = "HUSH_SKINLESS"
____exports.EntityType.RAG_MEGA = 409
____exports.EntityType[____exports.EntityType.RAG_MEGA] = "RAG_MEGA"
____exports.EntityType.SISTERS_VIS = 410
____exports.EntityType[____exports.EntityType.SISTERS_VIS] = "SISTERS_VIS"
____exports.EntityType.BIG_HORN = 411
____exports.EntityType[____exports.EntityType.BIG_HORN] = "BIG_HORN"
____exports.EntityType.DELIRIUM = 412
____exports.EntityType[____exports.EntityType.DELIRIUM] = "DELIRIUM"
____exports.EntityType.MATRIARCH = 413
____exports.EntityType[____exports.EntityType.MATRIARCH] = "MATRIARCH"
____exports.EntityType.BLOOD_PUPPY = 802
____exports.EntityType[____exports.EntityType.BLOOD_PUPPY] = "BLOOD_PUPPY"
____exports.EntityType.QUAKE_GRIMACE = 804
____exports.EntityType[____exports.EntityType.QUAKE_GRIMACE] = "QUAKE_GRIMACE"
____exports.EntityType.BISHOP = 805
____exports.EntityType[____exports.EntityType.BISHOP] = "BISHOP"
____exports.EntityType.BUBBLES = 806
____exports.EntityType[____exports.EntityType.BUBBLES] = "BUBBLES"
____exports.EntityType.WRAITH = 807
____exports.EntityType[____exports.EntityType.WRAITH] = "WRAITH"
____exports.EntityType.WILLO = 808
____exports.EntityType[____exports.EntityType.WILLO] = "WILLO"
____exports.EntityType.BOMB_GRIMACE = 809
____exports.EntityType[____exports.EntityType.BOMB_GRIMACE] = "BOMB_GRIMACE"
____exports.EntityType.SMALL_LEECH = 810
____exports.EntityType[____exports.EntityType.SMALL_LEECH] = "SMALL_LEECH"
____exports.EntityType.DEEP_GAPER = 811
____exports.EntityType[____exports.EntityType.DEEP_GAPER] = "DEEP_GAPER"
____exports.EntityType.SUB_HORF = 812
____exports.EntityType[____exports.EntityType.SUB_HORF] = "SUB_HORF"
____exports.EntityType.BLURB = 813
____exports.EntityType[____exports.EntityType.BLURB] = "BLURB"
____exports.EntityType.STRIDER = 814
____exports.EntityType[____exports.EntityType.STRIDER] = "STRIDER"
____exports.EntityType.FISSURE = 815
____exports.EntityType[____exports.EntityType.FISSURE] = "FISSURE"
____exports.EntityType.POLTY = 816
____exports.EntityType[____exports.EntityType.POLTY] = "POLTY"
____exports.EntityType.PREY = 817
____exports.EntityType[____exports.EntityType.PREY] = "PREY"
____exports.EntityType.ROCK_SPIDER = 818
____exports.EntityType[____exports.EntityType.ROCK_SPIDER] = "ROCK_SPIDER"
____exports.EntityType.FLY_BOMB = 819
____exports.EntityType[____exports.EntityType.FLY_BOMB] = "FLY_BOMB"
____exports.EntityType.DANNY = 820
____exports.EntityType[____exports.EntityType.DANNY] = "DANNY"
____exports.EntityType.BLASTER = 821
____exports.EntityType[____exports.EntityType.BLASTER] = "BLASTER"
____exports.EntityType.BOUNCER = 822
____exports.EntityType[____exports.EntityType.BOUNCER] = "BOUNCER"
____exports.EntityType.QUAKEY = 823
____exports.EntityType[____exports.EntityType.QUAKEY] = "QUAKEY"
____exports.EntityType.GYRO = 824
____exports.EntityType[____exports.EntityType.GYRO] = "GYRO"
____exports.EntityType.FIRE_WORM = 825
____exports.EntityType[____exports.EntityType.FIRE_WORM] = "FIRE_WORM"
____exports.EntityType.HARDY = 826
____exports.EntityType[____exports.EntityType.HARDY] = "HARDY"
____exports.EntityType.FACELESS = 827
____exports.EntityType[____exports.EntityType.FACELESS] = "FACELESS"
____exports.EntityType.NECRO = 828
____exports.EntityType[____exports.EntityType.NECRO] = "NECRO"
____exports.EntityType.MOLE = 829
____exports.EntityType[____exports.EntityType.MOLE] = "MOLE"
____exports.EntityType.BIG_BONY = 830
____exports.EntityType[____exports.EntityType.BIG_BONY] = "BIG_BONY"
____exports.EntityType.GUTTED_FATTY = 831
____exports.EntityType[____exports.EntityType.GUTTED_FATTY] = "GUTTED_FATTY"
____exports.EntityType.EXORCIST = 832
____exports.EntityType[____exports.EntityType.EXORCIST] = "EXORCIST"
____exports.EntityType.CANDLER = 833
____exports.EntityType[____exports.EntityType.CANDLER] = "CANDLER"
____exports.EntityType.WHIPPER = 834
____exports.EntityType[____exports.EntityType.WHIPPER] = "WHIPPER"
____exports.EntityType.PEEPER_FATTY = 835
____exports.EntityType[____exports.EntityType.PEEPER_FATTY] = "PEEPER_FATTY"
____exports.EntityType.VIS_VERSA = 836
____exports.EntityType[____exports.EntityType.VIS_VERSA] = "VIS_VERSA"
____exports.EntityType.HENRY = 837
____exports.EntityType[____exports.EntityType.HENRY] = "HENRY"
____exports.EntityType.WILLO_L2 = 838
____exports.EntityType[____exports.EntityType.WILLO_L2] = "WILLO_L2"
____exports.EntityType.PON = 840
____exports.EntityType[____exports.EntityType.PON] = "PON"
____exports.EntityType.REVENANT = 841
____exports.EntityType[____exports.EntityType.REVENANT] = "REVENANT"
____exports.EntityType.BOMBGAGGER = 844
____exports.EntityType[____exports.EntityType.BOMBGAGGER] = "BOMBGAGGER"
____exports.EntityType.GAPER_L2 = 850
____exports.EntityType[____exports.EntityType.GAPER_L2] = "GAPER_L2"
____exports.EntityType.TWITCHY = 851
____exports.EntityType[____exports.EntityType.TWITCHY] = "TWITCHY"
____exports.EntityType.SPIKEBALL = 852
____exports.EntityType[____exports.EntityType.SPIKEBALL] = "SPIKEBALL"
____exports.EntityType.SMALL_MAGGOT = 853
____exports.EntityType[____exports.EntityType.SMALL_MAGGOT] = "SMALL_MAGGOT"
____exports.EntityType.ADULT_LEECH = 854
____exports.EntityType[____exports.EntityType.ADULT_LEECH] = "ADULT_LEECH"
____exports.EntityType.CHARGER_L2 = 855
____exports.EntityType[____exports.EntityType.CHARGER_L2] = "CHARGER_L2"
____exports.EntityType.GASBAG = 856
____exports.EntityType[____exports.EntityType.GASBAG] = "GASBAG"
____exports.EntityType.COHORT = 857
____exports.EntityType[____exports.EntityType.COHORT] = "COHORT"
____exports.EntityType.FLOATING_HOST = 859
____exports.EntityType[____exports.EntityType.FLOATING_HOST] = "FLOATING_HOST"
____exports.EntityType.UNBORN = 860
____exports.EntityType[____exports.EntityType.UNBORN] = "UNBORN"
____exports.EntityType.PUSTULE = 861
____exports.EntityType[____exports.EntityType.PUSTULE] = "PUSTULE"
____exports.EntityType.CYST = 862
____exports.EntityType[____exports.EntityType.CYST] = "CYST"
____exports.EntityType.MORNINGSTAR = 863
____exports.EntityType[____exports.EntityType.MORNINGSTAR] = "MORNINGSTAR"
____exports.EntityType.MOCKULUS = 864
____exports.EntityType[____exports.EntityType.MOCKULUS] = "MOCKULUS"
____exports.EntityType.EVIS = 865
____exports.EntityType[____exports.EntityType.EVIS] = "EVIS"
____exports.EntityType.DARK_ESAU = 866
____exports.EntityType[____exports.EntityType.DARK_ESAU] = "DARK_ESAU"
____exports.EntityType.MOTHERS_SHADOW = 867
____exports.EntityType[____exports.EntityType.MOTHERS_SHADOW] = "MOTHERS_SHADOW"
____exports.EntityType.ARMY_FLY = 868
____exports.EntityType[____exports.EntityType.ARMY_FLY] = "ARMY_FLY"
____exports.EntityType.MIGRAINE = 869
____exports.EntityType[____exports.EntityType.MIGRAINE] = "MIGRAINE"
____exports.EntityType.DRIP = 870
____exports.EntityType[____exports.EntityType.DRIP] = "DRIP"
____exports.EntityType.SPLURT = 871
____exports.EntityType[____exports.EntityType.SPLURT] = "SPLURT"
____exports.EntityType.CLOGGY = 872
____exports.EntityType[____exports.EntityType.CLOGGY] = "CLOGGY"
____exports.EntityType.FLY_TRAP = 873
____exports.EntityType[____exports.EntityType.FLY_TRAP] = "FLY_TRAP"
____exports.EntityType.GAS_DWARF = 874
____exports.EntityType[____exports.EntityType.GAS_DWARF] = "GAS_DWARF"
____exports.EntityType.POOT_MINE = 875
____exports.EntityType[____exports.EntityType.POOT_MINE] = "POOT_MINE"
____exports.EntityType.DUMP = 876
____exports.EntityType[____exports.EntityType.DUMP] = "DUMP"
____exports.EntityType.GRUDGE = 877
____exports.EntityType[____exports.EntityType.GRUDGE] = "GRUDGE"
____exports.EntityType.BUTT_SLICKER = 878
____exports.EntityType[____exports.EntityType.BUTT_SLICKER] = "BUTT_SLICKER"
____exports.EntityType.BLOATY = 879
____exports.EntityType[____exports.EntityType.BLOATY] = "BLOATY"
____exports.EntityType.FLESH_MAIDEN = 880
____exports.EntityType[____exports.EntityType.FLESH_MAIDEN] = "FLESH_MAIDEN"
____exports.EntityType.NEEDLE = 881
____exports.EntityType[____exports.EntityType.NEEDLE] = "NEEDLE"
____exports.EntityType.DUST = 882
____exports.EntityType[____exports.EntityType.DUST] = "DUST"
____exports.EntityType.BABY_BEGOTTEN = 883
____exports.EntityType[____exports.EntityType.BABY_BEGOTTEN] = "BABY_BEGOTTEN"
____exports.EntityType.SWARM_SPIDER = 884
____exports.EntityType[____exports.EntityType.SWARM_SPIDER] = "SWARM_SPIDER"
____exports.EntityType.CULTIST = 885
____exports.EntityType[____exports.EntityType.CULTIST] = "CULTIST"
____exports.EntityType.VIS_FATTY = 886
____exports.EntityType[____exports.EntityType.VIS_FATTY] = "VIS_FATTY"
____exports.EntityType.DUSTY_DEATHS_HEAD = 887
____exports.EntityType[____exports.EntityType.DUSTY_DEATHS_HEAD] = "DUSTY_DEATHS_HEAD"
____exports.EntityType.SHADY = 888
____exports.EntityType[____exports.EntityType.SHADY] = "SHADY"
____exports.EntityType.CLICKETY_CLACK = 889
____exports.EntityType[____exports.EntityType.CLICKETY_CLACK] = "CLICKETY_CLACK"
____exports.EntityType.MAZE_ROAMER = 890
____exports.EntityType[____exports.EntityType.MAZE_ROAMER] = "MAZE_ROAMER"
____exports.EntityType.GOAT = 891
____exports.EntityType[____exports.EntityType.GOAT] = "GOAT"
____exports.EntityType.POOFER = 892
____exports.EntityType[____exports.EntityType.POOFER] = "POOFER"
____exports.EntityType.BALL_AND_CHAIN = 893
____exports.EntityType[____exports.EntityType.BALL_AND_CHAIN] = "BALL_AND_CHAIN"
____exports.EntityType.REAP_CREEP = 900
____exports.EntityType[____exports.EntityType.REAP_CREEP] = "REAP_CREEP"
____exports.EntityType.LIL_BLUB = 901
____exports.EntityType[____exports.EntityType.LIL_BLUB] = "LIL_BLUB"
____exports.EntityType.RAINMAKER = 902
____exports.EntityType[____exports.EntityType.RAINMAKER] = "RAINMAKER"
____exports.EntityType.VISAGE = 903
____exports.EntityType[____exports.EntityType.VISAGE] = "VISAGE"
____exports.EntityType.SIREN = 904
____exports.EntityType[____exports.EntityType.SIREN] = "SIREN"
____exports.EntityType.HERETIC = 905
____exports.EntityType[____exports.EntityType.HERETIC] = "HERETIC"
____exports.EntityType.HORNFEL = 906
____exports.EntityType[____exports.EntityType.HORNFEL] = "HORNFEL"
____exports.EntityType.GIDEON = 907
____exports.EntityType[____exports.EntityType.GIDEON] = "GIDEON"
____exports.EntityType.BABY_PLUM = 908
____exports.EntityType[____exports.EntityType.BABY_PLUM] = "BABY_PLUM"
____exports.EntityType.SCOURGE = 909
____exports.EntityType[____exports.EntityType.SCOURGE] = "SCOURGE"
____exports.EntityType.CHIMERA = 910
____exports.EntityType[____exports.EntityType.CHIMERA] = "CHIMERA"
____exports.EntityType.ROTGUT = 911
____exports.EntityType[____exports.EntityType.ROTGUT] = "ROTGUT"
____exports.EntityType.MOTHER = 912
____exports.EntityType[____exports.EntityType.MOTHER] = "MOTHER"
____exports.EntityType.MIN_MIN = 913
____exports.EntityType[____exports.EntityType.MIN_MIN] = "MIN_MIN"
____exports.EntityType.CLOG = 914
____exports.EntityType[____exports.EntityType.CLOG] = "CLOG"
____exports.EntityType.SINGE = 915
____exports.EntityType[____exports.EntityType.SINGE] = "SINGE"
____exports.EntityType.BUMBINO = 916
____exports.EntityType[____exports.EntityType.BUMBINO] = "BUMBINO"
____exports.EntityType.COLOSTOMIA = 917
____exports.EntityType[____exports.EntityType.COLOSTOMIA] = "COLOSTOMIA"
____exports.EntityType.TURDLET = 918
____exports.EntityType[____exports.EntityType.TURDLET] = "TURDLET"
____exports.EntityType.RAGLICH = 919
____exports.EntityType[____exports.EntityType.RAGLICH] = "RAGLICH"
____exports.EntityType.HORNY_BOYS = 920
____exports.EntityType[____exports.EntityType.HORNY_BOYS] = "HORNY_BOYS"
____exports.EntityType.CLUTCH = 921
____exports.EntityType[____exports.EntityType.CLUTCH] = "CLUTCH"
____exports.EntityType.DOGMA = 950
____exports.EntityType[____exports.EntityType.DOGMA] = "DOGMA"
____exports.EntityType.BEAST = 951
____exports.EntityType[____exports.EntityType.BEAST] = "BEAST"
____exports.EntityType.GENERIC_PROP = 960
____exports.EntityType[____exports.EntityType.GENERIC_PROP] = "GENERIC_PROP"
____exports.EntityType.FROZEN_ENEMY = 963
____exports.EntityType[____exports.EntityType.FROZEN_ENEMY] = "FROZEN_ENEMY"
____exports.EntityType.DUMMY = 964
____exports.EntityType[____exports.EntityType.DUMMY] = "DUMMY"
____exports.EntityType.MINECART = 965
____exports.EntityType[____exports.EntityType.MINECART] = "MINECART"
____exports.EntityType.SIREN_HELPER = 966
____exports.EntityType[____exports.EntityType.SIREN_HELPER] = "SIREN_HELPER"
____exports.EntityType.HORNFEL_DOOR = 967
____exports.EntityType[____exports.EntityType.HORNFEL_DOOR] = "HORNFEL_DOOR"
____exports.EntityType.EFFECT = 1000
____exports.EntityType[____exports.EntityType.EFFECT] = "EFFECT"
____exports.EntityType.TEXT = 9001
____exports.EntityType[____exports.EntityType.TEXT] = "TEXT"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.FadeoutTarget"] = function(...) 
local ____exports = {}
____exports.FadeoutTarget = {}
____exports.FadeoutTarget.FILE_SELECT = 0
____exports.FadeoutTarget[____exports.FadeoutTarget.FILE_SELECT] = "FILE_SELECT"
____exports.FadeoutTarget.MAIN_MENU = 1
____exports.FadeoutTarget[____exports.FadeoutTarget.MAIN_MENU] = "MAIN_MENU"
____exports.FadeoutTarget.TITLE_SCREEN = 2
____exports.FadeoutTarget[____exports.FadeoutTarget.TITLE_SCREEN] = "TITLE_SCREEN"
____exports.FadeoutTarget.RESTART_RUN = 3
____exports.FadeoutTarget[____exports.FadeoutTarget.RESTART_RUN] = "RESTART_RUN"
____exports.FadeoutTarget.RESTART_RUN_LAP = 4
____exports.FadeoutTarget[____exports.FadeoutTarget.RESTART_RUN_LAP] = "RESTART_RUN_LAP"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.ActionTrigger"] = function(...) 
local ____exports = {}
--- Corresponds to `ActionTrigger`.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local ActionTriggerInternal = {
    NONE = 0,
    BOMB_PLACED = 1 << 0,
    MOVED = 1 << 1,
    SHOOTING = 1 << 2,
    CARD_PILL_USED = 1 << 3,
    ITEM_ACTIVATED = 1 << 4,
    ITEMS_DROPPED = 1 << 5
}
____exports.ActionTrigger = ActionTriggerInternal
____exports.ActionTriggerZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.CacheFlag"] = function(...) 
local ____exports = {}
--- Corresponds to `CacheFlag`.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local CacheFlagInternal = {
    DAMAGE = 1 << 0,
    FIRE_DELAY = 1 << 1,
    SHOT_SPEED = 1 << 2,
    RANGE = 1 << 3,
    SPEED = 1 << 4,
    TEAR_FLAG = 1 << 5,
    TEAR_COLOR = 1 << 6,
    FLYING = 1 << 7,
    WEAPON = 1 << 8,
    FAMILIARS = 1 << 9,
    LUCK = 1 << 10,
    SIZE = 1 << 11,
    COLOR = 1 << 12,
    PICKUP_VISION = 1 << 13,
    ALL = (1 << 16) - 1,
    TWIN_SYNC = 1 << 31
}
____exports.CacheFlag = CacheFlagInternal
____exports.CacheFlagZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.DamageFlag"] = function(...) 
local ____exports = {}
--- Corresponds to `DamageFlag`.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local DamageFlagInternal = {
    NO_KILL = 1 << 0,
    FIRE = 1 << 1,
    EXPLOSION = 1 << 2,
    LASER = 1 << 3,
    ACID = 1 << 4,
    RED_HEARTS = 1 << 5,
    COUNTDOWN = 1 << 6,
    SPIKES = 1 << 7,
    CLONES = 1 << 8,
    POOP = 1 << 9,
    DEVIL = 1 << 10,
    ISSAC_HEART = 1 << 11,
    TNT = 1 << 12,
    INVINCIBLE = 1 << 13,
    SPAWN_FLY = 1 << 14,
    POISON_BURN = 1 << 15,
    CURSED_DOOR = 1 << 16,
    TIMER = 1 << 17,
    IV_BAG = 1 << 18,
    PITFALL = 1 << 19,
    CHEST = 1 << 20,
    FAKE = 1 << 21,
    BOOGER = 1 << 22,
    SPAWN_BLACK_HEART = 1 << 23,
    CRUSH = 1 << 24,
    NO_MODIFIERS = 1 << 25,
    SPAWN_RED_HEART = 1 << 26,
    SPAWN_COIN = 1 << 27,
    NO_PENALTIES = 1 << 28,
    SPAWN_TEMP_HEART = 1 << 29,
    IGNORE_ARMOR = 1 << 30,
    SPAWN_CARD = 1 << 31,
    SPAWN_RUNE = 1 << 32
}
____exports.DamageFlag = DamageFlagInternal
____exports.DamageFlagZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.DisplayFlag"] = function(...) 
local ____exports = {}
--- Corresponds to `DisplayFlag`.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local DisplayFlagInternal = {INVISIBLE = 1 << -1, VISIBLE = 1 << 0, SHADOW = 1 << 1, SHOW_ICON = 1 << 2}
____exports.DisplayFlag = DisplayFlagInternal
____exports.DisplayFlagZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.DoorSlotFlag"] = function(...) 
local ____exports = {}
local ____DoorSlot = require("lua_modules.isaac-typescript-definitions.enums.DoorSlot")
local DoorSlot = ____DoorSlot.DoorSlot
--- For `GridEntityType.DOOR` (16)
-- 
-- Corresponds to `DoorSlotFlag`.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local DoorSlotFlagInternal = {
    LEFT_0 = 1 << DoorSlot.LEFT_0,
    UP_0 = 1 << DoorSlot.UP_0,
    RIGHT_0 = 1 << DoorSlot.RIGHT_0,
    DOWN_0 = 1 << DoorSlot.DOWN_0,
    LEFT_1 = 1 << DoorSlot.LEFT_1,
    UP_1 = 1 << DoorSlot.UP_1,
    RIGHT_1 = 1 << DoorSlot.RIGHT_1,
    DOWN_1 = 1 << DoorSlot.DOWN_1
}
____exports.DoorSlotFlag = DoorSlotFlagInternal
____exports.DoorSlotFlagZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.EntityFlag"] = function(...) 
local ____exports = {}
--- Corresponds to `EntityFlag`.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local EntityFlagInternal = {
    NO_STATUS_EFFECTS = 1 << 0,
    NO_INTERPOLATE = 1 << 1,
    APPEAR = 1 << 2,
    RENDER_FLOOR = 1 << 3,
    NO_TARGET = 1 << 4,
    FREEZE = 1 << 5,
    POISON = 1 << 6,
    SLOW = 1 << 7,
    CHARM = 1 << 8,
    CONFUSION = 1 << 9,
    MIDAS_FREEZE = 1 << 10,
    FEAR = 1 << 11,
    BURN = 1 << 12,
    RENDER_WALL = 1 << 13,
    INTERPOLATION_UPDATE = 1 << 14,
    APPLY_GRAVITY = 1 << 15,
    NO_BLOOD_SPLASH = 1 << 16,
    NO_REMOVE_ON_TEX_RENDER = 1 << 17,
    NO_DEATH_TRIGGER = 1 << 18,
    NO_SPIKE_DAMAGE = 1 << 19,
    LASER_POP = 1 << 19,
    ITEM_SHOULD_DUPLICATE = 1 << 19,
    BOSS_DEATH_TRIGGERED = 1 << 20,
    DONT_OVERWRITE = 1 << 21,
    SPAWN_STICKY_SPIDERS = 1 << 22,
    SPAWN_BLACK_HP = 1 << 23,
    SHRINK = 1 << 24,
    NO_FLASH_ON_DAMAGE = 1 << 25,
    NO_KNOCKBACK = 1 << 26,
    SLIPPERY_PHYSICS = 1 << 27,
    ADD_JAR_FLY = 1 << 28,
    FRIENDLY = 1 << 29,
    NO_PHYSICS_KNOCKBACK = 1 << 30,
    DONT_COUNT_BOSS_HP = 1 << 31,
    NO_SPRITE_UPDATE = 1 << 32,
    CONTAGIOUS = 1 << 33,
    BLEED_OUT = 1 << 34,
    HIDE_HP_BAR = 1 << 35,
    NO_DAMAGE_BLINK = 1 << 36,
    PERSISTENT = 1 << 37,
    BACKDROP_DETAIL = 1 << 38,
    AMBUSH = 1 << 39,
    GLITCH = 1 << 40,
    SPIN = 1 << 41,
    NO_REWARD = 1 << 42,
    REDUCE_GIBS = 1 << 43,
    TRANSITION_UPDATE = 1 << 44,
    NO_PLAYER_CONTROL = 1 << 45,
    NO_QUERY = 1 << 46,
    KNOCKED_BACK = 1 << 47,
    APPLY_IMPACT_DAMAGE = 1 << 48,
    ICE_FROZEN = 1 << 49,
    ICE = 1 << 50,
    MAGNETIZED = 1 << 51,
    BAITED = 1 << 52,
    KILL_SWITCH = 1 << 53,
    WEAKNESS = 1 << 54,
    EXTRA_GORE = 1 << 55,
    BRIMSTONE_MARKED = 1 << 56,
    HELD = 1 << 57,
    THROWN = 1 << 58,
    FRIENDLY_BALL = 1 << 59
}
____exports.EntityFlag = EntityFlagInternal
____exports.EntityFlagZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.EntityPartition"] = function(...) 
local ____exports = {}
--- Corresponds to `EntityPartition`.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local EntityPartitionInternal = {
    FAMILIAR = 1 << 0,
    BULLET = 1 << 1,
    TEAR = 1 << 2,
    ENEMY = 1 << 3,
    PICKUP = 1 << 4,
    PLAYER = 1 << 5,
    EFFECT = 1 << 6
}
____exports.EntityPartition = EntityPartitionInternal
____exports.EntityPartitionZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.ItemConfigTag"] = function(...) 
local ____exports = {}
--- Corresponds to `ItemConfigTag`.
-- 
-- Matches the ItemConfig.TAG_ members of the ItemConfig class. In IsaacScript, we re-implement this
-- as an object instead, since it is cleaner.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local ItemConfigTagInternal = {
    DEAD = 1 << 0,
    SYRINGE = 1 << 1,
    MOM = 1 << 2,
    TECH = 1 << 3,
    BATTERY = 1 << 4,
    GUPPY = 1 << 5,
    FLY = 1 << 6,
    BOB = 1 << 7,
    MUSHROOM = 1 << 8,
    BABY = 1 << 9,
    ANGEL = 1 << 10,
    DEVIL = 1 << 11,
    POOP = 1 << 12,
    BOOK = 1 << 13,
    SPIDER = 1 << 14,
    QUEST = 1 << 15,
    MONSTER_MANUAL = 1 << 16,
    NO_GREED = 1 << 17,
    FOOD = 1 << 18,
    TEARS_UP = 1 << 19,
    OFFENSIVE = 1 << 20,
    NO_KEEPER = 1 << 21,
    NO_LOST_BR = 1 << 22,
    STARS = 1 << 23,
    SUMMONABLE = 1 << 24,
    NO_CANTRIP = 1 << 25,
    WISP = 1 << 26,
    UNIQUE_FAMILIAR = 1 << 27,
    NO_CHALLENGE = 1 << 28,
    NO_DAILY = 1 << 29,
    LAZ_SHARED = 1 << 30,
    LAZ_SHARED_GLOBAL = 1 << 31,
    NO_EDEN = 1 << 32
}
____exports.ItemConfigTag = ItemConfigTagInternal
____exports.ItemConfigTagZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.LevelCurse"] = function(...) 
local ____exports = {}
--- Corresponds to `LevelCurse`.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local LevelCurseInternal = {
    NONE = 0,
    DARKNESS = 1 << 0,
    LABYRINTH = 1 << 1,
    LOST = 1 << 2,
    UNKNOWN = 1 << 3,
    CURSED = 1 << 4,
    MAZE = 1 << 5,
    BLIND = 1 << 6,
    GIANT = 1 << 7
}
____exports.LevelCurse = LevelCurseInternal
____exports.LevelCurseZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.ProjectileFlag"] = function(...) 
local ____exports = {}
--- For `EntityType.PROJECTILE` (9)
-- 
-- Corresponds to `ProjectileFlag`.
-- 
-- This enum was renamed from "ProjectileFlags" to be consistent with the other flag enums.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local ProjectileFlagInternal = {
    SMART = 1 << 0,
    EXPLODE = 1 << 1,
    ACID_GREEN = 1 << 2,
    GOO = 1 << 3,
    GHOST = 1 << 4,
    WIGGLE = 1 << 5,
    BOOMERANG = 1 << 6,
    HIT_ENEMIES = 1 << 7,
    ACID_RED = 1 << 8,
    GREED = 1 << 9,
    RED_CREEP = 1 << 10,
    ORBIT_CW = 1 << 11,
    ORBIT_CCW = 1 << 12,
    NO_WALL_COLLIDE = 1 << 13,
    CREEP_BROWN = 1 << 14,
    FIRE = 1 << 15,
    BURST = 1 << 16,
    ANY_HEIGHT_ENTITY_HIT = 1 << 17,
    CURVE_LEFT = 1 << 18,
    CURVE_RIGHT = 1 << 19,
    TURN_HORIZONTAL = 1 << 20,
    SINE_VELOCITY = 1 << 21,
    MEGA_WIGGLE = 1 << 22,
    SAWTOOTH_WIGGLE = 1 << 23,
    SLOWED = 1 << 24,
    TRIANGLE = 1 << 25,
    MOVE_TO_PARENT = 1 << 26,
    ACCELERATE = 1 << 27,
    DECELERATE = 1 << 28,
    BURST3 = 1 << 29,
    CONTINUUM = 1 << 30,
    CANT_HIT_PLAYER = 1 << 31,
    CHANGE_FLAGS_AFTER_TIMEOUT = 1 << 32,
    CHANGE_VELOCITY_AFTER_TIMEOUT = 1 << 33,
    STASIS = 1 << 34,
    FIRE_WAVE = 1 << 35,
    FIRE_WAVE_X = 1 << 36,
    ACCELERATE_EX = 1 << 37,
    BURST8 = 1 << 38,
    FIRE_SPAWN = 1 << 39,
    ANTI_GRAVITY = 1 << 40,
    TRACTOR_BEAM = 1 << 41,
    BOUNCE = 1 << 42,
    BOUNCE_FLOOR = 1 << 43,
    SHIELDED = 1 << 44,
    BLUE_FIRE_SPAWN = 1 << 45,
    LASER_SHOT = 1 << 46,
    GODHEAD = 1 << 47,
    SMART_PERFECT = 1 << 48,
    BURST_SPLIT = 1 << 49,
    WIGGLE_ROTGUT = 1 << 50,
    FREEZE = 1 << 51,
    ACCELERATE_TO_POSITION = 1 << 52,
    BROCCOLI = 1 << 53,
    BACK_SPLIT = 1 << 54,
    SIDE_WAVE = 1 << 55,
    ORBIT_PARENT = 1 << 56,
    FADEOUT = 1 << 57
}
____exports.ProjectileFlag = ProjectileFlagInternal
____exports.ProjectileFlagZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.RoomDescriptorFlag"] = function(...) 
local ____exports = {}
--- Corresponds to `RoomDescriptorFlag`.
-- 
-- Matches the `RoomDescriptor.FLAG_*` members of the `RoomDescriptor` class. In IsaacScript, we
-- reimplement this as an object instead, since it is cleaner.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local RoomDescriptorFlagInternal = {
    CLEAR = 1 << 0,
    PRESSURE_PLATES_TRIGGERED = 1 << 1,
    SACRIFICE_DONE = 1 << 2,
    CHALLENGE_DONE = 1 << 3,
    SURPRISE_MINIBOSS = 1 << 4,
    HAS_WATER = 1 << 5,
    ALT_BOSS_MUSIC = 1 << 6,
    NO_REWARD = 1 << 7,
    FLOODED = 1 << 8,
    PITCH_BLACK = 1 << 9,
    RED_ROOM = 1 << 10,
    DEVIL_TREASURE = 1 << 11,
    USE_ALTERNATE_BACKDROP = 1 << 12,
    CURSED_MIST = 1 << 13,
    MAMA_MEGA = 1 << 14,
    NO_WALLS = 1 << 15,
    ROTGUT_CLEARED = 1 << 16,
    PORTAL_LINKED = 1 << 17,
    BLUE_REDIRECT = 1 << 18
}
____exports.RoomDescriptorFlag = RoomDescriptorFlagInternal
____exports.RoomDescriptorFlagZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.TargetFlag"] = function(...) 
local ____exports = {}
--- Corresponds to `TargetFlag`.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local TargetFlagInternal = {
    ALLOW_SWITCHING = 1 << 0,
    DONT_PRIORITIZE_ENEMIES_CLOSE_TO_PLAYER = 1 << 1,
    PRIORITIZE_ENEMIES_WITH_HIGH_HP = 1 << 2,
    PRIORITIZE_ENEMIES_WITH_LOW_HP = 1 << 3,
    GIVE_LOWER_PRIORITY_TO_CURRENT_TARGET = 1 << 4
}
____exports.TargetFlag = TargetFlagInternal
____exports.TargetFlagZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.TearFlag"] = function(...) 
local ____exports = {}
local getTearFlag
function getTearFlag(self, shift)
    return shift >= 64 and BitSet128(0, 1 << shift - 64) or BitSet128(1 << shift, 0)
end
--- For `EntityType.TEAR` (2)
-- 
-- Corresponds to `TargetFlag`.
-- 
-- This enum was renamed from "TearFlags" to be consistent with the other flag enums.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type. Furthermore, enums cannot be instantiated
-- with `BitSet128` objects.)
-- 
-- @enum
-- @notExported
local TearFlagInternal = {
    NORMAL = BitSet128(0, 0),
    SPECTRAL = getTearFlag(nil, 0),
    PIERCING = getTearFlag(nil, 1),
    HOMING = getTearFlag(nil, 2),
    SLOW = getTearFlag(nil, 3),
    POISON = getTearFlag(nil, 4),
    FREEZE = getTearFlag(nil, 5),
    SPLIT = getTearFlag(nil, 6),
    GROW = getTearFlag(nil, 7),
    BOOMERANG = getTearFlag(nil, 8),
    PERSISTENT = getTearFlag(nil, 9),
    WIGGLE = getTearFlag(nil, 10),
    MULLIGAN = getTearFlag(nil, 11),
    EXPLOSIVE = getTearFlag(nil, 12),
    CHARM = getTearFlag(nil, 13),
    CONFUSION = getTearFlag(nil, 14),
    HP_DROP = getTearFlag(nil, 15),
    ORBIT = getTearFlag(nil, 16),
    WAIT = getTearFlag(nil, 17),
    QUAD_SPLIT = getTearFlag(nil, 18),
    BOUNCE = getTearFlag(nil, 19),
    FEAR = getTearFlag(nil, 20),
    SHRINK = getTearFlag(nil, 21),
    BURN = getTearFlag(nil, 22),
    ATTRACTOR = getTearFlag(nil, 23),
    KNOCKBACK = getTearFlag(nil, 24),
    PULSE = getTearFlag(nil, 25),
    SPIRAL = getTearFlag(nil, 26),
    FLAT = getTearFlag(nil, 27),
    SAD_BOMB = getTearFlag(nil, 28),
    BUTT_BOMB = getTearFlag(nil, 29),
    SQUARE = getTearFlag(nil, 30),
    GLOW = getTearFlag(nil, 31),
    GISH = getTearFlag(nil, 32),
    MYSTERIOUS_LIQUID_CREEP = getTearFlag(nil, 33),
    SHIELDED = getTearFlag(nil, 34),
    GLITTER_BOMB = getTearFlag(nil, 35),
    SCATTER_BOMB = getTearFlag(nil, 36),
    STICKY = getTearFlag(nil, 37),
    CONTINUUM = getTearFlag(nil, 38),
    LIGHT_FROM_HEAVEN = getTearFlag(nil, 39),
    COIN_DROP = getTearFlag(nil, 40),
    BLACK_HP_DROP = getTearFlag(nil, 41),
    TRACTOR_BEAM = getTearFlag(nil, 42),
    GODS_FLESH = getTearFlag(nil, 43),
    GREED_COIN = getTearFlag(nil, 44),
    CROSS_BOMB = getTearFlag(nil, 45),
    BIG_SPIRAL = getTearFlag(nil, 46),
    PERMANENT_CONFUSION = getTearFlag(nil, 47),
    BOOGER = getTearFlag(nil, 48),
    EGG = getTearFlag(nil, 49),
    ACID = getTearFlag(nil, 50),
    BONE = getTearFlag(nil, 51),
    BELIAL = getTearFlag(nil, 52),
    MIDAS = getTearFlag(nil, 53),
    NEEDLE = getTearFlag(nil, 54),
    JACOBS = getTearFlag(nil, 55),
    HORN = getTearFlag(nil, 56),
    LASER = getTearFlag(nil, 57),
    POP = getTearFlag(nil, 58),
    ABSORB = getTearFlag(nil, 59),
    LASER_SHOT = getTearFlag(nil, 60),
    HYDRO_BOUNCE = getTearFlag(nil, 61),
    BURST_SPLIT = getTearFlag(nil, 62),
    CREEP_TRAIL = getTearFlag(nil, 63),
    PUNCH = getTearFlag(nil, 64),
    ICE = getTearFlag(nil, 65),
    MAGNETIZE = getTearFlag(nil, 66),
    BAIT = getTearFlag(nil, 67),
    OCCULT = getTearFlag(nil, 68),
    ORBIT_ADVANCED = getTearFlag(nil, 69),
    ROCK = getTearFlag(nil, 70),
    TURN_HORIZONTAL = getTearFlag(nil, 71),
    BLOOD_BOMB = getTearFlag(nil, 72),
    ECOLI = getTearFlag(nil, 73),
    COIN_DROP_DEATH = getTearFlag(nil, 74),
    BRIMSTONE_BOMB = getTearFlag(nil, 75),
    RIFT = getTearFlag(nil, 76),
    SPORE = getTearFlag(nil, 77),
    GHOST_BOMB = getTearFlag(nil, 78),
    CARD_DROP_DEATH = getTearFlag(nil, 79),
    RUNE_DROP_DEATH = getTearFlag(nil, 80),
    TELEPORT = getTearFlag(nil, 81),
    REROLL_ROCK_WISP = getTearFlag(nil, 115),
    MOM_STOMP_WISP = getTearFlag(nil, 116),
    ENEMY_TO_WISP = getTearFlag(nil, 117),
    REROLL_ENEMY = getTearFlag(nil, 118),
    GIGA_BOMB = getTearFlag(nil, 119),
    EXTRA_GORE = getTearFlag(nil, 120),
    RAINBOW = getTearFlag(nil, 121),
    DETONATE = getTearFlag(nil, 122),
    CHAIN = getTearFlag(nil, 123),
    DARK_MATTER = getTearFlag(nil, 124),
    GOLDEN_BOMB = getTearFlag(nil, 125),
    FAST_BOMB = getTearFlag(nil, 126),
    LUDOVICO = getTearFlag(nil, 127)
}
____exports.TearFlag = TearFlagInternal
____exports.TearFlagZero = ____exports.TearFlag.NORMAL
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.flags.UseFlag"] = function(...) 
local ____exports = {}
--- Corresponds to `UseFlag`.
-- 
-- This is represented as an object instead of an enum due to limitations with TypeScript enums. (We
-- want this type to be a child of the `BitFlag` type.)
-- 
-- @enum
-- @notExported
local UseFlagInternal = {
    NO_ANIMATION = 1 << 0,
    NO_COSTUME = 1 << 1,
    OWNED = 1 << 2,
    ALLOW_NON_MAIN_PLAYERS = 1 << 3,
    REMOVE_ACTIVE = 1 << 4,
    CAR_BATTERY = 1 << 5,
    VOID = 1 << 6,
    MIMIC = 1 << 7,
    NO_ANNOUNCER_VOICE = 1 << 8,
    ALLOW_WISP_SPAWN = 1 << 9,
    CUSTOM_VARDATA = 1 << 10,
    NO_HUD = 1 << 11
}
____exports.UseFlag = UseFlagInternal
____exports.UseFlagZero = 0
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.GameStateFlag"] = function(...) 
local ____exports = {}
--- Used with the `Game.GetStateFlag` and `Game.SetStateFlag` methods.
____exports.GameStateFlag = {}
____exports.GameStateFlag.FAMINE_SPAWNED = 0
____exports.GameStateFlag[____exports.GameStateFlag.FAMINE_SPAWNED] = "FAMINE_SPAWNED"
____exports.GameStateFlag.PESTILENCE_SPAWNED = 1
____exports.GameStateFlag[____exports.GameStateFlag.PESTILENCE_SPAWNED] = "PESTILENCE_SPAWNED"
____exports.GameStateFlag.WAR_SPAWNED = 2
____exports.GameStateFlag[____exports.GameStateFlag.WAR_SPAWNED] = "WAR_SPAWNED"
____exports.GameStateFlag.DEATH_SPAWNED = 3
____exports.GameStateFlag[____exports.GameStateFlag.DEATH_SPAWNED] = "DEATH_SPAWNED"
____exports.GameStateFlag.BOSS_POOL_SWITCHED = 4
____exports.GameStateFlag[____exports.GameStateFlag.BOSS_POOL_SWITCHED] = "BOSS_POOL_SWITCHED"
____exports.GameStateFlag.DEVIL_ROOM_SPAWNED = 5
____exports.GameStateFlag[____exports.GameStateFlag.DEVIL_ROOM_SPAWNED] = "DEVIL_ROOM_SPAWNED"
____exports.GameStateFlag.DEVIL_ROOM_VISITED = 6
____exports.GameStateFlag[____exports.GameStateFlag.DEVIL_ROOM_VISITED] = "DEVIL_ROOM_VISITED"
____exports.GameStateFlag.BOOK_REVELATIONS_USED = 7
____exports.GameStateFlag[____exports.GameStateFlag.BOOK_REVELATIONS_USED] = "BOOK_REVELATIONS_USED"
____exports.GameStateFlag.BOOK_PICKED_UP = 8
____exports.GameStateFlag[____exports.GameStateFlag.BOOK_PICKED_UP] = "BOOK_PICKED_UP"
____exports.GameStateFlag.WRATH_SPAWNED = 9
____exports.GameStateFlag[____exports.GameStateFlag.WRATH_SPAWNED] = "WRATH_SPAWNED"
____exports.GameStateFlag.GLUTTONY_SPAWNED = 10
____exports.GameStateFlag[____exports.GameStateFlag.GLUTTONY_SPAWNED] = "GLUTTONY_SPAWNED"
____exports.GameStateFlag.LUST_SPAWNED = 11
____exports.GameStateFlag[____exports.GameStateFlag.LUST_SPAWNED] = "LUST_SPAWNED"
____exports.GameStateFlag.SLOTH_SPAWNED = 12
____exports.GameStateFlag[____exports.GameStateFlag.SLOTH_SPAWNED] = "SLOTH_SPAWNED"
____exports.GameStateFlag.ENVY_SPAWNED = 13
____exports.GameStateFlag[____exports.GameStateFlag.ENVY_SPAWNED] = "ENVY_SPAWNED"
____exports.GameStateFlag.PRIDE_SPAWNED = 14
____exports.GameStateFlag[____exports.GameStateFlag.PRIDE_SPAWNED] = "PRIDE_SPAWNED"
____exports.GameStateFlag.GREED_SPAWNED = 15
____exports.GameStateFlag[____exports.GameStateFlag.GREED_SPAWNED] = "GREED_SPAWNED"
____exports.GameStateFlag.SUPER_GREED_SPAWNED = 16
____exports.GameStateFlag[____exports.GameStateFlag.SUPER_GREED_SPAWNED] = "SUPER_GREED_SPAWNED"
____exports.GameStateFlag.DONATION_SLOT_BROKEN = 17
____exports.GameStateFlag[____exports.GameStateFlag.DONATION_SLOT_BROKEN] = "DONATION_SLOT_BROKEN"
____exports.GameStateFlag.DONATION_SLOT_JAMMED = 18
____exports.GameStateFlag[____exports.GameStateFlag.DONATION_SLOT_JAMMED] = "DONATION_SLOT_JAMMED"
____exports.GameStateFlag.HEAVEN_PATH = 19
____exports.GameStateFlag[____exports.GameStateFlag.HEAVEN_PATH] = "HEAVEN_PATH"
____exports.GameStateFlag.REBIRTH_BOSS_SWITCHED = 20
____exports.GameStateFlag[____exports.GameStateFlag.REBIRTH_BOSS_SWITCHED] = "REBIRTH_BOSS_SWITCHED"
____exports.GameStateFlag.HAUNT_SELECTED = 21
____exports.GameStateFlag[____exports.GameStateFlag.HAUNT_SELECTED] = "HAUNT_SELECTED"
____exports.GameStateFlag.ADVERSARY_SELECTED = 22
____exports.GameStateFlag[____exports.GameStateFlag.ADVERSARY_SELECTED] = "ADVERSARY_SELECTED"
____exports.GameStateFlag.MR_FRED_SELECTED = 23
____exports.GameStateFlag[____exports.GameStateFlag.MR_FRED_SELECTED] = "MR_FRED_SELECTED"
____exports.GameStateFlag.MAMA_GURDY_SELECTED = 24
____exports.GameStateFlag[____exports.GameStateFlag.MAMA_GURDY_SELECTED] = "MAMA_GURDY_SELECTED"
____exports.GameStateFlag.URIEL_SPAWNED = 25
____exports.GameStateFlag[____exports.GameStateFlag.URIEL_SPAWNED] = "URIEL_SPAWNED"
____exports.GameStateFlag.GABRIEL_SPAWNED = 26
____exports.GameStateFlag[____exports.GameStateFlag.GABRIEL_SPAWNED] = "GABRIEL_SPAWNED"
____exports.GameStateFlag.FALLEN_SPAWNED = 27
____exports.GameStateFlag[____exports.GameStateFlag.FALLEN_SPAWNED] = "FALLEN_SPAWNED"
____exports.GameStateFlag.HEADLESS_HORSEMAN_SPAWNED = 28
____exports.GameStateFlag[____exports.GameStateFlag.HEADLESS_HORSEMAN_SPAWNED] = "HEADLESS_HORSEMAN_SPAWNED"
____exports.GameStateFlag.KRAMPUS_SPAWNED = 29
____exports.GameStateFlag[____exports.GameStateFlag.KRAMPUS_SPAWNED] = "KRAMPUS_SPAWNED"
____exports.GameStateFlag.DONATION_SLOT_BLOWN = 30
____exports.GameStateFlag[____exports.GameStateFlag.DONATION_SLOT_BLOWN] = "DONATION_SLOT_BLOWN"
____exports.GameStateFlag.SHOPKEEPER_KILLED = 31
____exports.GameStateFlag[____exports.GameStateFlag.SHOPKEEPER_KILLED] = "SHOPKEEPER_KILLED"
____exports.GameStateFlag.ULTRA_PRIDE_SPAWNED = 32
____exports.GameStateFlag[____exports.GameStateFlag.ULTRA_PRIDE_SPAWNED] = "ULTRA_PRIDE_SPAWNED"
____exports.GameStateFlag.BOSS_RUSH_DONE = 33
____exports.GameStateFlag[____exports.GameStateFlag.BOSS_RUSH_DONE] = "BOSS_RUSH_DONE"
____exports.GameStateFlag.GREED_SLOT_JAMMED = 34
____exports.GameStateFlag[____exports.GameStateFlag.GREED_SLOT_JAMMED] = "GREED_SLOT_JAMMED"
____exports.GameStateFlag.AFTERBIRTH_BOSS_SWITCHED = 35
____exports.GameStateFlag[____exports.GameStateFlag.AFTERBIRTH_BOSS_SWITCHED] = "AFTERBIRTH_BOSS_SWITCHED"
____exports.GameStateFlag.BROWNIE_SELECTED = 36
____exports.GameStateFlag[____exports.GameStateFlag.BROWNIE_SELECTED] = "BROWNIE_SELECTED"
____exports.GameStateFlag.SUPER_BUM_APPEARED = 37
____exports.GameStateFlag[____exports.GameStateFlag.SUPER_BUM_APPEARED] = "SUPER_BUM_APPEARED"
____exports.GameStateFlag.BOSS_RUSH_DOOR_SPAWNED = 38
____exports.GameStateFlag[____exports.GameStateFlag.BOSS_RUSH_DOOR_SPAWNED] = "BOSS_RUSH_DOOR_SPAWNED"
____exports.GameStateFlag.BLUE_WOMB_DOOR_SPAWNED = 39
____exports.GameStateFlag[____exports.GameStateFlag.BLUE_WOMB_DOOR_SPAWNED] = "BLUE_WOMB_DOOR_SPAWNED"
____exports.GameStateFlag.BLUE_WOMB_DONE = 40
____exports.GameStateFlag[____exports.GameStateFlag.BLUE_WOMB_DONE] = "BLUE_WOMB_DONE"
____exports.GameStateFlag.HEART_BOMB_COIN_PICKED = 41
____exports.GameStateFlag[____exports.GameStateFlag.HEART_BOMB_COIN_PICKED] = "HEART_BOMB_COIN_PICKED"
____exports.GameStateFlag.AFTERBIRTH_PLUS_BOSS_SWITCHED = 42
____exports.GameStateFlag[____exports.GameStateFlag.AFTERBIRTH_PLUS_BOSS_SWITCHED] = "AFTERBIRTH_PLUS_BOSS_SWITCHED"
____exports.GameStateFlag.MAX_COINS_OBTAINED = 43
____exports.GameStateFlag[____exports.GameStateFlag.MAX_COINS_OBTAINED] = "MAX_COINS_OBTAINED"
____exports.GameStateFlag.SECRET_PATH = 44
____exports.GameStateFlag[____exports.GameStateFlag.SECRET_PATH] = "SECRET_PATH"
____exports.GameStateFlag.PERFECTION_SPAWNED = 45
____exports.GameStateFlag[____exports.GameStateFlag.PERFECTION_SPAWNED] = "PERFECTION_SPAWNED"
____exports.GameStateFlag.MAUSOLEUM_HEART_KILLED = 46
____exports.GameStateFlag[____exports.GameStateFlag.MAUSOLEUM_HEART_KILLED] = "MAUSOLEUM_HEART_KILLED"
____exports.GameStateFlag.BACKWARDS_PATH_INIT = 47
____exports.GameStateFlag[____exports.GameStateFlag.BACKWARDS_PATH_INIT] = "BACKWARDS_PATH_INIT"
____exports.GameStateFlag.BACKWARDS_PATH = 48
____exports.GameStateFlag[____exports.GameStateFlag.BACKWARDS_PATH] = "BACKWARDS_PATH"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.GridCollisionClass"] = function(...) 
local ____exports = {}
____exports.GridCollisionClass = {}
____exports.GridCollisionClass.NONE = 0
____exports.GridCollisionClass[____exports.GridCollisionClass.NONE] = "NONE"
____exports.GridCollisionClass.PIT = 1
____exports.GridCollisionClass[____exports.GridCollisionClass.PIT] = "PIT"
____exports.GridCollisionClass.OBJECT = 2
____exports.GridCollisionClass[____exports.GridCollisionClass.OBJECT] = "OBJECT"
____exports.GridCollisionClass.SOLID = 3
____exports.GridCollisionClass[____exports.GridCollisionClass.SOLID] = "SOLID"
____exports.GridCollisionClass.WALL = 4
____exports.GridCollisionClass[____exports.GridCollisionClass.WALL] = "WALL"
____exports.GridCollisionClass.WALL_EXCEPT_PLAYER = 5
____exports.GridCollisionClass[____exports.GridCollisionClass.WALL_EXCEPT_PLAYER] = "WALL_EXCEPT_PLAYER"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.GridEntityType"] = function(...) 
local ____exports = {}
____exports.GridEntityType = {}
____exports.GridEntityType.NULL = 0
____exports.GridEntityType[____exports.GridEntityType.NULL] = "NULL"
____exports.GridEntityType.DECORATION = 1
____exports.GridEntityType[____exports.GridEntityType.DECORATION] = "DECORATION"
____exports.GridEntityType.ROCK = 2
____exports.GridEntityType[____exports.GridEntityType.ROCK] = "ROCK"
____exports.GridEntityType.BLOCK = 3
____exports.GridEntityType[____exports.GridEntityType.BLOCK] = "BLOCK"
____exports.GridEntityType.ROCK_TINTED = 4
____exports.GridEntityType[____exports.GridEntityType.ROCK_TINTED] = "ROCK_TINTED"
____exports.GridEntityType.ROCK_BOMB = 5
____exports.GridEntityType[____exports.GridEntityType.ROCK_BOMB] = "ROCK_BOMB"
____exports.GridEntityType.ROCK_ALT = 6
____exports.GridEntityType[____exports.GridEntityType.ROCK_ALT] = "ROCK_ALT"
____exports.GridEntityType.PIT = 7
____exports.GridEntityType[____exports.GridEntityType.PIT] = "PIT"
____exports.GridEntityType.SPIKES = 8
____exports.GridEntityType[____exports.GridEntityType.SPIKES] = "SPIKES"
____exports.GridEntityType.SPIKES_ON_OFF = 9
____exports.GridEntityType[____exports.GridEntityType.SPIKES_ON_OFF] = "SPIKES_ON_OFF"
____exports.GridEntityType.SPIDER_WEB = 10
____exports.GridEntityType[____exports.GridEntityType.SPIDER_WEB] = "SPIDER_WEB"
____exports.GridEntityType.LOCK = 11
____exports.GridEntityType[____exports.GridEntityType.LOCK] = "LOCK"
____exports.GridEntityType.TNT = 12
____exports.GridEntityType[____exports.GridEntityType.TNT] = "TNT"
____exports.GridEntityType.FIREPLACE = 13
____exports.GridEntityType[____exports.GridEntityType.FIREPLACE] = "FIREPLACE"
____exports.GridEntityType.POOP = 14
____exports.GridEntityType[____exports.GridEntityType.POOP] = "POOP"
____exports.GridEntityType.WALL = 15
____exports.GridEntityType[____exports.GridEntityType.WALL] = "WALL"
____exports.GridEntityType.DOOR = 16
____exports.GridEntityType[____exports.GridEntityType.DOOR] = "DOOR"
____exports.GridEntityType.TRAPDOOR = 17
____exports.GridEntityType[____exports.GridEntityType.TRAPDOOR] = "TRAPDOOR"
____exports.GridEntityType.CRAWL_SPACE = 18
____exports.GridEntityType[____exports.GridEntityType.CRAWL_SPACE] = "CRAWL_SPACE"
____exports.GridEntityType.GRAVITY = 19
____exports.GridEntityType[____exports.GridEntityType.GRAVITY] = "GRAVITY"
____exports.GridEntityType.PRESSURE_PLATE = 20
____exports.GridEntityType[____exports.GridEntityType.PRESSURE_PLATE] = "PRESSURE_PLATE"
____exports.GridEntityType.STATUE = 21
____exports.GridEntityType[____exports.GridEntityType.STATUE] = "STATUE"
____exports.GridEntityType.ROCK_SUPER_SPECIAL = 22
____exports.GridEntityType[____exports.GridEntityType.ROCK_SUPER_SPECIAL] = "ROCK_SUPER_SPECIAL"
____exports.GridEntityType.TELEPORTER = 23
____exports.GridEntityType[____exports.GridEntityType.TELEPORTER] = "TELEPORTER"
____exports.GridEntityType.PILLAR = 24
____exports.GridEntityType[____exports.GridEntityType.PILLAR] = "PILLAR"
____exports.GridEntityType.ROCK_SPIKED = 25
____exports.GridEntityType[____exports.GridEntityType.ROCK_SPIKED] = "ROCK_SPIKED"
____exports.GridEntityType.ROCK_ALT_2 = 26
____exports.GridEntityType[____exports.GridEntityType.ROCK_ALT_2] = "ROCK_ALT_2"
____exports.GridEntityType.ROCK_GOLD = 27
____exports.GridEntityType[____exports.GridEntityType.ROCK_GOLD] = "ROCK_GOLD"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.GridEntityXMLType"] = function(...) 
local ____exports = {}
--- The type of a grid entity as represented in a room XML/STB file.
-- 
-- This is converted by the game to the GridEntityType enum.
-- 
-- The `gridspawn` console command accepts `GridEntityXMLType` instead of `GridEntityType`.
____exports.GridEntityXMLType = {}
____exports.GridEntityXMLType.ROCK = 1000
____exports.GridEntityXMLType[____exports.GridEntityXMLType.ROCK] = "ROCK"
____exports.GridEntityXMLType.ROCK_BOMB = 1001
____exports.GridEntityXMLType[____exports.GridEntityXMLType.ROCK_BOMB] = "ROCK_BOMB"
____exports.GridEntityXMLType.ROCK_ALT = 1002
____exports.GridEntityXMLType[____exports.GridEntityXMLType.ROCK_ALT] = "ROCK_ALT"
____exports.GridEntityXMLType.ROCK_TINTED = 1003
____exports.GridEntityXMLType[____exports.GridEntityXMLType.ROCK_TINTED] = "ROCK_TINTED"
____exports.GridEntityXMLType.ROCK_ALT_2 = 1008
____exports.GridEntityXMLType[____exports.GridEntityXMLType.ROCK_ALT_2] = "ROCK_ALT_2"
____exports.GridEntityXMLType.ROCK_EVENT = 1009
____exports.GridEntityXMLType[____exports.GridEntityXMLType.ROCK_EVENT] = "ROCK_EVENT"
____exports.GridEntityXMLType.ROCK_SPIKED = 1010
____exports.GridEntityXMLType[____exports.GridEntityXMLType.ROCK_SPIKED] = "ROCK_SPIKED"
____exports.GridEntityXMLType.ROCK_GOLD = 1011
____exports.GridEntityXMLType[____exports.GridEntityXMLType.ROCK_GOLD] = "ROCK_GOLD"
____exports.GridEntityXMLType.TNT = 1300
____exports.GridEntityXMLType[____exports.GridEntityXMLType.TNT] = "TNT"
____exports.GridEntityXMLType.FIREPLACE = 1400
____exports.GridEntityXMLType[____exports.GridEntityXMLType.FIREPLACE] = "FIREPLACE"
____exports.GridEntityXMLType.RED_FIREPLACE = 1410
____exports.GridEntityXMLType[____exports.GridEntityXMLType.RED_FIREPLACE] = "RED_FIREPLACE"
____exports.GridEntityXMLType.POOP_RED = 1490
____exports.GridEntityXMLType[____exports.GridEntityXMLType.POOP_RED] = "POOP_RED"
____exports.GridEntityXMLType.POOP_RAINBOW = 1494
____exports.GridEntityXMLType[____exports.GridEntityXMLType.POOP_RAINBOW] = "POOP_RAINBOW"
____exports.GridEntityXMLType.POOP_CORN = 1495
____exports.GridEntityXMLType[____exports.GridEntityXMLType.POOP_CORN] = "POOP_CORN"
____exports.GridEntityXMLType.POOP_GOLDEN = 1496
____exports.GridEntityXMLType[____exports.GridEntityXMLType.POOP_GOLDEN] = "POOP_GOLDEN"
____exports.GridEntityXMLType.POOP_BLACK = 1497
____exports.GridEntityXMLType[____exports.GridEntityXMLType.POOP_BLACK] = "POOP_BLACK"
____exports.GridEntityXMLType.POOP_WHITE = 1498
____exports.GridEntityXMLType[____exports.GridEntityXMLType.POOP_WHITE] = "POOP_WHITE"
____exports.GridEntityXMLType.POOP_GIGA = 1499
____exports.GridEntityXMLType[____exports.GridEntityXMLType.POOP_GIGA] = "POOP_GIGA"
____exports.GridEntityXMLType.POOP = 1500
____exports.GridEntityXMLType[____exports.GridEntityXMLType.POOP] = "POOP"
____exports.GridEntityXMLType.POOP_CHARMING = 1501
____exports.GridEntityXMLType[____exports.GridEntityXMLType.POOP_CHARMING] = "POOP_CHARMING"
____exports.GridEntityXMLType.BLOCK = 1900
____exports.GridEntityXMLType[____exports.GridEntityXMLType.BLOCK] = "BLOCK"
____exports.GridEntityXMLType.PILLAR = 1901
____exports.GridEntityXMLType[____exports.GridEntityXMLType.PILLAR] = "PILLAR"
____exports.GridEntityXMLType.SPIKES = 1930
____exports.GridEntityXMLType[____exports.GridEntityXMLType.SPIKES] = "SPIKES"
____exports.GridEntityXMLType.SPIKES_ON_OFF = 1931
____exports.GridEntityXMLType[____exports.GridEntityXMLType.SPIKES_ON_OFF] = "SPIKES_ON_OFF"
____exports.GridEntityXMLType.SPIDER_WEB = 1940
____exports.GridEntityXMLType[____exports.GridEntityXMLType.SPIDER_WEB] = "SPIDER_WEB"
____exports.GridEntityXMLType.WALL = 1999
____exports.GridEntityXMLType[____exports.GridEntityXMLType.WALL] = "WALL"
____exports.GridEntityXMLType.PIT = 3000
____exports.GridEntityXMLType[____exports.GridEntityXMLType.PIT] = "PIT"
____exports.GridEntityXMLType.FISSURE_SPAWNER = 3001
____exports.GridEntityXMLType[____exports.GridEntityXMLType.FISSURE_SPAWNER] = "FISSURE_SPAWNER"
____exports.GridEntityXMLType.PIT_EVENT = 3009
____exports.GridEntityXMLType[____exports.GridEntityXMLType.PIT_EVENT] = "PIT_EVENT"
____exports.GridEntityXMLType.LOCK = 4000
____exports.GridEntityXMLType[____exports.GridEntityXMLType.LOCK] = "LOCK"
____exports.GridEntityXMLType.PRESSURE_PLATE = 4500
____exports.GridEntityXMLType[____exports.GridEntityXMLType.PRESSURE_PLATE] = "PRESSURE_PLATE"
____exports.GridEntityXMLType.STATUE_DEVIL = 5000
____exports.GridEntityXMLType[____exports.GridEntityXMLType.STATUE_DEVIL] = "STATUE_DEVIL"
____exports.GridEntityXMLType.STATUE_ANGEL = 5001
____exports.GridEntityXMLType[____exports.GridEntityXMLType.STATUE_ANGEL] = "STATUE_ANGEL"
____exports.GridEntityXMLType.TELEPORTER = 6100
____exports.GridEntityXMLType[____exports.GridEntityXMLType.TELEPORTER] = "TELEPORTER"
____exports.GridEntityXMLType.TRAPDOOR = 9000
____exports.GridEntityXMLType[____exports.GridEntityXMLType.TRAPDOOR] = "TRAPDOOR"
____exports.GridEntityXMLType.CRAWL_SPACE = 9100
____exports.GridEntityXMLType[____exports.GridEntityXMLType.CRAWL_SPACE] = "CRAWL_SPACE"
____exports.GridEntityXMLType.GRAVITY = 10000
____exports.GridEntityXMLType[____exports.GridEntityXMLType.GRAVITY] = "GRAVITY"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.GridPath"] = function(...) 
local ____exports = {}
--- GridPath is not an enum, but rather a variable integer that represents the cost it would take for
-- an entity to pass through a grid entity. This enum lists some standard cost values that the
-- vanilla game uses.
____exports.GridPath = {}
____exports.GridPath.NONE = 0
____exports.GridPath[____exports.GridPath.NONE] = "NONE"
____exports.GridPath.WALKED_TILE = 900
____exports.GridPath[____exports.GridPath.WALKED_TILE] = "WALKED_TILE"
____exports.GridPath.FIREPLACE = 950
____exports.GridPath[____exports.GridPath.FIREPLACE] = "FIREPLACE"
____exports.GridPath.ROCK = 1000
____exports.GridPath[____exports.GridPath.ROCK] = "ROCK"
____exports.GridPath.PIT = 3000
____exports.GridPath[____exports.GridPath.PIT] = "PIT"
____exports.GridPath.GRIMACE = 3999
____exports.GridPath[____exports.GridPath.GRIMACE] = "GRIMACE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.GridRoom"] = function(...) 
local ____exports = {}
____exports.GridRoom = {}
____exports.GridRoom.DEVIL = -1
____exports.GridRoom[____exports.GridRoom.DEVIL] = "DEVIL"
____exports.GridRoom.ERROR = -2
____exports.GridRoom[____exports.GridRoom.ERROR] = "ERROR"
____exports.GridRoom.DEBUG = -3
____exports.GridRoom[____exports.GridRoom.DEBUG] = "DEBUG"
____exports.GridRoom.DUNGEON = -4
____exports.GridRoom[____exports.GridRoom.DUNGEON] = "DUNGEON"
____exports.GridRoom.BOSS_RUSH = -5
____exports.GridRoom[____exports.GridRoom.BOSS_RUSH] = "BOSS_RUSH"
____exports.GridRoom.BLACK_MARKET = -6
____exports.GridRoom[____exports.GridRoom.BLACK_MARKET] = "BLACK_MARKET"
____exports.GridRoom.MEGA_SATAN = -7
____exports.GridRoom[____exports.GridRoom.MEGA_SATAN] = "MEGA_SATAN"
____exports.GridRoom.BLUE_WOMB = -8
____exports.GridRoom[____exports.GridRoom.BLUE_WOMB] = "BLUE_WOMB"
____exports.GridRoom.THE_VOID = -9
____exports.GridRoom[____exports.GridRoom.THE_VOID] = "THE_VOID"
____exports.GridRoom.SECRET_EXIT = -10
____exports.GridRoom[____exports.GridRoom.SECRET_EXIT] = "SECRET_EXIT"
____exports.GridRoom.GIDEON_DUNGEON = -11
____exports.GridRoom[____exports.GridRoom.GIDEON_DUNGEON] = "GIDEON_DUNGEON"
____exports.GridRoom.GENESIS = -12
____exports.GridRoom[____exports.GridRoom.GENESIS] = "GENESIS"
____exports.GridRoom.SECRET_SHOP = -13
____exports.GridRoom[____exports.GridRoom.SECRET_SHOP] = "SECRET_SHOP"
____exports.GridRoom.ROTGUT_DUNGEON_1 = -14
____exports.GridRoom[____exports.GridRoom.ROTGUT_DUNGEON_1] = "ROTGUT_DUNGEON_1"
____exports.GridRoom.ROTGUT_DUNGEON_2 = -15
____exports.GridRoom[____exports.GridRoom.ROTGUT_DUNGEON_2] = "ROTGUT_DUNGEON_2"
____exports.GridRoom.BLUE_ROOM = -16
____exports.GridRoom[____exports.GridRoom.BLUE_ROOM] = "BLUE_ROOM"
____exports.GridRoom.EXTRA_BOSS = -17
____exports.GridRoom[____exports.GridRoom.EXTRA_BOSS] = "EXTRA_BOSS"
____exports.GridRoom.ANGEL_SHOP = -18
____exports.GridRoom[____exports.GridRoom.ANGEL_SHOP] = "ANGEL_SHOP"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.InputHook"] = function(...) 
local ____exports = {}
____exports.InputHook = {}
____exports.InputHook.IS_ACTION_PRESSED = 0
____exports.InputHook[____exports.InputHook.IS_ACTION_PRESSED] = "IS_ACTION_PRESSED"
____exports.InputHook.IS_ACTION_TRIGGERED = 1
____exports.InputHook[____exports.InputHook.IS_ACTION_TRIGGERED] = "IS_ACTION_TRIGGERED"
____exports.InputHook.GET_ACTION_VALUE = 2
____exports.InputHook[____exports.InputHook.GET_ACTION_VALUE] = "GET_ACTION_VALUE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ItemConfigCardType"] = function(...) 
local ____exports = {}
--- Corresponds to the "type" attribute in the "pocketitems.xml" file.
-- 
-- Matches the `ItemConfig.CARDTYPE_` members of the `ItemConfig` class. In IsaacScript, we
-- reimplement this as an enum instead, since it is cleaner.
____exports.ItemConfigCardType = {}
____exports.ItemConfigCardType.NULL = -1
____exports.ItemConfigCardType[____exports.ItemConfigCardType.NULL] = "NULL"
____exports.ItemConfigCardType.TAROT = 0
____exports.ItemConfigCardType[____exports.ItemConfigCardType.TAROT] = "TAROT"
____exports.ItemConfigCardType.SUIT = 1
____exports.ItemConfigCardType[____exports.ItemConfigCardType.SUIT] = "SUIT"
____exports.ItemConfigCardType.RUNE = 2
____exports.ItemConfigCardType[____exports.ItemConfigCardType.RUNE] = "RUNE"
____exports.ItemConfigCardType.SPECIAL = 3
____exports.ItemConfigCardType[____exports.ItemConfigCardType.SPECIAL] = "SPECIAL"
____exports.ItemConfigCardType.SPECIAL_OBJECT = 4
____exports.ItemConfigCardType[____exports.ItemConfigCardType.SPECIAL_OBJECT] = "SPECIAL_OBJECT"
____exports.ItemConfigCardType.TAROT_REVERSE = 5
____exports.ItemConfigCardType[____exports.ItemConfigCardType.TAROT_REVERSE] = "TAROT_REVERSE"
____exports.ItemConfigCardType.MODDED = 7
____exports.ItemConfigCardType[____exports.ItemConfigCardType.MODDED] = "MODDED"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ItemConfigChargeType"] = function(...) 
local ____exports = {}
--- Matches the `ItemConfig.CHARGE_` members of the `ItemConfig` class. In IsaacScript, we
-- reimplement this as an enum instead, since it is cleaner.
____exports.ItemConfigChargeType = {}
____exports.ItemConfigChargeType.NORMAL = 0
____exports.ItemConfigChargeType[____exports.ItemConfigChargeType.NORMAL] = "NORMAL"
____exports.ItemConfigChargeType.TIMED = 1
____exports.ItemConfigChargeType[____exports.ItemConfigChargeType.TIMED] = "TIMED"
____exports.ItemConfigChargeType.SPECIAL = 2
____exports.ItemConfigChargeType[____exports.ItemConfigChargeType.SPECIAL] = "SPECIAL"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ItemConfigPillEffectClass"] = function(...) 
local ____exports = {}
--- This corresponds to the number in the "class" tag in the "pocketitems.xml" file. The "+" or "-"
-- part of the tag is contained within the `ItemConfigPillEffectType` enum.
____exports.ItemConfigPillEffectClass = {}
____exports.ItemConfigPillEffectClass.NULL = -1
____exports.ItemConfigPillEffectClass[____exports.ItemConfigPillEffectClass.NULL] = "NULL"
____exports.ItemConfigPillEffectClass.JOKE = 0
____exports.ItemConfigPillEffectClass[____exports.ItemConfigPillEffectClass.JOKE] = "JOKE"
____exports.ItemConfigPillEffectClass.MINOR = 1
____exports.ItemConfigPillEffectClass[____exports.ItemConfigPillEffectClass.MINOR] = "MINOR"
____exports.ItemConfigPillEffectClass.MEDIUM = 2
____exports.ItemConfigPillEffectClass[____exports.ItemConfigPillEffectClass.MEDIUM] = "MEDIUM"
____exports.ItemConfigPillEffectClass.MAJOR = 3
____exports.ItemConfigPillEffectClass[____exports.ItemConfigPillEffectClass.MAJOR] = "MAJOR"
____exports.ItemConfigPillEffectClass.MODDED = 4
____exports.ItemConfigPillEffectClass[____exports.ItemConfigPillEffectClass.MODDED] = "MODDED"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ItemConfigPillEffectType"] = function(...) 
local ____exports = {}
--- This corresponds to the suffix of the "class" tag in the "pocketitems.xml" file. "+" is equal to
-- `POSITIVE`, "-" is equal to `NEGATIVE`, and no suffix is equal to `NEUTRAL`.
____exports.ItemConfigPillEffectType = {}
____exports.ItemConfigPillEffectType.NULL = -1
____exports.ItemConfigPillEffectType[____exports.ItemConfigPillEffectType.NULL] = "NULL"
____exports.ItemConfigPillEffectType.POSITIVE = 0
____exports.ItemConfigPillEffectType[____exports.ItemConfigPillEffectType.POSITIVE] = "POSITIVE"
____exports.ItemConfigPillEffectType.NEGATIVE = 1
____exports.ItemConfigPillEffectType[____exports.ItemConfigPillEffectType.NEGATIVE] = "NEGATIVE"
____exports.ItemConfigPillEffectType.NEUTRAL = 2
____exports.ItemConfigPillEffectType[____exports.ItemConfigPillEffectType.NEUTRAL] = "NEUTRAL"
____exports.ItemConfigPillEffectType.MODDED = 3
____exports.ItemConfigPillEffectType[____exports.ItemConfigPillEffectType.MODDED] = "MODDED"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ItemPoolType"] = function(...) 
local ____exports = {}
____exports.ItemPoolType = {}
____exports.ItemPoolType.TREASURE = 0
____exports.ItemPoolType[____exports.ItemPoolType.TREASURE] = "TREASURE"
____exports.ItemPoolType.SHOP = 1
____exports.ItemPoolType[____exports.ItemPoolType.SHOP] = "SHOP"
____exports.ItemPoolType.BOSS = 2
____exports.ItemPoolType[____exports.ItemPoolType.BOSS] = "BOSS"
____exports.ItemPoolType.DEVIL = 3
____exports.ItemPoolType[____exports.ItemPoolType.DEVIL] = "DEVIL"
____exports.ItemPoolType.ANGEL = 4
____exports.ItemPoolType[____exports.ItemPoolType.ANGEL] = "ANGEL"
____exports.ItemPoolType.SECRET = 5
____exports.ItemPoolType[____exports.ItemPoolType.SECRET] = "SECRET"
____exports.ItemPoolType.LIBRARY = 6
____exports.ItemPoolType[____exports.ItemPoolType.LIBRARY] = "LIBRARY"
____exports.ItemPoolType.SHELL_GAME = 7
____exports.ItemPoolType[____exports.ItemPoolType.SHELL_GAME] = "SHELL_GAME"
____exports.ItemPoolType.GOLDEN_CHEST = 8
____exports.ItemPoolType[____exports.ItemPoolType.GOLDEN_CHEST] = "GOLDEN_CHEST"
____exports.ItemPoolType.RED_CHEST = 9
____exports.ItemPoolType[____exports.ItemPoolType.RED_CHEST] = "RED_CHEST"
____exports.ItemPoolType.BEGGAR = 10
____exports.ItemPoolType[____exports.ItemPoolType.BEGGAR] = "BEGGAR"
____exports.ItemPoolType.DEMON_BEGGAR = 11
____exports.ItemPoolType[____exports.ItemPoolType.DEMON_BEGGAR] = "DEMON_BEGGAR"
____exports.ItemPoolType.CURSE = 12
____exports.ItemPoolType[____exports.ItemPoolType.CURSE] = "CURSE"
____exports.ItemPoolType.KEY_MASTER = 13
____exports.ItemPoolType[____exports.ItemPoolType.KEY_MASTER] = "KEY_MASTER"
____exports.ItemPoolType.BATTERY_BUM = 14
____exports.ItemPoolType[____exports.ItemPoolType.BATTERY_BUM] = "BATTERY_BUM"
____exports.ItemPoolType.MOMS_CHEST = 15
____exports.ItemPoolType[____exports.ItemPoolType.MOMS_CHEST] = "MOMS_CHEST"
____exports.ItemPoolType.GREED_TREASURE = 16
____exports.ItemPoolType[____exports.ItemPoolType.GREED_TREASURE] = "GREED_TREASURE"
____exports.ItemPoolType.GREED_BOSS = 17
____exports.ItemPoolType[____exports.ItemPoolType.GREED_BOSS] = "GREED_BOSS"
____exports.ItemPoolType.GREED_SHOP = 18
____exports.ItemPoolType[____exports.ItemPoolType.GREED_SHOP] = "GREED_SHOP"
____exports.ItemPoolType.GREED_DEVIL = 19
____exports.ItemPoolType[____exports.ItemPoolType.GREED_DEVIL] = "GREED_DEVIL"
____exports.ItemPoolType.GREED_ANGEL = 20
____exports.ItemPoolType[____exports.ItemPoolType.GREED_ANGEL] = "GREED_ANGEL"
____exports.ItemPoolType.GREED_CURSE = 21
____exports.ItemPoolType[____exports.ItemPoolType.GREED_CURSE] = "GREED_CURSE"
____exports.ItemPoolType.GREED_SECRET = 22
____exports.ItemPoolType[____exports.ItemPoolType.GREED_SECRET] = "GREED_SECRET"
____exports.ItemPoolType.CRANE_GAME = 23
____exports.ItemPoolType[____exports.ItemPoolType.CRANE_GAME] = "CRANE_GAME"
____exports.ItemPoolType.ULTRA_SECRET = 24
____exports.ItemPoolType[____exports.ItemPoolType.ULTRA_SECRET] = "ULTRA_SECRET"
____exports.ItemPoolType.BOMB_BUM = 25
____exports.ItemPoolType[____exports.ItemPoolType.BOMB_BUM] = "BOMB_BUM"
____exports.ItemPoolType.PLANETARIUM = 26
____exports.ItemPoolType[____exports.ItemPoolType.PLANETARIUM] = "PLANETARIUM"
____exports.ItemPoolType.OLD_CHEST = 27
____exports.ItemPoolType[____exports.ItemPoolType.OLD_CHEST] = "OLD_CHEST"
____exports.ItemPoolType.BABY_SHOP = 28
____exports.ItemPoolType[____exports.ItemPoolType.BABY_SHOP] = "BABY_SHOP"
____exports.ItemPoolType.WOODEN_CHEST = 29
____exports.ItemPoolType[____exports.ItemPoolType.WOODEN_CHEST] = "WOODEN_CHEST"
____exports.ItemPoolType.ROTTEN_BEGGAR = 30
____exports.ItemPoolType[____exports.ItemPoolType.ROTTEN_BEGGAR] = "ROTTEN_BEGGAR"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ItemType"] = function(...) 
local ____exports = {}
____exports.ItemType = {}
____exports.ItemType.NULL = 0
____exports.ItemType[____exports.ItemType.NULL] = "NULL"
____exports.ItemType.PASSIVE = 1
____exports.ItemType[____exports.ItemType.PASSIVE] = "PASSIVE"
____exports.ItemType.TRINKET = 2
____exports.ItemType[____exports.ItemType.TRINKET] = "TRINKET"
____exports.ItemType.ACTIVE = 3
____exports.ItemType[____exports.ItemType.ACTIVE] = "ACTIVE"
____exports.ItemType.FAMILIAR = 4
____exports.ItemType[____exports.ItemType.FAMILIAR] = "FAMILIAR"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.Keyboard"] = function(...) 
local ____exports = {}
____exports.Keyboard = {}
____exports.Keyboard.SPACE = 32
____exports.Keyboard[____exports.Keyboard.SPACE] = "SPACE"
____exports.Keyboard.APOSTROPHE = 39
____exports.Keyboard[____exports.Keyboard.APOSTROPHE] = "APOSTROPHE"
____exports.Keyboard.COMMA = 44
____exports.Keyboard[____exports.Keyboard.COMMA] = "COMMA"
____exports.Keyboard.MINUS = 45
____exports.Keyboard[____exports.Keyboard.MINUS] = "MINUS"
____exports.Keyboard.PERIOD = 46
____exports.Keyboard[____exports.Keyboard.PERIOD] = "PERIOD"
____exports.Keyboard.SLASH = 47
____exports.Keyboard[____exports.Keyboard.SLASH] = "SLASH"
____exports.Keyboard.ZERO = 48
____exports.Keyboard[____exports.Keyboard.ZERO] = "ZERO"
____exports.Keyboard.ONE = 49
____exports.Keyboard[____exports.Keyboard.ONE] = "ONE"
____exports.Keyboard.TWO = 50
____exports.Keyboard[____exports.Keyboard.TWO] = "TWO"
____exports.Keyboard.THREE = 51
____exports.Keyboard[____exports.Keyboard.THREE] = "THREE"
____exports.Keyboard.FOUR = 52
____exports.Keyboard[____exports.Keyboard.FOUR] = "FOUR"
____exports.Keyboard.FIVE = 53
____exports.Keyboard[____exports.Keyboard.FIVE] = "FIVE"
____exports.Keyboard.SIX = 54
____exports.Keyboard[____exports.Keyboard.SIX] = "SIX"
____exports.Keyboard.SEVEN = 55
____exports.Keyboard[____exports.Keyboard.SEVEN] = "SEVEN"
____exports.Keyboard.EIGHT = 56
____exports.Keyboard[____exports.Keyboard.EIGHT] = "EIGHT"
____exports.Keyboard.NINE = 57
____exports.Keyboard[____exports.Keyboard.NINE] = "NINE"
____exports.Keyboard.SEMICOLON = 59
____exports.Keyboard[____exports.Keyboard.SEMICOLON] = "SEMICOLON"
____exports.Keyboard.EQUAL = 61
____exports.Keyboard[____exports.Keyboard.EQUAL] = "EQUAL"
____exports.Keyboard.A = 65
____exports.Keyboard[____exports.Keyboard.A] = "A"
____exports.Keyboard.B = 66
____exports.Keyboard[____exports.Keyboard.B] = "B"
____exports.Keyboard.C = 67
____exports.Keyboard[____exports.Keyboard.C] = "C"
____exports.Keyboard.D = 68
____exports.Keyboard[____exports.Keyboard.D] = "D"
____exports.Keyboard.E = 69
____exports.Keyboard[____exports.Keyboard.E] = "E"
____exports.Keyboard.F = 70
____exports.Keyboard[____exports.Keyboard.F] = "F"
____exports.Keyboard.G = 71
____exports.Keyboard[____exports.Keyboard.G] = "G"
____exports.Keyboard.H = 72
____exports.Keyboard[____exports.Keyboard.H] = "H"
____exports.Keyboard.I = 73
____exports.Keyboard[____exports.Keyboard.I] = "I"
____exports.Keyboard.J = 74
____exports.Keyboard[____exports.Keyboard.J] = "J"
____exports.Keyboard.K = 75
____exports.Keyboard[____exports.Keyboard.K] = "K"
____exports.Keyboard.L = 76
____exports.Keyboard[____exports.Keyboard.L] = "L"
____exports.Keyboard.M = 77
____exports.Keyboard[____exports.Keyboard.M] = "M"
____exports.Keyboard.N = 78
____exports.Keyboard[____exports.Keyboard.N] = "N"
____exports.Keyboard.O = 79
____exports.Keyboard[____exports.Keyboard.O] = "O"
____exports.Keyboard.P = 80
____exports.Keyboard[____exports.Keyboard.P] = "P"
____exports.Keyboard.Q = 81
____exports.Keyboard[____exports.Keyboard.Q] = "Q"
____exports.Keyboard.R = 82
____exports.Keyboard[____exports.Keyboard.R] = "R"
____exports.Keyboard.S = 83
____exports.Keyboard[____exports.Keyboard.S] = "S"
____exports.Keyboard.T = 84
____exports.Keyboard[____exports.Keyboard.T] = "T"
____exports.Keyboard.U = 85
____exports.Keyboard[____exports.Keyboard.U] = "U"
____exports.Keyboard.V = 86
____exports.Keyboard[____exports.Keyboard.V] = "V"
____exports.Keyboard.W = 87
____exports.Keyboard[____exports.Keyboard.W] = "W"
____exports.Keyboard.X = 88
____exports.Keyboard[____exports.Keyboard.X] = "X"
____exports.Keyboard.Y = 89
____exports.Keyboard[____exports.Keyboard.Y] = "Y"
____exports.Keyboard.Z = 90
____exports.Keyboard[____exports.Keyboard.Z] = "Z"
____exports.Keyboard.LEFT_BRACKET = 91
____exports.Keyboard[____exports.Keyboard.LEFT_BRACKET] = "LEFT_BRACKET"
____exports.Keyboard.BACKSLASH = 92
____exports.Keyboard[____exports.Keyboard.BACKSLASH] = "BACKSLASH"
____exports.Keyboard.RIGHT_BRACKET = 93
____exports.Keyboard[____exports.Keyboard.RIGHT_BRACKET] = "RIGHT_BRACKET"
____exports.Keyboard.GRAVE_ACCENT = 96
____exports.Keyboard[____exports.Keyboard.GRAVE_ACCENT] = "GRAVE_ACCENT"
____exports.Keyboard.WORLD_1 = 161
____exports.Keyboard[____exports.Keyboard.WORLD_1] = "WORLD_1"
____exports.Keyboard.WORLD_2 = 162
____exports.Keyboard[____exports.Keyboard.WORLD_2] = "WORLD_2"
____exports.Keyboard.ESCAPE = 256
____exports.Keyboard[____exports.Keyboard.ESCAPE] = "ESCAPE"
____exports.Keyboard.ENTER = 257
____exports.Keyboard[____exports.Keyboard.ENTER] = "ENTER"
____exports.Keyboard.TAB = 258
____exports.Keyboard[____exports.Keyboard.TAB] = "TAB"
____exports.Keyboard.BACKSPACE = 259
____exports.Keyboard[____exports.Keyboard.BACKSPACE] = "BACKSPACE"
____exports.Keyboard.INSERT = 260
____exports.Keyboard[____exports.Keyboard.INSERT] = "INSERT"
____exports.Keyboard.DELETE = 261
____exports.Keyboard[____exports.Keyboard.DELETE] = "DELETE"
____exports.Keyboard.RIGHT = 262
____exports.Keyboard[____exports.Keyboard.RIGHT] = "RIGHT"
____exports.Keyboard.LEFT = 263
____exports.Keyboard[____exports.Keyboard.LEFT] = "LEFT"
____exports.Keyboard.DOWN = 264
____exports.Keyboard[____exports.Keyboard.DOWN] = "DOWN"
____exports.Keyboard.UP = 265
____exports.Keyboard[____exports.Keyboard.UP] = "UP"
____exports.Keyboard.PAGE_UP = 266
____exports.Keyboard[____exports.Keyboard.PAGE_UP] = "PAGE_UP"
____exports.Keyboard.PAGE_DOWN = 267
____exports.Keyboard[____exports.Keyboard.PAGE_DOWN] = "PAGE_DOWN"
____exports.Keyboard.HOME = 268
____exports.Keyboard[____exports.Keyboard.HOME] = "HOME"
____exports.Keyboard.END = 269
____exports.Keyboard[____exports.Keyboard.END] = "END"
____exports.Keyboard.CAPS_LOCK = 280
____exports.Keyboard[____exports.Keyboard.CAPS_LOCK] = "CAPS_LOCK"
____exports.Keyboard.SCROLL_LOCK = 281
____exports.Keyboard[____exports.Keyboard.SCROLL_LOCK] = "SCROLL_LOCK"
____exports.Keyboard.NUM_LOCK = 282
____exports.Keyboard[____exports.Keyboard.NUM_LOCK] = "NUM_LOCK"
____exports.Keyboard.PRINT_SCREEN = 283
____exports.Keyboard[____exports.Keyboard.PRINT_SCREEN] = "PRINT_SCREEN"
____exports.Keyboard.PAUSE = 284
____exports.Keyboard[____exports.Keyboard.PAUSE] = "PAUSE"
____exports.Keyboard.F1 = 290
____exports.Keyboard[____exports.Keyboard.F1] = "F1"
____exports.Keyboard.F2 = 291
____exports.Keyboard[____exports.Keyboard.F2] = "F2"
____exports.Keyboard.F3 = 292
____exports.Keyboard[____exports.Keyboard.F3] = "F3"
____exports.Keyboard.F4 = 293
____exports.Keyboard[____exports.Keyboard.F4] = "F4"
____exports.Keyboard.F5 = 294
____exports.Keyboard[____exports.Keyboard.F5] = "F5"
____exports.Keyboard.F6 = 295
____exports.Keyboard[____exports.Keyboard.F6] = "F6"
____exports.Keyboard.F7 = 296
____exports.Keyboard[____exports.Keyboard.F7] = "F7"
____exports.Keyboard.F8 = 297
____exports.Keyboard[____exports.Keyboard.F8] = "F8"
____exports.Keyboard.F9 = 298
____exports.Keyboard[____exports.Keyboard.F9] = "F9"
____exports.Keyboard.F10 = 299
____exports.Keyboard[____exports.Keyboard.F10] = "F10"
____exports.Keyboard.F11 = 300
____exports.Keyboard[____exports.Keyboard.F11] = "F11"
____exports.Keyboard.F12 = 301
____exports.Keyboard[____exports.Keyboard.F12] = "F12"
____exports.Keyboard.F13 = 302
____exports.Keyboard[____exports.Keyboard.F13] = "F13"
____exports.Keyboard.F14 = 303
____exports.Keyboard[____exports.Keyboard.F14] = "F14"
____exports.Keyboard.F15 = 304
____exports.Keyboard[____exports.Keyboard.F15] = "F15"
____exports.Keyboard.F16 = 305
____exports.Keyboard[____exports.Keyboard.F16] = "F16"
____exports.Keyboard.F17 = 306
____exports.Keyboard[____exports.Keyboard.F17] = "F17"
____exports.Keyboard.F18 = 307
____exports.Keyboard[____exports.Keyboard.F18] = "F18"
____exports.Keyboard.F19 = 308
____exports.Keyboard[____exports.Keyboard.F19] = "F19"
____exports.Keyboard.F20 = 309
____exports.Keyboard[____exports.Keyboard.F20] = "F20"
____exports.Keyboard.F21 = 310
____exports.Keyboard[____exports.Keyboard.F21] = "F21"
____exports.Keyboard.F22 = 311
____exports.Keyboard[____exports.Keyboard.F22] = "F22"
____exports.Keyboard.F23 = 312
____exports.Keyboard[____exports.Keyboard.F23] = "F23"
____exports.Keyboard.F24 = 313
____exports.Keyboard[____exports.Keyboard.F24] = "F24"
____exports.Keyboard.F25 = 314
____exports.Keyboard[____exports.Keyboard.F25] = "F25"
____exports.Keyboard.KP_0 = 320
____exports.Keyboard[____exports.Keyboard.KP_0] = "KP_0"
____exports.Keyboard.KP_1 = 321
____exports.Keyboard[____exports.Keyboard.KP_1] = "KP_1"
____exports.Keyboard.KP_2 = 322
____exports.Keyboard[____exports.Keyboard.KP_2] = "KP_2"
____exports.Keyboard.KP_3 = 323
____exports.Keyboard[____exports.Keyboard.KP_3] = "KP_3"
____exports.Keyboard.KP_4 = 324
____exports.Keyboard[____exports.Keyboard.KP_4] = "KP_4"
____exports.Keyboard.KP_5 = 325
____exports.Keyboard[____exports.Keyboard.KP_5] = "KP_5"
____exports.Keyboard.KP_6 = 326
____exports.Keyboard[____exports.Keyboard.KP_6] = "KP_6"
____exports.Keyboard.KP_7 = 327
____exports.Keyboard[____exports.Keyboard.KP_7] = "KP_7"
____exports.Keyboard.KP_8 = 328
____exports.Keyboard[____exports.Keyboard.KP_8] = "KP_8"
____exports.Keyboard.KP_9 = 329
____exports.Keyboard[____exports.Keyboard.KP_9] = "KP_9"
____exports.Keyboard.KP_DECIMAL = 330
____exports.Keyboard[____exports.Keyboard.KP_DECIMAL] = "KP_DECIMAL"
____exports.Keyboard.KP_DIVIDE = 331
____exports.Keyboard[____exports.Keyboard.KP_DIVIDE] = "KP_DIVIDE"
____exports.Keyboard.KP_MULTIPLY = 332
____exports.Keyboard[____exports.Keyboard.KP_MULTIPLY] = "KP_MULTIPLY"
____exports.Keyboard.KP_SUBTRACT = 333
____exports.Keyboard[____exports.Keyboard.KP_SUBTRACT] = "KP_SUBTRACT"
____exports.Keyboard.KP_ADD = 334
____exports.Keyboard[____exports.Keyboard.KP_ADD] = "KP_ADD"
____exports.Keyboard.KP_ENTER = 335
____exports.Keyboard[____exports.Keyboard.KP_ENTER] = "KP_ENTER"
____exports.Keyboard.KP_EQUAL = 336
____exports.Keyboard[____exports.Keyboard.KP_EQUAL] = "KP_EQUAL"
____exports.Keyboard.LEFT_SHIFT = 340
____exports.Keyboard[____exports.Keyboard.LEFT_SHIFT] = "LEFT_SHIFT"
____exports.Keyboard.LEFT_CONTROL = 341
____exports.Keyboard[____exports.Keyboard.LEFT_CONTROL] = "LEFT_CONTROL"
____exports.Keyboard.LEFT_ALT = 342
____exports.Keyboard[____exports.Keyboard.LEFT_ALT] = "LEFT_ALT"
____exports.Keyboard.LEFT_SUPER = 343
____exports.Keyboard[____exports.Keyboard.LEFT_SUPER] = "LEFT_SUPER"
____exports.Keyboard.RIGHT_SHIFT = 344
____exports.Keyboard[____exports.Keyboard.RIGHT_SHIFT] = "RIGHT_SHIFT"
____exports.Keyboard.RIGHT_CONTROL = 345
____exports.Keyboard[____exports.Keyboard.RIGHT_CONTROL] = "RIGHT_CONTROL"
____exports.Keyboard.RIGHT_ALT = 346
____exports.Keyboard[____exports.Keyboard.RIGHT_ALT] = "RIGHT_ALT"
____exports.Keyboard.RIGHT_SUPER = 347
____exports.Keyboard[____exports.Keyboard.RIGHT_SUPER] = "RIGHT_SUPER"
____exports.Keyboard.MENU = 348
____exports.Keyboard[____exports.Keyboard.MENU] = "MENU"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.LanguageAbbreviation"] = function(...) 
local ____exports = {}
--- Listed in order of how they cycle through the options menu.
____exports.LanguageAbbreviation = {}
____exports.LanguageAbbreviation.ENGLISH = "en"
____exports.LanguageAbbreviation.JAPANESE = "jp"
____exports.LanguageAbbreviation.SPANISH = "es"
____exports.LanguageAbbreviation.GERMAN = "de"
____exports.LanguageAbbreviation.RUSSIAN = "ru"
____exports.LanguageAbbreviation.KOREAN = "kr"
____exports.LanguageAbbreviation.CHINESE_SIMPLE = "zh"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.LaserOffset"] = function(...) 
local ____exports = {}
____exports.LaserOffset = {}
____exports.LaserOffset.TECH_1 = 0
____exports.LaserOffset[____exports.LaserOffset.TECH_1] = "TECH_1"
____exports.LaserOffset.TECH_2 = 1
____exports.LaserOffset[____exports.LaserOffset.TECH_2] = "TECH_2"
____exports.LaserOffset.TECH_5 = 2
____exports.LaserOffset[____exports.LaserOffset.TECH_5] = "TECH_5"
____exports.LaserOffset.SHOOP = 3
____exports.LaserOffset[____exports.LaserOffset.SHOOP] = "SHOOP"
____exports.LaserOffset.BRIMSTONE = 4
____exports.LaserOffset[____exports.LaserOffset.BRIMSTONE] = "BRIMSTONE"
____exports.LaserOffset.MOMS_EYE = 5
____exports.LaserOffset[____exports.LaserOffset.MOMS_EYE] = "MOMS_EYE"
____exports.LaserOffset.TRACTOR_BEAM = 6
____exports.LaserOffset[____exports.LaserOffset.TRACTOR_BEAM] = "TRACTOR_BEAM"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.LevelStage"] = function(...) 
local ____exports = {}
____exports.LevelStage = {}
____exports.LevelStage.NULL = 0
____exports.LevelStage[____exports.LevelStage.NULL] = "NULL"
____exports.LevelStage.BASEMENT_1 = 1
____exports.LevelStage[____exports.LevelStage.BASEMENT_1] = "BASEMENT_1"
____exports.LevelStage.BASEMENT_2 = 2
____exports.LevelStage[____exports.LevelStage.BASEMENT_2] = "BASEMENT_2"
____exports.LevelStage.CAVES_1 = 3
____exports.LevelStage[____exports.LevelStage.CAVES_1] = "CAVES_1"
____exports.LevelStage.CAVES_2 = 4
____exports.LevelStage[____exports.LevelStage.CAVES_2] = "CAVES_2"
____exports.LevelStage.DEPTHS_1 = 5
____exports.LevelStage[____exports.LevelStage.DEPTHS_1] = "DEPTHS_1"
____exports.LevelStage.DEPTHS_2 = 6
____exports.LevelStage[____exports.LevelStage.DEPTHS_2] = "DEPTHS_2"
____exports.LevelStage.WOMB_1 = 7
____exports.LevelStage[____exports.LevelStage.WOMB_1] = "WOMB_1"
____exports.LevelStage.WOMB_2 = 8
____exports.LevelStage[____exports.LevelStage.WOMB_2] = "WOMB_2"
____exports.LevelStage.BLUE_WOMB = 9
____exports.LevelStage[____exports.LevelStage.BLUE_WOMB] = "BLUE_WOMB"
____exports.LevelStage.SHEOL_CATHEDRAL = 10
____exports.LevelStage[____exports.LevelStage.SHEOL_CATHEDRAL] = "SHEOL_CATHEDRAL"
____exports.LevelStage.DARK_ROOM_CHEST = 11
____exports.LevelStage[____exports.LevelStage.DARK_ROOM_CHEST] = "DARK_ROOM_CHEST"
____exports.LevelStage.THE_VOID = 12
____exports.LevelStage[____exports.LevelStage.THE_VOID] = "THE_VOID"
____exports.LevelStage.HOME = 13
____exports.LevelStage[____exports.LevelStage.HOME] = "HOME"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.LevelStateFlag"] = function(...) 
local ____exports = {}
--- Used with the `Level.GetStateFlag` and `Level.SetStateFlag` methods.
____exports.LevelStateFlag = {}
____exports.LevelStateFlag.BUM_KILLED = 0
____exports.LevelStateFlag[____exports.LevelStateFlag.BUM_KILLED] = "BUM_KILLED"
____exports.LevelStateFlag.EVIL_BUM_KILLED = 1
____exports.LevelStateFlag[____exports.LevelStateFlag.EVIL_BUM_KILLED] = "EVIL_BUM_KILLED"
____exports.LevelStateFlag.RED_HEART_DAMAGED = 2
____exports.LevelStateFlag[____exports.LevelStateFlag.RED_HEART_DAMAGED] = "RED_HEART_DAMAGED"
____exports.LevelStateFlag.BUM_LEFT = 3
____exports.LevelStateFlag[____exports.LevelStateFlag.BUM_LEFT] = "BUM_LEFT"
____exports.LevelStateFlag.EVIL_BUM_LEFT = 4
____exports.LevelStateFlag[____exports.LevelStateFlag.EVIL_BUM_LEFT] = "EVIL_BUM_LEFT"
____exports.LevelStateFlag.DAMAGED = 5
____exports.LevelStateFlag[____exports.LevelStateFlag.DAMAGED] = "DAMAGED"
____exports.LevelStateFlag.SHOPKEEPER_KILLED_LVL = 6
____exports.LevelStateFlag[____exports.LevelStateFlag.SHOPKEEPER_KILLED_LVL] = "SHOPKEEPER_KILLED_LVL"
____exports.LevelStateFlag.COMPASS_EFFECT = 7
____exports.LevelStateFlag[____exports.LevelStateFlag.COMPASS_EFFECT] = "COMPASS_EFFECT"
____exports.LevelStateFlag.MAP_EFFECT = 8
____exports.LevelStateFlag[____exports.LevelStateFlag.MAP_EFFECT] = "MAP_EFFECT"
____exports.LevelStateFlag.BLUE_MAP_EFFECT = 9
____exports.LevelStateFlag[____exports.LevelStateFlag.BLUE_MAP_EFFECT] = "BLUE_MAP_EFFECT"
____exports.LevelStateFlag.FULL_MAP_EFFECT = 10
____exports.LevelStateFlag[____exports.LevelStateFlag.FULL_MAP_EFFECT] = "FULL_MAP_EFFECT"
____exports.LevelStateFlag.GREED_LOST_PENALTY = 11
____exports.LevelStateFlag[____exports.LevelStateFlag.GREED_LOST_PENALTY] = "GREED_LOST_PENALTY"
____exports.LevelStateFlag.GREED_MONSTRO_SPAWNED = 12
____exports.LevelStateFlag[____exports.LevelStateFlag.GREED_MONSTRO_SPAWNED] = "GREED_MONSTRO_SPAWNED"
____exports.LevelStateFlag.ITEM_DUNGEON_FOUND = 13
____exports.LevelStateFlag[____exports.LevelStateFlag.ITEM_DUNGEON_FOUND] = "ITEM_DUNGEON_FOUND"
____exports.LevelStateFlag.MAMA_MEGA_USED = 14
____exports.LevelStateFlag[____exports.LevelStateFlag.MAMA_MEGA_USED] = "MAMA_MEGA_USED"
____exports.LevelStateFlag.WOODEN_CROSS_REMOVED = 15
____exports.LevelStateFlag[____exports.LevelStateFlag.WOODEN_CROSS_REMOVED] = "WOODEN_CROSS_REMOVED"
____exports.LevelStateFlag.SHOVEL_QUEST_TRIGGERED = 16
____exports.LevelStateFlag[____exports.LevelStateFlag.SHOVEL_QUEST_TRIGGERED] = "SHOVEL_QUEST_TRIGGERED"
____exports.LevelStateFlag.SATANIC_BIBLE_USED = 17
____exports.LevelStateFlag[____exports.LevelStateFlag.SATANIC_BIBLE_USED] = "SATANIC_BIBLE_USED"
____exports.LevelStateFlag.SOL_EFFECT = 18
____exports.LevelStateFlag[____exports.LevelStateFlag.SOL_EFFECT] = "SOL_EFFECT"
____exports.LevelStateFlag.LEVEL_START_TRIGGERED = 19
____exports.LevelStateFlag[____exports.LevelStateFlag.LEVEL_START_TRIGGERED] = "LEVEL_START_TRIGGERED"
____exports.LevelStateFlag.LUNA_EFFECT = 20
____exports.LevelStateFlag[____exports.LevelStateFlag.LUNA_EFFECT] = "LUNA_EFFECT"
____exports.LevelStateFlag.VOID_DOOR_DISABLED = 21
____exports.LevelStateFlag[____exports.LevelStateFlag.VOID_DOOR_DISABLED] = "VOID_DOOR_DISABLED"
____exports.LevelStateFlag.MINESHAFT_ESCAPE = 22
____exports.LevelStateFlag[____exports.LevelStateFlag.MINESHAFT_ESCAPE] = "MINESHAFT_ESCAPE"
____exports.LevelStateFlag.MIRROR_BROKEN = 23
____exports.LevelStateFlag[____exports.LevelStateFlag.MIRROR_BROKEN] = "MIRROR_BROKEN"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.LineCheckMode"] = function(...) 
local ____exports = {}
____exports.LineCheckMode = {}
____exports.LineCheckMode.NORMAL = 0
____exports.LineCheckMode[____exports.LineCheckMode.NORMAL] = "NORMAL"
____exports.LineCheckMode.ECONOMIC = 1
____exports.LineCheckMode[____exports.LineCheckMode.ECONOMIC] = "ECONOMIC"
____exports.LineCheckMode.EXPLOSION = 2
____exports.LineCheckMode[____exports.LineCheckMode.EXPLOSION] = "EXPLOSION"
____exports.LineCheckMode.PROJECTILE = 3
____exports.LineCheckMode[____exports.LineCheckMode.PROJECTILE] = "PROJECTILE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ModCallback"] = function(...) 
local ____exports = {}
____exports.ModCallback = {}
____exports.ModCallback.POST_NPC_UPDATE = 0
____exports.ModCallback[____exports.ModCallback.POST_NPC_UPDATE] = "POST_NPC_UPDATE"
____exports.ModCallback.POST_UPDATE = 1
____exports.ModCallback[____exports.ModCallback.POST_UPDATE] = "POST_UPDATE"
____exports.ModCallback.POST_RENDER = 2
____exports.ModCallback[____exports.ModCallback.POST_RENDER] = "POST_RENDER"
____exports.ModCallback.POST_USE_ITEM = 3
____exports.ModCallback[____exports.ModCallback.POST_USE_ITEM] = "POST_USE_ITEM"
____exports.ModCallback.POST_PEFFECT_UPDATE = 4
____exports.ModCallback[____exports.ModCallback.POST_PEFFECT_UPDATE] = "POST_PEFFECT_UPDATE"
____exports.ModCallback.POST_USE_CARD = 5
____exports.ModCallback[____exports.ModCallback.POST_USE_CARD] = "POST_USE_CARD"
____exports.ModCallback.POST_FAMILIAR_UPDATE = 6
____exports.ModCallback[____exports.ModCallback.POST_FAMILIAR_UPDATE] = "POST_FAMILIAR_UPDATE"
____exports.ModCallback.POST_FAMILIAR_INIT = 7
____exports.ModCallback[____exports.ModCallback.POST_FAMILIAR_INIT] = "POST_FAMILIAR_INIT"
____exports.ModCallback.EVALUATE_CACHE = 8
____exports.ModCallback[____exports.ModCallback.EVALUATE_CACHE] = "EVALUATE_CACHE"
____exports.ModCallback.POST_PLAYER_INIT = 9
____exports.ModCallback[____exports.ModCallback.POST_PLAYER_INIT] = "POST_PLAYER_INIT"
____exports.ModCallback.POST_USE_PILL = 10
____exports.ModCallback[____exports.ModCallback.POST_USE_PILL] = "POST_USE_PILL"
____exports.ModCallback.ENTITY_TAKE_DMG = 11
____exports.ModCallback[____exports.ModCallback.ENTITY_TAKE_DMG] = "ENTITY_TAKE_DMG"
____exports.ModCallback.POST_CURSE_EVAL = 12
____exports.ModCallback[____exports.ModCallback.POST_CURSE_EVAL] = "POST_CURSE_EVAL"
____exports.ModCallback.INPUT_ACTION = 13
____exports.ModCallback[____exports.ModCallback.INPUT_ACTION] = "INPUT_ACTION"
____exports.ModCallback.POST_GAME_STARTED = 15
____exports.ModCallback[____exports.ModCallback.POST_GAME_STARTED] = "POST_GAME_STARTED"
____exports.ModCallback.POST_GAME_END = 16
____exports.ModCallback[____exports.ModCallback.POST_GAME_END] = "POST_GAME_END"
____exports.ModCallback.PRE_GAME_EXIT = 17
____exports.ModCallback[____exports.ModCallback.PRE_GAME_EXIT] = "PRE_GAME_EXIT"
____exports.ModCallback.POST_NEW_LEVEL = 18
____exports.ModCallback[____exports.ModCallback.POST_NEW_LEVEL] = "POST_NEW_LEVEL"
____exports.ModCallback.POST_NEW_ROOM = 19
____exports.ModCallback[____exports.ModCallback.POST_NEW_ROOM] = "POST_NEW_ROOM"
____exports.ModCallback.GET_CARD = 20
____exports.ModCallback[____exports.ModCallback.GET_CARD] = "GET_CARD"
____exports.ModCallback.GET_SHADER_PARAMS = 21
____exports.ModCallback[____exports.ModCallback.GET_SHADER_PARAMS] = "GET_SHADER_PARAMS"
____exports.ModCallback.EXECUTE_CMD = 22
____exports.ModCallback[____exports.ModCallback.EXECUTE_CMD] = "EXECUTE_CMD"
____exports.ModCallback.PRE_USE_ITEM = 23
____exports.ModCallback[____exports.ModCallback.PRE_USE_ITEM] = "PRE_USE_ITEM"
____exports.ModCallback.PRE_ENTITY_SPAWN = 24
____exports.ModCallback[____exports.ModCallback.PRE_ENTITY_SPAWN] = "PRE_ENTITY_SPAWN"
____exports.ModCallback.POST_FAMILIAR_RENDER = 25
____exports.ModCallback[____exports.ModCallback.POST_FAMILIAR_RENDER] = "POST_FAMILIAR_RENDER"
____exports.ModCallback.PRE_FAMILIAR_COLLISION = 26
____exports.ModCallback[____exports.ModCallback.PRE_FAMILIAR_COLLISION] = "PRE_FAMILIAR_COLLISION"
____exports.ModCallback.POST_NPC_INIT = 27
____exports.ModCallback[____exports.ModCallback.POST_NPC_INIT] = "POST_NPC_INIT"
____exports.ModCallback.POST_NPC_RENDER = 28
____exports.ModCallback[____exports.ModCallback.POST_NPC_RENDER] = "POST_NPC_RENDER"
____exports.ModCallback.POST_NPC_DEATH = 29
____exports.ModCallback[____exports.ModCallback.POST_NPC_DEATH] = "POST_NPC_DEATH"
____exports.ModCallback.PRE_NPC_COLLISION = 30
____exports.ModCallback[____exports.ModCallback.PRE_NPC_COLLISION] = "PRE_NPC_COLLISION"
____exports.ModCallback.POST_PLAYER_UPDATE = 31
____exports.ModCallback[____exports.ModCallback.POST_PLAYER_UPDATE] = "POST_PLAYER_UPDATE"
____exports.ModCallback.POST_PLAYER_RENDER = 32
____exports.ModCallback[____exports.ModCallback.POST_PLAYER_RENDER] = "POST_PLAYER_RENDER"
____exports.ModCallback.PRE_PLAYER_COLLISION = 33
____exports.ModCallback[____exports.ModCallback.PRE_PLAYER_COLLISION] = "PRE_PLAYER_COLLISION"
____exports.ModCallback.POST_PICKUP_INIT = 34
____exports.ModCallback[____exports.ModCallback.POST_PICKUP_INIT] = "POST_PICKUP_INIT"
____exports.ModCallback.POST_PICKUP_UPDATE = 35
____exports.ModCallback[____exports.ModCallback.POST_PICKUP_UPDATE] = "POST_PICKUP_UPDATE"
____exports.ModCallback.POST_PICKUP_RENDER = 36
____exports.ModCallback[____exports.ModCallback.POST_PICKUP_RENDER] = "POST_PICKUP_RENDER"
____exports.ModCallback.POST_PICKUP_SELECTION = 37
____exports.ModCallback[____exports.ModCallback.POST_PICKUP_SELECTION] = "POST_PICKUP_SELECTION"
____exports.ModCallback.PRE_PICKUP_COLLISION = 38
____exports.ModCallback[____exports.ModCallback.PRE_PICKUP_COLLISION] = "PRE_PICKUP_COLLISION"
____exports.ModCallback.POST_TEAR_INIT = 39
____exports.ModCallback[____exports.ModCallback.POST_TEAR_INIT] = "POST_TEAR_INIT"
____exports.ModCallback.POST_TEAR_UPDATE = 40
____exports.ModCallback[____exports.ModCallback.POST_TEAR_UPDATE] = "POST_TEAR_UPDATE"
____exports.ModCallback.POST_TEAR_RENDER = 41
____exports.ModCallback[____exports.ModCallback.POST_TEAR_RENDER] = "POST_TEAR_RENDER"
____exports.ModCallback.PRE_TEAR_COLLISION = 42
____exports.ModCallback[____exports.ModCallback.PRE_TEAR_COLLISION] = "PRE_TEAR_COLLISION"
____exports.ModCallback.POST_PROJECTILE_INIT = 43
____exports.ModCallback[____exports.ModCallback.POST_PROJECTILE_INIT] = "POST_PROJECTILE_INIT"
____exports.ModCallback.POST_PROJECTILE_UPDATE = 44
____exports.ModCallback[____exports.ModCallback.POST_PROJECTILE_UPDATE] = "POST_PROJECTILE_UPDATE"
____exports.ModCallback.POST_PROJECTILE_RENDER = 45
____exports.ModCallback[____exports.ModCallback.POST_PROJECTILE_RENDER] = "POST_PROJECTILE_RENDER"
____exports.ModCallback.PRE_PROJECTILE_COLLISION = 46
____exports.ModCallback[____exports.ModCallback.PRE_PROJECTILE_COLLISION] = "PRE_PROJECTILE_COLLISION"
____exports.ModCallback.POST_LASER_INIT = 47
____exports.ModCallback[____exports.ModCallback.POST_LASER_INIT] = "POST_LASER_INIT"
____exports.ModCallback.POST_LASER_UPDATE = 48
____exports.ModCallback[____exports.ModCallback.POST_LASER_UPDATE] = "POST_LASER_UPDATE"
____exports.ModCallback.POST_LASER_RENDER = 49
____exports.ModCallback[____exports.ModCallback.POST_LASER_RENDER] = "POST_LASER_RENDER"
____exports.ModCallback.POST_KNIFE_INIT = 50
____exports.ModCallback[____exports.ModCallback.POST_KNIFE_INIT] = "POST_KNIFE_INIT"
____exports.ModCallback.POST_KNIFE_UPDATE = 51
____exports.ModCallback[____exports.ModCallback.POST_KNIFE_UPDATE] = "POST_KNIFE_UPDATE"
____exports.ModCallback.POST_KNIFE_RENDER = 52
____exports.ModCallback[____exports.ModCallback.POST_KNIFE_RENDER] = "POST_KNIFE_RENDER"
____exports.ModCallback.PRE_KNIFE_COLLISION = 53
____exports.ModCallback[____exports.ModCallback.PRE_KNIFE_COLLISION] = "PRE_KNIFE_COLLISION"
____exports.ModCallback.POST_EFFECT_INIT = 54
____exports.ModCallback[____exports.ModCallback.POST_EFFECT_INIT] = "POST_EFFECT_INIT"
____exports.ModCallback.POST_EFFECT_UPDATE = 55
____exports.ModCallback[____exports.ModCallback.POST_EFFECT_UPDATE] = "POST_EFFECT_UPDATE"
____exports.ModCallback.POST_EFFECT_RENDER = 56
____exports.ModCallback[____exports.ModCallback.POST_EFFECT_RENDER] = "POST_EFFECT_RENDER"
____exports.ModCallback.POST_BOMB_INIT = 57
____exports.ModCallback[____exports.ModCallback.POST_BOMB_INIT] = "POST_BOMB_INIT"
____exports.ModCallback.POST_BOMB_UPDATE = 58
____exports.ModCallback[____exports.ModCallback.POST_BOMB_UPDATE] = "POST_BOMB_UPDATE"
____exports.ModCallback.POST_BOMB_RENDER = 59
____exports.ModCallback[____exports.ModCallback.POST_BOMB_RENDER] = "POST_BOMB_RENDER"
____exports.ModCallback.PRE_BOMB_COLLISION = 60
____exports.ModCallback[____exports.ModCallback.PRE_BOMB_COLLISION] = "PRE_BOMB_COLLISION"
____exports.ModCallback.POST_FIRE_TEAR = 61
____exports.ModCallback[____exports.ModCallback.POST_FIRE_TEAR] = "POST_FIRE_TEAR"
____exports.ModCallback.PRE_GET_COLLECTIBLE = 62
____exports.ModCallback[____exports.ModCallback.PRE_GET_COLLECTIBLE] = "PRE_GET_COLLECTIBLE"
____exports.ModCallback.POST_GET_COLLECTIBLE = 63
____exports.ModCallback[____exports.ModCallback.POST_GET_COLLECTIBLE] = "POST_GET_COLLECTIBLE"
____exports.ModCallback.GET_PILL_COLOR = 64
____exports.ModCallback[____exports.ModCallback.GET_PILL_COLOR] = "GET_PILL_COLOR"
____exports.ModCallback.GET_PILL_EFFECT = 65
____exports.ModCallback[____exports.ModCallback.GET_PILL_EFFECT] = "GET_PILL_EFFECT"
____exports.ModCallback.GET_TRINKET = 66
____exports.ModCallback[____exports.ModCallback.GET_TRINKET] = "GET_TRINKET"
____exports.ModCallback.POST_ENTITY_REMOVE = 67
____exports.ModCallback[____exports.ModCallback.POST_ENTITY_REMOVE] = "POST_ENTITY_REMOVE"
____exports.ModCallback.POST_ENTITY_KILL = 68
____exports.ModCallback[____exports.ModCallback.POST_ENTITY_KILL] = "POST_ENTITY_KILL"
____exports.ModCallback.PRE_NPC_UPDATE = 69
____exports.ModCallback[____exports.ModCallback.PRE_NPC_UPDATE] = "PRE_NPC_UPDATE"
____exports.ModCallback.PRE_SPAWN_CLEAN_AWARD = 70
____exports.ModCallback[____exports.ModCallback.PRE_SPAWN_CLEAN_AWARD] = "PRE_SPAWN_CLEAN_AWARD"
____exports.ModCallback.PRE_ROOM_ENTITY_SPAWN = 71
____exports.ModCallback[____exports.ModCallback.PRE_ROOM_ENTITY_SPAWN] = "PRE_ROOM_ENTITY_SPAWN"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.Mouse"] = function(...) 
local ____exports = {}
____exports.Mouse = {}
____exports.Mouse.BUTTON_LEFT = 0
____exports.Mouse[____exports.Mouse.BUTTON_LEFT] = "BUTTON_LEFT"
____exports.Mouse.BUTTON_RIGHT = 1
____exports.Mouse[____exports.Mouse.BUTTON_RIGHT] = "BUTTON_RIGHT"
____exports.Mouse.BUTTON_MIDDLE = 2
____exports.Mouse[____exports.Mouse.BUTTON_MIDDLE] = "BUTTON_MIDDLE"
____exports.Mouse.BUTTON_4 = 3
____exports.Mouse[____exports.Mouse.BUTTON_4] = "BUTTON_4"
____exports.Mouse.BUTTON_5 = 4
____exports.Mouse[____exports.Mouse.BUTTON_5] = "BUTTON_5"
____exports.Mouse.BUTTON_6 = 5
____exports.Mouse[____exports.Mouse.BUTTON_6] = "BUTTON_6"
____exports.Mouse.BUTTON_7 = 6
____exports.Mouse[____exports.Mouse.BUTTON_7] = "BUTTON_7"
____exports.Mouse.BUTTON_8 = 7
____exports.Mouse[____exports.Mouse.BUTTON_8] = "BUTTON_8"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.Music"] = function(...) 
local ____exports = {}
____exports.Music = {}
____exports.Music.NULL = 0
____exports.Music[____exports.Music.NULL] = "NULL"
____exports.Music.BASEMENT = 1
____exports.Music[____exports.Music.BASEMENT] = "BASEMENT"
____exports.Music.CAVES = 2
____exports.Music[____exports.Music.CAVES] = "CAVES"
____exports.Music.DEPTHS = 3
____exports.Music[____exports.Music.DEPTHS] = "DEPTHS"
____exports.Music.CELLAR = 4
____exports.Music[____exports.Music.CELLAR] = "CELLAR"
____exports.Music.CATACOMBS = 5
____exports.Music[____exports.Music.CATACOMBS] = "CATACOMBS"
____exports.Music.NECROPOLIS = 6
____exports.Music[____exports.Music.NECROPOLIS] = "NECROPOLIS"
____exports.Music.WOMB_UTERO = 7
____exports.Music[____exports.Music.WOMB_UTERO] = "WOMB_UTERO"
____exports.Music.GAME_OVER = 8
____exports.Music[____exports.Music.GAME_OVER] = "GAME_OVER"
____exports.Music.BOSS = 9
____exports.Music[____exports.Music.BOSS] = "BOSS"
____exports.Music.CATHEDRAL = 10
____exports.Music[____exports.Music.CATHEDRAL] = "CATHEDRAL"
____exports.Music.SHEOL = 11
____exports.Music[____exports.Music.SHEOL] = "SHEOL"
____exports.Music.DARK_ROOM = 12
____exports.Music[____exports.Music.DARK_ROOM] = "DARK_ROOM"
____exports.Music.CHEST = 13
____exports.Music[____exports.Music.CHEST] = "CHEST"
____exports.Music.BURNING_BASEMENT = 14
____exports.Music[____exports.Music.BURNING_BASEMENT] = "BURNING_BASEMENT"
____exports.Music.FLOODED_CAVES = 15
____exports.Music[____exports.Music.FLOODED_CAVES] = "FLOODED_CAVES"
____exports.Music.DANK_DEPTHS = 16
____exports.Music[____exports.Music.DANK_DEPTHS] = "DANK_DEPTHS"
____exports.Music.SCARRED_WOMB = 17
____exports.Music[____exports.Music.SCARRED_WOMB] = "SCARRED_WOMB"
____exports.Music.BLUE_WOMB = 18
____exports.Music[____exports.Music.BLUE_WOMB] = "BLUE_WOMB"
____exports.Music.UTERO = 19
____exports.Music[____exports.Music.UTERO] = "UTERO"
____exports.Music.MOM_BOSS = 20
____exports.Music[____exports.Music.MOM_BOSS] = "MOM_BOSS"
____exports.Music.MOMS_HEART_BOSS = 21
____exports.Music[____exports.Music.MOMS_HEART_BOSS] = "MOMS_HEART_BOSS"
____exports.Music.ISAAC_BOSS = 22
____exports.Music[____exports.Music.ISAAC_BOSS] = "ISAAC_BOSS"
____exports.Music.SATAN_BOSS = 23
____exports.Music[____exports.Music.SATAN_BOSS] = "SATAN_BOSS"
____exports.Music.DARK_ROOM_BOSS = 24
____exports.Music[____exports.Music.DARK_ROOM_BOSS] = "DARK_ROOM_BOSS"
____exports.Music.BLUE_BABY_BOSS = 25
____exports.Music[____exports.Music.BLUE_BABY_BOSS] = "BLUE_BABY_BOSS"
____exports.Music.BOSS_2 = 26
____exports.Music[____exports.Music.BOSS_2] = "BOSS_2"
____exports.Music.HUSH_BOSS = 27
____exports.Music[____exports.Music.HUSH_BOSS] = "HUSH_BOSS"
____exports.Music.ULTRA_GREED_BOSS = 28
____exports.Music[____exports.Music.ULTRA_GREED_BOSS] = "ULTRA_GREED_BOSS"
____exports.Music.LIBRARY_ROOM = 30
____exports.Music[____exports.Music.LIBRARY_ROOM] = "LIBRARY_ROOM"
____exports.Music.SECRET_ROOM = 31
____exports.Music[____exports.Music.SECRET_ROOM] = "SECRET_ROOM"
____exports.Music.SECRET_ROOM_2 = 32
____exports.Music[____exports.Music.SECRET_ROOM_2] = "SECRET_ROOM_2"
____exports.Music.DEVIL_ROOM = 33
____exports.Music[____exports.Music.DEVIL_ROOM] = "DEVIL_ROOM"
____exports.Music.ANGEL_ROOM = 34
____exports.Music[____exports.Music.ANGEL_ROOM] = "ANGEL_ROOM"
____exports.Music.SHOP_ROOM = 35
____exports.Music[____exports.Music.SHOP_ROOM] = "SHOP_ROOM"
____exports.Music.ARCADE_ROOM = 36
____exports.Music[____exports.Music.ARCADE_ROOM] = "ARCADE_ROOM"
____exports.Music.BOSS_OVER = 37
____exports.Music[____exports.Music.BOSS_OVER] = "BOSS_OVER"
____exports.Music.CHALLENGE_FIGHT = 38
____exports.Music[____exports.Music.CHALLENGE_FIGHT] = "CHALLENGE_FIGHT"
____exports.Music.BOSS_RUSH = 39
____exports.Music[____exports.Music.BOSS_RUSH] = "BOSS_RUSH"
____exports.Music.JINGLE_BOSS_RUSH_OUTRO = 40
____exports.Music[____exports.Music.JINGLE_BOSS_RUSH_OUTRO] = "JINGLE_BOSS_RUSH_OUTRO"
____exports.Music.BOSS_3 = 41
____exports.Music[____exports.Music.BOSS_3] = "BOSS_3"
____exports.Music.JINGLE_BOSS_OVER_3 = 42
____exports.Music[____exports.Music.JINGLE_BOSS_OVER_3] = "JINGLE_BOSS_OVER_3"
____exports.Music.MOTHER_BOSS = 43
____exports.Music[____exports.Music.MOTHER_BOSS] = "MOTHER_BOSS"
____exports.Music.DOGMA_BOSS = 44
____exports.Music[____exports.Music.DOGMA_BOSS] = "DOGMA_BOSS"
____exports.Music.BEAST_BOSS = 45
____exports.Music[____exports.Music.BEAST_BOSS] = "BEAST_BOSS"
____exports.Music.JINGLE_MOTHER_OVER = 47
____exports.Music[____exports.Music.JINGLE_MOTHER_OVER] = "JINGLE_MOTHER_OVER"
____exports.Music.JINGLE_DOGMA_OVER = 48
____exports.Music[____exports.Music.JINGLE_DOGMA_OVER] = "JINGLE_DOGMA_OVER"
____exports.Music.JINGLE_BEAST_OVER = 49
____exports.Music[____exports.Music.JINGLE_BEAST_OVER] = "JINGLE_BEAST_OVER"
____exports.Music.PLANETARIUM = 50
____exports.Music[____exports.Music.PLANETARIUM] = "PLANETARIUM"
____exports.Music.SECRET_ROOM_ALT_ALT = 51
____exports.Music[____exports.Music.SECRET_ROOM_ALT_ALT] = "SECRET_ROOM_ALT_ALT"
____exports.Music.BOSS_OVER_TWISTED = 52
____exports.Music[____exports.Music.BOSS_OVER_TWISTED] = "BOSS_OVER_TWISTED"
____exports.Music.CREDITS = 60
____exports.Music[____exports.Music.CREDITS] = "CREDITS"
____exports.Music.TITLE = 61
____exports.Music[____exports.Music.TITLE] = "TITLE"
____exports.Music.TITLE_AFTERBIRTH = 62
____exports.Music[____exports.Music.TITLE_AFTERBIRTH] = "TITLE_AFTERBIRTH"
____exports.Music.TITLE_REPENTANCE = 63
____exports.Music[____exports.Music.TITLE_REPENTANCE] = "TITLE_REPENTANCE"
____exports.Music.JINGLE_GAME_START_ALT = 64
____exports.Music[____exports.Music.JINGLE_GAME_START_ALT] = "JINGLE_GAME_START_ALT"
____exports.Music.JINGLE_NIGHTMARE_ALT = 65
____exports.Music[____exports.Music.JINGLE_NIGHTMARE_ALT] = "JINGLE_NIGHTMARE_ALT"
____exports.Music.MOTHERS_SHADOW_INTRO = 66
____exports.Music[____exports.Music.MOTHERS_SHADOW_INTRO] = "MOTHERS_SHADOW_INTRO"
____exports.Music.DOGMA_INTRO = 67
____exports.Music[____exports.Music.DOGMA_INTRO] = "DOGMA_INTRO"
____exports.Music.STRANGE_DOOR_JINGLE = 68
____exports.Music[____exports.Music.STRANGE_DOOR_JINGLE] = "STRANGE_DOOR_JINGLE"
____exports.Music.DARK_CLOSET = 69
____exports.Music[____exports.Music.DARK_CLOSET] = "DARK_CLOSET"
____exports.Music.CREDITS_ALT = 70
____exports.Music[____exports.Music.CREDITS_ALT] = "CREDITS_ALT"
____exports.Music.CREDITS_ALT_FINAL = 71
____exports.Music[____exports.Music.CREDITS_ALT_FINAL] = "CREDITS_ALT_FINAL"
____exports.Music.JINGLE_BOSS = 81
____exports.Music[____exports.Music.JINGLE_BOSS] = "JINGLE_BOSS"
____exports.Music.JINGLE_BOSS_OVER_1 = 83
____exports.Music[____exports.Music.JINGLE_BOSS_OVER_1] = "JINGLE_BOSS_OVER_1"
____exports.Music.JINGLE_HOLY_ROOM_FIND = 84
____exports.Music[____exports.Music.JINGLE_HOLY_ROOM_FIND] = "JINGLE_HOLY_ROOM_FIND"
____exports.Music.JINGLE_SECRET_ROOM_FIND = 85
____exports.Music[____exports.Music.JINGLE_SECRET_ROOM_FIND] = "JINGLE_SECRET_ROOM_FIND"
____exports.Music.JINGLE_TREASURE_ROOM_ENTRY_0 = 87
____exports.Music[____exports.Music.JINGLE_TREASURE_ROOM_ENTRY_0] = "JINGLE_TREASURE_ROOM_ENTRY_0"
____exports.Music.JINGLE_TREASURE_ROOM_ENTRY_1 = 88
____exports.Music[____exports.Music.JINGLE_TREASURE_ROOM_ENTRY_1] = "JINGLE_TREASURE_ROOM_ENTRY_1"
____exports.Music.JINGLE_TREASURE_ROOM_ENTRY_2 = 89
____exports.Music[____exports.Music.JINGLE_TREASURE_ROOM_ENTRY_2] = "JINGLE_TREASURE_ROOM_ENTRY_2"
____exports.Music.JINGLE_TREASURE_ROOM_ENTRY_3 = 90
____exports.Music[____exports.Music.JINGLE_TREASURE_ROOM_ENTRY_3] = "JINGLE_TREASURE_ROOM_ENTRY_3"
____exports.Music.JINGLE_CHALLENGE_ENTRY = 91
____exports.Music[____exports.Music.JINGLE_CHALLENGE_ENTRY] = "JINGLE_CHALLENGE_ENTRY"
____exports.Music.JINGLE_CHALLENGE_OUTRO = 92
____exports.Music[____exports.Music.JINGLE_CHALLENGE_OUTRO] = "JINGLE_CHALLENGE_OUTRO"
____exports.Music.JINGLE_GAME_OVER = 93
____exports.Music[____exports.Music.JINGLE_GAME_OVER] = "JINGLE_GAME_OVER"
____exports.Music.JINGLE_DEVIL_ROOM_FIND = 94
____exports.Music[____exports.Music.JINGLE_DEVIL_ROOM_FIND] = "JINGLE_DEVIL_ROOM_FIND"
____exports.Music.JINGLE_GAME_START = 95
____exports.Music[____exports.Music.JINGLE_GAME_START] = "JINGLE_GAME_START"
____exports.Music.JINGLE_NIGHTMARE = 96
____exports.Music[____exports.Music.JINGLE_NIGHTMARE] = "JINGLE_NIGHTMARE"
____exports.Music.JINGLE_BOSS_OVER_2 = 97
____exports.Music[____exports.Music.JINGLE_BOSS_OVER_2] = "JINGLE_BOSS_OVER_2"
____exports.Music.JINGLE_HUSH_OVER = 98
____exports.Music[____exports.Music.JINGLE_HUSH_OVER] = "JINGLE_HUSH_OVER"
____exports.Music.INTRO_VOICEOVER = 100
____exports.Music[____exports.Music.INTRO_VOICEOVER] = "INTRO_VOICEOVER"
____exports.Music.EPILOGUE_VOICEOVER = 101
____exports.Music[____exports.Music.EPILOGUE_VOICEOVER] = "EPILOGUE_VOICEOVER"
____exports.Music.VOID = 102
____exports.Music[____exports.Music.VOID] = "VOID"
____exports.Music.VOID_BOSS = 103
____exports.Music[____exports.Music.VOID_BOSS] = "VOID_BOSS"
____exports.Music.DOWNPOUR = 104
____exports.Music[____exports.Music.DOWNPOUR] = "DOWNPOUR"
____exports.Music.MINES = 105
____exports.Music[____exports.Music.MINES] = "MINES"
____exports.Music.MAUSOLEUM = 106
____exports.Music[____exports.Music.MAUSOLEUM] = "MAUSOLEUM"
____exports.Music.CORPSE = 107
____exports.Music[____exports.Music.CORPSE] = "CORPSE"
____exports.Music.DROSS = 108
____exports.Music[____exports.Music.DROSS] = "DROSS"
____exports.Music.ASHPIT = 109
____exports.Music[____exports.Music.ASHPIT] = "ASHPIT"
____exports.Music.GEHENNA = 110
____exports.Music[____exports.Music.GEHENNA] = "GEHENNA"
____exports.Music.MORTIS = 111
____exports.Music[____exports.Music.MORTIS] = "MORTIS"
____exports.Music.ISAACS_HOUSE = 112
____exports.Music[____exports.Music.ISAACS_HOUSE] = "ISAACS_HOUSE"
____exports.Music.FINAL_VOICEOVER = 113
____exports.Music[____exports.Music.FINAL_VOICEOVER] = "FINAL_VOICEOVER"
____exports.Music.DOWNPOUR_REVERSE = 114
____exports.Music[____exports.Music.DOWNPOUR_REVERSE] = "DOWNPOUR_REVERSE"
____exports.Music.DROSS_REVERSE = 115
____exports.Music[____exports.Music.DROSS_REVERSE] = "DROSS_REVERSE"
____exports.Music.MINESHAFT_AMBIENT = 116
____exports.Music[____exports.Music.MINESHAFT_AMBIENT] = "MINESHAFT_AMBIENT"
____exports.Music.MINESHAFT_ESCAPE = 117
____exports.Music[____exports.Music.MINESHAFT_ESCAPE] = "MINESHAFT_ESCAPE"
____exports.Music.REVERSE_GENESIS = 118
____exports.Music[____exports.Music.REVERSE_GENESIS] = "REVERSE_GENESIS"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.NpcState"] = function(...) 
local ____exports = {}
____exports.NpcState = {}
____exports.NpcState.INIT = 0
____exports.NpcState[____exports.NpcState.INIT] = "INIT"
____exports.NpcState.APPEAR = 1
____exports.NpcState[____exports.NpcState.APPEAR] = "APPEAR"
____exports.NpcState.APPEAR_CUSTOM = 2
____exports.NpcState[____exports.NpcState.APPEAR_CUSTOM] = "APPEAR_CUSTOM"
____exports.NpcState.IDLE = 3
____exports.NpcState[____exports.NpcState.IDLE] = "IDLE"
____exports.NpcState.MOVE = 4
____exports.NpcState[____exports.NpcState.MOVE] = "MOVE"
____exports.NpcState.SUICIDE = 5
____exports.NpcState[____exports.NpcState.SUICIDE] = "SUICIDE"
____exports.NpcState.JUMP = 6
____exports.NpcState[____exports.NpcState.JUMP] = "JUMP"
____exports.NpcState.STOMP = 7
____exports.NpcState[____exports.NpcState.STOMP] = "STOMP"
____exports.NpcState.ATTACK = 8
____exports.NpcState[____exports.NpcState.ATTACK] = "ATTACK"
____exports.NpcState.ATTACK_2 = 9
____exports.NpcState[____exports.NpcState.ATTACK_2] = "ATTACK_2"
____exports.NpcState.ATTACK_3 = 10
____exports.NpcState[____exports.NpcState.ATTACK_3] = "ATTACK_3"
____exports.NpcState.ATTACK_4 = 11
____exports.NpcState[____exports.NpcState.ATTACK_4] = "ATTACK_4"
____exports.NpcState.ATTACK_5 = 12
____exports.NpcState[____exports.NpcState.ATTACK_5] = "ATTACK_5"
____exports.NpcState.SUMMON = 13
____exports.NpcState[____exports.NpcState.SUMMON] = "SUMMON"
____exports.NpcState.SUMMON_2 = 14
____exports.NpcState[____exports.NpcState.SUMMON_2] = "SUMMON_2"
____exports.NpcState.SUMMON_3 = 15
____exports.NpcState[____exports.NpcState.SUMMON_3] = "SUMMON_3"
____exports.NpcState.SPECIAL = 16
____exports.NpcState[____exports.NpcState.SPECIAL] = "SPECIAL"
____exports.NpcState.UNIQUE_DEATH = 17
____exports.NpcState[____exports.NpcState.UNIQUE_DEATH] = "UNIQUE_DEATH"
____exports.NpcState.DEATH = 18
____exports.NpcState[____exports.NpcState.DEATH] = "DEATH"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.NullItemID"] = function(...) 
local ____exports = {}
____exports.NullItemID = {}
____exports.NullItemID.NULL = -1
____exports.NullItemID[____exports.NullItemID.NULL] = "NULL"
____exports.NullItemID.EXPLOSIVE_DIARRHEA = 0
____exports.NullItemID[____exports.NullItemID.EXPLOSIVE_DIARRHEA] = "EXPLOSIVE_DIARRHEA"
____exports.NullItemID.PUBERTY = 1
____exports.NullItemID[____exports.NullItemID.PUBERTY] = "PUBERTY"
____exports.NullItemID.I_FOUND_PILLS = 2
____exports.NullItemID[____exports.NullItemID.I_FOUND_PILLS] = "I_FOUND_PILLS"
____exports.NullItemID.LORD_OF_THE_FLIES = 3
____exports.NullItemID[____exports.NullItemID.LORD_OF_THE_FLIES] = "LORD_OF_THE_FLIES"
____exports.NullItemID.STATUE = 4
____exports.NullItemID[____exports.NullItemID.STATUE] = "STATUE"
____exports.NullItemID.GUPPY = 5
____exports.NullItemID[____exports.NullItemID.GUPPY] = "GUPPY"
____exports.NullItemID.WIZARD = 6
____exports.NullItemID[____exports.NullItemID.WIZARD] = "WIZARD"
____exports.NullItemID.MAGDALENE = 7
____exports.NullItemID[____exports.NullItemID.MAGDALENE] = "MAGDALENE"
____exports.NullItemID.CAIN = 8
____exports.NullItemID[____exports.NullItemID.CAIN] = "CAIN"
____exports.NullItemID.JUDAS = 9
____exports.NullItemID[____exports.NullItemID.JUDAS] = "JUDAS"
____exports.NullItemID.EVE = 10
____exports.NullItemID[____exports.NullItemID.EVE] = "EVE"
____exports.NullItemID.AZAZEL = 11
____exports.NullItemID[____exports.NullItemID.AZAZEL] = "AZAZEL"
____exports.NullItemID.EDEN = 12
____exports.NullItemID[____exports.NullItemID.EDEN] = "EDEN"
____exports.NullItemID.SAMSON = 13
____exports.NullItemID[____exports.NullItemID.SAMSON] = "SAMSON"
____exports.NullItemID.BLINDFOLD = 14
____exports.NullItemID[____exports.NullItemID.BLINDFOLD] = "BLINDFOLD"
____exports.NullItemID.BLANK_FACE = 15
____exports.NullItemID[____exports.NullItemID.BLANK_FACE] = "BLANK_FACE"
____exports.NullItemID.CHRISTMAS = 16
____exports.NullItemID[____exports.NullItemID.CHRISTMAS] = "CHRISTMAS"
____exports.NullItemID.PURITY_GLOW = 17
____exports.NullItemID[____exports.NullItemID.PURITY_GLOW] = "PURITY_GLOW"
____exports.NullItemID.EMPTY_VESSEL = 18
____exports.NullItemID[____exports.NullItemID.EMPTY_VESSEL] = "EMPTY_VESSEL"
____exports.NullItemID.MAW_MARK = 19
____exports.NullItemID[____exports.NullItemID.MAW_MARK] = "MAW_MARK"
____exports.NullItemID.MUSHROOM = 20
____exports.NullItemID[____exports.NullItemID.MUSHROOM] = "MUSHROOM"
____exports.NullItemID.ANGEL = 21
____exports.NullItemID[____exports.NullItemID.ANGEL] = "ANGEL"
____exports.NullItemID.BOB = 22
____exports.NullItemID[____exports.NullItemID.BOB] = "BOB"
____exports.NullItemID.DRUGS = 23
____exports.NullItemID[____exports.NullItemID.DRUGS] = "DRUGS"
____exports.NullItemID.MOM = 24
____exports.NullItemID[____exports.NullItemID.MOM] = "MOM"
____exports.NullItemID.BABY = 25
____exports.NullItemID[____exports.NullItemID.BABY] = "BABY"
____exports.NullItemID.EVIL_ANGEL = 26
____exports.NullItemID[____exports.NullItemID.EVIL_ANGEL] = "EVIL_ANGEL"
____exports.NullItemID.POOP = 27
____exports.NullItemID[____exports.NullItemID.POOP] = "POOP"
____exports.NullItemID.RELAX = 28
____exports.NullItemID[____exports.NullItemID.RELAX] = "RELAX"
____exports.NullItemID.OVERDOSE = 29
____exports.NullItemID[____exports.NullItemID.OVERDOSE] = "OVERDOSE"
____exports.NullItemID.BOOMERANG = 30
____exports.NullItemID[____exports.NullItemID.BOOMERANG] = "BOOMERANG"
____exports.NullItemID.MEGA_BLAST = 31
____exports.NullItemID[____exports.NullItemID.MEGA_BLAST] = "MEGA_BLAST"
____exports.NullItemID.LAZARUS = 32
____exports.NullItemID[____exports.NullItemID.LAZARUS] = "LAZARUS"
____exports.NullItemID.LAZARUS_2 = 33
____exports.NullItemID[____exports.NullItemID.LAZARUS_2] = "LAZARUS_2"
____exports.NullItemID.LILITH = 34
____exports.NullItemID[____exports.NullItemID.LILITH] = "LILITH"
____exports.NullItemID.IWATA = 35
____exports.NullItemID[____exports.NullItemID.IWATA] = "IWATA"
____exports.NullItemID.APOLLYON = 36
____exports.NullItemID[____exports.NullItemID.APOLLYON] = "APOLLYON"
____exports.NullItemID.BOOKWORM = 37
____exports.NullItemID[____exports.NullItemID.BOOKWORM] = "BOOKWORM"
____exports.NullItemID.ADULTHOOD = 38
____exports.NullItemID[____exports.NullItemID.ADULTHOOD] = "ADULTHOOD"
____exports.NullItemID.SPIDER_BABY = 39
____exports.NullItemID[____exports.NullItemID.SPIDER_BABY] = "SPIDER_BABY"
____exports.NullItemID.BATWING_WINGS = 40
____exports.NullItemID[____exports.NullItemID.BATWING_WINGS] = "BATWING_WINGS"
____exports.NullItemID.HUGE_GROWTH = 41
____exports.NullItemID[____exports.NullItemID.HUGE_GROWTH] = "HUGE_GROWTH"
____exports.NullItemID.ERA_WALK = 42
____exports.NullItemID[____exports.NullItemID.ERA_WALK] = "ERA_WALK"
____exports.NullItemID.SACRIFICIAL_ALTAR = 43
____exports.NullItemID[____exports.NullItemID.SACRIFICIAL_ALTAR] = "SACRIFICIAL_ALTAR"
____exports.NullItemID.FORGOTTEN = 44
____exports.NullItemID[____exports.NullItemID.FORGOTTEN] = "FORGOTTEN"
____exports.NullItemID.BRIMSTONE_2 = 45
____exports.NullItemID[____exports.NullItemID.BRIMSTONE_2] = "BRIMSTONE_2"
____exports.NullItemID.HOLY_CARD = 46
____exports.NullItemID[____exports.NullItemID.HOLY_CARD] = "HOLY_CARD"
____exports.NullItemID.KEEPER = 47
____exports.NullItemID[____exports.NullItemID.KEEPER] = "KEEPER"
____exports.NullItemID.CAMO_BOOST = 48
____exports.NullItemID[____exports.NullItemID.CAMO_BOOST] = "CAMO_BOOST"
____exports.NullItemID.LAZARUS_BOOST = 49
____exports.NullItemID[____exports.NullItemID.LAZARUS_BOOST] = "LAZARUS_BOOST"
____exports.NullItemID.SPIN_TO_WIN = 50
____exports.NullItemID[____exports.NullItemID.SPIN_TO_WIN] = "SPIN_TO_WIN"
____exports.NullItemID.BETHANY = 51
____exports.NullItemID[____exports.NullItemID.BETHANY] = "BETHANY"
____exports.NullItemID.JACOB = 52
____exports.NullItemID[____exports.NullItemID.JACOB] = "JACOB"
____exports.NullItemID.ESAU = 53
____exports.NullItemID[____exports.NullItemID.ESAU] = "ESAU"
____exports.NullItemID.BLOOD_OATH = 54
____exports.NullItemID[____exports.NullItemID.BLOOD_OATH] = "BLOOD_OATH"
____exports.NullItemID.INTRUDER = 55
____exports.NullItemID[____exports.NullItemID.INTRUDER] = "INTRUDER"
____exports.NullItemID.SOL = 56
____exports.NullItemID[____exports.NullItemID.SOL] = "SOL"
____exports.NullItemID.IT_HURTS = 57
____exports.NullItemID[____exports.NullItemID.IT_HURTS] = "IT_HURTS"
____exports.NullItemID.MARS = 58
____exports.NullItemID[____exports.NullItemID.MARS] = "MARS"
____exports.NullItemID.TOOTH_AND_NAIL = 59
____exports.NullItemID[____exports.NullItemID.TOOTH_AND_NAIL] = "TOOTH_AND_NAIL"
____exports.NullItemID.REVERSE_MAGICIAN = 60
____exports.NullItemID[____exports.NullItemID.REVERSE_MAGICIAN] = "REVERSE_MAGICIAN"
____exports.NullItemID.REVERSE_HIGH_PRIESTESS = 61
____exports.NullItemID[____exports.NullItemID.REVERSE_HIGH_PRIESTESS] = "REVERSE_HIGH_PRIESTESS"
____exports.NullItemID.REVERSE_EMPRESS = 62
____exports.NullItemID[____exports.NullItemID.REVERSE_EMPRESS] = "REVERSE_EMPRESS"
____exports.NullItemID.REVERSE_CHARIOT = 63
____exports.NullItemID[____exports.NullItemID.REVERSE_CHARIOT] = "REVERSE_CHARIOT"
____exports.NullItemID.REVERSE_STRENGTH = 64
____exports.NullItemID[____exports.NullItemID.REVERSE_STRENGTH] = "REVERSE_STRENGTH"
____exports.NullItemID.REVERSE_HANGED_MAN = 65
____exports.NullItemID[____exports.NullItemID.REVERSE_HANGED_MAN] = "REVERSE_HANGED_MAN"
____exports.NullItemID.REVERSE_SUN = 66
____exports.NullItemID[____exports.NullItemID.REVERSE_SUN] = "REVERSE_SUN"
____exports.NullItemID.REVERSE_DEVIL = 67
____exports.NullItemID[____exports.NullItemID.REVERSE_DEVIL] = "REVERSE_DEVIL"
____exports.NullItemID.REVERSE_CHARIOT_ALT = 68
____exports.NullItemID[____exports.NullItemID.REVERSE_CHARIOT_ALT] = "REVERSE_CHARIOT_ALT"
____exports.NullItemID.REVERSE_TEMPERANCE = 69
____exports.NullItemID[____exports.NullItemID.REVERSE_TEMPERANCE] = "REVERSE_TEMPERANCE"
____exports.NullItemID.REVERSE_STARS = 70
____exports.NullItemID[____exports.NullItemID.REVERSE_STARS] = "REVERSE_STARS"
____exports.NullItemID.WAVY_CAP_1 = 71
____exports.NullItemID[____exports.NullItemID.WAVY_CAP_1] = "WAVY_CAP_1"
____exports.NullItemID.WAVY_CAP_2 = 72
____exports.NullItemID[____exports.NullItemID.WAVY_CAP_2] = "WAVY_CAP_2"
____exports.NullItemID.WAVY_CAP_3 = 73
____exports.NullItemID[____exports.NullItemID.WAVY_CAP_3] = "WAVY_CAP_3"
____exports.NullItemID.LUNA = 74
____exports.NullItemID[____exports.NullItemID.LUNA] = "LUNA"
____exports.NullItemID.JUPITER_BODY = 75
____exports.NullItemID[____exports.NullItemID.JUPITER_BODY] = "JUPITER_BODY"
____exports.NullItemID.JUPITER_BODY_ANGEL = 76
____exports.NullItemID[____exports.NullItemID.JUPITER_BODY_ANGEL] = "JUPITER_BODY_ANGEL"
____exports.NullItemID.JUPITER_BODY_PONY = 77
____exports.NullItemID[____exports.NullItemID.JUPITER_BODY_PONY] = "JUPITER_BODY_PONY"
____exports.NullItemID.JUPITER_BODY_WHITE_PONY = 78
____exports.NullItemID[____exports.NullItemID.JUPITER_BODY_WHITE_PONY] = "JUPITER_BODY_WHITE_PONY"
____exports.NullItemID.ISAAC_B = 79
____exports.NullItemID[____exports.NullItemID.ISAAC_B] = "ISAAC_B"
____exports.NullItemID.MAGDALENE_B = 80
____exports.NullItemID[____exports.NullItemID.MAGDALENE_B] = "MAGDALENE_B"
____exports.NullItemID.CAIN_B = 81
____exports.NullItemID[____exports.NullItemID.CAIN_B] = "CAIN_B"
____exports.NullItemID.JUDAS_B = 82
____exports.NullItemID[____exports.NullItemID.JUDAS_B] = "JUDAS_B"
____exports.NullItemID.BLUE_BABY_B = 83
____exports.NullItemID[____exports.NullItemID.BLUE_BABY_B] = "BLUE_BABY_B"
____exports.NullItemID.EVE_B = 84
____exports.NullItemID[____exports.NullItemID.EVE_B] = "EVE_B"
____exports.NullItemID.SAMSON_B = 85
____exports.NullItemID[____exports.NullItemID.SAMSON_B] = "SAMSON_B"
____exports.NullItemID.AZAZEL_B = 86
____exports.NullItemID[____exports.NullItemID.AZAZEL_B] = "AZAZEL_B"
____exports.NullItemID.LAZARUS_B = 87
____exports.NullItemID[____exports.NullItemID.LAZARUS_B] = "LAZARUS_B"
____exports.NullItemID.EDEN_B = 88
____exports.NullItemID[____exports.NullItemID.EDEN_B] = "EDEN_B"
____exports.NullItemID.LOST_B = 89
____exports.NullItemID[____exports.NullItemID.LOST_B] = "LOST_B"
____exports.NullItemID.LILITH_B = 90
____exports.NullItemID[____exports.NullItemID.LILITH_B] = "LILITH_B"
____exports.NullItemID.KEEPER_B = 91
____exports.NullItemID[____exports.NullItemID.KEEPER_B] = "KEEPER_B"
____exports.NullItemID.APOLLYON_B = 92
____exports.NullItemID[____exports.NullItemID.APOLLYON_B] = "APOLLYON_B"
____exports.NullItemID.FORGOTTEN_B = 93
____exports.NullItemID[____exports.NullItemID.FORGOTTEN_B] = "FORGOTTEN_B"
____exports.NullItemID.BETHANY_B = 94
____exports.NullItemID[____exports.NullItemID.BETHANY_B] = "BETHANY_B"
____exports.NullItemID.JACOB_B = 95
____exports.NullItemID[____exports.NullItemID.JACOB_B] = "JACOB_B"
____exports.NullItemID.AZAZELS_RAGE_1 = 96
____exports.NullItemID[____exports.NullItemID.AZAZELS_RAGE_1] = "AZAZELS_RAGE_1"
____exports.NullItemID.AZAZELS_RAGE_2 = 97
____exports.NullItemID[____exports.NullItemID.AZAZELS_RAGE_2] = "AZAZELS_RAGE_2"
____exports.NullItemID.AZAZELS_RAGE_3 = 98
____exports.NullItemID[____exports.NullItemID.AZAZELS_RAGE_3] = "AZAZELS_RAGE_3"
____exports.NullItemID.AZAZELS_RAGE_4 = 99
____exports.NullItemID[____exports.NullItemID.AZAZELS_RAGE_4] = "AZAZELS_RAGE_4"
____exports.NullItemID.ESAU_JR = 100
____exports.NullItemID[____exports.NullItemID.ESAU_JR] = "ESAU_JR"
____exports.NullItemID.SPIRIT_SHACKLES_SOUL = 101
____exports.NullItemID[____exports.NullItemID.SPIRIT_SHACKLES_SOUL] = "SPIRIT_SHACKLES_SOUL"
____exports.NullItemID.SPIRIT_SHACKLES_DISABLED = 102
____exports.NullItemID[____exports.NullItemID.SPIRIT_SHACKLES_DISABLED] = "SPIRIT_SHACKLES_DISABLED"
____exports.NullItemID.BERSERK_SAMSON = 103
____exports.NullItemID[____exports.NullItemID.BERSERK_SAMSON] = "BERSERK_SAMSON"
____exports.NullItemID.LAZARUS_2_B = 104
____exports.NullItemID[____exports.NullItemID.LAZARUS_2_B] = "LAZARUS_2_B"
____exports.NullItemID.SOUL_B = 105
____exports.NullItemID[____exports.NullItemID.SOUL_B] = "SOUL_B"
____exports.NullItemID.FORGOTTEN_BOMB = 106
____exports.NullItemID[____exports.NullItemID.FORGOTTEN_BOMB] = "FORGOTTEN_BOMB"
____exports.NullItemID.EXTRA_BIG_FAN = 107
____exports.NullItemID[____exports.NullItemID.EXTRA_BIG_FAN] = "EXTRA_BIG_FAN"
____exports.NullItemID.JACOB_2_B = 108
____exports.NullItemID[____exports.NullItemID.JACOB_2_B] = "JACOB_2_B"
____exports.NullItemID.JACOBS_CURSE = 109
____exports.NullItemID[____exports.NullItemID.JACOBS_CURSE] = "JACOBS_CURSE"
____exports.NullItemID.BLOODY_BABYLON = 110
____exports.NullItemID[____exports.NullItemID.BLOODY_BABYLON] = "BLOODY_BABYLON"
____exports.NullItemID.DARK_ARTS = 111
____exports.NullItemID[____exports.NullItemID.DARK_ARTS] = "DARK_ARTS"
____exports.NullItemID.LOST_CURSE = 112
____exports.NullItemID[____exports.NullItemID.LOST_CURSE] = "LOST_CURSE"
____exports.NullItemID.LAZARUS_SOUL_REVIVE = 113
____exports.NullItemID[____exports.NullItemID.LAZARUS_SOUL_REVIVE] = "LAZARUS_SOUL_REVIVE"
____exports.NullItemID.SOUL_MAGDALENE = 114
____exports.NullItemID[____exports.NullItemID.SOUL_MAGDALENE] = "SOUL_MAGDALENE"
____exports.NullItemID.SOUL_BLUE_BABY = 115
____exports.NullItemID[____exports.NullItemID.SOUL_BLUE_BABY] = "SOUL_BLUE_BABY"
____exports.NullItemID.MIRROR_DEATH = 116
____exports.NullItemID[____exports.NullItemID.MIRROR_DEATH] = "MIRROR_DEATH"
____exports.NullItemID.HEMOPTYSIS = 117
____exports.NullItemID[____exports.NullItemID.HEMOPTYSIS] = "HEMOPTYSIS"
____exports.NullItemID.I_FOUND_HORSE_PILLS = 118
____exports.NullItemID[____exports.NullItemID.I_FOUND_HORSE_PILLS] = "I_FOUND_HORSE_PILLS"
____exports.NullItemID.HORSE_PUBERTY = 119
____exports.NullItemID[____exports.NullItemID.HORSE_PUBERTY] = "HORSE_PUBERTY"
____exports.NullItemID.SOUL_FORGOTTEN = 120
____exports.NullItemID[____exports.NullItemID.SOUL_FORGOTTEN] = "SOUL_FORGOTTEN"
____exports.NullItemID.SOUL_JACOB = 121
____exports.NullItemID[____exports.NullItemID.SOUL_JACOB] = "SOUL_JACOB"
____exports.NullItemID.BETHANY_B_BIRTHRIGHT = 122
____exports.NullItemID[____exports.NullItemID.BETHANY_B_BIRTHRIGHT] = "BETHANY_B_BIRTHRIGHT"
____exports.NullItemID.JUDAS_BIRTHRIGHT = 123
____exports.NullItemID[____exports.NullItemID.JUDAS_BIRTHRIGHT] = "JUDAS_BIRTHRIGHT"
____exports.NullItemID.JUDAS_BIRTHRIGHT_TIMED = 124
____exports.NullItemID[____exports.NullItemID.JUDAS_BIRTHRIGHT_TIMED] = "JUDAS_BIRTHRIGHT_TIMED"
____exports.NullItemID.DOUBLE_GUPPYS_EYE = 125
____exports.NullItemID[____exports.NullItemID.DOUBLE_GUPPYS_EYE] = "DOUBLE_GUPPYS_EYE"
____exports.NullItemID.DOUBLE_GLASS_EYE = 126
____exports.NullItemID[____exports.NullItemID.DOUBLE_GLASS_EYE] = "DOUBLE_GLASS_EYE"
____exports.NullItemID.HEMOPTYSIS_BOOST = 127
____exports.NullItemID[____exports.NullItemID.HEMOPTYSIS_BOOST] = "HEMOPTYSIS_BOOST"
____exports.NullItemID.SOUL_JUDAS = 128
____exports.NullItemID[____exports.NullItemID.SOUL_JUDAS] = "SOUL_JUDAS"
____exports.NullItemID.JUDAS_BIRTHRIGHT_STAGE = 129
____exports.NullItemID[____exports.NullItemID.JUDAS_BIRTHRIGHT_STAGE] = "JUDAS_BIRTHRIGHT_STAGE"
____exports.NullItemID.JUDAS_BIRTHRIGHT_PERMANENT = 130
____exports.NullItemID[____exports.NullItemID.JUDAS_BIRTHRIGHT_PERMANENT] = "JUDAS_BIRTHRIGHT_PERMANENT"
____exports.NullItemID.ESAU_JR_FAMILIAR = 131
____exports.NullItemID[____exports.NullItemID.ESAU_JR_FAMILIAR] = "ESAU_JR_FAMILIAR"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.PickupPrice"] = function(...) 
local ____exports = {}
____exports.PickupPrice = {}
____exports.PickupPrice.NULL = 0
____exports.PickupPrice[____exports.PickupPrice.NULL] = "NULL"
____exports.PickupPrice.ONE_HEART = -1
____exports.PickupPrice[____exports.PickupPrice.ONE_HEART] = "ONE_HEART"
____exports.PickupPrice.TWO_HEARTS = -2
____exports.PickupPrice[____exports.PickupPrice.TWO_HEARTS] = "TWO_HEARTS"
____exports.PickupPrice.THREE_SOUL_HEARTS = -3
____exports.PickupPrice[____exports.PickupPrice.THREE_SOUL_HEARTS] = "THREE_SOUL_HEARTS"
____exports.PickupPrice.ONE_HEART_AND_TWO_SOUL_HEARTS = -4
____exports.PickupPrice[____exports.PickupPrice.ONE_HEART_AND_TWO_SOUL_HEARTS] = "ONE_HEART_AND_TWO_SOUL_HEARTS"
____exports.PickupPrice.SPIKES = -5
____exports.PickupPrice[____exports.PickupPrice.SPIKES] = "SPIKES"
____exports.PickupPrice.YOUR_SOUL = -6
____exports.PickupPrice[____exports.PickupPrice.YOUR_SOUL] = "YOUR_SOUL"
____exports.PickupPrice.ONE_SOUL_HEART = -7
____exports.PickupPrice[____exports.PickupPrice.ONE_SOUL_HEART] = "ONE_SOUL_HEART"
____exports.PickupPrice.TWO_SOUL_HEARTS = -8
____exports.PickupPrice[____exports.PickupPrice.TWO_SOUL_HEARTS] = "TWO_SOUL_HEARTS"
____exports.PickupPrice.ONE_HEART_AND_ONE_SOUL_HEART = -9
____exports.PickupPrice[____exports.PickupPrice.ONE_HEART_AND_ONE_SOUL_HEART] = "ONE_HEART_AND_ONE_SOUL_HEART"
____exports.PickupPrice.FREE = -1000
____exports.PickupPrice[____exports.PickupPrice.FREE] = "FREE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.PillEffect"] = function(...) 
local ____exports = {}
____exports.PillEffect = {}
____exports.PillEffect.BAD_GAS = 0
____exports.PillEffect[____exports.PillEffect.BAD_GAS] = "BAD_GAS"
____exports.PillEffect.BAD_TRIP = 1
____exports.PillEffect[____exports.PillEffect.BAD_TRIP] = "BAD_TRIP"
____exports.PillEffect.BALLS_OF_STEEL = 2
____exports.PillEffect[____exports.PillEffect.BALLS_OF_STEEL] = "BALLS_OF_STEEL"
____exports.PillEffect.BOMBS_ARE_KEYS = 3
____exports.PillEffect[____exports.PillEffect.BOMBS_ARE_KEYS] = "BOMBS_ARE_KEYS"
____exports.PillEffect.EXPLOSIVE_DIARRHEA = 4
____exports.PillEffect[____exports.PillEffect.EXPLOSIVE_DIARRHEA] = "EXPLOSIVE_DIARRHEA"
____exports.PillEffect.FULL_HEALTH = 5
____exports.PillEffect[____exports.PillEffect.FULL_HEALTH] = "FULL_HEALTH"
____exports.PillEffect.HEALTH_DOWN = 6
____exports.PillEffect[____exports.PillEffect.HEALTH_DOWN] = "HEALTH_DOWN"
____exports.PillEffect.HEALTH_UP = 7
____exports.PillEffect[____exports.PillEffect.HEALTH_UP] = "HEALTH_UP"
____exports.PillEffect.I_FOUND_PILLS = 8
____exports.PillEffect[____exports.PillEffect.I_FOUND_PILLS] = "I_FOUND_PILLS"
____exports.PillEffect.PUBERTY = 9
____exports.PillEffect[____exports.PillEffect.PUBERTY] = "PUBERTY"
____exports.PillEffect.PRETTY_FLY = 10
____exports.PillEffect[____exports.PillEffect.PRETTY_FLY] = "PRETTY_FLY"
____exports.PillEffect.RANGE_DOWN = 11
____exports.PillEffect[____exports.PillEffect.RANGE_DOWN] = "RANGE_DOWN"
____exports.PillEffect.RANGE_UP = 12
____exports.PillEffect[____exports.PillEffect.RANGE_UP] = "RANGE_UP"
____exports.PillEffect.SPEED_DOWN = 13
____exports.PillEffect[____exports.PillEffect.SPEED_DOWN] = "SPEED_DOWN"
____exports.PillEffect.SPEED_UP = 14
____exports.PillEffect[____exports.PillEffect.SPEED_UP] = "SPEED_UP"
____exports.PillEffect.TEARS_DOWN = 15
____exports.PillEffect[____exports.PillEffect.TEARS_DOWN] = "TEARS_DOWN"
____exports.PillEffect.TEARS_UP = 16
____exports.PillEffect[____exports.PillEffect.TEARS_UP] = "TEARS_UP"
____exports.PillEffect.LUCK_DOWN = 17
____exports.PillEffect[____exports.PillEffect.LUCK_DOWN] = "LUCK_DOWN"
____exports.PillEffect.LUCK_UP = 18
____exports.PillEffect[____exports.PillEffect.LUCK_UP] = "LUCK_UP"
____exports.PillEffect.TELEPILLS = 19
____exports.PillEffect[____exports.PillEffect.TELEPILLS] = "TELEPILLS"
____exports.PillEffect.FORTY_EIGHT_HOUR_ENERGY = 20
____exports.PillEffect[____exports.PillEffect.FORTY_EIGHT_HOUR_ENERGY] = "FORTY_EIGHT_HOUR_ENERGY"
____exports.PillEffect.HEMATEMESIS = 21
____exports.PillEffect[____exports.PillEffect.HEMATEMESIS] = "HEMATEMESIS"
____exports.PillEffect.PARALYSIS = 22
____exports.PillEffect[____exports.PillEffect.PARALYSIS] = "PARALYSIS"
____exports.PillEffect.I_CAN_SEE_FOREVER = 23
____exports.PillEffect[____exports.PillEffect.I_CAN_SEE_FOREVER] = "I_CAN_SEE_FOREVER"
____exports.PillEffect.PHEROMONES = 24
____exports.PillEffect[____exports.PillEffect.PHEROMONES] = "PHEROMONES"
____exports.PillEffect.AMNESIA = 25
____exports.PillEffect[____exports.PillEffect.AMNESIA] = "AMNESIA"
____exports.PillEffect.LEMON_PARTY = 26
____exports.PillEffect[____exports.PillEffect.LEMON_PARTY] = "LEMON_PARTY"
____exports.PillEffect.R_U_A_WIZARD = 27
____exports.PillEffect[____exports.PillEffect.R_U_A_WIZARD] = "R_U_A_WIZARD"
____exports.PillEffect.PERCS = 28
____exports.PillEffect[____exports.PillEffect.PERCS] = "PERCS"
____exports.PillEffect.ADDICTED = 29
____exports.PillEffect[____exports.PillEffect.ADDICTED] = "ADDICTED"
____exports.PillEffect.RELAX = 30
____exports.PillEffect[____exports.PillEffect.RELAX] = "RELAX"
____exports.PillEffect.QUESTION_MARKS = 31
____exports.PillEffect[____exports.PillEffect.QUESTION_MARKS] = "QUESTION_MARKS"
____exports.PillEffect.ONE_MAKES_YOU_LARGER = 32
____exports.PillEffect[____exports.PillEffect.ONE_MAKES_YOU_LARGER] = "ONE_MAKES_YOU_LARGER"
____exports.PillEffect.ONE_MAKES_YOU_SMALL = 33
____exports.PillEffect[____exports.PillEffect.ONE_MAKES_YOU_SMALL] = "ONE_MAKES_YOU_SMALL"
____exports.PillEffect.INFESTED_EXCLAMATION = 34
____exports.PillEffect[____exports.PillEffect.INFESTED_EXCLAMATION] = "INFESTED_EXCLAMATION"
____exports.PillEffect.INFESTED_QUESTION = 35
____exports.PillEffect[____exports.PillEffect.INFESTED_QUESTION] = "INFESTED_QUESTION"
____exports.PillEffect.POWER = 36
____exports.PillEffect[____exports.PillEffect.POWER] = "POWER"
____exports.PillEffect.RETRO_VISION = 37
____exports.PillEffect[____exports.PillEffect.RETRO_VISION] = "RETRO_VISION"
____exports.PillEffect.FRIENDS_TILL_THE_END = 38
____exports.PillEffect[____exports.PillEffect.FRIENDS_TILL_THE_END] = "FRIENDS_TILL_THE_END"
____exports.PillEffect.X_LAX = 39
____exports.PillEffect[____exports.PillEffect.X_LAX] = "X_LAX"
____exports.PillEffect.SOMETHINGS_WRONG = 40
____exports.PillEffect[____exports.PillEffect.SOMETHINGS_WRONG] = "SOMETHINGS_WRONG"
____exports.PillEffect.IM_DROWSY = 41
____exports.PillEffect[____exports.PillEffect.IM_DROWSY] = "IM_DROWSY"
____exports.PillEffect.IM_EXCITED = 42
____exports.PillEffect[____exports.PillEffect.IM_EXCITED] = "IM_EXCITED"
____exports.PillEffect.GULP = 43
____exports.PillEffect[____exports.PillEffect.GULP] = "GULP"
____exports.PillEffect.HORF = 44
____exports.PillEffect[____exports.PillEffect.HORF] = "HORF"
____exports.PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE = 45
____exports.PillEffect[____exports.PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE] = "FEELS_LIKE_IM_WALKING_ON_SUNSHINE"
____exports.PillEffect.VURP = 46
____exports.PillEffect[____exports.PillEffect.VURP] = "VURP"
____exports.PillEffect.SHOT_SPEED_DOWN = 47
____exports.PillEffect[____exports.PillEffect.SHOT_SPEED_DOWN] = "SHOT_SPEED_DOWN"
____exports.PillEffect.SHOT_SPEED_UP = 48
____exports.PillEffect[____exports.PillEffect.SHOT_SPEED_UP] = "SHOT_SPEED_UP"
____exports.PillEffect.EXPERIMENTAL = 49
____exports.PillEffect[____exports.PillEffect.EXPERIMENTAL] = "EXPERIMENTAL"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.PlayerForm"] = function(...) 
local ____exports = {}
--- The possible transformations that the player can have.
____exports.PlayerForm = {}
____exports.PlayerForm.GUPPY = 0
____exports.PlayerForm[____exports.PlayerForm.GUPPY] = "GUPPY"
____exports.PlayerForm.BEELZEBUB = 1
____exports.PlayerForm[____exports.PlayerForm.BEELZEBUB] = "BEELZEBUB"
____exports.PlayerForm.FUN_GUY = 2
____exports.PlayerForm[____exports.PlayerForm.FUN_GUY] = "FUN_GUY"
____exports.PlayerForm.SERAPHIM = 3
____exports.PlayerForm[____exports.PlayerForm.SERAPHIM] = "SERAPHIM"
____exports.PlayerForm.BOB = 4
____exports.PlayerForm[____exports.PlayerForm.BOB] = "BOB"
____exports.PlayerForm.SPUN = 5
____exports.PlayerForm[____exports.PlayerForm.SPUN] = "SPUN"
____exports.PlayerForm.YES_MOTHER = 6
____exports.PlayerForm[____exports.PlayerForm.YES_MOTHER] = "YES_MOTHER"
____exports.PlayerForm.CONJOINED = 7
____exports.PlayerForm[____exports.PlayerForm.CONJOINED] = "CONJOINED"
____exports.PlayerForm.LEVIATHAN = 8
____exports.PlayerForm[____exports.PlayerForm.LEVIATHAN] = "LEVIATHAN"
____exports.PlayerForm.OH_CRAP = 9
____exports.PlayerForm[____exports.PlayerForm.OH_CRAP] = "OH_CRAP"
____exports.PlayerForm.BOOKWORM = 10
____exports.PlayerForm[____exports.PlayerForm.BOOKWORM] = "BOOKWORM"
____exports.PlayerForm.ADULT = 11
____exports.PlayerForm[____exports.PlayerForm.ADULT] = "ADULT"
____exports.PlayerForm.SPIDER_BABY = 12
____exports.PlayerForm[____exports.PlayerForm.SPIDER_BABY] = "SPIDER_BABY"
____exports.PlayerForm.STOMPY = 13
____exports.PlayerForm[____exports.PlayerForm.STOMPY] = "STOMPY"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.PlayerItemAnimation"] = function(...) 
local ____exports = {}
____exports.PlayerItemAnimation = {}
____exports.PlayerItemAnimation.PICKUP = "Pickup"
____exports.PlayerItemAnimation.LIFT_ITEM = "LiftItem"
____exports.PlayerItemAnimation.HIDE_ITEM = "HideItem"
____exports.PlayerItemAnimation.USE_ITEM = "UseItem"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.PlayerSpriteLayer"] = function(...) 
local ____exports = {}
____exports.PlayerSpriteLayer = {}
____exports.PlayerSpriteLayer.GLOW = 0
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.GLOW] = "GLOW"
____exports.PlayerSpriteLayer.BODY = 1
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.BODY] = "BODY"
____exports.PlayerSpriteLayer.BODY_0 = 2
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.BODY_0] = "BODY_0"
____exports.PlayerSpriteLayer.BODY_1 = 3
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.BODY_1] = "BODY_1"
____exports.PlayerSpriteLayer.HEAD = 4
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.HEAD] = "HEAD"
____exports.PlayerSpriteLayer.HEAD_0 = 5
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.HEAD_0] = "HEAD_0"
____exports.PlayerSpriteLayer.HEAD_1 = 6
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.HEAD_1] = "HEAD_1"
____exports.PlayerSpriteLayer.HEAD_2 = 7
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.HEAD_2] = "HEAD_2"
____exports.PlayerSpriteLayer.HEAD_3 = 8
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.HEAD_3] = "HEAD_3"
____exports.PlayerSpriteLayer.HEAD_4 = 9
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.HEAD_4] = "HEAD_4"
____exports.PlayerSpriteLayer.HEAD_5 = 10
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.HEAD_5] = "HEAD_5"
____exports.PlayerSpriteLayer.TOP_0 = 11
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.TOP_0] = "TOP_0"
____exports.PlayerSpriteLayer.EXTRA = 12
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.EXTRA] = "EXTRA"
____exports.PlayerSpriteLayer.GHOST = 13
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.GHOST] = "GHOST"
____exports.PlayerSpriteLayer.BACK = 14
____exports.PlayerSpriteLayer[____exports.PlayerSpriteLayer.BACK] = "BACK"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.PocketItemSlot"] = function(...) 
local ____exports = {}
____exports.PocketItemSlot = {}
____exports.PocketItemSlot.SLOT_1 = 0
____exports.PocketItemSlot[____exports.PocketItemSlot.SLOT_1] = "SLOT_1"
____exports.PocketItemSlot.SLOT_2 = 1
____exports.PocketItemSlot[____exports.PocketItemSlot.SLOT_2] = "SLOT_2"
____exports.PocketItemSlot.SLOT_3 = 2
____exports.PocketItemSlot[____exports.PocketItemSlot.SLOT_3] = "SLOT_3"
____exports.PocketItemSlot.SLOT_4 = 3
____exports.PocketItemSlot[____exports.PocketItemSlot.SLOT_4] = "SLOT_4"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.PoopSpellType"] = function(...) 
local ____exports = {}
____exports.PoopSpellType = {}
____exports.PoopSpellType.NONE = 0
____exports.PoopSpellType[____exports.PoopSpellType.NONE] = "NONE"
____exports.PoopSpellType.POOP = 1
____exports.PoopSpellType[____exports.PoopSpellType.POOP] = "POOP"
____exports.PoopSpellType.CORNY = 2
____exports.PoopSpellType[____exports.PoopSpellType.CORNY] = "CORNY"
____exports.PoopSpellType.BURNING = 3
____exports.PoopSpellType[____exports.PoopSpellType.BURNING] = "BURNING"
____exports.PoopSpellType.STONE = 4
____exports.PoopSpellType[____exports.PoopSpellType.STONE] = "STONE"
____exports.PoopSpellType.STINKY = 5
____exports.PoopSpellType[____exports.PoopSpellType.STINKY] = "STINKY"
____exports.PoopSpellType.BLACK = 6
____exports.PoopSpellType[____exports.PoopSpellType.BLACK] = "BLACK"
____exports.PoopSpellType.HOLY = 7
____exports.PoopSpellType[____exports.PoopSpellType.HOLY] = "HOLY"
____exports.PoopSpellType.LIQUID = 8
____exports.PoopSpellType[____exports.PoopSpellType.LIQUID] = "LIQUID"
____exports.PoopSpellType.FART = 9
____exports.PoopSpellType[____exports.PoopSpellType.FART] = "FART"
____exports.PoopSpellType.BOMB = 10
____exports.PoopSpellType[____exports.PoopSpellType.BOMB] = "BOMB"
____exports.PoopSpellType.DIARRHEA = 11
____exports.PoopSpellType[____exports.PoopSpellType.DIARRHEA] = "DIARRHEA"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.ProjectilesMode"] = function(...) 
local ____exports = {}
____exports.ProjectilesMode = {}
____exports.ProjectilesMode.ONE_PROJECTILE = 0
____exports.ProjectilesMode[____exports.ProjectilesMode.ONE_PROJECTILE] = "ONE_PROJECTILE"
____exports.ProjectilesMode.TWO_PROJECTILES = 1
____exports.ProjectilesMode[____exports.ProjectilesMode.TWO_PROJECTILES] = "TWO_PROJECTILES"
____exports.ProjectilesMode.THREE_PROJECTILES = 2
____exports.ProjectilesMode[____exports.ProjectilesMode.THREE_PROJECTILES] = "THREE_PROJECTILES"
____exports.ProjectilesMode.THREE_PROJECTILES_SPREAD = 3
____exports.ProjectilesMode[____exports.ProjectilesMode.THREE_PROJECTILES_SPREAD] = "THREE_PROJECTILES_SPREAD"
____exports.ProjectilesMode.FOUR_PROJECTILES = 4
____exports.ProjectilesMode[____exports.ProjectilesMode.FOUR_PROJECTILES] = "FOUR_PROJECTILES"
____exports.ProjectilesMode.FIVE_PROJECTILES = 5
____exports.ProjectilesMode[____exports.ProjectilesMode.FIVE_PROJECTILES] = "FIVE_PROJECTILES"
____exports.ProjectilesMode.FOUR_PROJECTILES_PLUS_PATTERN = 6
____exports.ProjectilesMode[____exports.ProjectilesMode.FOUR_PROJECTILES_PLUS_PATTERN] = "FOUR_PROJECTILES_PLUS_PATTERN"
____exports.ProjectilesMode.FOUR_PROJECTILES_X_PATTERN = 7
____exports.ProjectilesMode[____exports.ProjectilesMode.FOUR_PROJECTILES_X_PATTERN] = "FOUR_PROJECTILES_X_PATTERN"
____exports.ProjectilesMode.EIGHT_PROJECTILES_STAR_PATTERN = 8
____exports.ProjectilesMode[____exports.ProjectilesMode.EIGHT_PROJECTILES_STAR_PATTERN] = "EIGHT_PROJECTILES_STAR_PATTERN"
____exports.ProjectilesMode.N_PROJECTILES_IN_CIRCLE = 9
____exports.ProjectilesMode[____exports.ProjectilesMode.N_PROJECTILES_IN_CIRCLE] = "N_PROJECTILES_IN_CIRCLE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.RenderMode"] = function(...) 
local ____exports = {}
____exports.RenderMode = {}
____exports.RenderMode.NULL = 0
____exports.RenderMode[____exports.RenderMode.NULL] = "NULL"
____exports.RenderMode.NORMAL = 1
____exports.RenderMode[____exports.RenderMode.NORMAL] = "NORMAL"
____exports.RenderMode.SKIP = 2
____exports.RenderMode[____exports.RenderMode.SKIP] = "SKIP"
____exports.RenderMode.WATER_ABOVE = 3
____exports.RenderMode[____exports.RenderMode.WATER_ABOVE] = "WATER_ABOVE"
____exports.RenderMode.WATER_REFRACT = 4
____exports.RenderMode[____exports.RenderMode.WATER_REFRACT] = "WATER_REFRACT"
____exports.RenderMode.WATER_REFLECT = 5
____exports.RenderMode[____exports.RenderMode.WATER_REFLECT] = "WATER_REFLECT"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.RoomDescriptorDisplayType"] = function(...) 
local ____exports = {}
--- Matches the `RoomDescriptor.DISPLAY_*` members of the `RoomDescriptor` class. In IsaacScript, we
-- reimplement this as an enum instead, since it is cleaner.
____exports.RoomDescriptorDisplayType = {}
____exports.RoomDescriptorDisplayType.NONE = 0
____exports.RoomDescriptorDisplayType[____exports.RoomDescriptorDisplayType.NONE] = "NONE"
____exports.RoomDescriptorDisplayType.BOX = 1
____exports.RoomDescriptorDisplayType[____exports.RoomDescriptorDisplayType.BOX] = "BOX"
____exports.RoomDescriptorDisplayType.LOCK = 2
____exports.RoomDescriptorDisplayType[____exports.RoomDescriptorDisplayType.LOCK] = "LOCK"
____exports.RoomDescriptorDisplayType.ICON = 4
____exports.RoomDescriptorDisplayType[____exports.RoomDescriptorDisplayType.ICON] = "ICON"
____exports.RoomDescriptorDisplayType.ALL = 5
____exports.RoomDescriptorDisplayType[____exports.RoomDescriptorDisplayType.ALL] = "ALL"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.RoomDifficulty"] = function(...) 
local ____exports = {}
--- Each room has an arbitrarily set difficulty of 0, 1, 2, 5, or 10. The floor generation algorithm
-- attempts to generates floors with a combined difficulty of a certain value.
____exports.RoomDifficulty = {}
____exports.RoomDifficulty.ALWAYS_EXCLUDED = 0
____exports.RoomDifficulty[____exports.RoomDifficulty.ALWAYS_EXCLUDED] = "ALWAYS_EXCLUDED"
____exports.RoomDifficulty.VERY_EASY = 1
____exports.RoomDifficulty[____exports.RoomDifficulty.VERY_EASY] = "VERY_EASY"
____exports.RoomDifficulty.EASY = 2
____exports.RoomDifficulty[____exports.RoomDifficulty.EASY] = "EASY"
____exports.RoomDifficulty.MEDIUM = 5
____exports.RoomDifficulty[____exports.RoomDifficulty.MEDIUM] = "MEDIUM"
____exports.RoomDifficulty.HARD = 10
____exports.RoomDifficulty[____exports.RoomDifficulty.HARD] = "HARD"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.RoomShape"] = function(...) 
local ____exports = {}
____exports.RoomShape = {}
____exports.RoomShape.SHAPE_1x1 = 1
____exports.RoomShape[____exports.RoomShape.SHAPE_1x1] = "SHAPE_1x1"
____exports.RoomShape.IH = 2
____exports.RoomShape[____exports.RoomShape.IH] = "IH"
____exports.RoomShape.IV = 3
____exports.RoomShape[____exports.RoomShape.IV] = "IV"
____exports.RoomShape.SHAPE_1x2 = 4
____exports.RoomShape[____exports.RoomShape.SHAPE_1x2] = "SHAPE_1x2"
____exports.RoomShape.IIV = 5
____exports.RoomShape[____exports.RoomShape.IIV] = "IIV"
____exports.RoomShape.SHAPE_2x1 = 6
____exports.RoomShape[____exports.RoomShape.SHAPE_2x1] = "SHAPE_2x1"
____exports.RoomShape.IIH = 7
____exports.RoomShape[____exports.RoomShape.IIH] = "IIH"
____exports.RoomShape.SHAPE_2x2 = 8
____exports.RoomShape[____exports.RoomShape.SHAPE_2x2] = "SHAPE_2x2"
____exports.RoomShape.LTL = 9
____exports.RoomShape[____exports.RoomShape.LTL] = "LTL"
____exports.RoomShape.LTR = 10
____exports.RoomShape[____exports.RoomShape.LTR] = "LTR"
____exports.RoomShape.LBL = 11
____exports.RoomShape[____exports.RoomShape.LBL] = "LBL"
____exports.RoomShape.LBR = 12
____exports.RoomShape[____exports.RoomShape.LBR] = "LBR"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.RoomTransitionAnim"] = function(...) 
local ____exports = {}
____exports.RoomTransitionAnim = {}
____exports.RoomTransitionAnim.WALK = 0
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.WALK] = "WALK"
____exports.RoomTransitionAnim.FADE = 1
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.FADE] = "FADE"
____exports.RoomTransitionAnim.PIXELATION = 2
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.PIXELATION] = "PIXELATION"
____exports.RoomTransitionAnim.TELEPORT = 3
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.TELEPORT] = "TELEPORT"
____exports.RoomTransitionAnim.MAZE = 4
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.MAZE] = "MAZE"
____exports.RoomTransitionAnim.ANKH = 5
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.ANKH] = "ANKH"
____exports.RoomTransitionAnim.DEAD_CAT = 6
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.DEAD_CAT] = "DEAD_CAT"
____exports.RoomTransitionAnim.ONE_UP = 7
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.ONE_UP] = "ONE_UP"
____exports.RoomTransitionAnim.COLLAR = 8
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.COLLAR] = "COLLAR"
____exports.RoomTransitionAnim.JUDAS_SHADOW = 9
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.JUDAS_SHADOW] = "JUDAS_SHADOW"
____exports.RoomTransitionAnim.LAZARUS = 10
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.LAZARUS] = "LAZARUS"
____exports.RoomTransitionAnim.WOMB_TELEPORT = 11
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.WOMB_TELEPORT] = "WOMB_TELEPORT"
____exports.RoomTransitionAnim.GLOWING_HOURGLASS = 12
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.GLOWING_HOURGLASS] = "GLOWING_HOURGLASS"
____exports.RoomTransitionAnim.D7 = 13
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.D7] = "D7"
____exports.RoomTransitionAnim.MISSING_POSTER = 14
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.MISSING_POSTER] = "MISSING_POSTER"
____exports.RoomTransitionAnim.BOSS_FORCED = 15
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.BOSS_FORCED] = "BOSS_FORCED"
____exports.RoomTransitionAnim.PORTAL_TELEPORT = 16
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.PORTAL_TELEPORT] = "PORTAL_TELEPORT"
____exports.RoomTransitionAnim.FORGOTTEN_TELEPORT = 17
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.FORGOTTEN_TELEPORT] = "FORGOTTEN_TELEPORT"
____exports.RoomTransitionAnim.FADE_MIRROR = 18
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.FADE_MIRROR] = "FADE_MIRROR"
____exports.RoomTransitionAnim.MINECART = 19
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.MINECART] = "MINECART"
____exports.RoomTransitionAnim.DEATH_CERTIFICATE = 20
____exports.RoomTransitionAnim[____exports.RoomTransitionAnim.DEATH_CERTIFICATE] = "DEATH_CERTIFICATE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.RoomType"] = function(...) 
local ____exports = {}
____exports.RoomType = {}
____exports.RoomType.DEFAULT = 1
____exports.RoomType[____exports.RoomType.DEFAULT] = "DEFAULT"
____exports.RoomType.SHOP = 2
____exports.RoomType[____exports.RoomType.SHOP] = "SHOP"
____exports.RoomType.ERROR = 3
____exports.RoomType[____exports.RoomType.ERROR] = "ERROR"
____exports.RoomType.TREASURE = 4
____exports.RoomType[____exports.RoomType.TREASURE] = "TREASURE"
____exports.RoomType.BOSS = 5
____exports.RoomType[____exports.RoomType.BOSS] = "BOSS"
____exports.RoomType.MINI_BOSS = 6
____exports.RoomType[____exports.RoomType.MINI_BOSS] = "MINI_BOSS"
____exports.RoomType.SECRET = 7
____exports.RoomType[____exports.RoomType.SECRET] = "SECRET"
____exports.RoomType.SUPER_SECRET = 8
____exports.RoomType[____exports.RoomType.SUPER_SECRET] = "SUPER_SECRET"
____exports.RoomType.ARCADE = 9
____exports.RoomType[____exports.RoomType.ARCADE] = "ARCADE"
____exports.RoomType.CURSE = 10
____exports.RoomType[____exports.RoomType.CURSE] = "CURSE"
____exports.RoomType.CHALLENGE = 11
____exports.RoomType[____exports.RoomType.CHALLENGE] = "CHALLENGE"
____exports.RoomType.LIBRARY = 12
____exports.RoomType[____exports.RoomType.LIBRARY] = "LIBRARY"
____exports.RoomType.SACRIFICE = 13
____exports.RoomType[____exports.RoomType.SACRIFICE] = "SACRIFICE"
____exports.RoomType.DEVIL = 14
____exports.RoomType[____exports.RoomType.DEVIL] = "DEVIL"
____exports.RoomType.ANGEL = 15
____exports.RoomType[____exports.RoomType.ANGEL] = "ANGEL"
____exports.RoomType.DUNGEON = 16
____exports.RoomType[____exports.RoomType.DUNGEON] = "DUNGEON"
____exports.RoomType.BOSS_RUSH = 17
____exports.RoomType[____exports.RoomType.BOSS_RUSH] = "BOSS_RUSH"
____exports.RoomType.CLEAN_BEDROOM = 18
____exports.RoomType[____exports.RoomType.CLEAN_BEDROOM] = "CLEAN_BEDROOM"
____exports.RoomType.DIRTY_BEDROOM = 19
____exports.RoomType[____exports.RoomType.DIRTY_BEDROOM] = "DIRTY_BEDROOM"
____exports.RoomType.CHEST = 20
____exports.RoomType[____exports.RoomType.CHEST] = "CHEST"
____exports.RoomType.DICE = 21
____exports.RoomType[____exports.RoomType.DICE] = "DICE"
____exports.RoomType.BLACK_MARKET = 22
____exports.RoomType[____exports.RoomType.BLACK_MARKET] = "BLACK_MARKET"
____exports.RoomType.GREED_EXIT = 23
____exports.RoomType[____exports.RoomType.GREED_EXIT] = "GREED_EXIT"
____exports.RoomType.PLANETARIUM = 24
____exports.RoomType[____exports.RoomType.PLANETARIUM] = "PLANETARIUM"
____exports.RoomType.TELEPORTER = 25
____exports.RoomType[____exports.RoomType.TELEPORTER] = "TELEPORTER"
____exports.RoomType.TELEPORTER_EXIT = 26
____exports.RoomType[____exports.RoomType.TELEPORTER_EXIT] = "TELEPORTER_EXIT"
____exports.RoomType.SECRET_EXIT = 27
____exports.RoomType[____exports.RoomType.SECRET_EXIT] = "SECRET_EXIT"
____exports.RoomType.BLUE = 28
____exports.RoomType[____exports.RoomType.BLUE] = "BLUE"
____exports.RoomType.ULTRA_SECRET = 29
____exports.RoomType[____exports.RoomType.ULTRA_SECRET] = "ULTRA_SECRET"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.SeedEffect"] = function(...) 
local ____exports = {}
____exports.SeedEffect = {}
____exports.SeedEffect.NORMAL = 0
____exports.SeedEffect[____exports.SeedEffect.NORMAL] = "NORMAL"
____exports.SeedEffect.MOVEMENT_PITCH = 1
____exports.SeedEffect[____exports.SeedEffect.MOVEMENT_PITCH] = "MOVEMENT_PITCH"
____exports.SeedEffect.HEALTH_PITCH = 2
____exports.SeedEffect[____exports.SeedEffect.HEALTH_PITCH] = "HEALTH_PITCH"
____exports.SeedEffect.CAMO_ISAAC = 3
____exports.SeedEffect[____exports.SeedEffect.CAMO_ISAAC] = "CAMO_ISAAC"
____exports.SeedEffect.CAMO_ENEMIES = 4
____exports.SeedEffect[____exports.SeedEffect.CAMO_ENEMIES] = "CAMO_ENEMIES"
____exports.SeedEffect.CAMO_PICKUPS = 5
____exports.SeedEffect[____exports.SeedEffect.CAMO_PICKUPS] = "CAMO_PICKUPS"
____exports.SeedEffect.CAMO_EVERYTHING = 6
____exports.SeedEffect[____exports.SeedEffect.CAMO_EVERYTHING] = "CAMO_EVERYTHING"
____exports.SeedEffect.FART_SOUNDS = 7
____exports.SeedEffect[____exports.SeedEffect.FART_SOUNDS] = "FART_SOUNDS"
____exports.SeedEffect.OLD_TV = 8
____exports.SeedEffect[____exports.SeedEffect.OLD_TV] = "OLD_TV"
____exports.SeedEffect.DYSLEXIA = 9
____exports.SeedEffect[____exports.SeedEffect.DYSLEXIA] = "DYSLEXIA"
____exports.SeedEffect.NO_HUD = 10
____exports.SeedEffect[____exports.SeedEffect.NO_HUD] = "NO_HUD"
____exports.SeedEffect.PICKUPS_SLIDE = 11
____exports.SeedEffect[____exports.SeedEffect.PICKUPS_SLIDE] = "PICKUPS_SLIDE"
____exports.SeedEffect.CONTROLS_REVERSED = 12
____exports.SeedEffect[____exports.SeedEffect.CONTROLS_REVERSED] = "CONTROLS_REVERSED"
____exports.SeedEffect.ALL_CHAMPIONS = 13
____exports.SeedEffect[____exports.SeedEffect.ALL_CHAMPIONS] = "ALL_CHAMPIONS"
____exports.SeedEffect.INVISIBLE_ISAAC = 14
____exports.SeedEffect[____exports.SeedEffect.INVISIBLE_ISAAC] = "INVISIBLE_ISAAC"
____exports.SeedEffect.INVISIBLE_ENEMIES = 15
____exports.SeedEffect[____exports.SeedEffect.INVISIBLE_ENEMIES] = "INVISIBLE_ENEMIES"
____exports.SeedEffect.INFINITE_BASEMENT = 16
____exports.SeedEffect[____exports.SeedEffect.INFINITE_BASEMENT] = "INFINITE_BASEMENT"
____exports.SeedEffect.ALWAYS_CHARMED = 17
____exports.SeedEffect[____exports.SeedEffect.ALWAYS_CHARMED] = "ALWAYS_CHARMED"
____exports.SeedEffect.ALWAYS_CONFUSED = 18
____exports.SeedEffect[____exports.SeedEffect.ALWAYS_CONFUSED] = "ALWAYS_CONFUSED"
____exports.SeedEffect.ALWAYS_AFRAID = 19
____exports.SeedEffect[____exports.SeedEffect.ALWAYS_AFRAID] = "ALWAYS_AFRAID"
____exports.SeedEffect.ALWAYS_ALTERNATING_FEAR = 20
____exports.SeedEffect[____exports.SeedEffect.ALWAYS_ALTERNATING_FEAR] = "ALWAYS_ALTERNATING_FEAR"
____exports.SeedEffect.ALWAYS_CHARMED_AND_AFRAID = 21
____exports.SeedEffect[____exports.SeedEffect.ALWAYS_CHARMED_AND_AFRAID] = "ALWAYS_CHARMED_AND_AFRAID"
____exports.SeedEffect.EXTRA_BLOOD = 23
____exports.SeedEffect[____exports.SeedEffect.EXTRA_BLOOD] = "EXTRA_BLOOD"
____exports.SeedEffect.POOP_TRAIL = 24
____exports.SeedEffect[____exports.SeedEffect.POOP_TRAIL] = "POOP_TRAIL"
____exports.SeedEffect.PACIFIST = 25
____exports.SeedEffect[____exports.SeedEffect.PACIFIST] = "PACIFIST"
____exports.SeedEffect.DAMAGE_WHEN_STOPPED = 26
____exports.SeedEffect[____exports.SeedEffect.DAMAGE_WHEN_STOPPED] = "DAMAGE_WHEN_STOPPED"
____exports.SeedEffect.DAMAGE_ON_INTERVAL = 27
____exports.SeedEffect[____exports.SeedEffect.DAMAGE_ON_INTERVAL] = "DAMAGE_ON_INTERVAL"
____exports.SeedEffect.DAMAGE_ON_TIME_LIMIT = 28
____exports.SeedEffect[____exports.SeedEffect.DAMAGE_ON_TIME_LIMIT] = "DAMAGE_ON_TIME_LIMIT"
____exports.SeedEffect.PILLS_NEVER_IDENTIFY = 29
____exports.SeedEffect[____exports.SeedEffect.PILLS_NEVER_IDENTIFY] = "PILLS_NEVER_IDENTIFY"
____exports.SeedEffect.MYSTERY_TAROT_CARDS = 30
____exports.SeedEffect[____exports.SeedEffect.MYSTERY_TAROT_CARDS] = "MYSTERY_TAROT_CARDS"
____exports.SeedEffect.ENEMIES_RESPAWN = 32
____exports.SeedEffect[____exports.SeedEffect.ENEMIES_RESPAWN] = "ENEMIES_RESPAWN"
____exports.SeedEffect.ITEMS_COST_MONEY = 33
____exports.SeedEffect[____exports.SeedEffect.ITEMS_COST_MONEY] = "ITEMS_COST_MONEY"
____exports.SeedEffect.BIG_HEAD = 35
____exports.SeedEffect[____exports.SeedEffect.BIG_HEAD] = "BIG_HEAD"
____exports.SeedEffect.SMALL_HEAD = 36
____exports.SeedEffect[____exports.SeedEffect.SMALL_HEAD] = "SMALL_HEAD"
____exports.SeedEffect.BLACK_ISAAC = 37
____exports.SeedEffect[____exports.SeedEffect.BLACK_ISAAC] = "BLACK_ISAAC"
____exports.SeedEffect.GLOWING_TEARS = 38
____exports.SeedEffect[____exports.SeedEffect.GLOWING_TEARS] = "GLOWING_TEARS"
____exports.SeedEffect.SLOW_MUSIC = 41
____exports.SeedEffect[____exports.SeedEffect.SLOW_MUSIC] = "SLOW_MUSIC"
____exports.SeedEffect.ULTRA_SLOW_MUSIC = 42
____exports.SeedEffect[____exports.SeedEffect.ULTRA_SLOW_MUSIC] = "ULTRA_SLOW_MUSIC"
____exports.SeedEffect.FAST_MUSIC = 43
____exports.SeedEffect[____exports.SeedEffect.FAST_MUSIC] = "FAST_MUSIC"
____exports.SeedEffect.ULTRA_FAST_MUSIC = 44
____exports.SeedEffect[____exports.SeedEffect.ULTRA_FAST_MUSIC] = "ULTRA_FAST_MUSIC"
____exports.SeedEffect.NO_FACE = 46
____exports.SeedEffect[____exports.SeedEffect.NO_FACE] = "NO_FACE"
____exports.SeedEffect.ISAAC_TAKES_HIGH_DAMAGE = 47
____exports.SeedEffect[____exports.SeedEffect.ISAAC_TAKES_HIGH_DAMAGE] = "ISAAC_TAKES_HIGH_DAMAGE"
____exports.SeedEffect.ISAAC_TAKES_MASSIVE_DAMAGE = 48
____exports.SeedEffect[____exports.SeedEffect.ISAAC_TAKES_MASSIVE_DAMAGE] = "ISAAC_TAKES_MASSIVE_DAMAGE"
____exports.SeedEffect.ICE_PHYSICS = 52
____exports.SeedEffect[____exports.SeedEffect.ICE_PHYSICS] = "ICE_PHYSICS"
____exports.SeedEffect.KAPPA = 53
____exports.SeedEffect[____exports.SeedEffect.KAPPA] = "KAPPA"
____exports.SeedEffect.CHRISTMAS = 54
____exports.SeedEffect[____exports.SeedEffect.CHRISTMAS] = "CHRISTMAS"
____exports.SeedEffect.KIDS_MODE = 55
____exports.SeedEffect[____exports.SeedEffect.KIDS_MODE] = "KIDS_MODE"
____exports.SeedEffect.PERMANENT_CURSE_DARKNESS = 56
____exports.SeedEffect[____exports.SeedEffect.PERMANENT_CURSE_DARKNESS] = "PERMANENT_CURSE_DARKNESS"
____exports.SeedEffect.PERMANENT_CURSE_LABYRINTH = 57
____exports.SeedEffect[____exports.SeedEffect.PERMANENT_CURSE_LABYRINTH] = "PERMANENT_CURSE_LABYRINTH"
____exports.SeedEffect.PERMANENT_CURSE_LOST = 58
____exports.SeedEffect[____exports.SeedEffect.PERMANENT_CURSE_LOST] = "PERMANENT_CURSE_LOST"
____exports.SeedEffect.PERMANENT_CURSE_UNKNOWN = 59
____exports.SeedEffect[____exports.SeedEffect.PERMANENT_CURSE_UNKNOWN] = "PERMANENT_CURSE_UNKNOWN"
____exports.SeedEffect.PERMANENT_CURSE_MAZE = 60
____exports.SeedEffect[____exports.SeedEffect.PERMANENT_CURSE_MAZE] = "PERMANENT_CURSE_MAZE"
____exports.SeedEffect.PERMANENT_CURSE_BLIND = 61
____exports.SeedEffect[____exports.SeedEffect.PERMANENT_CURSE_BLIND] = "PERMANENT_CURSE_BLIND"
____exports.SeedEffect.PERMANENT_CURSE_CURSED = 62
____exports.SeedEffect[____exports.SeedEffect.PERMANENT_CURSE_CURSED] = "PERMANENT_CURSE_CURSED"
____exports.SeedEffect.PREVENT_CURSE_DARKNESS = 63
____exports.SeedEffect[____exports.SeedEffect.PREVENT_CURSE_DARKNESS] = "PREVENT_CURSE_DARKNESS"
____exports.SeedEffect.PREVENT_CURSE_LABYRINTH = 64
____exports.SeedEffect[____exports.SeedEffect.PREVENT_CURSE_LABYRINTH] = "PREVENT_CURSE_LABYRINTH"
____exports.SeedEffect.PREVENT_CURSE_LOST = 65
____exports.SeedEffect[____exports.SeedEffect.PREVENT_CURSE_LOST] = "PREVENT_CURSE_LOST"
____exports.SeedEffect.PREVENT_CURSE_UNKNOWN = 66
____exports.SeedEffect[____exports.SeedEffect.PREVENT_CURSE_UNKNOWN] = "PREVENT_CURSE_UNKNOWN"
____exports.SeedEffect.PREVENT_CURSE_MAZE = 67
____exports.SeedEffect[____exports.SeedEffect.PREVENT_CURSE_MAZE] = "PREVENT_CURSE_MAZE"
____exports.SeedEffect.PREVENT_CURSE_BLIND = 68
____exports.SeedEffect[____exports.SeedEffect.PREVENT_CURSE_BLIND] = "PREVENT_CURSE_BLIND"
____exports.SeedEffect.PREVENT_ALL_CURSES = 70
____exports.SeedEffect[____exports.SeedEffect.PREVENT_ALL_CURSES] = "PREVENT_ALL_CURSES"
____exports.SeedEffect.NO_BOSS_ROOM_EXITS = 71
____exports.SeedEffect[____exports.SeedEffect.NO_BOSS_ROOM_EXITS] = "NO_BOSS_ROOM_EXITS"
____exports.SeedEffect.PICKUPS_TIMEOUT = 72
____exports.SeedEffect[____exports.SeedEffect.PICKUPS_TIMEOUT] = "PICKUPS_TIMEOUT"
____exports.SeedEffect.INVINCIBLE = 73
____exports.SeedEffect[____exports.SeedEffect.INVINCIBLE] = "INVINCIBLE"
____exports.SeedEffect.SHOOT_IN_MOVEMENT_DIRECTION = 74
____exports.SeedEffect[____exports.SeedEffect.SHOOT_IN_MOVEMENT_DIRECTION] = "SHOOT_IN_MOVEMENT_DIRECTION"
____exports.SeedEffect.SHOOT_OPPOSITE_MOVEMENT_DIRECTION = 75
____exports.SeedEffect[____exports.SeedEffect.SHOOT_OPPOSITE_MOVEMENT_DIRECTION] = "SHOOT_OPPOSITE_MOVEMENT_DIRECTION"
____exports.SeedEffect.AXIS_ALIGNED_CONTROLS = 76
____exports.SeedEffect[____exports.SeedEffect.AXIS_ALIGNED_CONTROLS] = "AXIS_ALIGNED_CONTROLS"
____exports.SeedEffect.SUPER_HOT = 77
____exports.SeedEffect[____exports.SeedEffect.SUPER_HOT] = "SUPER_HOT"
____exports.SeedEffect.RETRO_VISION = 78
____exports.SeedEffect[____exports.SeedEffect.RETRO_VISION] = "RETRO_VISION"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.SkinColor"] = function(...) 
local ____exports = {}
____exports.SkinColor = {}
____exports.SkinColor.PINK = -1
____exports.SkinColor[____exports.SkinColor.PINK] = "PINK"
____exports.SkinColor.WHITE = 0
____exports.SkinColor[____exports.SkinColor.WHITE] = "WHITE"
____exports.SkinColor.BLACK = 1
____exports.SkinColor[____exports.SkinColor.BLACK] = "BLACK"
____exports.SkinColor.BLUE = 2
____exports.SkinColor[____exports.SkinColor.BLUE] = "BLUE"
____exports.SkinColor.RED = 3
____exports.SkinColor[____exports.SkinColor.RED] = "RED"
____exports.SkinColor.GREEN = 4
____exports.SkinColor[____exports.SkinColor.GREEN] = "GREEN"
____exports.SkinColor.GREY = 5
____exports.SkinColor[____exports.SkinColor.GREY] = "GREY"
____exports.SkinColor.SHADOW = 6
____exports.SkinColor[____exports.SkinColor.SHADOW] = "SHADOW"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.SortingLayer"] = function(...) 
local ____exports = {}
____exports.SortingLayer = {}
____exports.SortingLayer.BACKGROUND = 0
____exports.SortingLayer[____exports.SortingLayer.BACKGROUND] = "BACKGROUND"
____exports.SortingLayer.DOOR = 1
____exports.SortingLayer[____exports.SortingLayer.DOOR] = "DOOR"
____exports.SortingLayer.NORMAL = 2
____exports.SortingLayer[____exports.SortingLayer.NORMAL] = "NORMAL"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.SoundEffect"] = function(...) 
local ____exports = {}
____exports.SoundEffect = {}
____exports.SoundEffect.NULL = 0
____exports.SoundEffect[____exports.SoundEffect.NULL] = "NULL"
____exports.SoundEffect.ONE_UP = 1
____exports.SoundEffect[____exports.SoundEffect.ONE_UP] = "ONE_UP"
____exports.SoundEffect.BIRD_FLAP = 2
____exports.SoundEffect[____exports.SoundEffect.BIRD_FLAP] = "BIRD_FLAP"
____exports.SoundEffect.BLOBBY_WIGGLE = 3
____exports.SoundEffect[____exports.SoundEffect.BLOBBY_WIGGLE] = "BLOBBY_WIGGLE"
____exports.SoundEffect.INSECT_SWARM_LOOP = 4
____exports.SoundEffect[____exports.SoundEffect.INSECT_SWARM_LOOP] = "INSECT_SWARM_LOOP"
____exports.SoundEffect.BLOOD_LASER = 5
____exports.SoundEffect[____exports.SoundEffect.BLOOD_LASER] = "BLOOD_LASER"
____exports.SoundEffect.BLOOD_LASER_SMALL = 6
____exports.SoundEffect[____exports.SoundEffect.BLOOD_LASER_SMALL] = "BLOOD_LASER_SMALL"
____exports.SoundEffect.BLOOD_LASER_LARGE = 7
____exports.SoundEffect[____exports.SoundEffect.BLOOD_LASER_LARGE] = "BLOOD_LASER_LARGE"
____exports.SoundEffect.BOOK_PAGE_TURN_12 = 8
____exports.SoundEffect[____exports.SoundEffect.BOOK_PAGE_TURN_12] = "BOOK_PAGE_TURN_12"
____exports.SoundEffect.BOSS_BUG_HISS = 9
____exports.SoundEffect[____exports.SoundEffect.BOSS_BUG_HISS] = "BOSS_BUG_HISS"
____exports.SoundEffect.BLOOD_LASER_LARGER = 10
____exports.SoundEffect[____exports.SoundEffect.BLOOD_LASER_LARGER] = "BLOOD_LASER_LARGER"
____exports.SoundEffect.BOSS_GURGLE_ROAR = 11
____exports.SoundEffect[____exports.SoundEffect.BOSS_GURGLE_ROAR] = "BOSS_GURGLE_ROAR"
____exports.SoundEffect.BOSS_LITE_GURGLE = 12
____exports.SoundEffect[____exports.SoundEffect.BOSS_LITE_GURGLE] = "BOSS_LITE_GURGLE"
____exports.SoundEffect.BOSS_LITE_HISS = 13
____exports.SoundEffect[____exports.SoundEffect.BOSS_LITE_HISS] = "BOSS_LITE_HISS"
____exports.SoundEffect.BOSS_LITE_ROAR = 14
____exports.SoundEffect[____exports.SoundEffect.BOSS_LITE_ROAR] = "BOSS_LITE_ROAR"
____exports.SoundEffect.BOSS_LITE_SLOPPY_ROAR = 15
____exports.SoundEffect[____exports.SoundEffect.BOSS_LITE_SLOPPY_ROAR] = "BOSS_LITE_SLOPPY_ROAR"
____exports.SoundEffect.BOSS_SPIT_BLOB_BARF = 16
____exports.SoundEffect[____exports.SoundEffect.BOSS_SPIT_BLOB_BARF] = "BOSS_SPIT_BLOB_BARF"
____exports.SoundEffect.PAPER_IN = 17
____exports.SoundEffect[____exports.SoundEffect.PAPER_IN] = "PAPER_IN"
____exports.SoundEffect.PAPER_OUT = 18
____exports.SoundEffect[____exports.SoundEffect.PAPER_OUT] = "PAPER_OUT"
____exports.SoundEffect.CHEST_DROP = 21
____exports.SoundEffect[____exports.SoundEffect.CHEST_DROP] = "CHEST_DROP"
____exports.SoundEffect.CHEST_OPEN = 22
____exports.SoundEffect[____exports.SoundEffect.CHEST_OPEN] = "CHEST_OPEN"
____exports.SoundEffect.CHOIR_UNLOCK = 23
____exports.SoundEffect[____exports.SoundEffect.CHOIR_UNLOCK] = "CHOIR_UNLOCK"
____exports.SoundEffect.COIN_SLOT = 24
____exports.SoundEffect[____exports.SoundEffect.COIN_SLOT] = "COIN_SLOT"
____exports.SoundEffect.CUTE_GRUNT = 25
____exports.SoundEffect[____exports.SoundEffect.CUTE_GRUNT] = "CUTE_GRUNT"
____exports.SoundEffect.DEATH_BURST_BONE = 27
____exports.SoundEffect[____exports.SoundEffect.DEATH_BURST_BONE] = "DEATH_BURST_BONE"
____exports.SoundEffect.DEATH_BURST_LARGE = 28
____exports.SoundEffect[____exports.SoundEffect.DEATH_BURST_LARGE] = "DEATH_BURST_LARGE"
____exports.SoundEffect.DEATH_REVERSE = 29
____exports.SoundEffect[____exports.SoundEffect.DEATH_REVERSE] = "DEATH_REVERSE"
____exports.SoundEffect.DEATH_BURST_SMALL = 30
____exports.SoundEffect[____exports.SoundEffect.DEATH_BURST_SMALL] = "DEATH_BURST_SMALL"
____exports.SoundEffect.DEATH_CARD = 33
____exports.SoundEffect[____exports.SoundEffect.DEATH_CARD] = "DEATH_CARD"
____exports.SoundEffect.DEVIL_CARD = 34
____exports.SoundEffect[____exports.SoundEffect.DEVIL_CARD] = "DEVIL_CARD"
____exports.SoundEffect.DOOR_HEAVY_CLOSE = 35
____exports.SoundEffect[____exports.SoundEffect.DOOR_HEAVY_CLOSE] = "DOOR_HEAVY_CLOSE"
____exports.SoundEffect.DOOR_HEAVY_OPEN = 36
____exports.SoundEffect[____exports.SoundEffect.DOOR_HEAVY_OPEN] = "DOOR_HEAVY_OPEN"
____exports.SoundEffect.FART = 37
____exports.SoundEffect[____exports.SoundEffect.FART] = "FART"
____exports.SoundEffect.FETUS_JUMP = 38
____exports.SoundEffect[____exports.SoundEffect.FETUS_JUMP] = "FETUS_JUMP"
____exports.SoundEffect.FETUS_LAND = 40
____exports.SoundEffect[____exports.SoundEffect.FETUS_LAND] = "FETUS_LAND"
____exports.SoundEffect.FIRE_DEATH_HISS = 43
____exports.SoundEffect[____exports.SoundEffect.FIRE_DEATH_HISS] = "FIRE_DEATH_HISS"
____exports.SoundEffect.FLOATY_BABY_ROAR = 44
____exports.SoundEffect[____exports.SoundEffect.FLOATY_BABY_ROAR] = "FLOATY_BABY_ROAR"
____exports.SoundEffect.COIN_INSERT = 45
____exports.SoundEffect[____exports.SoundEffect.COIN_INSERT] = "COIN_INSERT"
____exports.SoundEffect.METAL_DOOR_CLOSE = 46
____exports.SoundEffect[____exports.SoundEffect.METAL_DOOR_CLOSE] = "METAL_DOOR_CLOSE"
____exports.SoundEffect.METAL_DOOR_OPEN = 47
____exports.SoundEffect[____exports.SoundEffect.METAL_DOOR_OPEN] = "METAL_DOOR_OPEN"
____exports.SoundEffect.FOREST_BOSS_STOMPS = 48
____exports.SoundEffect[____exports.SoundEffect.FOREST_BOSS_STOMPS] = "FOREST_BOSS_STOMPS"
____exports.SoundEffect.SCYTHE_BREAK = 49
____exports.SoundEffect[____exports.SoundEffect.SCYTHE_BREAK] = "SCYTHE_BREAK"
____exports.SoundEffect.STONE_WALKER = 50
____exports.SoundEffect[____exports.SoundEffect.STONE_WALKER] = "STONE_WALKER"
____exports.SoundEffect.GAS_CAN_POUR = 51
____exports.SoundEffect[____exports.SoundEffect.GAS_CAN_POUR] = "GAS_CAN_POUR"
____exports.SoundEffect.HELL_BOSS_GROUND_POUND = 52
____exports.SoundEffect[____exports.SoundEffect.HELL_BOSS_GROUND_POUND] = "HELL_BOSS_GROUND_POUND"
____exports.SoundEffect.GLASS_BREAK = 53
____exports.SoundEffect[____exports.SoundEffect.GLASS_BREAK] = "GLASS_BREAK"
____exports.SoundEffect.HOLY = 54
____exports.SoundEffect[____exports.SoundEffect.HOLY] = "HOLY"
____exports.SoundEffect.ISAAC_HURT_GRUNT = 55
____exports.SoundEffect[____exports.SoundEffect.ISAAC_HURT_GRUNT] = "ISAAC_HURT_GRUNT"
____exports.SoundEffect.CHILD_HAPPY_ROAR_SHORT = 56
____exports.SoundEffect[____exports.SoundEffect.CHILD_HAPPY_ROAR_SHORT] = "CHILD_HAPPY_ROAR_SHORT"
____exports.SoundEffect.CHILD_ANGRY_ROAR = 57
____exports.SoundEffect[____exports.SoundEffect.CHILD_ANGRY_ROAR] = "CHILD_ANGRY_ROAR"
____exports.SoundEffect.KEY_PICKUP_GAUNTLET = 58
____exports.SoundEffect[____exports.SoundEffect.KEY_PICKUP_GAUNTLET] = "KEY_PICKUP_GAUNTLET"
____exports.SoundEffect.KEY_DROP = 59
____exports.SoundEffect[____exports.SoundEffect.KEY_DROP] = "KEY_DROP"
____exports.SoundEffect.BABY_HURT = 60
____exports.SoundEffect[____exports.SoundEffect.BABY_HURT] = "BABY_HURT"
____exports.SoundEffect.MAGGOT_BURST_OUT = 64
____exports.SoundEffect[____exports.SoundEffect.MAGGOT_BURST_OUT] = "MAGGOT_BURST_OUT"
____exports.SoundEffect.MAGGOT_ENTER_GROUND = 66
____exports.SoundEffect[____exports.SoundEffect.MAGGOT_ENTER_GROUND] = "MAGGOT_ENTER_GROUND"
____exports.SoundEffect.MEAT_FEET_SLOW = 68
____exports.SoundEffect[____exports.SoundEffect.MEAT_FEET_SLOW] = "MEAT_FEET_SLOW"
____exports.SoundEffect.MEAT_IMPACTS = 69
____exports.SoundEffect[____exports.SoundEffect.MEAT_IMPACTS] = "MEAT_IMPACTS"
____exports.SoundEffect.MEAT_IMPACTS_OLD = 70
____exports.SoundEffect[____exports.SoundEffect.MEAT_IMPACTS_OLD] = "MEAT_IMPACTS_OLD"
____exports.SoundEffect.MEAT_JUMPS = 72
____exports.SoundEffect[____exports.SoundEffect.MEAT_JUMPS] = "MEAT_JUMPS"
____exports.SoundEffect.MEATY_DEATHS = 77
____exports.SoundEffect[____exports.SoundEffect.MEATY_DEATHS] = "MEATY_DEATHS"
____exports.SoundEffect.POT_BREAK_2 = 78
____exports.SoundEffect[____exports.SoundEffect.POT_BREAK_2] = "POT_BREAK_2"
____exports.SoundEffect.MUSHROOM_POOF_2 = 79
____exports.SoundEffect[____exports.SoundEffect.MUSHROOM_POOF_2] = "MUSHROOM_POOF_2"
____exports.SoundEffect.BLACK_POOF = 80
____exports.SoundEffect[____exports.SoundEffect.BLACK_POOF] = "BLACK_POOF"
____exports.SoundEffect.STATIC = 81
____exports.SoundEffect[____exports.SoundEffect.STATIC] = "STATIC"
____exports.SoundEffect.MOM_VOX_DEATH = 82
____exports.SoundEffect[____exports.SoundEffect.MOM_VOX_DEATH] = "MOM_VOX_DEATH"
____exports.SoundEffect.MOM_VOX_EVIL_LAUGH = 84
____exports.SoundEffect[____exports.SoundEffect.MOM_VOX_EVIL_LAUGH] = "MOM_VOX_EVIL_LAUGH"
____exports.SoundEffect.MOM_VOX_FILTERED_DEATH_1 = 85
____exports.SoundEffect[____exports.SoundEffect.MOM_VOX_FILTERED_DEATH_1] = "MOM_VOX_FILTERED_DEATH_1"
____exports.SoundEffect.MOM_VOX_FILTERED_EVIL_LAUGH = 86
____exports.SoundEffect[____exports.SoundEffect.MOM_VOX_FILTERED_EVIL_LAUGH] = "MOM_VOX_FILTERED_EVIL_LAUGH"
____exports.SoundEffect.MOM_VOX_FILTERED_HURT = 87
____exports.SoundEffect[____exports.SoundEffect.MOM_VOX_FILTERED_HURT] = "MOM_VOX_FILTERED_HURT"
____exports.SoundEffect.MOM_VOX_FILTERED_ISAAC = 90
____exports.SoundEffect[____exports.SoundEffect.MOM_VOX_FILTERED_ISAAC] = "MOM_VOX_FILTERED_ISAAC"
____exports.SoundEffect.MOM_VOX_GRUNT = 93
____exports.SoundEffect[____exports.SoundEffect.MOM_VOX_GRUNT] = "MOM_VOX_GRUNT"
____exports.SoundEffect.MOM_VOX_HURT = 97
____exports.SoundEffect[____exports.SoundEffect.MOM_VOX_HURT] = "MOM_VOX_HURT"
____exports.SoundEffect.MOM_VOX_ISAAC = 101
____exports.SoundEffect[____exports.SoundEffect.MOM_VOX_ISAAC] = "MOM_VOX_ISAAC"
____exports.SoundEffect.MONSTER_GRUNT_0 = 104
____exports.SoundEffect[____exports.SoundEffect.MONSTER_GRUNT_0] = "MONSTER_GRUNT_0"
____exports.SoundEffect.MONSTER_GRUNT_1 = 106
____exports.SoundEffect[____exports.SoundEffect.MONSTER_GRUNT_1] = "MONSTER_GRUNT_1"
____exports.SoundEffect.MONSTER_GRUNT_2 = 108
____exports.SoundEffect[____exports.SoundEffect.MONSTER_GRUNT_2] = "MONSTER_GRUNT_2"
____exports.SoundEffect.MONSTER_GRUNT_4 = 112
____exports.SoundEffect[____exports.SoundEffect.MONSTER_GRUNT_4] = "MONSTER_GRUNT_4"
____exports.SoundEffect.MONSTER_GRUNT_5 = 114
____exports.SoundEffect[____exports.SoundEffect.MONSTER_GRUNT_5] = "MONSTER_GRUNT_5"
____exports.SoundEffect.MONSTER_ROAR_0 = 115
____exports.SoundEffect[____exports.SoundEffect.MONSTER_ROAR_0] = "MONSTER_ROAR_0"
____exports.SoundEffect.MONSTER_ROAR_1 = 116
____exports.SoundEffect[____exports.SoundEffect.MONSTER_ROAR_1] = "MONSTER_ROAR_1"
____exports.SoundEffect.MONSTER_ROAR_2 = 117
____exports.SoundEffect[____exports.SoundEffect.MONSTER_ROAR_2] = "MONSTER_ROAR_2"
____exports.SoundEffect.MONSTER_ROAR_3 = 118
____exports.SoundEffect[____exports.SoundEffect.MONSTER_ROAR_3] = "MONSTER_ROAR_3"
____exports.SoundEffect.MONSTER_YELL_A = 119
____exports.SoundEffect[____exports.SoundEffect.MONSTER_YELL_A] = "MONSTER_YELL_A"
____exports.SoundEffect.MONSTER_YELL_B = 122
____exports.SoundEffect[____exports.SoundEffect.MONSTER_YELL_B] = "MONSTER_YELL_B"
____exports.SoundEffect.POWER_UP_1 = 128
____exports.SoundEffect[____exports.SoundEffect.POWER_UP_1] = "POWER_UP_1"
____exports.SoundEffect.POWER_UP_2 = 129
____exports.SoundEffect[____exports.SoundEffect.POWER_UP_2] = "POWER_UP_2"
____exports.SoundEffect.POWER_UP_3 = 130
____exports.SoundEffect[____exports.SoundEffect.POWER_UP_3] = "POWER_UP_3"
____exports.SoundEffect.POWER_UP_SPEWER = 132
____exports.SoundEffect[____exports.SoundEffect.POWER_UP_SPEWER] = "POWER_UP_SPEWER"
____exports.SoundEffect.RED_LIGHTNING_ZAP = 133
____exports.SoundEffect[____exports.SoundEffect.RED_LIGHTNING_ZAP] = "RED_LIGHTNING_ZAP"
____exports.SoundEffect.RED_LIGHTNING_ZAP_WEAK = 134
____exports.SoundEffect[____exports.SoundEffect.RED_LIGHTNING_ZAP_WEAK] = "RED_LIGHTNING_ZAP_WEAK"
____exports.SoundEffect.RED_LIGHTNING_ZAP_STRONG = 135
____exports.SoundEffect[____exports.SoundEffect.RED_LIGHTNING_ZAP_STRONG] = "RED_LIGHTNING_ZAP_STRONG"
____exports.SoundEffect.RED_LIGHTNING_ZAP_BURST = 136
____exports.SoundEffect[____exports.SoundEffect.RED_LIGHTNING_ZAP_BURST] = "RED_LIGHTNING_ZAP_BURST"
____exports.SoundEffect.ROCK_CRUMBLE = 137
____exports.SoundEffect[____exports.SoundEffect.ROCK_CRUMBLE] = "ROCK_CRUMBLE"
____exports.SoundEffect.POT_BREAK = 138
____exports.SoundEffect[____exports.SoundEffect.POT_BREAK] = "POT_BREAK"
____exports.SoundEffect.MUSHROOM_POOF = 139
____exports.SoundEffect[____exports.SoundEffect.MUSHROOM_POOF] = "MUSHROOM_POOF"
____exports.SoundEffect.ROCKET_BLAST_DEATH = 141
____exports.SoundEffect[____exports.SoundEffect.ROCKET_BLAST_DEATH] = "ROCKET_BLAST_DEATH"
____exports.SoundEffect.SMB_LARGE_CHEWS_4 = 142
____exports.SoundEffect[____exports.SoundEffect.SMB_LARGE_CHEWS_4] = "SMB_LARGE_CHEWS_4"
____exports.SoundEffect.SCARED_WHIMPER = 143
____exports.SoundEffect[____exports.SoundEffect.SCARED_WHIMPER] = "SCARED_WHIMPER"
____exports.SoundEffect.SHAKEY_KID_ROAR = 146
____exports.SoundEffect[____exports.SoundEffect.SHAKEY_KID_ROAR] = "SHAKEY_KID_ROAR"
____exports.SoundEffect.SINK_DRAIN_GURGLE = 149
____exports.SoundEffect[____exports.SoundEffect.SINK_DRAIN_GURGLE] = "SINK_DRAIN_GURGLE"
____exports.SoundEffect.TEAR_IMPACTS = 150
____exports.SoundEffect[____exports.SoundEffect.TEAR_IMPACTS] = "TEAR_IMPACTS"
____exports.SoundEffect.TEARS_FIRE = 153
____exports.SoundEffect[____exports.SoundEffect.TEARS_FIRE] = "TEARS_FIRE"
____exports.SoundEffect.UNLOCK = 156
____exports.SoundEffect[____exports.SoundEffect.UNLOCK] = "UNLOCK"
____exports.SoundEffect.VAMP_GULP = 157
____exports.SoundEffect[____exports.SoundEffect.VAMP_GULP] = "VAMP_GULP"
____exports.SoundEffect.WHEEZY_COUGH = 158
____exports.SoundEffect[____exports.SoundEffect.WHEEZY_COUGH] = "WHEEZY_COUGH"
____exports.SoundEffect.SPIDER_COUGH = 159
____exports.SoundEffect[____exports.SoundEffect.SPIDER_COUGH] = "SPIDER_COUGH"
____exports.SoundEffect.PORTAL_OPEN = 160
____exports.SoundEffect[____exports.SoundEffect.PORTAL_OPEN] = "PORTAL_OPEN"
____exports.SoundEffect.PORTAL_LOOP = 161
____exports.SoundEffect[____exports.SoundEffect.PORTAL_LOOP] = "PORTAL_LOOP"
____exports.SoundEffect.PORTAL_SPAWN = 162
____exports.SoundEffect[____exports.SoundEffect.PORTAL_SPAWN] = "PORTAL_SPAWN"
____exports.SoundEffect.TAR_LOOP = 163
____exports.SoundEffect[____exports.SoundEffect.TAR_LOOP] = "TAR_LOOP"
____exports.SoundEffect.ZOMBIE_WALKER_KID = 165
____exports.SoundEffect[____exports.SoundEffect.ZOMBIE_WALKER_KID] = "ZOMBIE_WALKER_KID"
____exports.SoundEffect.ANIMAL_SQUISH = 166
____exports.SoundEffect[____exports.SoundEffect.ANIMAL_SQUISH] = "ANIMAL_SQUISH"
____exports.SoundEffect.ANGRY_GURGLE = 167
____exports.SoundEffect[____exports.SoundEffect.ANGRY_GURGLE] = "ANGRY_GURGLE"
____exports.SoundEffect.BAND_AID_PICK_UP = 169
____exports.SoundEffect[____exports.SoundEffect.BAND_AID_PICK_UP] = "BAND_AID_PICK_UP"
____exports.SoundEffect.BATTERY_CHARGE = 170
____exports.SoundEffect[____exports.SoundEffect.BATTERY_CHARGE] = "BATTERY_CHARGE"
____exports.SoundEffect.BEEP = 171
____exports.SoundEffect[____exports.SoundEffect.BEEP] = "BEEP"
____exports.SoundEffect.LIGHT_BOLT = 172
____exports.SoundEffect[____exports.SoundEffect.LIGHT_BOLT] = "LIGHT_BOLT"
____exports.SoundEffect.LIGHT_BOLT_CHARGE = 173
____exports.SoundEffect[____exports.SoundEffect.LIGHT_BOLT_CHARGE] = "LIGHT_BOLT_CHARGE"
____exports.SoundEffect.BLOOD_BANK_TOUCHED = 174
____exports.SoundEffect[____exports.SoundEffect.BLOOD_BANK_TOUCHED] = "BLOOD_BANK_TOUCHED"
____exports.SoundEffect.BLOOD_BANK_SPAWN = 175
____exports.SoundEffect[____exports.SoundEffect.BLOOD_BANK_SPAWN] = "BLOOD_BANK_SPAWN"
____exports.SoundEffect.BLOOD_SHOOT = 178
____exports.SoundEffect[____exports.SoundEffect.BLOOD_SHOOT] = "BLOOD_SHOOT"
____exports.SoundEffect.BOIL_HATCH = 181
____exports.SoundEffect[____exports.SoundEffect.BOIL_HATCH] = "BOIL_HATCH"
____exports.SoundEffect.BOSS_1_EXPLOSIONS = 182
____exports.SoundEffect[____exports.SoundEffect.BOSS_1_EXPLOSIONS] = "BOSS_1_EXPLOSIONS"
____exports.SoundEffect.EXPLOSION_WEAK = 183
____exports.SoundEffect[____exports.SoundEffect.EXPLOSION_WEAK] = "EXPLOSION_WEAK"
____exports.SoundEffect.EXPLOSION_STRONG = 184
____exports.SoundEffect[____exports.SoundEffect.EXPLOSION_STRONG] = "EXPLOSION_STRONG"
____exports.SoundEffect.BOSS_2_BUBBLES = 185
____exports.SoundEffect[____exports.SoundEffect.BOSS_2_BUBBLES] = "BOSS_2_BUBBLES"
____exports.SoundEffect.EXPLOSION_DEBRIS = 186
____exports.SoundEffect[____exports.SoundEffect.EXPLOSION_DEBRIS] = "EXPLOSION_DEBRIS"
____exports.SoundEffect.BOSS_2_INTRO_ERROR_BUZZ = 187
____exports.SoundEffect[____exports.SoundEffect.BOSS_2_INTRO_ERROR_BUZZ] = "BOSS_2_INTRO_ERROR_BUZZ"
____exports.SoundEffect.CASTLE_PORTCULLIS = 190
____exports.SoundEffect[____exports.SoundEffect.CASTLE_PORTCULLIS] = "CASTLE_PORTCULLIS"
____exports.SoundEffect.CHARACTER_SELECT_LEFT = 194
____exports.SoundEffect[____exports.SoundEffect.CHARACTER_SELECT_LEFT] = "CHARACTER_SELECT_LEFT"
____exports.SoundEffect.CHARACTER_SELECT_RIGHT = 195
____exports.SoundEffect[____exports.SoundEffect.CHARACTER_SELECT_RIGHT] = "CHARACTER_SELECT_RIGHT"
____exports.SoundEffect.DERP = 197
____exports.SoundEffect[____exports.SoundEffect.DERP] = "DERP"
____exports.SoundEffect.DIME_DROP = 198
____exports.SoundEffect[____exports.SoundEffect.DIME_DROP] = "DIME_DROP"
____exports.SoundEffect.DIME_PICKUP = 199
____exports.SoundEffect[____exports.SoundEffect.DIME_PICKUP] = "DIME_PICKUP"
____exports.SoundEffect.LUCKY_PICKUP = 200
____exports.SoundEffect[____exports.SoundEffect.LUCKY_PICKUP] = "LUCKY_PICKUP"
____exports.SoundEffect.FETUS_FEET = 201
____exports.SoundEffect[____exports.SoundEffect.FETUS_FEET] = "FETUS_FEET"
____exports.SoundEffect.GOLDEN_KEY = 204
____exports.SoundEffect[____exports.SoundEffect.GOLDEN_KEY] = "GOLDEN_KEY"
____exports.SoundEffect.GOO_ATTACH = 205
____exports.SoundEffect[____exports.SoundEffect.GOO_ATTACH] = "GOO_ATTACH"
____exports.SoundEffect.GOO_DEATH = 207
____exports.SoundEffect[____exports.SoundEffect.GOO_DEATH] = "GOO_DEATH"
____exports.SoundEffect.HAND_LASERS = 211
____exports.SoundEffect[____exports.SoundEffect.HAND_LASERS] = "HAND_LASERS"
____exports.SoundEffect.HEART_IN = 212
____exports.SoundEffect[____exports.SoundEffect.HEART_IN] = "HEART_IN"
____exports.SoundEffect.HEART_OUT = 213
____exports.SoundEffect[____exports.SoundEffect.HEART_OUT] = "HEART_OUT"
____exports.SoundEffect.HELL_PORTAL_1 = 214
____exports.SoundEffect[____exports.SoundEffect.HELL_PORTAL_1] = "HELL_PORTAL_1"
____exports.SoundEffect.HELL_PORTAL_2 = 215
____exports.SoundEffect[____exports.SoundEffect.HELL_PORTAL_2] = "HELL_PORTAL_2"
____exports.SoundEffect.ISAAC_DIES = 217
____exports.SoundEffect[____exports.SoundEffect.ISAAC_DIES] = "ISAAC_DIES"
____exports.SoundEffect.ITEM_RECHARGE = 218
____exports.SoundEffect[____exports.SoundEffect.ITEM_RECHARGE] = "ITEM_RECHARGE"
____exports.SoundEffect.KISS_LIPS = 219
____exports.SoundEffect[____exports.SoundEffect.KISS_LIPS] = "KISS_LIPS"
____exports.SoundEffect.LEECH = 221
____exports.SoundEffect[____exports.SoundEffect.LEECH] = "LEECH"
____exports.SoundEffect.MAGGOT_CHARGE = 224
____exports.SoundEffect[____exports.SoundEffect.MAGGOT_CHARGE] = "MAGGOT_CHARGE"
____exports.SoundEffect.MEAT_HEAD_SHOOT = 226
____exports.SoundEffect[____exports.SoundEffect.MEAT_HEAD_SHOOT] = "MEAT_HEAD_SHOOT"
____exports.SoundEffect.METAL_BLOCK_BREAK = 229
____exports.SoundEffect[____exports.SoundEffect.METAL_BLOCK_BREAK] = "METAL_BLOCK_BREAK"
____exports.SoundEffect.NICKEL_DROP = 231
____exports.SoundEffect[____exports.SoundEffect.NICKEL_DROP] = "NICKEL_DROP"
____exports.SoundEffect.NICKEL_PICKUP = 232
____exports.SoundEffect[____exports.SoundEffect.NICKEL_PICKUP] = "NICKEL_PICKUP"
____exports.SoundEffect.PENNY_DROP = 233
____exports.SoundEffect[____exports.SoundEffect.PENNY_DROP] = "PENNY_DROP"
____exports.SoundEffect.PENNY_PICKUP = 234
____exports.SoundEffect[____exports.SoundEffect.PENNY_PICKUP] = "PENNY_PICKUP"
____exports.SoundEffect.PLOP = 237
____exports.SoundEffect[____exports.SoundEffect.PLOP] = "PLOP"
____exports.SoundEffect.SATAN_APPEAR = 238
____exports.SoundEffect[____exports.SoundEffect.SATAN_APPEAR] = "SATAN_APPEAR"
____exports.SoundEffect.SATAN_BLAST = 239
____exports.SoundEffect[____exports.SoundEffect.SATAN_BLAST] = "SATAN_BLAST"
____exports.SoundEffect.SATAN_CHARGE_UP = 240
____exports.SoundEffect[____exports.SoundEffect.SATAN_CHARGE_UP] = "SATAN_CHARGE_UP"
____exports.SoundEffect.SATAN_GROW = 241
____exports.SoundEffect[____exports.SoundEffect.SATAN_GROW] = "SATAN_GROW"
____exports.SoundEffect.SATAN_HURT = 242
____exports.SoundEffect[____exports.SoundEffect.SATAN_HURT] = "SATAN_HURT"
____exports.SoundEffect.SATAN_RISE_UP = 243
____exports.SoundEffect[____exports.SoundEffect.SATAN_RISE_UP] = "SATAN_RISE_UP"
____exports.SoundEffect.SATAN_SPIT = 245
____exports.SoundEffect[____exports.SoundEffect.SATAN_SPIT] = "SATAN_SPIT"
____exports.SoundEffect.SATAN_STOMP = 246
____exports.SoundEffect[____exports.SoundEffect.SATAN_STOMP] = "SATAN_STOMP"
____exports.SoundEffect.SCAMPER = 249
____exports.SoundEffect[____exports.SoundEffect.SCAMPER] = "SCAMPER"
____exports.SoundEffect.SHELL_GAME = 252
____exports.SoundEffect[____exports.SoundEffect.SHELL_GAME] = "SHELL_GAME"
____exports.SoundEffect.SLOT_SPAWN = 255
____exports.SoundEffect[____exports.SoundEffect.SLOT_SPAWN] = "SLOT_SPAWN"
____exports.SoundEffect.SPLATTER = 258
____exports.SoundEffect[____exports.SoundEffect.SPLATTER] = "SPLATTER"
____exports.SoundEffect.STEAM_HALF_SEC = 261
____exports.SoundEffect[____exports.SoundEffect.STEAM_HALF_SEC] = "STEAM_HALF_SEC"
____exports.SoundEffect.STONE_SHOOT = 262
____exports.SoundEffect[____exports.SoundEffect.STONE_SHOOT] = "STONE_SHOOT"
____exports.SoundEffect.WEIRD_WORM_SPIT = 263
____exports.SoundEffect[____exports.SoundEffect.WEIRD_WORM_SPIT] = "WEIRD_WORM_SPIT"
____exports.SoundEffect.SUMMON_SOUND = 265
____exports.SoundEffect[____exports.SoundEffect.SUMMON_SOUND] = "SUMMON_SOUND"
____exports.SoundEffect.SUPER_HOLY = 266
____exports.SoundEffect[____exports.SoundEffect.SUPER_HOLY] = "SUPER_HOLY"
____exports.SoundEffect.THUMBS_DOWN = 267
____exports.SoundEffect[____exports.SoundEffect.THUMBS_DOWN] = "THUMBS_DOWN"
____exports.SoundEffect.THUMBS_UP = 268
____exports.SoundEffect[____exports.SoundEffect.THUMBS_UP] = "THUMBS_UP"
____exports.SoundEffect.FIRE_BURN = 269
____exports.SoundEffect[____exports.SoundEffect.FIRE_BURN] = "FIRE_BURN"
____exports.SoundEffect.HAPPY_RAINBOW = 270
____exports.SoundEffect[____exports.SoundEffect.HAPPY_RAINBOW] = "HAPPY_RAINBOW"
____exports.SoundEffect.LASER_RING = 271
____exports.SoundEffect[____exports.SoundEffect.LASER_RING] = "LASER_RING"
____exports.SoundEffect.LASER_RING_WEAK = 272
____exports.SoundEffect[____exports.SoundEffect.LASER_RING_WEAK] = "LASER_RING_WEAK"
____exports.SoundEffect.LASER_RING_STRONG = 273
____exports.SoundEffect[____exports.SoundEffect.LASER_RING_STRONG] = "LASER_RING_STRONG"
____exports.SoundEffect.CASH_REGISTER = 274
____exports.SoundEffect[____exports.SoundEffect.CASH_REGISTER] = "CASH_REGISTER"
____exports.SoundEffect.ANGEL_WING = 275
____exports.SoundEffect[____exports.SoundEffect.ANGEL_WING] = "ANGEL_WING"
____exports.SoundEffect.ANGEL_BEAM = 276
____exports.SoundEffect[____exports.SoundEffect.ANGEL_BEAM] = "ANGEL_BEAM"
____exports.SoundEffect.HOLY_MANTLE = 277
____exports.SoundEffect[____exports.SoundEffect.HOLY_MANTLE] = "HOLY_MANTLE"
____exports.SoundEffect.MEGA_BLAST_START = 278
____exports.SoundEffect[____exports.SoundEffect.MEGA_BLAST_START] = "MEGA_BLAST_START"
____exports.SoundEffect.MEGA_BLAST_LOOP = 279
____exports.SoundEffect[____exports.SoundEffect.MEGA_BLAST_LOOP] = "MEGA_BLAST_LOOP"
____exports.SoundEffect.MEGA_BLAST_END = 280
____exports.SoundEffect[____exports.SoundEffect.MEGA_BLAST_END] = "MEGA_BLAST_END"
____exports.SoundEffect.BLOOD_LASER_LOOP = 281
____exports.SoundEffect[____exports.SoundEffect.BLOOD_LASER_LOOP] = "BLOOD_LASER_LOOP"
____exports.SoundEffect.MENU_SCROLL = 282
____exports.SoundEffect[____exports.SoundEffect.MENU_SCROLL] = "MENU_SCROLL"
____exports.SoundEffect.MENU_NOTE_APPEAR = 283
____exports.SoundEffect[____exports.SoundEffect.MENU_NOTE_APPEAR] = "MENU_NOTE_APPEAR"
____exports.SoundEffect.MENU_NOTE_HIDE = 284
____exports.SoundEffect[____exports.SoundEffect.MENU_NOTE_HIDE] = "MENU_NOTE_HIDE"
____exports.SoundEffect.MENU_CHARACTER_SELECT = 285
____exports.SoundEffect[____exports.SoundEffect.MENU_CHARACTER_SELECT] = "MENU_CHARACTER_SELECT"
____exports.SoundEffect.SUMMON_POOF = 286
____exports.SoundEffect[____exports.SoundEffect.SUMMON_POOF] = "SUMMON_POOF"
____exports.SoundEffect.BOO_MAD = 300
____exports.SoundEffect[____exports.SoundEffect.BOO_MAD] = "BOO_MAD"
____exports.SoundEffect.FART_GURG = 301
____exports.SoundEffect[____exports.SoundEffect.FART_GURG] = "FART_GURG"
____exports.SoundEffect.FAT_GRUNT = 302
____exports.SoundEffect[____exports.SoundEffect.FAT_GRUNT] = "FAT_GRUNT"
____exports.SoundEffect.FAT_WIGGLE = 303
____exports.SoundEffect[____exports.SoundEffect.FAT_WIGGLE] = "FAT_WIGGLE"
____exports.SoundEffect.FIRE_RUSH = 304
____exports.SoundEffect[____exports.SoundEffect.FIRE_RUSH] = "FIRE_RUSH"
____exports.SoundEffect.GHOST_ROAR = 305
____exports.SoundEffect[____exports.SoundEffect.GHOST_ROAR] = "GHOST_ROAR"
____exports.SoundEffect.GHOST_SHOOT = 306
____exports.SoundEffect[____exports.SoundEffect.GHOST_SHOOT] = "GHOST_SHOOT"
____exports.SoundEffect.GROWL = 307
____exports.SoundEffect[____exports.SoundEffect.GROWL] = "GROWL"
____exports.SoundEffect.GURG_BARF = 308
____exports.SoundEffect[____exports.SoundEffect.GURG_BARF] = "GURG_BARF"
____exports.SoundEffect.INHALE = 309
____exports.SoundEffect[____exports.SoundEffect.INHALE] = "INHALE"
____exports.SoundEffect.LOW_INHALE = 310
____exports.SoundEffect[____exports.SoundEffect.LOW_INHALE] = "LOW_INHALE"
____exports.SoundEffect.MEGA_PUKE = 311
____exports.SoundEffect[____exports.SoundEffect.MEGA_PUKE] = "MEGA_PUKE"
____exports.SoundEffect.MOUTH_FULL = 312
____exports.SoundEffect[____exports.SoundEffect.MOUTH_FULL] = "MOUTH_FULL"
____exports.SoundEffect.MULTI_SCREAM = 313
____exports.SoundEffect[____exports.SoundEffect.MULTI_SCREAM] = "MULTI_SCREAM"
____exports.SoundEffect.SKIN_PULL = 314
____exports.SoundEffect[____exports.SoundEffect.SKIN_PULL] = "SKIN_PULL"
____exports.SoundEffect.WHISTLE = 315
____exports.SoundEffect[____exports.SoundEffect.WHISTLE] = "WHISTLE"
____exports.SoundEffect.DEVIL_ROOM_DEAL = 316
____exports.SoundEffect[____exports.SoundEffect.DEVIL_ROOM_DEAL] = "DEVIL_ROOM_DEAL"
____exports.SoundEffect.SPIDER_SPIT_ROAR = 317
____exports.SoundEffect[____exports.SoundEffect.SPIDER_SPIT_ROAR] = "SPIDER_SPIT_ROAR"
____exports.SoundEffect.WORM_SPIT = 318
____exports.SoundEffect[____exports.SoundEffect.WORM_SPIT] = "WORM_SPIT"
____exports.SoundEffect.LITTLE_SPIT = 319
____exports.SoundEffect[____exports.SoundEffect.LITTLE_SPIT] = "LITTLE_SPIT"
____exports.SoundEffect.SATAN_ROOM_APPEAR = 320
____exports.SoundEffect[____exports.SoundEffect.SATAN_ROOM_APPEAR] = "SATAN_ROOM_APPEAR"
____exports.SoundEffect.HEARTBEAT = 321
____exports.SoundEffect[____exports.SoundEffect.HEARTBEAT] = "HEARTBEAT"
____exports.SoundEffect.HEARTBEAT_FASTER = 322
____exports.SoundEffect[____exports.SoundEffect.HEARTBEAT_FASTER] = "HEARTBEAT_FASTER"
____exports.SoundEffect.HEARTBEAT_FASTEST = 323
____exports.SoundEffect[____exports.SoundEffect.HEARTBEAT_FASTEST] = "HEARTBEAT_FASTEST"
____exports.SoundEffect.FORTY_EIGHT_HOUR_ENERGY = 324
____exports.SoundEffect[____exports.SoundEffect.FORTY_EIGHT_HOUR_ENERGY] = "FORTY_EIGHT_HOUR_ENERGY"
____exports.SoundEffect.ALGIZ = 325
____exports.SoundEffect[____exports.SoundEffect.ALGIZ] = "ALGIZ"
____exports.SoundEffect.AMNESIA = 326
____exports.SoundEffect[____exports.SoundEffect.AMNESIA] = "AMNESIA"
____exports.SoundEffect.ANZUS = 327
____exports.SoundEffect[____exports.SoundEffect.ANZUS] = "ANZUS"
____exports.SoundEffect.BAD_GAS = 328
____exports.SoundEffect[____exports.SoundEffect.BAD_GAS] = "BAD_GAS"
____exports.SoundEffect.BAD_TRIP = 329
____exports.SoundEffect[____exports.SoundEffect.BAD_TRIP] = "BAD_TRIP"
____exports.SoundEffect.BALLS_OF_STEEL = 330
____exports.SoundEffect[____exports.SoundEffect.BALLS_OF_STEEL] = "BALLS_OF_STEEL"
____exports.SoundEffect.BERKANO = 331
____exports.SoundEffect[____exports.SoundEffect.BERKANO] = "BERKANO"
____exports.SoundEffect.BOMBS_ARE_KEY = 332
____exports.SoundEffect[____exports.SoundEffect.BOMBS_ARE_KEY] = "BOMBS_ARE_KEY"
____exports.SoundEffect.CARD_VS_HUMAN = 333
____exports.SoundEffect[____exports.SoundEffect.CARD_VS_HUMAN] = "CARD_VS_HUMAN"
____exports.SoundEffect.CHAOS_CARD = 334
____exports.SoundEffect[____exports.SoundEffect.CHAOS_CARD] = "CHAOS_CARD"
____exports.SoundEffect.CREDIT_CARD = 335
____exports.SoundEffect[____exports.SoundEffect.CREDIT_CARD] = "CREDIT_CARD"
____exports.SoundEffect.DAGAZ = 336
____exports.SoundEffect[____exports.SoundEffect.DAGAZ] = "DAGAZ"
____exports.SoundEffect.DEATH = 337
____exports.SoundEffect[____exports.SoundEffect.DEATH] = "DEATH"
____exports.SoundEffect.EHWAZ = 338
____exports.SoundEffect[____exports.SoundEffect.EHWAZ] = "EHWAZ"
____exports.SoundEffect.EXPLOSIVE_DIARRHEA = 339
____exports.SoundEffect[____exports.SoundEffect.EXPLOSIVE_DIARRHEA] = "EXPLOSIVE_DIARRHEA"
____exports.SoundEffect.FULL_HP = 340
____exports.SoundEffect[____exports.SoundEffect.FULL_HP] = "FULL_HP"
____exports.SoundEffect.HAGALAZ = 341
____exports.SoundEffect[____exports.SoundEffect.HAGALAZ] = "HAGALAZ"
____exports.SoundEffect.HP_DOWN = 342
____exports.SoundEffect[____exports.SoundEffect.HP_DOWN] = "HP_DOWN"
____exports.SoundEffect.HP_UP = 343
____exports.SoundEffect[____exports.SoundEffect.HP_UP] = "HP_UP"
____exports.SoundEffect.HEMATEMESIS = 344
____exports.SoundEffect[____exports.SoundEffect.HEMATEMESIS] = "HEMATEMESIS"
____exports.SoundEffect.I_FOUND_PILLS = 345
____exports.SoundEffect[____exports.SoundEffect.I_FOUND_PILLS] = "I_FOUND_PILLS"
____exports.SoundEffect.JERA = 346
____exports.SoundEffect[____exports.SoundEffect.JERA] = "JERA"
____exports.SoundEffect.JOKER = 347
____exports.SoundEffect[____exports.SoundEffect.JOKER] = "JOKER"
____exports.SoundEffect.JUDGEMENT = 348
____exports.SoundEffect[____exports.SoundEffect.JUDGEMENT] = "JUDGEMENT"
____exports.SoundEffect.JUSTICE = 349
____exports.SoundEffect[____exports.SoundEffect.JUSTICE] = "JUSTICE"
____exports.SoundEffect.LEMON_PARTY = 350
____exports.SoundEffect[____exports.SoundEffect.LEMON_PARTY] = "LEMON_PARTY"
____exports.SoundEffect.LUCK_DOWN = 351
____exports.SoundEffect[____exports.SoundEffect.LUCK_DOWN] = "LUCK_DOWN"
____exports.SoundEffect.LUCK_UP = 352
____exports.SoundEffect[____exports.SoundEffect.LUCK_UP] = "LUCK_UP"
____exports.SoundEffect.PARALYSIS = 353
____exports.SoundEffect[____exports.SoundEffect.PARALYSIS] = "PARALYSIS"
____exports.SoundEffect.PERTHRO = 354
____exports.SoundEffect[____exports.SoundEffect.PERTHRO] = "PERTHRO"
____exports.SoundEffect.PHEROMONES = 355
____exports.SoundEffect[____exports.SoundEffect.PHEROMONES] = "PHEROMONES"
____exports.SoundEffect.PRETTY_FLY = 356
____exports.SoundEffect[____exports.SoundEffect.PRETTY_FLY] = "PRETTY_FLY"
____exports.SoundEffect.PUBERTY = 357
____exports.SoundEffect[____exports.SoundEffect.PUBERTY] = "PUBERTY"
____exports.SoundEffect.R_U_A_WIZARD = 358
____exports.SoundEffect[____exports.SoundEffect.R_U_A_WIZARD] = "R_U_A_WIZARD"
____exports.SoundEffect.RANGE_DOWN = 359
____exports.SoundEffect[____exports.SoundEffect.RANGE_DOWN] = "RANGE_DOWN"
____exports.SoundEffect.RANGE_UP = 360
____exports.SoundEffect[____exports.SoundEffect.RANGE_UP] = "RANGE_UP"
____exports.SoundEffect.RULES_CARD = 361
____exports.SoundEffect[____exports.SoundEffect.RULES_CARD] = "RULES_CARD"
____exports.SoundEffect.I_CAN_SEE_FOREVER = 362
____exports.SoundEffect[____exports.SoundEffect.I_CAN_SEE_FOREVER] = "I_CAN_SEE_FOREVER"
____exports.SoundEffect.SPEED_DOWN = 363
____exports.SoundEffect[____exports.SoundEffect.SPEED_DOWN] = "SPEED_DOWN"
____exports.SoundEffect.SPEED_UP = 364
____exports.SoundEffect[____exports.SoundEffect.SPEED_UP] = "SPEED_UP"
____exports.SoundEffect.STRENGTH = 365
____exports.SoundEffect[____exports.SoundEffect.STRENGTH] = "STRENGTH"
____exports.SoundEffect.SUICIDE_KING = 366
____exports.SoundEffect[____exports.SoundEffect.SUICIDE_KING] = "SUICIDE_KING"
____exports.SoundEffect.TEARS_DOWN = 367
____exports.SoundEffect[____exports.SoundEffect.TEARS_DOWN] = "TEARS_DOWN"
____exports.SoundEffect.TEARS_UP = 368
____exports.SoundEffect[____exports.SoundEffect.TEARS_UP] = "TEARS_UP"
____exports.SoundEffect.TELEPILLS = 369
____exports.SoundEffect[____exports.SoundEffect.TELEPILLS] = "TELEPILLS"
____exports.SoundEffect.TEMPERANCE = 370
____exports.SoundEffect[____exports.SoundEffect.TEMPERANCE] = "TEMPERANCE"
____exports.SoundEffect.THE_CHARIOT = 371
____exports.SoundEffect[____exports.SoundEffect.THE_CHARIOT] = "THE_CHARIOT"
____exports.SoundEffect.THE_DEVIL = 372
____exports.SoundEffect[____exports.SoundEffect.THE_DEVIL] = "THE_DEVIL"
____exports.SoundEffect.THE_EMPEROR = 373
____exports.SoundEffect[____exports.SoundEffect.THE_EMPEROR] = "THE_EMPEROR"
____exports.SoundEffect.EMPRESS = 374
____exports.SoundEffect[____exports.SoundEffect.EMPRESS] = "EMPRESS"
____exports.SoundEffect.FOOL = 375
____exports.SoundEffect[____exports.SoundEffect.FOOL] = "FOOL"
____exports.SoundEffect.HANGED_MAN = 376
____exports.SoundEffect[____exports.SoundEffect.HANGED_MAN] = "HANGED_MAN"
____exports.SoundEffect.HERMIT = 377
____exports.SoundEffect[____exports.SoundEffect.HERMIT] = "HERMIT"
____exports.SoundEffect.HIEROPHANT = 378
____exports.SoundEffect[____exports.SoundEffect.HIEROPHANT] = "HIEROPHANT"
____exports.SoundEffect.HIGHT_PRIESTESS = 379
____exports.SoundEffect[____exports.SoundEffect.HIGHT_PRIESTESS] = "HIGHT_PRIESTESS"
____exports.SoundEffect.THE_LOVERS = 380
____exports.SoundEffect[____exports.SoundEffect.THE_LOVERS] = "THE_LOVERS"
____exports.SoundEffect.MAGICIAN = 381
____exports.SoundEffect[____exports.SoundEffect.MAGICIAN] = "MAGICIAN"
____exports.SoundEffect.MOON = 382
____exports.SoundEffect[____exports.SoundEffect.MOON] = "MOON"
____exports.SoundEffect.STARS = 383
____exports.SoundEffect[____exports.SoundEffect.STARS] = "STARS"
____exports.SoundEffect.SUN = 384
____exports.SoundEffect[____exports.SoundEffect.SUN] = "SUN"
____exports.SoundEffect.TOWER = 385
____exports.SoundEffect[____exports.SoundEffect.TOWER] = "TOWER"
____exports.SoundEffect.WORLD = 386
____exports.SoundEffect[____exports.SoundEffect.WORLD] = "WORLD"
____exports.SoundEffect.TWO_CLUBS = 387
____exports.SoundEffect[____exports.SoundEffect.TWO_CLUBS] = "TWO_CLUBS"
____exports.SoundEffect.TWO_DIAMONDS = 388
____exports.SoundEffect[____exports.SoundEffect.TWO_DIAMONDS] = "TWO_DIAMONDS"
____exports.SoundEffect.TWO_HEARTS = 389
____exports.SoundEffect[____exports.SoundEffect.TWO_HEARTS] = "TWO_HEARTS"
____exports.SoundEffect.TWO_SPADES = 390
____exports.SoundEffect[____exports.SoundEffect.TWO_SPADES] = "TWO_SPADES"
____exports.SoundEffect.WHEEL_OF_FORTUNE = 391
____exports.SoundEffect[____exports.SoundEffect.WHEEL_OF_FORTUNE] = "WHEEL_OF_FORTUNE"
____exports.SoundEffect.RAGMAN_1 = 392
____exports.SoundEffect[____exports.SoundEffect.RAGMAN_1] = "RAGMAN_1"
____exports.SoundEffect.RAGMAN_2 = 393
____exports.SoundEffect[____exports.SoundEffect.RAGMAN_2] = "RAGMAN_2"
____exports.SoundEffect.RAGMAN_3 = 394
____exports.SoundEffect[____exports.SoundEffect.RAGMAN_3] = "RAGMAN_3"
____exports.SoundEffect.RAGMAN_4 = 395
____exports.SoundEffect[____exports.SoundEffect.RAGMAN_4] = "RAGMAN_4"
____exports.SoundEffect.FLUSH = 396
____exports.SoundEffect[____exports.SoundEffect.FLUSH] = "FLUSH"
____exports.SoundEffect.WATER_DROP = 397
____exports.SoundEffect[____exports.SoundEffect.WATER_DROP] = "WATER_DROP"
____exports.SoundEffect.WET_FEET = 398
____exports.SoundEffect[____exports.SoundEffect.WET_FEET] = "WET_FEET"
____exports.SoundEffect.ADDICTED = 399
____exports.SoundEffect[____exports.SoundEffect.ADDICTED] = "ADDICTED"
____exports.SoundEffect.DICE_SHARD = 400
____exports.SoundEffect[____exports.SoundEffect.DICE_SHARD] = "DICE_SHARD"
____exports.SoundEffect.EMERGENCY = 401
____exports.SoundEffect[____exports.SoundEffect.EMERGENCY] = "EMERGENCY"
____exports.SoundEffect.INFESTED_EXCL = 402
____exports.SoundEffect[____exports.SoundEffect.INFESTED_EXCL] = "INFESTED_EXCL"
____exports.SoundEffect.INFESTED_QUEST = 403
____exports.SoundEffect[____exports.SoundEffect.INFESTED_QUEST] = "INFESTED_QUEST"
____exports.SoundEffect.JAIL_CARD = 404
____exports.SoundEffect[____exports.SoundEffect.JAIL_CARD] = "JAIL_CARD"
____exports.SoundEffect.LARGER = 405
____exports.SoundEffect[____exports.SoundEffect.LARGER] = "LARGER"
____exports.SoundEffect.PERCS = 406
____exports.SoundEffect[____exports.SoundEffect.PERCS] = "PERCS"
____exports.SoundEffect.POWER_PILL = 407
____exports.SoundEffect[____exports.SoundEffect.POWER_PILL] = "POWER_PILL"
____exports.SoundEffect.QUESTION_MARK = 408
____exports.SoundEffect[____exports.SoundEffect.QUESTION_MARK] = "QUESTION_MARK"
____exports.SoundEffect.RELAX = 409
____exports.SoundEffect[____exports.SoundEffect.RELAX] = "RELAX"
____exports.SoundEffect.RETRO = 410
____exports.SoundEffect[____exports.SoundEffect.RETRO] = "RETRO"
____exports.SoundEffect.SMALL = 411
____exports.SoundEffect[____exports.SoundEffect.SMALL] = "SMALL"
____exports.SoundEffect.QQQ = 412
____exports.SoundEffect[____exports.SoundEffect.QQQ] = "QQQ"
____exports.SoundEffect.DANGLE_WHISTLE = 413
____exports.SoundEffect[____exports.SoundEffect.DANGLE_WHISTLE] = "DANGLE_WHISTLE"
____exports.SoundEffect.LITTLE_HORN_COUGH = 414
____exports.SoundEffect[____exports.SoundEffect.LITTLE_HORN_COUGH] = "LITTLE_HORN_COUGH"
____exports.SoundEffect.LITTLE_HORN_GRUNT_1 = 415
____exports.SoundEffect[____exports.SoundEffect.LITTLE_HORN_GRUNT_1] = "LITTLE_HORN_GRUNT_1"
____exports.SoundEffect.LITTLE_HORN_GRUNT_2 = 416
____exports.SoundEffect[____exports.SoundEffect.LITTLE_HORN_GRUNT_2] = "LITTLE_HORN_GRUNT_2"
____exports.SoundEffect.THE_FORSAKEN_LAUGH = 417
____exports.SoundEffect[____exports.SoundEffect.THE_FORSAKEN_LAUGH] = "THE_FORSAKEN_LAUGH"
____exports.SoundEffect.THE_FORSAKEN_SCREAM = 418
____exports.SoundEffect[____exports.SoundEffect.THE_FORSAKEN_SCREAM] = "THE_FORSAKEN_SCREAM"
____exports.SoundEffect.THE_STAIN_BURST = 419
____exports.SoundEffect[____exports.SoundEffect.THE_STAIN_BURST] = "THE_STAIN_BURST"
____exports.SoundEffect.BROWNIE_LAUGH = 420
____exports.SoundEffect[____exports.SoundEffect.BROWNIE_LAUGH] = "BROWNIE_LAUGH"
____exports.SoundEffect.HUSH_ROAR = 421
____exports.SoundEffect[____exports.SoundEffect.HUSH_ROAR] = "HUSH_ROAR"
____exports.SoundEffect.HUSH_GROWL = 422
____exports.SoundEffect[____exports.SoundEffect.HUSH_GROWL] = "HUSH_GROWL"
____exports.SoundEffect.HUSH_LOW_ROAR = 423
____exports.SoundEffect[____exports.SoundEffect.HUSH_LOW_ROAR] = "HUSH_LOW_ROAR"
____exports.SoundEffect.FRAIL_CHARGE = 424
____exports.SoundEffect[____exports.SoundEffect.FRAIL_CHARGE] = "FRAIL_CHARGE"
____exports.SoundEffect.HUSH_CHARGE = 425
____exports.SoundEffect[____exports.SoundEffect.HUSH_CHARGE] = "HUSH_CHARGE"
____exports.SoundEffect.MAW_OF_VOID = 426
____exports.SoundEffect[____exports.SoundEffect.MAW_OF_VOID] = "MAW_OF_VOID"
____exports.SoundEffect.ULTRA_GREED_COIN_DESTROY = 427
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_COIN_DESTROY] = "ULTRA_GREED_COIN_DESTROY"
____exports.SoundEffect.ULTRA_GREED_COINS_FALLING = 428
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_COINS_FALLING] = "ULTRA_GREED_COINS_FALLING"
____exports.SoundEffect.ULTRA_GREED_DEATH_SCREAM = 429
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_DEATH_SCREAM] = "ULTRA_GREED_DEATH_SCREAM"
____exports.SoundEffect.ULTRA_GREED_TURN_GOLD_1 = 430
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_TURN_GOLD_1] = "ULTRA_GREED_TURN_GOLD_1"
____exports.SoundEffect.ULTRA_GREED_TURN_GOLD_2 = 431
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_TURN_GOLD_2] = "ULTRA_GREED_TURN_GOLD_2"
____exports.SoundEffect.ULTRA_GREED_ROAR_1 = 432
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_ROAR_1] = "ULTRA_GREED_ROAR_1"
____exports.SoundEffect.ULTRA_GREED_ROAR_2 = 433
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_ROAR_2] = "ULTRA_GREED_ROAR_2"
____exports.SoundEffect.ULTRA_GREED_SPIT = 434
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_SPIT] = "ULTRA_GREED_SPIT"
____exports.SoundEffect.ULTRA_GREED_PULL_SLOT = 435
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_PULL_SLOT] = "ULTRA_GREED_PULL_SLOT"
____exports.SoundEffect.ULTRA_GREED_SLOT_SPIN_LOOP = 436
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_SLOT_SPIN_LOOP] = "ULTRA_GREED_SLOT_SPIN_LOOP"
____exports.SoundEffect.ULTRA_GREED_SLOT_STOP = 437
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_SLOT_STOP] = "ULTRA_GREED_SLOT_STOP"
____exports.SoundEffect.ULTRA_GREED_SLOT_WIN_LOOP_END = 438
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_SLOT_WIN_LOOP_END] = "ULTRA_GREED_SLOT_WIN_LOOP_END"
____exports.SoundEffect.ULTRA_GREED_SLOT_WIN_LOOP = 439
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_SLOT_WIN_LOOP] = "ULTRA_GREED_SLOT_WIN_LOOP"
____exports.SoundEffect.ULTRA_GREED_SPINNING = 440
____exports.SoundEffect[____exports.SoundEffect.ULTRA_GREED_SPINNING] = "ULTRA_GREED_SPINNING"
____exports.SoundEffect.DOG_BARK = 441
____exports.SoundEffect[____exports.SoundEffect.DOG_BARK] = "DOG_BARK"
____exports.SoundEffect.DOG_HOWELL = 442
____exports.SoundEffect[____exports.SoundEffect.DOG_HOWELL] = "DOG_HOWELL"
____exports.SoundEffect.X_LAX = 443
____exports.SoundEffect[____exports.SoundEffect.X_LAX] = "X_LAX"
____exports.SoundEffect.WRONG = 444
____exports.SoundEffect[____exports.SoundEffect.WRONG] = "WRONG"
____exports.SoundEffect.VURP = 445
____exports.SoundEffect[____exports.SoundEffect.VURP] = "VURP"
____exports.SoundEffect.SUNSHINE = 446
____exports.SoundEffect[____exports.SoundEffect.SUNSHINE] = "SUNSHINE"
____exports.SoundEffect.SPADES = 447
____exports.SoundEffect[____exports.SoundEffect.SPADES] = "SPADES"
____exports.SoundEffect.HORF = 448
____exports.SoundEffect[____exports.SoundEffect.HORF] = "HORF"
____exports.SoundEffect.HOLY_CARD = 449
____exports.SoundEffect[____exports.SoundEffect.HOLY_CARD] = "HOLY_CARD"
____exports.SoundEffect.HEARTS = 450
____exports.SoundEffect[____exports.SoundEffect.HEARTS] = "HEARTS"
____exports.SoundEffect.GULP = 451
____exports.SoundEffect[____exports.SoundEffect.GULP] = "GULP"
____exports.SoundEffect.FRIENDS = 452
____exports.SoundEffect[____exports.SoundEffect.FRIENDS] = "FRIENDS"
____exports.SoundEffect.EXCITED = 453
____exports.SoundEffect[____exports.SoundEffect.EXCITED] = "EXCITED"
____exports.SoundEffect.DROWSY = 454
____exports.SoundEffect[____exports.SoundEffect.DROWSY] = "DROWSY"
____exports.SoundEffect.DIAMONDS = 455
____exports.SoundEffect[____exports.SoundEffect.DIAMONDS] = "DIAMONDS"
____exports.SoundEffect.CLUBS = 456
____exports.SoundEffect[____exports.SoundEffect.CLUBS] = "CLUBS"
____exports.SoundEffect.BLACK_RUNE = 457
____exports.SoundEffect[____exports.SoundEffect.BLACK_RUNE] = "BLACK_RUNE"
____exports.SoundEffect.PING_PONG = 458
____exports.SoundEffect[____exports.SoundEffect.PING_PONG] = "PING_PONG"
____exports.SoundEffect.SPEWER = 459
____exports.SoundEffect[____exports.SoundEffect.SPEWER] = "SPEWER"
____exports.SoundEffect.MOM_FOOTSTEPS = 460
____exports.SoundEffect[____exports.SoundEffect.MOM_FOOTSTEPS] = "MOM_FOOTSTEPS"
____exports.SoundEffect.BONE_HEART = 461
____exports.SoundEffect[____exports.SoundEffect.BONE_HEART] = "BONE_HEART"
____exports.SoundEffect.BONE_SNAP = 462
____exports.SoundEffect[____exports.SoundEffect.BONE_SNAP] = "BONE_SNAP"
____exports.SoundEffect.SHOVEL_DROP = 463
____exports.SoundEffect[____exports.SoundEffect.SHOVEL_DROP] = "SHOVEL_DROP"
____exports.SoundEffect.SHOVEL_DIG = 464
____exports.SoundEffect[____exports.SoundEffect.SHOVEL_DIG] = "SHOVEL_DIG"
____exports.SoundEffect.GOLD_HEART = 465
____exports.SoundEffect[____exports.SoundEffect.GOLD_HEART] = "GOLD_HEART"
____exports.SoundEffect.GOLD_HEART_DROP = 466
____exports.SoundEffect[____exports.SoundEffect.GOLD_HEART_DROP] = "GOLD_HEART_DROP"
____exports.SoundEffect.BONE_DROP = 467
____exports.SoundEffect[____exports.SoundEffect.BONE_DROP] = "BONE_DROP"
____exports.SoundEffect.UNHOLY = 468
____exports.SoundEffect[____exports.SoundEffect.UNHOLY] = "UNHOLY"
____exports.SoundEffect.BUTTON_PRESS = 469
____exports.SoundEffect[____exports.SoundEffect.BUTTON_PRESS] = "BUTTON_PRESS"
____exports.SoundEffect.GOLDEN_BOMB = 470
____exports.SoundEffect[____exports.SoundEffect.GOLDEN_BOMB] = "GOLDEN_BOMB"
____exports.SoundEffect.CANDLE_LIGHT = 471
____exports.SoundEffect[____exports.SoundEffect.CANDLE_LIGHT] = "CANDLE_LIGHT"
____exports.SoundEffect.THUNDER = 472
____exports.SoundEffect[____exports.SoundEffect.THUNDER] = "THUNDER"
____exports.SoundEffect.WATER_FLOW_LOOP = 473
____exports.SoundEffect[____exports.SoundEffect.WATER_FLOW_LOOP] = "WATER_FLOW_LOOP"
____exports.SoundEffect.BOSS_2_DIVE = 474
____exports.SoundEffect[____exports.SoundEffect.BOSS_2_DIVE] = "BOSS_2_DIVE"
____exports.SoundEffect.BOSS_2_INTRO_PIPES_TURNON = 475
____exports.SoundEffect[____exports.SoundEffect.BOSS_2_INTRO_PIPES_TURNON] = "BOSS_2_INTRO_PIPES_TURNON"
____exports.SoundEffect.WATER_FLOW_LARGE = 476
____exports.SoundEffect[____exports.SoundEffect.WATER_FLOW_LARGE] = "WATER_FLOW_LARGE"
____exports.SoundEffect.DEMON_HIT = 477
____exports.SoundEffect[____exports.SoundEffect.DEMON_HIT] = "DEMON_HIT"
____exports.SoundEffect.PUNCH = 478
____exports.SoundEffect[____exports.SoundEffect.PUNCH] = "PUNCH"
____exports.SoundEffect.FLUTE = 479
____exports.SoundEffect[____exports.SoundEffect.FLUTE] = "FLUTE"
____exports.SoundEffect.LAVA_LOOP = 480
____exports.SoundEffect[____exports.SoundEffect.LAVA_LOOP] = "LAVA_LOOP"
____exports.SoundEffect.WOOD_PLANK_BREAK = 481
____exports.SoundEffect[____exports.SoundEffect.WOOD_PLANK_BREAK] = "WOOD_PLANK_BREAK"
____exports.SoundEffect.BULLET_SHOT = 482
____exports.SoundEffect[____exports.SoundEffect.BULLET_SHOT] = "BULLET_SHOT"
____exports.SoundEffect.FLAME_BURST = 483
____exports.SoundEffect[____exports.SoundEffect.FLAME_BURST] = "FLAME_BURST"
____exports.SoundEffect.INFLATE = 484
____exports.SoundEffect[____exports.SoundEffect.INFLATE] = "INFLATE"
____exports.SoundEffect.CLAP = 485
____exports.SoundEffect[____exports.SoundEffect.CLAP] = "CLAP"
____exports.SoundEffect.BOSS_2_INTRO_WATER_EXPLOSION = 486
____exports.SoundEffect[____exports.SoundEffect.BOSS_2_INTRO_WATER_EXPLOSION] = "BOSS_2_INTRO_WATER_EXPLOSION"
____exports.SoundEffect.STONE_IMPACT = 487
____exports.SoundEffect[____exports.SoundEffect.STONE_IMPACT] = "STONE_IMPACT"
____exports.SoundEffect.BOSS_2_WATER_THRASHING = 488
____exports.SoundEffect[____exports.SoundEffect.BOSS_2_WATER_THRASHING] = "BOSS_2_WATER_THRASHING"
____exports.SoundEffect.FART_MEGA = 489
____exports.SoundEffect[____exports.SoundEffect.FART_MEGA] = "FART_MEGA"
____exports.SoundEffect.MATCHSTICK = 490
____exports.SoundEffect[____exports.SoundEffect.MATCHSTICK] = "MATCHSTICK"
____exports.SoundEffect.FORTUNE_COOKIE = 491
____exports.SoundEffect[____exports.SoundEffect.FORTUNE_COOKIE] = "FORTUNE_COOKIE"
____exports.SoundEffect.BULB_FLASH = 492
____exports.SoundEffect[____exports.SoundEffect.BULB_FLASH] = "BULB_FLASH"
____exports.SoundEffect.BATTERY_DISCHARGE = 493
____exports.SoundEffect[____exports.SoundEffect.BATTERY_DISCHARGE] = "BATTERY_DISCHARGE"
____exports.SoundEffect.WHIP = 494
____exports.SoundEffect[____exports.SoundEffect.WHIP] = "WHIP"
____exports.SoundEffect.WHIP_HIT = 495
____exports.SoundEffect[____exports.SoundEffect.WHIP_HIT] = "WHIP_HIT"
____exports.SoundEffect.FREEZE = 496
____exports.SoundEffect[____exports.SoundEffect.FREEZE] = "FREEZE"
____exports.SoundEffect.ROTTEN_HEART = 497
____exports.SoundEffect[____exports.SoundEffect.ROTTEN_HEART] = "ROTTEN_HEART"
____exports.SoundEffect.FREEZE_SHATTER = 498
____exports.SoundEffect[____exports.SoundEffect.FREEZE_SHATTER] = "FREEZE_SHATTER"
____exports.SoundEffect.BONE_BOUNCE = 499
____exports.SoundEffect[____exports.SoundEffect.BONE_BOUNCE] = "BONE_BOUNCE"
____exports.SoundEffect.BONE_BREAK = 500
____exports.SoundEffect[____exports.SoundEffect.BONE_BREAK] = "BONE_BREAK"
____exports.SoundEffect.BISHOP_HIT = 501
____exports.SoundEffect[____exports.SoundEffect.BISHOP_HIT] = "BISHOP_HIT"
____exports.SoundEffect.CHAIN_LOOP = 503
____exports.SoundEffect[____exports.SoundEffect.CHAIN_LOOP] = "CHAIN_LOOP"
____exports.SoundEffect.CHAIN_BREAK = 504
____exports.SoundEffect[____exports.SoundEffect.CHAIN_BREAK] = "CHAIN_BREAK"
____exports.SoundEffect.MINECART_LOOP = 505
____exports.SoundEffect[____exports.SoundEffect.MINECART_LOOP] = "MINECART_LOOP"
____exports.SoundEffect.TOOTH_AND_NAIL = 506
____exports.SoundEffect[____exports.SoundEffect.TOOTH_AND_NAIL] = "TOOTH_AND_NAIL"
____exports.SoundEffect.TOOTH_AND_NAIL_TICK = 507
____exports.SoundEffect[____exports.SoundEffect.TOOTH_AND_NAIL_TICK] = "TOOTH_AND_NAIL_TICK"
____exports.SoundEffect.STATIC_BUILDUP = 508
____exports.SoundEffect[____exports.SoundEffect.STATIC_BUILDUP] = "STATIC_BUILDUP"
____exports.SoundEffect.BIG_LEECH = 510
____exports.SoundEffect[____exports.SoundEffect.BIG_LEECH] = "BIG_LEECH"
____exports.SoundEffect.REVERSE_EXPLOSION = 511
____exports.SoundEffect[____exports.SoundEffect.REVERSE_EXPLOSION] = "REVERSE_EXPLOSION"
____exports.SoundEffect.REVERSE_FOOL = 512
____exports.SoundEffect[____exports.SoundEffect.REVERSE_FOOL] = "REVERSE_FOOL"
____exports.SoundEffect.REVERSE_MAGICIAN = 513
____exports.SoundEffect[____exports.SoundEffect.REVERSE_MAGICIAN] = "REVERSE_MAGICIAN"
____exports.SoundEffect.REVERSE_HIGH_PRIESTESS = 514
____exports.SoundEffect[____exports.SoundEffect.REVERSE_HIGH_PRIESTESS] = "REVERSE_HIGH_PRIESTESS"
____exports.SoundEffect.REVERSE_EMPRESS = 515
____exports.SoundEffect[____exports.SoundEffect.REVERSE_EMPRESS] = "REVERSE_EMPRESS"
____exports.SoundEffect.REVERSE_EMPEROR = 516
____exports.SoundEffect[____exports.SoundEffect.REVERSE_EMPEROR] = "REVERSE_EMPEROR"
____exports.SoundEffect.REVERSE_HIEROPHANT = 517
____exports.SoundEffect[____exports.SoundEffect.REVERSE_HIEROPHANT] = "REVERSE_HIEROPHANT"
____exports.SoundEffect.REVERSE_LOVERS = 518
____exports.SoundEffect[____exports.SoundEffect.REVERSE_LOVERS] = "REVERSE_LOVERS"
____exports.SoundEffect.REVERSE_CHARIOT = 519
____exports.SoundEffect[____exports.SoundEffect.REVERSE_CHARIOT] = "REVERSE_CHARIOT"
____exports.SoundEffect.REVERSE_JUSTICE = 520
____exports.SoundEffect[____exports.SoundEffect.REVERSE_JUSTICE] = "REVERSE_JUSTICE"
____exports.SoundEffect.REVERSE_HERMIT = 521
____exports.SoundEffect[____exports.SoundEffect.REVERSE_HERMIT] = "REVERSE_HERMIT"
____exports.SoundEffect.REVERSE_WHEEL_OF_FORTUNE = 522
____exports.SoundEffect[____exports.SoundEffect.REVERSE_WHEEL_OF_FORTUNE] = "REVERSE_WHEEL_OF_FORTUNE"
____exports.SoundEffect.REVERSE_STRENGTH = 523
____exports.SoundEffect[____exports.SoundEffect.REVERSE_STRENGTH] = "REVERSE_STRENGTH"
____exports.SoundEffect.REVERSE_HANGED_MAN = 524
____exports.SoundEffect[____exports.SoundEffect.REVERSE_HANGED_MAN] = "REVERSE_HANGED_MAN"
____exports.SoundEffect.REVERSE_DEATH = 525
____exports.SoundEffect[____exports.SoundEffect.REVERSE_DEATH] = "REVERSE_DEATH"
____exports.SoundEffect.REVERSE_TEMPERANCE = 526
____exports.SoundEffect[____exports.SoundEffect.REVERSE_TEMPERANCE] = "REVERSE_TEMPERANCE"
____exports.SoundEffect.REVERSE_DEVIL = 527
____exports.SoundEffect[____exports.SoundEffect.REVERSE_DEVIL] = "REVERSE_DEVIL"
____exports.SoundEffect.REVERSE_TOWER = 528
____exports.SoundEffect[____exports.SoundEffect.REVERSE_TOWER] = "REVERSE_TOWER"
____exports.SoundEffect.REVERSE_STARS = 529
____exports.SoundEffect[____exports.SoundEffect.REVERSE_STARS] = "REVERSE_STARS"
____exports.SoundEffect.REVERSE_MOON = 530
____exports.SoundEffect[____exports.SoundEffect.REVERSE_MOON] = "REVERSE_MOON"
____exports.SoundEffect.REVERSE_SUN = 531
____exports.SoundEffect[____exports.SoundEffect.REVERSE_SUN] = "REVERSE_SUN"
____exports.SoundEffect.REVERSE_JUDGEMENT = 532
____exports.SoundEffect[____exports.SoundEffect.REVERSE_JUDGEMENT] = "REVERSE_JUDGEMENT"
____exports.SoundEffect.REVERSE_WORLD = 533
____exports.SoundEffect[____exports.SoundEffect.REVERSE_WORLD] = "REVERSE_WORLD"
____exports.SoundEffect.FLAMETHROWER_START = 534
____exports.SoundEffect[____exports.SoundEffect.FLAMETHROWER_START] = "FLAMETHROWER_START"
____exports.SoundEffect.FLAMETHROWER_LOOP = 535
____exports.SoundEffect[____exports.SoundEffect.FLAMETHROWER_LOOP] = "FLAMETHROWER_LOOP"
____exports.SoundEffect.FLAMETHROWER_END = 536
____exports.SoundEffect[____exports.SoundEffect.FLAMETHROWER_END] = "FLAMETHROWER_END"
____exports.SoundEffect.ROCKET_LAUNCH = 537
____exports.SoundEffect[____exports.SoundEffect.ROCKET_LAUNCH] = "ROCKET_LAUNCH"
____exports.SoundEffect.SWORD_SPIN = 538
____exports.SoundEffect[____exports.SoundEffect.SWORD_SPIN] = "SWORD_SPIN"
____exports.SoundEffect.BABY_BRIM = 539
____exports.SoundEffect[____exports.SoundEffect.BABY_BRIM] = "BABY_BRIM"
____exports.SoundEffect.KNIFE_PULL = 540
____exports.SoundEffect[____exports.SoundEffect.KNIFE_PULL] = "KNIFE_PULL"
____exports.SoundEffect.DOGMA_APPEAR_SCREAM = 541
____exports.SoundEffect[____exports.SoundEffect.DOGMA_APPEAR_SCREAM] = "DOGMA_APPEAR_SCREAM"
____exports.SoundEffect.DOGMA_DEATH = 542
____exports.SoundEffect[____exports.SoundEffect.DOGMA_DEATH] = "DOGMA_DEATH"
____exports.SoundEffect.DOGMA_BLACK_HOLE_CHARGE = 543
____exports.SoundEffect[____exports.SoundEffect.DOGMA_BLACK_HOLE_CHARGE] = "DOGMA_BLACK_HOLE_CHARGE"
____exports.SoundEffect.DOGMA_BLACK_HOLE_SHOOT = 544
____exports.SoundEffect[____exports.SoundEffect.DOGMA_BLACK_HOLE_SHOOT] = "DOGMA_BLACK_HOLE_SHOOT"
____exports.SoundEffect.DOGMA_BLACK_HOLE_OPEN = 545
____exports.SoundEffect[____exports.SoundEffect.DOGMA_BLACK_HOLE_OPEN] = "DOGMA_BLACK_HOLE_OPEN"
____exports.SoundEffect.DOGMA_BLACK_HOLE_CLOSE = 546
____exports.SoundEffect[____exports.SoundEffect.DOGMA_BLACK_HOLE_CLOSE] = "DOGMA_BLACK_HOLE_CLOSE"
____exports.SoundEffect.DOGMA_BRIMSTONE_CHARGE = 547
____exports.SoundEffect[____exports.SoundEffect.DOGMA_BRIMSTONE_CHARGE] = "DOGMA_BRIMSTONE_CHARGE"
____exports.SoundEffect.DOGMA_BRIMSTONE_SHOOT = 548
____exports.SoundEffect[____exports.SoundEffect.DOGMA_BRIMSTONE_SHOOT] = "DOGMA_BRIMSTONE_SHOOT"
____exports.SoundEffect.DOGMA_GODHEAD = 549
____exports.SoundEffect[____exports.SoundEffect.DOGMA_GODHEAD] = "DOGMA_GODHEAD"
____exports.SoundEffect.DOGMA_JACOBS = 550
____exports.SoundEffect[____exports.SoundEffect.DOGMA_JACOBS] = "DOGMA_JACOBS"
____exports.SoundEffect.DOGMA_JACOBS_ZAP = 551
____exports.SoundEffect[____exports.SoundEffect.DOGMA_JACOBS_ZAP] = "DOGMA_JACOBS_ZAP"
____exports.SoundEffect.DOGMA_SCREAM = 552
____exports.SoundEffect[____exports.SoundEffect.DOGMA_SCREAM] = "DOGMA_SCREAM"
____exports.SoundEffect.DOGMA_PREACHER = 553
____exports.SoundEffect[____exports.SoundEffect.DOGMA_PREACHER] = "DOGMA_PREACHER"
____exports.SoundEffect.DOGMA_RING_START = 554
____exports.SoundEffect[____exports.SoundEffect.DOGMA_RING_START] = "DOGMA_RING_START"
____exports.SoundEffect.DOGMA_RING_LOOP = 555
____exports.SoundEffect[____exports.SoundEffect.DOGMA_RING_LOOP] = "DOGMA_RING_LOOP"
____exports.SoundEffect.DOGMA_FEATHER_SPRAY = 556
____exports.SoundEffect[____exports.SoundEffect.DOGMA_FEATHER_SPRAY] = "DOGMA_FEATHER_SPRAY"
____exports.SoundEffect.DOGMA_JACOBS_DOT = 557
____exports.SoundEffect[____exports.SoundEffect.DOGMA_JACOBS_DOT] = "DOGMA_JACOBS_DOT"
____exports.SoundEffect.DOGMA_BLACK_HOLE_LOOP = 558
____exports.SoundEffect[____exports.SoundEffect.DOGMA_BLACK_HOLE_LOOP] = "DOGMA_BLACK_HOLE_LOOP"
____exports.SoundEffect.DOGMA_ANGEL_TRANSFORM = 559
____exports.SoundEffect[____exports.SoundEffect.DOGMA_ANGEL_TRANSFORM] = "DOGMA_ANGEL_TRANSFORM"
____exports.SoundEffect.DOGMA_ANGEL_TRANSFORM_END = 560
____exports.SoundEffect[____exports.SoundEffect.DOGMA_ANGEL_TRANSFORM_END] = "DOGMA_ANGEL_TRANSFORM_END"
____exports.SoundEffect.DOGMA_LIGHT_APPEAR = 561
____exports.SoundEffect[____exports.SoundEffect.DOGMA_LIGHT_APPEAR] = "DOGMA_LIGHT_APPEAR"
____exports.SoundEffect.DOGMA_LIGHT_BALL_THROW = 562
____exports.SoundEffect[____exports.SoundEffect.DOGMA_LIGHT_BALL_THROW] = "DOGMA_LIGHT_BALL_THROW"
____exports.SoundEffect.DOGMA_LIGHT_RAY_CHARGE = 563
____exports.SoundEffect[____exports.SoundEffect.DOGMA_LIGHT_RAY_CHARGE] = "DOGMA_LIGHT_RAY_CHARGE"
____exports.SoundEffect.DOGMA_LIGHT_RAY_FIRE = 564
____exports.SoundEffect[____exports.SoundEffect.DOGMA_LIGHT_RAY_FIRE] = "DOGMA_LIGHT_RAY_FIRE"
____exports.SoundEffect.DOGMA_SPIN_ATTACK = 565
____exports.SoundEffect[____exports.SoundEffect.DOGMA_SPIN_ATTACK] = "DOGMA_SPIN_ATTACK"
____exports.SoundEffect.DOGMA_WING_FLAP = 566
____exports.SoundEffect[____exports.SoundEffect.DOGMA_WING_FLAP] = "DOGMA_WING_FLAP"
____exports.SoundEffect.DOGMA_TV_BREAK = 567
____exports.SoundEffect[____exports.SoundEffect.DOGMA_TV_BREAK] = "DOGMA_TV_BREAK"
____exports.SoundEffect.DIVINE_INTERVENTION = 568
____exports.SoundEffect[____exports.SoundEffect.DIVINE_INTERVENTION] = "DIVINE_INTERVENTION"
____exports.SoundEffect.MENU_FLIP_LIGHT = 569
____exports.SoundEffect[____exports.SoundEffect.MENU_FLIP_LIGHT] = "MENU_FLIP_LIGHT"
____exports.SoundEffect.MENU_FLIP_DARK = 570
____exports.SoundEffect[____exports.SoundEffect.MENU_FLIP_DARK] = "MENU_FLIP_DARK"
____exports.SoundEffect.MENU_RIP = 571
____exports.SoundEffect[____exports.SoundEffect.MENU_RIP] = "MENU_RIP"
____exports.SoundEffect.URN_OPEN = 572
____exports.SoundEffect[____exports.SoundEffect.URN_OPEN] = "URN_OPEN"
____exports.SoundEffect.URN_CLOSE = 573
____exports.SoundEffect[____exports.SoundEffect.URN_CLOSE] = "URN_CLOSE"
____exports.SoundEffect.RECALL = 574
____exports.SoundEffect[____exports.SoundEffect.RECALL] = "RECALL"
____exports.SoundEffect.LARYNX_SCREAM_LO = 575
____exports.SoundEffect[____exports.SoundEffect.LARYNX_SCREAM_LO] = "LARYNX_SCREAM_LO"
____exports.SoundEffect.LARYNX_SCREAM_MED = 576
____exports.SoundEffect[____exports.SoundEffect.LARYNX_SCREAM_MED] = "LARYNX_SCREAM_MED"
____exports.SoundEffect.LARYNX_SCREAM_HI = 577
____exports.SoundEffect[____exports.SoundEffect.LARYNX_SCREAM_HI] = "LARYNX_SCREAM_HI"
____exports.SoundEffect.GROUND_TREMOR = 578
____exports.SoundEffect[____exports.SoundEffect.GROUND_TREMOR] = "GROUND_TREMOR"
____exports.SoundEffect.SOUL_PICKUP = 579
____exports.SoundEffect[____exports.SoundEffect.SOUL_PICKUP] = "SOUL_PICKUP"
____exports.SoundEffect.BALL_AND_CHAIN_LOOP = 580
____exports.SoundEffect[____exports.SoundEffect.BALL_AND_CHAIN_LOOP] = "BALL_AND_CHAIN_LOOP"
____exports.SoundEffect.BALL_AND_CHAIN_HIT = 581
____exports.SoundEffect[____exports.SoundEffect.BALL_AND_CHAIN_HIT] = "BALL_AND_CHAIN_HIT"
____exports.SoundEffect.LAZARUS_FLIP_DEAD = 582
____exports.SoundEffect[____exports.SoundEffect.LAZARUS_FLIP_DEAD] = "LAZARUS_FLIP_DEAD"
____exports.SoundEffect.LAZARUS_FLIP_ALIVE = 583
____exports.SoundEffect[____exports.SoundEffect.LAZARUS_FLIP_ALIVE] = "LAZARUS_FLIP_ALIVE"
____exports.SoundEffect.RECALL_FINISH = 584
____exports.SoundEffect[____exports.SoundEffect.RECALL_FINISH] = "RECALL_FINISH"
____exports.SoundEffect.ROCKET_LAUNCH_SHORT = 585
____exports.SoundEffect[____exports.SoundEffect.ROCKET_LAUNCH_SHORT] = "ROCKET_LAUNCH_SHORT"
____exports.SoundEffect.ROCKET_LAUNCH_TINY = 586
____exports.SoundEffect[____exports.SoundEffect.ROCKET_LAUNCH_TINY] = "ROCKET_LAUNCH_TINY"
____exports.SoundEffect.ROCKET_EXPLOSION = 587
____exports.SoundEffect[____exports.SoundEffect.ROCKET_EXPLOSION] = "ROCKET_EXPLOSION"
____exports.SoundEffect.JELLY_BOUNCE = 588
____exports.SoundEffect[____exports.SoundEffect.JELLY_BOUNCE] = "JELLY_BOUNCE"
____exports.SoundEffect.POOP_LASER = 589
____exports.SoundEffect[____exports.SoundEffect.POOP_LASER] = "POOP_LASER"
____exports.SoundEffect.POISON_WARN = 590
____exports.SoundEffect[____exports.SoundEffect.POISON_WARN] = "POISON_WARN"
____exports.SoundEffect.POISON_HURT = 591
____exports.SoundEffect[____exports.SoundEffect.POISON_HURT] = "POISON_HURT"
____exports.SoundEffect.BERSERK_START = 592
____exports.SoundEffect[____exports.SoundEffect.BERSERK_START] = "BERSERK_START"
____exports.SoundEffect.BERSERK_TICK = 593
____exports.SoundEffect[____exports.SoundEffect.BERSERK_TICK] = "BERSERK_TICK"
____exports.SoundEffect.BERSERK_END = 594
____exports.SoundEffect[____exports.SoundEffect.BERSERK_END] = "BERSERK_END"
____exports.SoundEffect.EDEN_GLITCH = 595
____exports.SoundEffect[____exports.SoundEffect.EDEN_GLITCH] = "EDEN_GLITCH"
____exports.SoundEffect.RAILROAD_TRACK_RAISE = 596
____exports.SoundEffect[____exports.SoundEffect.RAILROAD_TRACK_RAISE] = "RAILROAD_TRACK_RAISE"
____exports.SoundEffect.RAILROAD_TRACK_RAISE_FAR = 597
____exports.SoundEffect[____exports.SoundEffect.RAILROAD_TRACK_RAISE_FAR] = "RAILROAD_TRACK_RAISE_FAR"
____exports.SoundEffect.MOM_AND_DAD_1 = 598
____exports.SoundEffect[____exports.SoundEffect.MOM_AND_DAD_1] = "MOM_AND_DAD_1"
____exports.SoundEffect.MOM_AND_DAD_2 = 599
____exports.SoundEffect[____exports.SoundEffect.MOM_AND_DAD_2] = "MOM_AND_DAD_2"
____exports.SoundEffect.MOM_AND_DAD_3 = 600
____exports.SoundEffect[____exports.SoundEffect.MOM_AND_DAD_3] = "MOM_AND_DAD_3"
____exports.SoundEffect.MOM_AND_DAD_4 = 601
____exports.SoundEffect[____exports.SoundEffect.MOM_AND_DAD_4] = "MOM_AND_DAD_4"
____exports.SoundEffect.THUMBS_UP_AMPLIFIED = 602
____exports.SoundEffect[____exports.SoundEffect.THUMBS_UP_AMPLIFIED] = "THUMBS_UP_AMPLIFIED"
____exports.SoundEffect.THUMBS_DOWN_AMPLIFIED = 603
____exports.SoundEffect[____exports.SoundEffect.THUMBS_DOWN_AMPLIFIED] = "THUMBS_DOWN_AMPLIFIED"
____exports.SoundEffect.POWER_UP_SPEWER_AMPLIFIED = 604
____exports.SoundEffect[____exports.SoundEffect.POWER_UP_SPEWER_AMPLIFIED] = "POWER_UP_SPEWER_AMPLIFIED"
____exports.SoundEffect.POOP_ITEM_THROW = 605
____exports.SoundEffect[____exports.SoundEffect.POOP_ITEM_THROW] = "POOP_ITEM_THROW"
____exports.SoundEffect.POOP_ITEM_STORE = 606
____exports.SoundEffect[____exports.SoundEffect.POOP_ITEM_STORE] = "POOP_ITEM_STORE"
____exports.SoundEffect.POOP_ITEM_HOLD = 607
____exports.SoundEffect[____exports.SoundEffect.POOP_ITEM_HOLD] = "POOP_ITEM_HOLD"
____exports.SoundEffect.MIRROR_ENTER = 608
____exports.SoundEffect[____exports.SoundEffect.MIRROR_ENTER] = "MIRROR_ENTER"
____exports.SoundEffect.MIRROR_EXIT = 609
____exports.SoundEffect[____exports.SoundEffect.MIRROR_EXIT] = "MIRROR_EXIT"
____exports.SoundEffect.MIRROR_BREAK = 610
____exports.SoundEffect[____exports.SoundEffect.MIRROR_BREAK] = "MIRROR_BREAK"
____exports.SoundEffect.ANIMA_TRAP = 611
____exports.SoundEffect[____exports.SoundEffect.ANIMA_TRAP] = "ANIMA_TRAP"
____exports.SoundEffect.ANIMA_RATTLE = 612
____exports.SoundEffect[____exports.SoundEffect.ANIMA_RATTLE] = "ANIMA_RATTLE"
____exports.SoundEffect.ANIMA_BREAK = 613
____exports.SoundEffect[____exports.SoundEffect.ANIMA_BREAK] = "ANIMA_BREAK"
____exports.SoundEffect.VAMP_DOUBLE = 614
____exports.SoundEffect[____exports.SoundEffect.VAMP_DOUBLE] = "VAMP_DOUBLE"
____exports.SoundEffect.FLASHBACK = 615
____exports.SoundEffect[____exports.SoundEffect.FLASHBACK] = "FLASHBACK"
____exports.SoundEffect.DARK_ESAU_OPEN = 616
____exports.SoundEffect[____exports.SoundEffect.DARK_ESAU_OPEN] = "DARK_ESAU_OPEN"
____exports.SoundEffect.DARK_ESAU_DEATH_OPEN = 617
____exports.SoundEffect[____exports.SoundEffect.DARK_ESAU_DEATH_OPEN] = "DARK_ESAU_DEATH_OPEN"
____exports.SoundEffect.MOTHER_DEATH_1 = 618
____exports.SoundEffect[____exports.SoundEffect.MOTHER_DEATH_1] = "MOTHER_DEATH_1"
____exports.SoundEffect.MOTHER_DEATH_2 = 619
____exports.SoundEffect[____exports.SoundEffect.MOTHER_DEATH_2] = "MOTHER_DEATH_2"
____exports.SoundEffect.MOTHER_FIST_POUND_1 = 620
____exports.SoundEffect[____exports.SoundEffect.MOTHER_FIST_POUND_1] = "MOTHER_FIST_POUND_1"
____exports.SoundEffect.MOTHER_FIST_POUND_2 = 621
____exports.SoundEffect[____exports.SoundEffect.MOTHER_FIST_POUND_2] = "MOTHER_FIST_POUND_2"
____exports.SoundEffect.MOTHER_FIST_POUND_3 = 622
____exports.SoundEffect[____exports.SoundEffect.MOTHER_FIST_POUND_3] = "MOTHER_FIST_POUND_3"
____exports.SoundEffect.MOTHER_FISTULA = 623
____exports.SoundEffect[____exports.SoundEffect.MOTHER_FISTULA] = "MOTHER_FISTULA"
____exports.SoundEffect.MOTHER_APPEAR_1 = 624
____exports.SoundEffect[____exports.SoundEffect.MOTHER_APPEAR_1] = "MOTHER_APPEAR_1"
____exports.SoundEffect.MOTHER_APPEAR_2 = 625
____exports.SoundEffect[____exports.SoundEffect.MOTHER_APPEAR_2] = "MOTHER_APPEAR_2"
____exports.SoundEffect.MOTHER_KNIFE_START = 626
____exports.SoundEffect[____exports.SoundEffect.MOTHER_KNIFE_START] = "MOTHER_KNIFE_START"
____exports.SoundEffect.MOTHER_KNIFE_THROW = 627
____exports.SoundEffect[____exports.SoundEffect.MOTHER_KNIFE_THROW] = "MOTHER_KNIFE_THROW"
____exports.SoundEffect.MOTHER_SUMMON_ISAACS_START = 628
____exports.SoundEffect[____exports.SoundEffect.MOTHER_SUMMON_ISAACS_START] = "MOTHER_SUMMON_ISAACS_START"
____exports.SoundEffect.MOTHER_SUMMON_ISAACS_END = 629
____exports.SoundEffect[____exports.SoundEffect.MOTHER_SUMMON_ISAACS_END] = "MOTHER_SUMMON_ISAACS_END"
____exports.SoundEffect.MOTHER_HAND_BOIL_START = 630
____exports.SoundEffect[____exports.SoundEffect.MOTHER_HAND_BOIL_START] = "MOTHER_HAND_BOIL_START"
____exports.SoundEffect.MOTHER_GRUNT_1 = 631
____exports.SoundEffect[____exports.SoundEffect.MOTHER_GRUNT_1] = "MOTHER_GRUNT_1"
____exports.SoundEffect.MOTHER_GRUNT_5 = 632
____exports.SoundEffect[____exports.SoundEffect.MOTHER_GRUNT_5] = "MOTHER_GRUNT_5"
____exports.SoundEffect.MOTHER_GRUNT_6 = 633
____exports.SoundEffect[____exports.SoundEffect.MOTHER_GRUNT_6] = "MOTHER_GRUNT_6"
____exports.SoundEffect.MOTHER_GRUNT_7 = 634
____exports.SoundEffect[____exports.SoundEffect.MOTHER_GRUNT_7] = "MOTHER_GRUNT_7"
____exports.SoundEffect.MOTHER_LAUGH = 635
____exports.SoundEffect[____exports.SoundEffect.MOTHER_LAUGH] = "MOTHER_LAUGH"
____exports.SoundEffect.MOTHER_SPIN_START = 636
____exports.SoundEffect[____exports.SoundEffect.MOTHER_SPIN_START] = "MOTHER_SPIN_START"
____exports.SoundEffect.MOTHER_WALL_SHOT_START = 637
____exports.SoundEffect[____exports.SoundEffect.MOTHER_WALL_SHOT_START] = "MOTHER_WALL_SHOT_START"
____exports.SoundEffect.MOTHER_MISC = 638
____exports.SoundEffect[____exports.SoundEffect.MOTHER_MISC] = "MOTHER_MISC"
____exports.SoundEffect.MOTHER_SHOOT = 639
____exports.SoundEffect[____exports.SoundEffect.MOTHER_SHOOT] = "MOTHER_SHOOT"
____exports.SoundEffect.MOTHER_SUCTION = 640
____exports.SoundEffect[____exports.SoundEffect.MOTHER_SUCTION] = "MOTHER_SUCTION"
____exports.SoundEffect.MOTHER_ISAAC_RISE = 641
____exports.SoundEffect[____exports.SoundEffect.MOTHER_ISAAC_RISE] = "MOTHER_ISAAC_RISE"
____exports.SoundEffect.MOTHER_ISAAC_HIT = 642
____exports.SoundEffect[____exports.SoundEffect.MOTHER_ISAAC_HIT] = "MOTHER_ISAAC_HIT"
____exports.SoundEffect.MOTHER_WRIST_SWELL = 643
____exports.SoundEffect[____exports.SoundEffect.MOTHER_WRIST_SWELL] = "MOTHER_WRIST_SWELL"
____exports.SoundEffect.MOTHER_WRIST_EXPLODE = 644
____exports.SoundEffect[____exports.SoundEffect.MOTHER_WRIST_EXPLODE] = "MOTHER_WRIST_EXPLODE"
____exports.SoundEffect.MOTHER_DEATH_MELT = 645
____exports.SoundEffect[____exports.SoundEffect.MOTHER_DEATH_MELT] = "MOTHER_DEATH_MELT"
____exports.SoundEffect.MOTHER_ANGER_SHAKE = 646
____exports.SoundEffect[____exports.SoundEffect.MOTHER_ANGER_SHAKE] = "MOTHER_ANGER_SHAKE"
____exports.SoundEffect.MOTHER_CHARGE_1 = 647
____exports.SoundEffect[____exports.SoundEffect.MOTHER_CHARGE_1] = "MOTHER_CHARGE_1"
____exports.SoundEffect.MOTHER_CHARGE_2 = 648
____exports.SoundEffect[____exports.SoundEffect.MOTHER_CHARGE_2] = "MOTHER_CHARGE_2"
____exports.SoundEffect.MOTHER_LAND_SMASH = 649
____exports.SoundEffect[____exports.SoundEffect.MOTHER_LAND_SMASH] = "MOTHER_LAND_SMASH"
____exports.SoundEffect.ISAAC_ROAR = 650
____exports.SoundEffect[____exports.SoundEffect.ISAAC_ROAR] = "ISAAC_ROAR"
____exports.SoundEffect.FAMINE_APPEAR = 651
____exports.SoundEffect[____exports.SoundEffect.FAMINE_APPEAR] = "FAMINE_APPEAR"
____exports.SoundEffect.FAMINE_DEATH_1 = 652
____exports.SoundEffect[____exports.SoundEffect.FAMINE_DEATH_1] = "FAMINE_DEATH_1"
____exports.SoundEffect.FAMINE_DEATH_2 = 653
____exports.SoundEffect[____exports.SoundEffect.FAMINE_DEATH_2] = "FAMINE_DEATH_2"
____exports.SoundEffect.FAMINE_DASH_START = 654
____exports.SoundEffect[____exports.SoundEffect.FAMINE_DASH_START] = "FAMINE_DASH_START"
____exports.SoundEffect.FAMINE_DASH = 655
____exports.SoundEffect[____exports.SoundEffect.FAMINE_DASH] = "FAMINE_DASH"
____exports.SoundEffect.FAMINE_SHOOT = 656
____exports.SoundEffect[____exports.SoundEffect.FAMINE_SHOOT] = "FAMINE_SHOOT"
____exports.SoundEffect.FAMINE_BURST = 657
____exports.SoundEffect[____exports.SoundEffect.FAMINE_BURST] = "FAMINE_BURST"
____exports.SoundEffect.FAMINE_GURGLE = 658
____exports.SoundEffect[____exports.SoundEffect.FAMINE_GURGLE] = "FAMINE_GURGLE"
____exports.SoundEffect.PESTILENCE_MAGGOT_START = 659
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_MAGGOT_START] = "PESTILENCE_MAGGOT_START"
____exports.SoundEffect.PESTILENCE_MAGGOT_SHOOT_1 = 660
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_MAGGOT_SHOOT_1] = "PESTILENCE_MAGGOT_SHOOT_1"
____exports.SoundEffect.PESTILENCE_MAGGOT_RETURN = 661
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_MAGGOT_RETURN] = "PESTILENCE_MAGGOT_RETURN"
____exports.SoundEffect.PESTILENCE_BODY_SHOOT = 662
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_BODY_SHOOT] = "PESTILENCE_BODY_SHOOT"
____exports.SoundEffect.PESTILENCE_HEAD_DEATH = 663
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_HEAD_DEATH] = "PESTILENCE_HEAD_DEATH"
____exports.SoundEffect.PESTILENCE_DEATH = 664
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_DEATH] = "PESTILENCE_DEATH"
____exports.SoundEffect.PESTILENCE_COUGH = 665
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_COUGH] = "PESTILENCE_COUGH"
____exports.SoundEffect.PESTILENCE_BARF = 666
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_BARF] = "PESTILENCE_BARF"
____exports.SoundEffect.PESTILENCE_APPEAR = 667
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_APPEAR] = "PESTILENCE_APPEAR"
____exports.SoundEffect.PESTILENCE_HEAD_EXPLODE = 668
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_HEAD_EXPLODE] = "PESTILENCE_HEAD_EXPLODE"
____exports.SoundEffect.PESTILENCE_MAGGOT_ENTER = 669
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_MAGGOT_ENTER] = "PESTILENCE_MAGGOT_ENTER"
____exports.SoundEffect.PESTILENCE_MAGGOT_POP_OUT = 670
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_MAGGOT_POP_OUT] = "PESTILENCE_MAGGOT_POP_OUT"
____exports.SoundEffect.PESTILENCE_MAGGOT_SHOOT_2 = 671
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_MAGGOT_SHOOT_2] = "PESTILENCE_MAGGOT_SHOOT_2"
____exports.SoundEffect.PESTILENCE_NECK_PUKE = 672
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_NECK_PUKE] = "PESTILENCE_NECK_PUKE"
____exports.SoundEffect.PESTILENCE_PUKE_START = 673
____exports.SoundEffect[____exports.SoundEffect.PESTILENCE_PUKE_START] = "PESTILENCE_PUKE_START"
____exports.SoundEffect.WAR_APPEAR = 674
____exports.SoundEffect[____exports.SoundEffect.WAR_APPEAR] = "WAR_APPEAR"
____exports.SoundEffect.WAR_APPEAR_LAVA = 675
____exports.SoundEffect[____exports.SoundEffect.WAR_APPEAR_LAVA] = "WAR_APPEAR_LAVA"
____exports.SoundEffect.WAR_BOMB_TOSS = 676
____exports.SoundEffect[____exports.SoundEffect.WAR_BOMB_TOSS] = "WAR_BOMB_TOSS"
____exports.SoundEffect.WAR_DASH_START = 677
____exports.SoundEffect[____exports.SoundEffect.WAR_DASH_START] = "WAR_DASH_START"
____exports.SoundEffect.WAR_DASH = 678
____exports.SoundEffect[____exports.SoundEffect.WAR_DASH] = "WAR_DASH"
____exports.SoundEffect.WAR_HORSE_DEATH = 679
____exports.SoundEffect[____exports.SoundEffect.WAR_HORSE_DEATH] = "WAR_HORSE_DEATH"
____exports.SoundEffect.WAR_DEATH = 680
____exports.SoundEffect[____exports.SoundEffect.WAR_DEATH] = "WAR_DEATH"
____exports.SoundEffect.WAR_FIRE_SCREAM = 681
____exports.SoundEffect[____exports.SoundEffect.WAR_FIRE_SCREAM] = "WAR_FIRE_SCREAM"
____exports.SoundEffect.WAR_GRAB_PLAYER = 682
____exports.SoundEffect[____exports.SoundEffect.WAR_GRAB_PLAYER] = "WAR_GRAB_PLAYER"
____exports.SoundEffect.WAR_BOMB_HOLD = 683
____exports.SoundEffect[____exports.SoundEffect.WAR_BOMB_HOLD] = "WAR_BOMB_HOLD"
____exports.SoundEffect.WAR_BOMB_PULL_OUT = 684
____exports.SoundEffect[____exports.SoundEffect.WAR_BOMB_PULL_OUT] = "WAR_BOMB_PULL_OUT"
____exports.SoundEffect.WAR_CHASE = 685
____exports.SoundEffect[____exports.SoundEffect.WAR_CHASE] = "WAR_CHASE"
____exports.SoundEffect.WAR_BOMB_TICK = 686
____exports.SoundEffect[____exports.SoundEffect.WAR_BOMB_TICK] = "WAR_BOMB_TICK"
____exports.SoundEffect.WAR_FLAME = 687
____exports.SoundEffect[____exports.SoundEffect.WAR_FLAME] = "WAR_FLAME"
____exports.SoundEffect.WAR_LAVA_SPLASH = 688
____exports.SoundEffect[____exports.SoundEffect.WAR_LAVA_SPLASH] = "WAR_LAVA_SPLASH"
____exports.SoundEffect.WAR_LAVA_DASH = 689
____exports.SoundEffect[____exports.SoundEffect.WAR_LAVA_DASH] = "WAR_LAVA_DASH"
____exports.SoundEffect.DEATH_DIES = 690
____exports.SoundEffect[____exports.SoundEffect.DEATH_DIES] = "DEATH_DIES"
____exports.SoundEffect.DEATH_DESTROY_SKULLS = 691
____exports.SoundEffect[____exports.SoundEffect.DEATH_DESTROY_SKULLS] = "DEATH_DESTROY_SKULLS"
____exports.SoundEffect.DEATH_GROWL = 692
____exports.SoundEffect[____exports.SoundEffect.DEATH_GROWL] = "DEATH_GROWL"
____exports.SoundEffect.DEATH_SWIPE_START = 693
____exports.SoundEffect[____exports.SoundEffect.DEATH_SWIPE_START] = "DEATH_SWIPE_START"
____exports.SoundEffect.DEATH_SWIPE = 694
____exports.SoundEffect[____exports.SoundEffect.DEATH_SWIPE] = "DEATH_SWIPE"
____exports.SoundEffect.DEATH_SUMMON_SCYTHES = 695
____exports.SoundEffect[____exports.SoundEffect.DEATH_SUMMON_SCYTHES] = "DEATH_SUMMON_SCYTHES"
____exports.SoundEffect.DEATH_SUMMON_SKULLS = 696
____exports.SoundEffect[____exports.SoundEffect.DEATH_SUMMON_SKULLS] = "DEATH_SUMMON_SKULLS"
____exports.SoundEffect.BEAST_DEATH = 697
____exports.SoundEffect[____exports.SoundEffect.BEAST_DEATH] = "BEAST_DEATH"
____exports.SoundEffect.BEAST_LASER = 698
____exports.SoundEffect[____exports.SoundEffect.BEAST_LASER] = "BEAST_LASER"
____exports.SoundEffect.BEAST_BACKGROUND_DIVE = 699
____exports.SoundEffect[____exports.SoundEffect.BEAST_BACKGROUND_DIVE] = "BEAST_BACKGROUND_DIVE"
____exports.SoundEffect.BEAST_FIRE_RING = 700
____exports.SoundEffect[____exports.SoundEffect.BEAST_FIRE_RING] = "BEAST_FIRE_RING"
____exports.SoundEffect.BEAST_GHOST_DASH = 701
____exports.SoundEffect[____exports.SoundEffect.BEAST_GHOST_DASH] = "BEAST_GHOST_DASH"
____exports.SoundEffect.BEAST_GHOST_RISE = 702
____exports.SoundEffect[____exports.SoundEffect.BEAST_GHOST_RISE] = "BEAST_GHOST_RISE"
____exports.SoundEffect.BEAST_LAVA_BALL_SPLASH = 703
____exports.SoundEffect[____exports.SoundEffect.BEAST_LAVA_BALL_SPLASH] = "BEAST_LAVA_BALL_SPLASH"
____exports.SoundEffect.BEAST_LAVA_RISE = 704
____exports.SoundEffect[____exports.SoundEffect.BEAST_LAVA_RISE] = "BEAST_LAVA_RISE"
____exports.SoundEffect.BEAST_SUCTION_LOOP = 705
____exports.SoundEffect[____exports.SoundEffect.BEAST_SUCTION_LOOP] = "BEAST_SUCTION_LOOP"
____exports.SoundEffect.BEAST_FIRE_BARF = 706
____exports.SoundEffect[____exports.SoundEffect.BEAST_FIRE_BARF] = "BEAST_FIRE_BARF"
____exports.SoundEffect.BEAST_GHOST_ROAR = 707
____exports.SoundEffect[____exports.SoundEffect.BEAST_GHOST_ROAR] = "BEAST_GHOST_ROAR"
____exports.SoundEffect.BEAST_INTRO_SCREAM = 708
____exports.SoundEffect[____exports.SoundEffect.BEAST_INTRO_SCREAM] = "BEAST_INTRO_SCREAM"
____exports.SoundEffect.BEAST_SUCTION_END = 709
____exports.SoundEffect[____exports.SoundEffect.BEAST_SUCTION_END] = "BEAST_SUCTION_END"
____exports.SoundEffect.BEAST_SUCTION_START = 710
____exports.SoundEffect[____exports.SoundEffect.BEAST_SUCTION_START] = "BEAST_SUCTION_START"
____exports.SoundEffect.BEAST_SPIT = 711
____exports.SoundEffect[____exports.SoundEffect.BEAST_SPIT] = "BEAST_SPIT"
____exports.SoundEffect.BEAST_SURFACE_GROWL = 712
____exports.SoundEffect[____exports.SoundEffect.BEAST_SURFACE_GROWL] = "BEAST_SURFACE_GROWL"
____exports.SoundEffect.BEAST_SWITCH_SIDES = 713
____exports.SoundEffect[____exports.SoundEffect.BEAST_SWITCH_SIDES] = "BEAST_SWITCH_SIDES"
____exports.SoundEffect.MOTHER_SHADOW_APPEAR = 714
____exports.SoundEffect[____exports.SoundEffect.MOTHER_SHADOW_APPEAR] = "MOTHER_SHADOW_APPEAR"
____exports.SoundEffect.MOTHER_SHADOW_CHARGE_UP = 715
____exports.SoundEffect[____exports.SoundEffect.MOTHER_SHADOW_CHARGE_UP] = "MOTHER_SHADOW_CHARGE_UP"
____exports.SoundEffect.MOTHER_SHADOW_DASH = 716
____exports.SoundEffect[____exports.SoundEffect.MOTHER_SHADOW_DASH] = "MOTHER_SHADOW_DASH"
____exports.SoundEffect.MOTHER_SHADOW_END = 717
____exports.SoundEffect[____exports.SoundEffect.MOTHER_SHADOW_END] = "MOTHER_SHADOW_END"
____exports.SoundEffect.MOTHER_SHADOW_INTRO = 718
____exports.SoundEffect[____exports.SoundEffect.MOTHER_SHADOW_INTRO] = "MOTHER_SHADOW_INTRO"
____exports.SoundEffect.BUMBINO_DEATH = 719
____exports.SoundEffect[____exports.SoundEffect.BUMBINO_DEATH] = "BUMBINO_DEATH"
____exports.SoundEffect.BUMBINO_DIZZY = 720
____exports.SoundEffect[____exports.SoundEffect.BUMBINO_DIZZY] = "BUMBINO_DIZZY"
____exports.SoundEffect.BUMBINO_HIT_WALL = 721
____exports.SoundEffect[____exports.SoundEffect.BUMBINO_HIT_WALL] = "BUMBINO_HIT_WALL"
____exports.SoundEffect.BUMBINO_MISC = 722
____exports.SoundEffect[____exports.SoundEffect.BUMBINO_MISC] = "BUMBINO_MISC"
____exports.SoundEffect.BUMBINO_PUNCH = 723
____exports.SoundEffect[____exports.SoundEffect.BUMBINO_PUNCH] = "BUMBINO_PUNCH"
____exports.SoundEffect.BUMBINO_RAM = 724
____exports.SoundEffect[____exports.SoundEffect.BUMBINO_RAM] = "BUMBINO_RAM"
____exports.SoundEffect.BUMBINO_SLAM = 725
____exports.SoundEffect[____exports.SoundEffect.BUMBINO_SLAM] = "BUMBINO_SLAM"
____exports.SoundEffect.BUMBINO_SNAP_OUT = 726
____exports.SoundEffect[____exports.SoundEffect.BUMBINO_SNAP_OUT] = "BUMBINO_SNAP_OUT"
____exports.SoundEffect.SIREN_SCREAM = 727
____exports.SoundEffect[____exports.SoundEffect.SIREN_SCREAM] = "SIREN_SCREAM"
____exports.SoundEffect.SIREN_SING = 728
____exports.SoundEffect[____exports.SoundEffect.SIREN_SING] = "SIREN_SING"
____exports.SoundEffect.DEATH_SKULL_SUMMON_LOOP = 729
____exports.SoundEffect[____exports.SoundEffect.DEATH_SKULL_SUMMON_LOOP] = "DEATH_SKULL_SUMMON_LOOP"
____exports.SoundEffect.DEATH_SKULL_SUMMON_END = 730
____exports.SoundEffect[____exports.SoundEffect.DEATH_SKULL_SUMMON_END] = "DEATH_SKULL_SUMMON_END"
____exports.SoundEffect.BEAST_DEATH_2 = 731
____exports.SoundEffect[____exports.SoundEffect.BEAST_DEATH_2] = "BEAST_DEATH_2"
____exports.SoundEffect.BEAST_ANGELIC_BLAST = 732
____exports.SoundEffect[____exports.SoundEffect.BEAST_ANGELIC_BLAST] = "BEAST_ANGELIC_BLAST"
____exports.SoundEffect.ANCIENT_RECALL = 733
____exports.SoundEffect[____exports.SoundEffect.ANCIENT_RECALL] = "ANCIENT_RECALL"
____exports.SoundEffect.ERA_WALK = 734
____exports.SoundEffect[____exports.SoundEffect.ERA_WALK] = "ERA_WALK"
____exports.SoundEffect.HUGE_GROWTH = 735
____exports.SoundEffect[____exports.SoundEffect.HUGE_GROWTH] = "HUGE_GROWTH"
____exports.SoundEffect.RUNE_SHARD = 736
____exports.SoundEffect[____exports.SoundEffect.RUNE_SHARD] = "RUNE_SHARD"
____exports.SoundEffect.SHOT_SPEED_DOWN = 737
____exports.SoundEffect[____exports.SoundEffect.SHOT_SPEED_DOWN] = "SHOT_SPEED_DOWN"
____exports.SoundEffect.SHOT_SPEED_UP = 738
____exports.SoundEffect[____exports.SoundEffect.SHOT_SPEED_UP] = "SHOT_SPEED_UP"
____exports.SoundEffect.EXPERIMENTAL_PILL = 739
____exports.SoundEffect[____exports.SoundEffect.EXPERIMENTAL_PILL] = "EXPERIMENTAL_PILL"
____exports.SoundEffect.CRACKED_KEY = 740
____exports.SoundEffect[____exports.SoundEffect.CRACKED_KEY] = "CRACKED_KEY"
____exports.SoundEffect.QUEEN_OF_HEARTS = 741
____exports.SoundEffect[____exports.SoundEffect.QUEEN_OF_HEARTS] = "QUEEN_OF_HEARTS"
____exports.SoundEffect.WILD_CARD = 742
____exports.SoundEffect[____exports.SoundEffect.WILD_CARD] = "WILD_CARD"
____exports.SoundEffect.SOUL_OF_ISAAC = 743
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_ISAAC] = "SOUL_OF_ISAAC"
____exports.SoundEffect.SOUL_OF_MAGDALENE = 744
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_MAGDALENE] = "SOUL_OF_MAGDALENE"
____exports.SoundEffect.SOUL_OF_CAIN = 745
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_CAIN] = "SOUL_OF_CAIN"
____exports.SoundEffect.SOUL_OF_JUDAS = 746
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_JUDAS] = "SOUL_OF_JUDAS"
____exports.SoundEffect.SOUL_OF_XXX = 747
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_XXX] = "SOUL_OF_XXX"
____exports.SoundEffect.SOUL_OF_EVE = 748
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_EVE] = "SOUL_OF_EVE"
____exports.SoundEffect.SOUL_OF_SAMSON = 749
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_SAMSON] = "SOUL_OF_SAMSON"
____exports.SoundEffect.SOUL_OF_AZAZEL = 750
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_AZAZEL] = "SOUL_OF_AZAZEL"
____exports.SoundEffect.SOUL_OF_LAZARUS = 751
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_LAZARUS] = "SOUL_OF_LAZARUS"
____exports.SoundEffect.SOUL_OF_EDEN = 752
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_EDEN] = "SOUL_OF_EDEN"
____exports.SoundEffect.SOUL_OF_THE_LOST = 753
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_THE_LOST] = "SOUL_OF_THE_LOST"
____exports.SoundEffect.SOUL_OF_LILITH = 754
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_LILITH] = "SOUL_OF_LILITH"
____exports.SoundEffect.SOUL_OF_THE_KEEPER = 755
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_THE_KEEPER] = "SOUL_OF_THE_KEEPER"
____exports.SoundEffect.SOUL_OF_APOLLYON = 756
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_APOLLYON] = "SOUL_OF_APOLLYON"
____exports.SoundEffect.SOUL_OF_THE_FORGOTTEN = 757
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_THE_FORGOTTEN] = "SOUL_OF_THE_FORGOTTEN"
____exports.SoundEffect.SOUL_OF_BETHANY = 758
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_BETHANY] = "SOUL_OF_BETHANY"
____exports.SoundEffect.SOUL_OF_JACOB_AND_ESAU = 759
____exports.SoundEffect[____exports.SoundEffect.SOUL_OF_JACOB_AND_ESAU] = "SOUL_OF_JACOB_AND_ESAU"
____exports.SoundEffect.MEGA_BAD_GAS = 760
____exports.SoundEffect[____exports.SoundEffect.MEGA_BAD_GAS] = "MEGA_BAD_GAS"
____exports.SoundEffect.MEGA_BAD_TRIP = 761
____exports.SoundEffect[____exports.SoundEffect.MEGA_BAD_TRIP] = "MEGA_BAD_TRIP"
____exports.SoundEffect.MEGA_BALLS_OF_STEEL = 762
____exports.SoundEffect[____exports.SoundEffect.MEGA_BALLS_OF_STEEL] = "MEGA_BALLS_OF_STEEL"
____exports.SoundEffect.MEGA_BOMBS_ARE_KEY = 763
____exports.SoundEffect[____exports.SoundEffect.MEGA_BOMBS_ARE_KEY] = "MEGA_BOMBS_ARE_KEY"
____exports.SoundEffect.MEGA_EXPLOSIVE_DIARRHEA = 764
____exports.SoundEffect[____exports.SoundEffect.MEGA_EXPLOSIVE_DIARRHEA] = "MEGA_EXPLOSIVE_DIARRHEA"
____exports.SoundEffect.MEGA_FULL_HEALTH = 765
____exports.SoundEffect[____exports.SoundEffect.MEGA_FULL_HEALTH] = "MEGA_FULL_HEALTH"
____exports.SoundEffect.MEGA_HEALTH_UP = 766
____exports.SoundEffect[____exports.SoundEffect.MEGA_HEALTH_UP] = "MEGA_HEALTH_UP"
____exports.SoundEffect.MEGA_HEALTH_DOWN = 767
____exports.SoundEffect[____exports.SoundEffect.MEGA_HEALTH_DOWN] = "MEGA_HEALTH_DOWN"
____exports.SoundEffect.MEGA_I_FOUND_PILLS = 768
____exports.SoundEffect[____exports.SoundEffect.MEGA_I_FOUND_PILLS] = "MEGA_I_FOUND_PILLS"
____exports.SoundEffect.MEGA_PUBERTY = 769
____exports.SoundEffect[____exports.SoundEffect.MEGA_PUBERTY] = "MEGA_PUBERTY"
____exports.SoundEffect.MEGA_PRETTY_FLY = 770
____exports.SoundEffect[____exports.SoundEffect.MEGA_PRETTY_FLY] = "MEGA_PRETTY_FLY"
____exports.SoundEffect.MEGA_RANGE_DOWN = 771
____exports.SoundEffect[____exports.SoundEffect.MEGA_RANGE_DOWN] = "MEGA_RANGE_DOWN"
____exports.SoundEffect.MEGA_RANGE_UP = 772
____exports.SoundEffect[____exports.SoundEffect.MEGA_RANGE_UP] = "MEGA_RANGE_UP"
____exports.SoundEffect.MEGA_SPEED_DOWN = 773
____exports.SoundEffect[____exports.SoundEffect.MEGA_SPEED_DOWN] = "MEGA_SPEED_DOWN"
____exports.SoundEffect.MEGA_SPEED_UP = 774
____exports.SoundEffect[____exports.SoundEffect.MEGA_SPEED_UP] = "MEGA_SPEED_UP"
____exports.SoundEffect.MEGA_TEARS_DOWN = 775
____exports.SoundEffect[____exports.SoundEffect.MEGA_TEARS_DOWN] = "MEGA_TEARS_DOWN"
____exports.SoundEffect.MEGA_TEARS_UP = 776
____exports.SoundEffect[____exports.SoundEffect.MEGA_TEARS_UP] = "MEGA_TEARS_UP"
____exports.SoundEffect.MEGA_LUCK_DOWN = 777
____exports.SoundEffect[____exports.SoundEffect.MEGA_LUCK_DOWN] = "MEGA_LUCK_DOWN"
____exports.SoundEffect.MEGA_LUCK_UP = 778
____exports.SoundEffect[____exports.SoundEffect.MEGA_LUCK_UP] = "MEGA_LUCK_UP"
____exports.SoundEffect.MEGA_TELEPILLS = 779
____exports.SoundEffect[____exports.SoundEffect.MEGA_TELEPILLS] = "MEGA_TELEPILLS"
____exports.SoundEffect.MEGA_FORTY_EIGHT_HOUR_ENERGY = 780
____exports.SoundEffect[____exports.SoundEffect.MEGA_FORTY_EIGHT_HOUR_ENERGY] = "MEGA_FORTY_EIGHT_HOUR_ENERGY"
____exports.SoundEffect.MEGA_HEMATEMESIS = 781
____exports.SoundEffect[____exports.SoundEffect.MEGA_HEMATEMESIS] = "MEGA_HEMATEMESIS"
____exports.SoundEffect.MEGA_PARALYSIS = 782
____exports.SoundEffect[____exports.SoundEffect.MEGA_PARALYSIS] = "MEGA_PARALYSIS"
____exports.SoundEffect.MEGA_I_CAN_SEE_FOREVER = 783
____exports.SoundEffect[____exports.SoundEffect.MEGA_I_CAN_SEE_FOREVER] = "MEGA_I_CAN_SEE_FOREVER"
____exports.SoundEffect.MEGA_PHEROMONES = 784
____exports.SoundEffect[____exports.SoundEffect.MEGA_PHEROMONES] = "MEGA_PHEROMONES"
____exports.SoundEffect.MEGA_AMNESIA = 785
____exports.SoundEffect[____exports.SoundEffect.MEGA_AMNESIA] = "MEGA_AMNESIA"
____exports.SoundEffect.MEGA_LEMON_PARTY = 786
____exports.SoundEffect[____exports.SoundEffect.MEGA_LEMON_PARTY] = "MEGA_LEMON_PARTY"
____exports.SoundEffect.MEGA_R_U_A_WIZARD = 787
____exports.SoundEffect[____exports.SoundEffect.MEGA_R_U_A_WIZARD] = "MEGA_R_U_A_WIZARD"
____exports.SoundEffect.MEGA_PERCS = 788
____exports.SoundEffect[____exports.SoundEffect.MEGA_PERCS] = "MEGA_PERCS"
____exports.SoundEffect.MEGA_ADDICTED = 789
____exports.SoundEffect[____exports.SoundEffect.MEGA_ADDICTED] = "MEGA_ADDICTED"
____exports.SoundEffect.MEGA_RELAX = 790
____exports.SoundEffect[____exports.SoundEffect.MEGA_RELAX] = "MEGA_RELAX"
____exports.SoundEffect.MEGA_QUESTION_MARKS = 791
____exports.SoundEffect[____exports.SoundEffect.MEGA_QUESTION_MARKS] = "MEGA_QUESTION_MARKS"
____exports.SoundEffect.MEGA_ONE_MAKES_YOU_LARGER = 792
____exports.SoundEffect[____exports.SoundEffect.MEGA_ONE_MAKES_YOU_LARGER] = "MEGA_ONE_MAKES_YOU_LARGER"
____exports.SoundEffect.MEGA_ONE_MAKES_YOU_SMALL = 793
____exports.SoundEffect[____exports.SoundEffect.MEGA_ONE_MAKES_YOU_SMALL] = "MEGA_ONE_MAKES_YOU_SMALL"
____exports.SoundEffect.MEGA_INFESTED = 794
____exports.SoundEffect[____exports.SoundEffect.MEGA_INFESTED] = "MEGA_INFESTED"
____exports.SoundEffect.MEGA_INFESTED_1 = 795
____exports.SoundEffect[____exports.SoundEffect.MEGA_INFESTED_1] = "MEGA_INFESTED_1"
____exports.SoundEffect.MEGA_POWER_PILL = 796
____exports.SoundEffect[____exports.SoundEffect.MEGA_POWER_PILL] = "MEGA_POWER_PILL"
____exports.SoundEffect.MEGA_RETRO_VISION = 797
____exports.SoundEffect[____exports.SoundEffect.MEGA_RETRO_VISION] = "MEGA_RETRO_VISION"
____exports.SoundEffect.MEGA_FRIENDS_TIL_THE_END = 798
____exports.SoundEffect[____exports.SoundEffect.MEGA_FRIENDS_TIL_THE_END] = "MEGA_FRIENDS_TIL_THE_END"
____exports.SoundEffect.MEGA_X_LAX = 799
____exports.SoundEffect[____exports.SoundEffect.MEGA_X_LAX] = "MEGA_X_LAX"
____exports.SoundEffect.MEGA_SOMETHINGS_WRONG = 800
____exports.SoundEffect[____exports.SoundEffect.MEGA_SOMETHINGS_WRONG] = "MEGA_SOMETHINGS_WRONG"
____exports.SoundEffect.MEGA_IM_DROWSY = 801
____exports.SoundEffect[____exports.SoundEffect.MEGA_IM_DROWSY] = "MEGA_IM_DROWSY"
____exports.SoundEffect.MEGA_IM_EXCITED = 802
____exports.SoundEffect[____exports.SoundEffect.MEGA_IM_EXCITED] = "MEGA_IM_EXCITED"
____exports.SoundEffect.MEGA_GULP = 803
____exports.SoundEffect[____exports.SoundEffect.MEGA_GULP] = "MEGA_GULP"
____exports.SoundEffect.MEGA_HORF = 804
____exports.SoundEffect[____exports.SoundEffect.MEGA_HORF] = "MEGA_HORF"
____exports.SoundEffect.MEGA_SUNSHINE = 805
____exports.SoundEffect[____exports.SoundEffect.MEGA_SUNSHINE] = "MEGA_SUNSHINE"
____exports.SoundEffect.MEGA_VURP = 806
____exports.SoundEffect[____exports.SoundEffect.MEGA_VURP] = "MEGA_VURP"
____exports.SoundEffect.MEGA_SHOT_SPEED_DOWN = 807
____exports.SoundEffect[____exports.SoundEffect.MEGA_SHOT_SPEED_DOWN] = "MEGA_SHOT_SPEED_DOWN"
____exports.SoundEffect.MEGA_SHOT_SPEED_UP = 808
____exports.SoundEffect[____exports.SoundEffect.MEGA_SHOT_SPEED_UP] = "MEGA_SHOT_SPEED_UP"
____exports.SoundEffect.MEGA_EXPERIMENTAL_PILL = 809
____exports.SoundEffect[____exports.SoundEffect.MEGA_EXPERIMENTAL_PILL] = "MEGA_EXPERIMENTAL_PILL"
____exports.SoundEffect.SIREN_LUNGE = 810
____exports.SoundEffect[____exports.SoundEffect.SIREN_LUNGE] = "SIREN_LUNGE"
____exports.SoundEffect.SIREN_MINION_SMOKE = 811
____exports.SoundEffect[____exports.SoundEffect.SIREN_MINION_SMOKE] = "SIREN_MINION_SMOKE"
____exports.SoundEffect.SIREN_SCREAM_ATTACK = 812
____exports.SoundEffect[____exports.SoundEffect.SIREN_SCREAM_ATTACK] = "SIREN_SCREAM_ATTACK"
____exports.SoundEffect.SIREN_SING_STAB = 813
____exports.SoundEffect[____exports.SoundEffect.SIREN_SING_STAB] = "SIREN_SING_STAB"
____exports.SoundEffect.BEAST_LAVA_BALL_RISE = 814
____exports.SoundEffect[____exports.SoundEffect.BEAST_LAVA_BALL_RISE] = "BEAST_LAVA_BALL_RISE"
____exports.SoundEffect.BEAST_GROWL = 815
____exports.SoundEffect[____exports.SoundEffect.BEAST_GROWL] = "BEAST_GROWL"
____exports.SoundEffect.BEAST_GRUMBLE = 816
____exports.SoundEffect[____exports.SoundEffect.BEAST_GRUMBLE] = "BEAST_GRUMBLE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.StageID"] = function(...) 
local ____exports = {}
--- This matches the filename used in the XML/STB file for the room.
____exports.StageID = {}
____exports.StageID.SPECIAL_ROOMS = 0
____exports.StageID[____exports.StageID.SPECIAL_ROOMS] = "SPECIAL_ROOMS"
____exports.StageID.BASEMENT = 1
____exports.StageID[____exports.StageID.BASEMENT] = "BASEMENT"
____exports.StageID.CELLAR = 2
____exports.StageID[____exports.StageID.CELLAR] = "CELLAR"
____exports.StageID.BURNING_BASEMENT = 3
____exports.StageID[____exports.StageID.BURNING_BASEMENT] = "BURNING_BASEMENT"
____exports.StageID.CAVES = 4
____exports.StageID[____exports.StageID.CAVES] = "CAVES"
____exports.StageID.CATACOMBS = 5
____exports.StageID[____exports.StageID.CATACOMBS] = "CATACOMBS"
____exports.StageID.FLOODED_CAVES = 6
____exports.StageID[____exports.StageID.FLOODED_CAVES] = "FLOODED_CAVES"
____exports.StageID.DEPTHS = 7
____exports.StageID[____exports.StageID.DEPTHS] = "DEPTHS"
____exports.StageID.NECROPOLIS = 8
____exports.StageID[____exports.StageID.NECROPOLIS] = "NECROPOLIS"
____exports.StageID.DANK_DEPTHS = 9
____exports.StageID[____exports.StageID.DANK_DEPTHS] = "DANK_DEPTHS"
____exports.StageID.WOMB = 10
____exports.StageID[____exports.StageID.WOMB] = "WOMB"
____exports.StageID.UTERO = 11
____exports.StageID[____exports.StageID.UTERO] = "UTERO"
____exports.StageID.SCARRED_WOMB = 12
____exports.StageID[____exports.StageID.SCARRED_WOMB] = "SCARRED_WOMB"
____exports.StageID.BLUE_WOMB = 13
____exports.StageID[____exports.StageID.BLUE_WOMB] = "BLUE_WOMB"
____exports.StageID.SHEOL = 14
____exports.StageID[____exports.StageID.SHEOL] = "SHEOL"
____exports.StageID.CATHEDRAL = 15
____exports.StageID[____exports.StageID.CATHEDRAL] = "CATHEDRAL"
____exports.StageID.DARK_ROOM = 16
____exports.StageID[____exports.StageID.DARK_ROOM] = "DARK_ROOM"
____exports.StageID.CHEST = 17
____exports.StageID[____exports.StageID.CHEST] = "CHEST"
____exports.StageID.VOID = 26
____exports.StageID[____exports.StageID.VOID] = "VOID"
____exports.StageID.DOWNPOUR = 27
____exports.StageID[____exports.StageID.DOWNPOUR] = "DOWNPOUR"
____exports.StageID.DROSS = 28
____exports.StageID[____exports.StageID.DROSS] = "DROSS"
____exports.StageID.MINES = 29
____exports.StageID[____exports.StageID.MINES] = "MINES"
____exports.StageID.ASHPIT = 30
____exports.StageID[____exports.StageID.ASHPIT] = "ASHPIT"
____exports.StageID.MAUSOLEUM = 31
____exports.StageID[____exports.StageID.MAUSOLEUM] = "MAUSOLEUM"
____exports.StageID.GEHENNA = 32
____exports.StageID[____exports.StageID.GEHENNA] = "GEHENNA"
____exports.StageID.CORPSE = 33
____exports.StageID[____exports.StageID.CORPSE] = "CORPSE"
____exports.StageID.MORTIS = 34
____exports.StageID[____exports.StageID.MORTIS] = "MORTIS"
____exports.StageID.HOME = 35
____exports.StageID[____exports.StageID.HOME] = "HOME"
____exports.StageID.BACKWARDS = 36
____exports.StageID[____exports.StageID.BACKWARDS] = "BACKWARDS"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.StageTransition"] = function(...) 
local ____exports = {}
____exports.StageTransition = {}
____exports.StageTransition.DISAPPEAR = 0
____exports.StageTransition[____exports.StageTransition.DISAPPEAR] = "DISAPPEAR"
____exports.StageTransition.NONE = 1
____exports.StageTransition[____exports.StageTransition.NONE] = "NONE"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.StageType"] = function(...) 
local ____exports = {}
____exports.StageType = {}
____exports.StageType.ORIGINAL = 0
____exports.StageType[____exports.StageType.ORIGINAL] = "ORIGINAL"
____exports.StageType.WRATH_OF_THE_LAMB = 1
____exports.StageType[____exports.StageType.WRATH_OF_THE_LAMB] = "WRATH_OF_THE_LAMB"
____exports.StageType.AFTERBIRTH = 2
____exports.StageType[____exports.StageType.AFTERBIRTH] = "AFTERBIRTH"
____exports.StageType.GREED_MODE = 3
____exports.StageType[____exports.StageType.GREED_MODE] = "GREED_MODE"
____exports.StageType.REPENTANCE = 4
____exports.StageType[____exports.StageType.REPENTANCE] = "REPENTANCE"
____exports.StageType.REPENTANCE_B = 5
____exports.StageType[____exports.StageType.REPENTANCE_B] = "REPENTANCE_B"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.TrinketSlot"] = function(...) 
local ____exports = {}
____exports.TrinketSlot = {}
____exports.TrinketSlot.SLOT_1 = 0
____exports.TrinketSlot[____exports.TrinketSlot.SLOT_1] = "SLOT_1"
____exports.TrinketSlot.SLOT_2 = 1
____exports.TrinketSlot[____exports.TrinketSlot.SLOT_2] = "SLOT_2"
return ____exports
 end,
["lua_modules.isaac-typescript-definitions.enums.WeaponType"] = function(...) 
local ____exports = {}
____exports.WeaponType = {}
____exports.WeaponType.TEARS = 1
____exports.WeaponType[____exports.WeaponType.TEARS] = "TEARS"
____exports.WeaponType.BRIMSTONE = 2
____exports.WeaponType[____exports.WeaponType.BRIMSTONE] = "BRIMSTONE"
____exports.WeaponType.LASER = 3
____exports.WeaponType[____exports.WeaponType.LASER] = "LASER"
____exports.WeaponType.KNIFE = 4
____exports.WeaponType[____exports.WeaponType.KNIFE] = "KNIFE"
____exports.WeaponType.BOMBS = 5
____exports.WeaponType[____exports.WeaponType.BOMBS] = "BOMBS"
____exports.WeaponType.ROCKETS = 6
____exports.WeaponType[____exports.WeaponType.ROCKETS] = "ROCKETS"
____exports.WeaponType.MONSTROS_LUNG = 7
____exports.WeaponType[____exports.WeaponType.MONSTROS_LUNG] = "MONSTROS_LUNG"
____exports.WeaponType.LUDOVICO_TECHNIQUE = 8
____exports.WeaponType[____exports.WeaponType.LUDOVICO_TECHNIQUE] = "LUDOVICO_TECHNIQUE"
____exports.WeaponType.TECH_X = 9
____exports.WeaponType[____exports.WeaponType.TECH_X] = "TECH_X"
____exports.WeaponType.BONE = 10
____exports.WeaponType[____exports.WeaponType.BONE] = "BONE"
____exports.WeaponType.NOTCHED_AXE = 11
____exports.WeaponType[____exports.WeaponType.NOTCHED_AXE] = "NOTCHED_AXE"
____exports.WeaponType.URN_OF_SOULS = 12
____exports.WeaponType[____exports.WeaponType.URN_OF_SOULS] = "URN_OF_SOULS"
____exports.WeaponType.SPIRIT_SWORD = 13
____exports.WeaponType[____exports.WeaponType.SPIRIT_SWORD] = "SPIRIT_SWORD"
____exports.WeaponType.FETUS = 14
____exports.WeaponType[____exports.WeaponType.FETUS] = "FETUS"
____exports.WeaponType.UMBILICAL_WHIP = 15
____exports.WeaponType[____exports.WeaponType.UMBILICAL_WHIP] = "UMBILICAL_WHIP"
return ____exports
 end,
["lua_modules.isaacscript-common.index"] = function(...) 
local ____exports = {}
do
    local ____export = require("lua_modules.isaacscript-common.cachedClasses")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____postCustomDoorEnter = require("lua_modules.isaacscript-common.callbacks.postCustomDoorEnter")
    local initCustomDoor = ____postCustomDoorEnter.initCustomDoor
    local spawnCustomDoor = ____postCustomDoorEnter.spawnCustomDoor
    ____exports.initCustomDoor = initCustomDoor
    ____exports.spawnCustomDoor = spawnCustomDoor
end
do
    local ____reorderedCallbacks = require("lua_modules.isaacscript-common.callbacks.reorderedCallbacks")
    local forceNewLevelCallback = ____reorderedCallbacks.forceNewLevelCallback
    local forceNewRoomCallback = ____reorderedCallbacks.forceNewRoomCallback
    ____exports.forceNewLevelCallback = forceNewLevelCallback
    ____exports.forceNewRoomCallback = forceNewRoomCallback
end
do
    local ____export = require("lua_modules.isaacscript-common.classes.DefaultMap")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.classes.ModUpgraded")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.constants")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.constantsFirstLast")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.enums.HealthType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.enums.PocketItemType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.enums.SerializationType")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____characterHealthConversion = require("lua_modules.isaacscript-common.features.characterHealthConversion")
    local registerCharacterHealthConversion = ____characterHealthConversion.registerCharacterHealthConversion
    ____exports.registerCharacterHealthConversion = registerCharacterHealthConversion
end
do
    local ____characterStats = require("lua_modules.isaacscript-common.features.characterStats")
    local registerCharacterStats = ____characterStats.registerCharacterStats
    ____exports.registerCharacterStats = registerCharacterStats
end
do
    local ____collectibleItemPoolType = require("lua_modules.isaacscript-common.features.collectibleItemPoolType")
    local getCollectibleItemPoolType = ____collectibleItemPoolType.getCollectibleItemPoolType
    ____exports.getCollectibleItemPoolType = getCollectibleItemPoolType
end
do
    local ____export = require("lua_modules.isaacscript-common.features.debugDisplay.exports")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____deployJSONRoom = require("lua_modules.isaacscript-common.features.deployJSONRoom")
    local deployJSONRoom = ____deployJSONRoom.deployJSONRoom
    local deployRandomJSONRoom = ____deployJSONRoom.deployRandomJSONRoom
    local emptyRoom = ____deployJSONRoom.emptyRoom
    ____exports.deployJSONRoom = deployJSONRoom
    ____exports.deployRandomJSONRoom = deployRandomJSONRoom
    ____exports.emptyRoom = emptyRoom
end
do
    local ____disableAllSound = require("lua_modules.isaacscript-common.features.disableAllSound")
    local disableAllSound = ____disableAllSound.disableAllSound
    local enableAllSound = ____disableAllSound.enableAllSound
    ____exports.disableAllSound = disableAllSound
    ____exports.enableAllSound = enableAllSound
end
do
    local ____disableInputs = require("lua_modules.isaacscript-common.features.disableInputs")
    local disableAllInputs = ____disableInputs.disableAllInputs
    local disableAllInputsExceptFor = ____disableInputs.disableAllInputsExceptFor
    local disableMovementInputs = ____disableInputs.disableMovementInputs
    local disableShootingInputs = ____disableInputs.disableShootingInputs
    local enableAllInputs = ____disableInputs.enableAllInputs
    local enableAllInputsExceptFor = ____disableInputs.enableAllInputsExceptFor
    ____exports.disableAllInputs = disableAllInputs
    ____exports.disableAllInputsExceptFor = disableAllInputsExceptFor
    ____exports.disableMovementInputs = disableMovementInputs
    ____exports.disableShootingInputs = disableShootingInputs
    ____exports.enableAllInputs = enableAllInputs
    ____exports.enableAllInputsExceptFor = enableAllInputsExceptFor
end
do
    local ____export = require("lua_modules.isaacscript-common.features.extraConsoleCommands.exports")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____fadeInRemover = require("lua_modules.isaacscript-common.features.fadeInRemover")
    local removeFadeIn = ____fadeInRemover.removeFadeIn
    local restoreFadeIn = ____fadeInRemover.restoreFadeIn
    ____exports.removeFadeIn = removeFadeIn
    ____exports.restoreFadeIn = restoreFadeIn
end
do
    local ____fastReset = require("lua_modules.isaacscript-common.features.fastReset")
    local disableFastReset = ____fastReset.disableFastReset
    local enableFastReset = ____fastReset.enableFastReset
    ____exports.disableFastReset = disableFastReset
    ____exports.enableFastReset = enableFastReset
end
do
    local ____forgottenSwitch = require("lua_modules.isaacscript-common.features.forgottenSwitch")
    local forgottenSwitch = ____forgottenSwitch.forgottenSwitch
    ____exports.forgottenSwitch = forgottenSwitch
end
do
    local ____persistentEntities = require("lua_modules.isaacscript-common.features.persistentEntities")
    local removePersistentEntity = ____persistentEntities.removePersistentEntity
    local spawnPersistentEntity = ____persistentEntities.spawnPersistentEntity
    ____exports.removePersistentEntity = removePersistentEntity
    ____exports.spawnPersistentEntity = spawnPersistentEntity
end
do
    local ____playerInventory = require("lua_modules.isaacscript-common.features.playerInventory")
    local getPlayerInventory = ____playerInventory.getPlayerInventory
    ____exports.getPlayerInventory = getPlayerInventory
end
do
    local ____ponyDetection = require("lua_modules.isaacscript-common.features.ponyDetection")
    local anyPlayerUsingPony = ____ponyDetection.anyPlayerUsingPony
    local isPlayerUsingPony = ____ponyDetection.isPlayerUsingPony
    ____exports.anyPlayerUsingPony = anyPlayerUsingPony
    ____exports.isPlayerUsingPony = isPlayerUsingPony
end
do
    local ____preventCollectibleRotation = require("lua_modules.isaacscript-common.features.preventCollectibleRotation")
    local preventCollectibleRotation = ____preventCollectibleRotation.preventCollectibleRotation
    ____exports.preventCollectibleRotation = preventCollectibleRotation
end
do
    local ____registerHotkey = require("lua_modules.isaacscript-common.features.registerHotkey")
    local registerHotkey = ____registerHotkey.registerHotkey
    local unregisterHotkey = ____registerHotkey.unregisterHotkey
    ____exports.registerHotkey = registerHotkey
    ____exports.unregisterHotkey = unregisterHotkey
end
do
    local ____roomClearFrame = require("lua_modules.isaacscript-common.features.roomClearFrame")
    local getRoomClearGameFrame = ____roomClearFrame.getRoomClearGameFrame
    local getRoomClearRoomFrame = ____roomClearFrame.getRoomClearRoomFrame
    ____exports.getRoomClearGameFrame = getRoomClearGameFrame
    ____exports.getRoomClearRoomFrame = getRoomClearRoomFrame
end
do
    local ____runInNFrames = require("lua_modules.isaacscript-common.features.runInNFrames")
    local runInNGameFrames = ____runInNFrames.runInNGameFrames
    local runInNRenderFrames = ____runInNFrames.runInNRenderFrames
    local runNextGameFrame = ____runInNFrames.runNextGameFrame
    local runNextRenderFrame = ____runInNFrames.runNextRenderFrame
    local setIntervalGameFrames = ____runInNFrames.setIntervalGameFrames
    local setIntervalRenderFrames = ____runInNFrames.setIntervalRenderFrames
    ____exports.runInNGameFrames = runInNGameFrames
    ____exports.runInNRenderFrames = runInNRenderFrames
    ____exports.runNextGameFrame = runNextGameFrame
    ____exports.runNextRenderFrame = runNextRenderFrame
    ____exports.setIntervalGameFrames = setIntervalGameFrames
    ____exports.setIntervalRenderFrames = setIntervalRenderFrames
end
do
    local ____export = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____sirenHelpers = require("lua_modules.isaacscript-common.features.sirenHelpers")
    local hasSirenStolenFamiliar = ____sirenHelpers.hasSirenStolenFamiliar
    local setFamiliarNoSirenSteal = ____sirenHelpers.setFamiliarNoSirenSteal
    ____exports.hasSirenStolenFamiliar = hasSirenStolenFamiliar
    ____exports.setFamiliarNoSirenSteal = setFamiliarNoSirenSteal
end
do
    local ____stageHistory = require("lua_modules.isaacscript-common.features.stageHistory")
    local getStageHistory = ____stageHistory.getStageHistory
    local hasVisitedStage = ____stageHistory.hasVisitedStage
    ____exports.getStageHistory = getStageHistory
    ____exports.hasVisitedStage = hasVisitedStage
end
do
    local ____taintedLazarusPlayers = require("lua_modules.isaacscript-common.features.taintedLazarusPlayers")
    local getTaintedLazarusSubPlayer = ____taintedLazarusPlayers.getTaintedLazarusSubPlayer
    ____exports.getTaintedLazarusSubPlayer = getTaintedLazarusSubPlayer
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.ambush")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.array")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.benchmark")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.bitwise")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.bombs")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.boss")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.cacheFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.cards")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.challenges")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.character")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.charge")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.chargeBar")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.collectibleCacheFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.collectibles")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.collectibleSet")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.collectibleTag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.color")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.debug")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.deepCopy")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.deepCopyTests")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.direction")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.doors")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.easing")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.eden")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.effects")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.entity")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.entitySpecific")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.entityTypes")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.enums")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.familiars")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.flag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.flying")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.globals")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.gridEntity")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.input")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.isaacAPIClass")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.jsonHelpers")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.jsonRoom")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.kColor")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.language")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.level")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.log")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.map")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.math")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.mergeTests")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.minimap")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.nextStage")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.npc")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.pickups")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.pickupVariants")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.pills")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.player")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.playerDataStructures")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.playerHealth")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.playerIndex")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.pocketItems")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.positionVelocity")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.random")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.revive")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.rng")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.roomData")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.roomGrid")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.rooms")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.roomShape")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.run")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.saveFile")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.seeds")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.serialization")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.set")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.sound")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.spawnCollectible")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.sprite")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.stage")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.string")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.table")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.tears")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.transformations")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.trinketCacheFlag")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.trinketGive")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.trinkets")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.tstlClass")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.types")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.ui")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.utils")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.functions.vector")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.maps.cardMap")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.maps.characterMap")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.maps.pillEffectMap")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.maps.roomTypeMap")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.objects.colors")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.types.PickingUpItem")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
do
    local ____export = require("lua_modules.isaacscript-common.upgradeMod")
    for ____exportKey, ____exportValue in pairs(____export) do
        if ____exportKey ~= "default" then
            ____exports[____exportKey] = ____exportValue
        end
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.cachedClasses"] = function(...) 
local ____exports = {}
--- A cached version of the class returned from the `Game()` constructor.
-- 
-- Use this instead of invoking the constructor again for a miniscule performance increase.
-- 
-- Caching the results of this constructor is safe, but caching other classes (like `Level` or
-- `Room`) is not safe and can lead to the game crashing in certain situations.
____exports.game = Game()
--- A cached version of the class returned from the `Isaac.GetItemConfig()` constructor.
-- 
-- Use this instead of invoking the constructor again for a miniscule performance increase.
-- 
-- Caching the results of this constructor is safe, but caching other classes (like `Level` or
-- `Room`) is not safe and can lead to the game crashing in certain situations.
____exports.itemConfig = Isaac.GetItemConfig()
--- A cached version of the class returned from the `MusicManager()` constructor.
-- 
-- Use this instead of invoking the constructor again for a miniscule performance increase.
-- 
-- Caching the results of this constructor is safe, but caching other classes (like `Level` or
-- `Room`) is not safe and can lead to the game crashing in certain situations.
____exports.musicManager = MusicManager()
--- A cached version of the class returned from the `SFXManager()` constructor.
-- 
-- Use this instead of invoking the constructor again for a miniscule performance increase.
-- 
-- Caching the results of this constructor is safe, but caching other classes (like `Level` or
-- `Room`) is not safe and can lead to the game crashing in certain situations.
____exports.sfxManager = SFXManager()
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postCustomDoorEnter"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local Map = ____lualib.Map
local ____exports = {}
local hasSubscriptions, postEffectUpdaterCustomEntity, doorChangedState, getAnimationForCustomDoor, postEffectRenderCustomEntity, isPlayerPastDoorThreshold, postRoomClearChanged, getPositionOffset, POSITION_OFFSET_MULTIPLIER, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
local DoorState = ____isaac_2Dtypescript_2Ddefinitions.DoorState
local GridCollisionClass = ____isaac_2Dtypescript_2Ddefinitions.GridCollisionClass
local GridEntityType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____direction = require("lua_modules.isaacscript-common.functions.direction")
local directionToVector = ____direction.directionToVector
local ____doors = require("lua_modules.isaacscript-common.functions.doors")
local doorSlotToDirection = ____doors.doorSlotToDirection
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local getEffects = ____entitySpecific.getEffects
local spawnEffect = ____entitySpecific.spawnEffect
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getClosestPlayer = ____player.getClosestPlayer
local ____postCustomDoorEnter = require("lua_modules.isaacscript-common.callbacks.subscriptions.postCustomDoorEnter")
local postCustomDoorEnterFire = ____postCustomDoorEnter.postCustomDoorEnterFire
local postCustomDoorEnterHasSubscriptions = ____postCustomDoorEnter.postCustomDoorEnterHasSubscriptions
function hasSubscriptions(self)
    return postCustomDoorEnterHasSubscriptions(nil)
end
function postEffectUpdaterCustomEntity(self, effect)
    local ptrHash = GetPtrHash(effect)
    local doorData = v.room.customDoors:get(ptrHash)
    if doorData == nil then
        return
    end
    if doorData.state == effect.State then
        return
    end
    doorData.state = effect.State
    doorChangedState(nil, effect)
end
function doorChangedState(self, effect)
    local room = game:GetRoom()
    local sprite = effect:GetSprite()
    local animation = getAnimationForCustomDoor(nil, effect)
    sprite:Play(animation, true)
    local gridIndex = room:GetGridIndex(effect.Position)
    local wall = room:GetGridEntity(gridIndex)
    if wall ~= nil then
        wall.CollisionClass = effect.State == DoorState.OPEN and GridCollisionClass.WALL_EXCEPT_PLAYER or GridCollisionClass.WALL
    end
end
function getAnimationForCustomDoor(self, effect)
    local freshlySpawned = effect.FrameCount == 0
    repeat
        local ____switch12 = effect.State
        local ____cond12 = ____switch12 == DoorState.OPEN
        if ____cond12 then
            do
                return freshlySpawned and "Opened" or "Open"
            end
        end
        ____cond12 = ____cond12 or ____switch12 == DoorState.CLOSED
        if ____cond12 then
            do
                return freshlySpawned and "Closed" or "Close"
            end
        end
        do
            do
                return "Opened"
            end
        end
    until true
end
function postEffectRenderCustomEntity(self, effect)
    local ptrHash = GetPtrHash(effect)
    local doorData = v.room.customDoors:get(ptrHash)
    if doorData == nil then
        return
    end
    local direction = doorSlotToDirection(nil, doorData.slot)
    local player = getClosestPlayer(nil, effect.Position)
    if isPlayerPastDoorThreshold(nil, effect, player, direction) then
        postCustomDoorEnterFire(
            nil,
            player,
            effect.Variant,
            doorData.slot,
            direction
        )
    end
end
function isPlayerPastDoorThreshold(self, effect, player, direction)
    repeat
        local ____switch20 = direction
        local ____cond20 = ____switch20 == Direction.NO_DIRECTION
        if ____cond20 then
            do
                return false
            end
        end
        ____cond20 = ____cond20 or ____switch20 == Direction.UP
        if ____cond20 then
            do
                return player.Position.Y <= effect.Position.Y
            end
        end
        ____cond20 = ____cond20 or ____switch20 == Direction.RIGHT
        if ____cond20 then
            do
                return player.Position.X >= effect.Position.X
            end
        end
        ____cond20 = ____cond20 or ____switch20 == Direction.DOWN
        if ____cond20 then
            do
                return player.Position.Y >= effect.Position.Y
            end
        end
        ____cond20 = ____cond20 or ____switch20 == Direction.LEFT
        if ____cond20 then
            do
                return player.Position.X <= effect.Position.X
            end
        end
    until true
end
function postRoomClearChanged(self, roomClear, effectVariant)
    local state = roomClear and DoorState.OPEN or DoorState.CLOSED
    local customDoors = getEffects(nil, effectVariant)
    for ____, customDoor in ipairs(customDoors) do
        customDoor.State = state
    end
end
function getPositionOffset(self, doorSlot)
    local direction = doorSlotToDirection(nil, doorSlot)
    local vector = directionToVector(nil, direction)
    return vector * POSITION_OFFSET_MULTIPLIER
end
POSITION_OFFSET_MULTIPLIER = -23
local initializedEffectVariants = __TS__New(Set)
v = {room = {
    customDoors = __TS__New(Map),
    customDoorSlots = __TS__New(Set)
}}
---
-- @internal
function ____exports.postCustomDoorEnterInit(self)
    saveDataManager(nil, "postCustomDoorEnter", v, hasSubscriptions)
end
--- `isaacscript-common` provides custom doors that can be spawned where any wall segment is. If you
-- use this feature, you must first call this initialization function at the beginning of your mod.
-- 
-- Each kind of custom door that you create must have an entry in the "content/entities2.xml" file,
-- like so:
-- 
-- ```xml
-- <entity id="1000" name="Foo Custom Door" anm2path="grid/door_foo.anm2" />
-- ```
-- 
-- (Custom door entities must have an id of "1000", which corresponds to an effect. If you do not
-- specify the variant, then the game will automatically assign it.)
-- 
-- Next, pass the variant into this function:
-- 
-- ```ts
-- const modVanilla = RegisterMod("My Mod", 1);
-- const mod = upgradeMod(modVanilla);
-- const fooEffectVariant = Isaac.GetEntityVariantByName("Foo Custom Door");
-- initCustomDoor(mod, fooEffectVariant);
-- ```
-- 
-- Also see the `spawnCustomDoor` function.
function ____exports.initCustomDoor(self, mod, effectVariant)
    initializedEffectVariants:add(effectVariant)
    mod:AddCallback(ModCallback.POST_EFFECT_UPDATE, postEffectUpdaterCustomEntity, effectVariant)
    mod:AddCallback(ModCallback.POST_EFFECT_RENDER, postEffectRenderCustomEntity, effectVariant)
    mod:AddCallbackCustom(
        ModCallbackCustom.POST_ROOM_CLEAR_CHANGED,
        function(____, roomClear)
            postRoomClearChanged(nil, roomClear, effectVariant)
        end
    )
end
--- Helper function to spawn a custom door. This is intended to be called from the `POST_NEW_ROOM`
-- callback when the player enters a room that should have a custom door. (You could also call it
-- from another callback if you want the door to appear e.g. after clearing all enemies.)
-- 
-- Like other entities, the door is not persistent, so you must spawn it every time when re-entering
-- the room.
-- 
-- Handle when a player enters the door by hooking the custom `POST_CUSTOM_DOOR_ENTER` callback.
-- 
-- The custom door is an `EntityEffect`. You can manually open or close the door by modifying its
-- state. (The values to use correspond to the `DoorState` enum.)
-- 
-- This function will throw a runtime error if:
-- - the door slot already has a vanilla door
-- - the door slot already has a custom door
-- - the tile at the door slot does not have a wall
-- 
-- Before using this function, you must first initialize the effect/door variant with the
-- `initCustomDoor` function.
function ____exports.spawnCustomDoor(self, effectVariant, doorSlot)
    if not initializedEffectVariants:has(effectVariant) then
        error("In order to spawn custom doors, you must first initialize them with the \"initCustomDoor\" function at the beginning of your mod.")
    end
    if v.room.customDoorSlots:has(doorSlot) then
        error("There is already a custom door initialized on door slot: " .. tostring(doorSlot))
    end
    local room = game:GetRoom()
    local roomClear = room:IsClear()
    local position = room:GetDoorSlotPosition(doorSlot)
    local gridEntity = room:GetGridEntityFromPos(position)
    if gridEntity == nil then
        error(("Failed to initialize a custom door at slot " .. tostring(doorSlot)) .. " because the wall on that tile does not exist.")
    end
    local gridEntityType = gridEntity:GetType()
    if gridEntityType ~= GridEntityType.WALL then
        error((("Failed to initialize a custom door at slot " .. tostring(doorSlot)) .. " because there is another grid entity on that tile with a type of: ") .. tostring(gridEntityType))
    end
    local effect = spawnEffect(nil, effectVariant, 0, position)
    effect.State = roomClear and DoorState.OPEN or DoorState.CLOSED
    effect.RenderZOffset = -10000
    effect.PositionOffset = getPositionOffset(nil, doorSlot)
    local sprite = effect:GetSprite()
    sprite.Rotation = doorSlot * 90 - 90
    local ptrHash = GetPtrHash(effect)
    local doorData = {slot = doorSlot, state = effect.State}
    v.room.customDoors:set(ptrHash, doorData)
    v.room.customDoorSlots:add(doorSlot)
    doorChangedState(nil, effect)
    return effect
end
return ____exports
 end,
["lua_modules.isaacscript-common.enums.ModCallbackCustom"] = function(...) 
local ____exports = {}
--- - The Isaac API offers a lot of callbacks, but a lot of times there isn't one for the specific
--   thing that you are looking to do. So, `isaacscript-common` adds a bunch of new callbacks that
--   you can use.
-- - The extra callbacks are efficient such that no code is executed until there is one or more
--   subscriptions.
-- - You must upgrade your mod with the `upgradeMod` helper function before using a custom callback.
____exports.ModCallbackCustom = {}
____exports.ModCallbackCustom.POST_AMBUSH_FINISHED = 0
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_AMBUSH_FINISHED] = "POST_AMBUSH_FINISHED"
____exports.ModCallbackCustom.POST_AMBUSH_STARTED = 1
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_AMBUSH_STARTED] = "POST_AMBUSH_STARTED"
____exports.ModCallbackCustom.POST_BOMB_EXPLODED = 2
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_BOMB_EXPLODED] = "POST_BOMB_EXPLODED"
____exports.ModCallbackCustom.POST_BOMB_INIT_LATE = 3
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_BOMB_INIT_LATE] = "POST_BOMB_INIT_LATE"
____exports.ModCallbackCustom.POST_BONE_SWING = 4
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_BONE_SWING] = "POST_BONE_SWING"
____exports.ModCallbackCustom.POST_COLLECTIBLE_INIT_FIRST = 5
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_COLLECTIBLE_INIT_FIRST] = "POST_COLLECTIBLE_INIT_FIRST"
____exports.ModCallbackCustom.POST_CURSED_TELEPORT = 6
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_CURSED_TELEPORT] = "POST_CURSED_TELEPORT"
____exports.ModCallbackCustom.POST_CUSTOM_DOOR_ENTER = 7
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_CUSTOM_DOOR_ENTER] = "POST_CUSTOM_DOOR_ENTER"
____exports.ModCallbackCustom.POST_CUSTOM_REVIVE = 8
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_CUSTOM_REVIVE] = "POST_CUSTOM_REVIVE"
____exports.ModCallbackCustom.POST_DICE_ROOM_ACTIVATED = 9
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_DICE_ROOM_ACTIVATED] = "POST_DICE_ROOM_ACTIVATED"
____exports.ModCallbackCustom.POST_DOOR_RENDER = 10
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_DOOR_RENDER] = "POST_DOOR_RENDER"
____exports.ModCallbackCustom.POST_DOOR_UPDATE = 11
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_DOOR_UPDATE] = "POST_DOOR_UPDATE"
____exports.ModCallbackCustom.POST_EFFECT_INIT_LATE = 12
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_EFFECT_INIT_LATE] = "POST_EFFECT_INIT_LATE"
____exports.ModCallbackCustom.POST_EFFECT_STATE_CHANGED = 13
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_EFFECT_STATE_CHANGED] = "POST_EFFECT_STATE_CHANGED"
____exports.ModCallbackCustom.POST_ESAU_JR = 14
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_ESAU_JR] = "POST_ESAU_JR"
____exports.ModCallbackCustom.POST_FAMILIAR_INIT_LATE = 15
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_FAMILIAR_INIT_LATE] = "POST_FAMILIAR_INIT_LATE"
____exports.ModCallbackCustom.POST_FAMILIAR_STATE_CHANGED = 16
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_FAMILIAR_STATE_CHANGED] = "POST_FAMILIAR_STATE_CHANGED"
____exports.ModCallbackCustom.POST_FIRST_ESAU_JR = 17
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_FIRST_ESAU_JR] = "POST_FIRST_ESAU_JR"
____exports.ModCallbackCustom.POST_FIRST_FLIP = 18
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_FIRST_FLIP] = "POST_FIRST_FLIP"
____exports.ModCallbackCustom.POST_FLIP = 19
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_FLIP] = "POST_FLIP"
____exports.ModCallbackCustom.POST_GAME_STARTED_REORDERED = 20
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_GAME_STARTED_REORDERED] = "POST_GAME_STARTED_REORDERED"
____exports.ModCallbackCustom.POST_GREED_MODE_WAVE = 21
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_GREED_MODE_WAVE] = "POST_GREED_MODE_WAVE"
____exports.ModCallbackCustom.POST_GRID_ENTITY_BROKEN = 22
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_GRID_ENTITY_BROKEN] = "POST_GRID_ENTITY_BROKEN"
____exports.ModCallbackCustom.POST_GRID_ENTITY_COLLISION = 23
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_GRID_ENTITY_COLLISION] = "POST_GRID_ENTITY_COLLISION"
____exports.ModCallbackCustom.POST_GRID_ENTITY_INIT = 24
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_GRID_ENTITY_INIT] = "POST_GRID_ENTITY_INIT"
____exports.ModCallbackCustom.POST_GRID_ENTITY_REMOVE = 25
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_GRID_ENTITY_REMOVE] = "POST_GRID_ENTITY_REMOVE"
____exports.ModCallbackCustom.POST_GRID_ENTITY_RENDER = 26
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_GRID_ENTITY_RENDER] = "POST_GRID_ENTITY_RENDER"
____exports.ModCallbackCustom.POST_GRID_ENTITY_STATE_CHANGED = 27
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_GRID_ENTITY_STATE_CHANGED] = "POST_GRID_ENTITY_STATE_CHANGED"
____exports.ModCallbackCustom.POST_GRID_ENTITY_UPDATE = 28
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_GRID_ENTITY_UPDATE] = "POST_GRID_ENTITY_UPDATE"
____exports.ModCallbackCustom.POST_HOLY_MANTLE_REMOVED = 29
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_HOLY_MANTLE_REMOVED] = "POST_HOLY_MANTLE_REMOVED"
____exports.ModCallbackCustom.POST_ITEM_DISCHARGE = 30
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_ITEM_DISCHARGE] = "POST_ITEM_DISCHARGE"
____exports.ModCallbackCustom.POST_ITEM_PICKUP = 31
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_ITEM_PICKUP] = "POST_ITEM_PICKUP"
____exports.ModCallbackCustom.POST_KNIFE_INIT_LATE = 32
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_KNIFE_INIT_LATE] = "POST_KNIFE_INIT_LATE"
____exports.ModCallbackCustom.POST_LASER_INIT_LATE = 33
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_LASER_INIT_LATE] = "POST_LASER_INIT_LATE"
____exports.ModCallbackCustom.POST_NEW_LEVEL_REORDERED = 34
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_NEW_LEVEL_REORDERED] = "POST_NEW_LEVEL_REORDERED"
____exports.ModCallbackCustom.POST_NEW_ROOM_EARLY = 35
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_NEW_ROOM_EARLY] = "POST_NEW_ROOM_EARLY"
____exports.ModCallbackCustom.POST_NEW_ROOM_REORDERED = 36
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_NEW_ROOM_REORDERED] = "POST_NEW_ROOM_REORDERED"
____exports.ModCallbackCustom.POST_NPC_INIT_LATE = 37
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_NPC_INIT_LATE] = "POST_NPC_INIT_LATE"
____exports.ModCallbackCustom.POST_NPC_STATE_CHANGED = 38
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_NPC_STATE_CHANGED] = "POST_NPC_STATE_CHANGED"
____exports.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED = 39
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED] = "POST_PEFFECT_UPDATE_REORDERED"
____exports.ModCallbackCustom.POST_PICKUP_COLLECT = 40
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PICKUP_COLLECT] = "POST_PICKUP_COLLECT"
____exports.ModCallbackCustom.POST_PICKUP_INIT_FIRST = 41
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PICKUP_INIT_FIRST] = "POST_PICKUP_INIT_FIRST"
____exports.ModCallbackCustom.POST_PICKUP_INIT_LATE = 42
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PICKUP_INIT_LATE] = "POST_PICKUP_INIT_LATE"
____exports.ModCallbackCustom.POST_PICKUP_STATE_CHANGED = 43
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PICKUP_STATE_CHANGED] = "POST_PICKUP_STATE_CHANGED"
____exports.ModCallbackCustom.POST_PIT_RENDER = 44
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PIT_RENDER] = "POST_PIT_RENDER"
____exports.ModCallbackCustom.POST_PIT_UPDATE = 45
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PIT_UPDATE] = "POST_PIT_UPDATE"
____exports.ModCallbackCustom.POST_PLAYER_CHANGE_HEALTH = 46
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PLAYER_CHANGE_HEALTH] = "POST_PLAYER_CHANGE_HEALTH"
____exports.ModCallbackCustom.POST_PLAYER_CHANGE_TYPE = 47
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PLAYER_CHANGE_TYPE] = "POST_PLAYER_CHANGE_TYPE"
____exports.ModCallbackCustom.POST_PLAYER_COLLECTIBLE_ADDED = 48
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PLAYER_COLLECTIBLE_ADDED] = "POST_PLAYER_COLLECTIBLE_ADDED"
____exports.ModCallbackCustom.POST_PLAYER_COLLECTIBLE_REMOVED = 49
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PLAYER_COLLECTIBLE_REMOVED] = "POST_PLAYER_COLLECTIBLE_REMOVED"
____exports.ModCallbackCustom.POST_PLAYER_FATAL_DAMAGE = 50
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PLAYER_FATAL_DAMAGE] = "POST_PLAYER_FATAL_DAMAGE"
____exports.ModCallbackCustom.POST_PLAYER_INIT_LATE = 51
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PLAYER_INIT_LATE] = "POST_PLAYER_INIT_LATE"
____exports.ModCallbackCustom.POST_PLAYER_INIT_REORDERED = 52
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PLAYER_INIT_REORDERED] = "POST_PLAYER_INIT_REORDERED"
____exports.ModCallbackCustom.POST_PLAYER_RENDER_REORDERED = 53
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PLAYER_RENDER_REORDERED] = "POST_PLAYER_RENDER_REORDERED"
____exports.ModCallbackCustom.POST_PLAYER_UPDATE_REORDERED = 54
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PLAYER_UPDATE_REORDERED] = "POST_PLAYER_UPDATE_REORDERED"
____exports.ModCallbackCustom.POST_POOP_RENDER = 55
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_POOP_RENDER] = "POST_POOP_RENDER"
____exports.ModCallbackCustom.POST_POOP_UPDATE = 56
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_POOP_UPDATE] = "POST_POOP_UPDATE"
____exports.ModCallbackCustom.POST_PRESSURE_PLATE_RENDER = 57
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PRESSURE_PLATE_RENDER] = "POST_PRESSURE_PLATE_RENDER"
____exports.ModCallbackCustom.POST_PRESSURE_PLATE_UPDATE = 58
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PRESSURE_PLATE_UPDATE] = "POST_PRESSURE_PLATE_UPDATE"
____exports.ModCallbackCustom.POST_PROJECTILE_INIT_LATE = 59
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PROJECTILE_INIT_LATE] = "POST_PROJECTILE_INIT_LATE"
____exports.ModCallbackCustom.POST_PURCHASE = 60
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_PURCHASE] = "POST_PURCHASE"
____exports.ModCallbackCustom.POST_ROCK_RENDER = 61
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_ROCK_RENDER] = "POST_ROCK_RENDER"
____exports.ModCallbackCustom.POST_ROCK_UPDATE = 62
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_ROCK_UPDATE] = "POST_ROCK_UPDATE"
____exports.ModCallbackCustom.POST_ROOM_CLEAR_CHANGED = 63
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_ROOM_CLEAR_CHANGED] = "POST_ROOM_CLEAR_CHANGED"
____exports.ModCallbackCustom.POST_SACRIFICE = 64
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_SACRIFICE] = "POST_SACRIFICE"
____exports.ModCallbackCustom.POST_SLOT_ANIMATION_CHANGED = 65
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_SLOT_ANIMATION_CHANGED] = "POST_SLOT_ANIMATION_CHANGED"
____exports.ModCallbackCustom.POST_SLOT_DESTROYED = 66
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_SLOT_DESTROYED] = "POST_SLOT_DESTROYED"
____exports.ModCallbackCustom.POST_SLOT_INIT = 67
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_SLOT_INIT] = "POST_SLOT_INIT"
____exports.ModCallbackCustom.POST_SLOT_RENDER = 68
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_SLOT_RENDER] = "POST_SLOT_RENDER"
____exports.ModCallbackCustom.POST_SLOT_UPDATE = 69
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_SLOT_UPDATE] = "POST_SLOT_UPDATE"
____exports.ModCallbackCustom.POST_SPIKES_RENDER = 70
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_SPIKES_RENDER] = "POST_SPIKES_RENDER"
____exports.ModCallbackCustom.POST_SPIKES_UPDATE = 71
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_SPIKES_UPDATE] = "POST_SPIKES_UPDATE"
____exports.ModCallbackCustom.POST_TEAR_INIT_LATE = 72
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_TEAR_INIT_LATE] = "POST_TEAR_INIT_LATE"
____exports.ModCallbackCustom.POST_TEAR_INIT_VERY_LATE = 73
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_TEAR_INIT_VERY_LATE] = "POST_TEAR_INIT_VERY_LATE"
____exports.ModCallbackCustom.POST_TNT_RENDER = 74
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_TNT_RENDER] = "POST_TNT_RENDER"
____exports.ModCallbackCustom.POST_TNT_UPDATE = 75
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_TNT_UPDATE] = "POST_TNT_UPDATE"
____exports.ModCallbackCustom.POST_TRANSFORMATION = 76
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_TRANSFORMATION] = "POST_TRANSFORMATION"
____exports.ModCallbackCustom.POST_TRINKET_BREAK = 77
____exports.ModCallbackCustom[____exports.ModCallbackCustom.POST_TRINKET_BREAK] = "POST_TRINKET_BREAK"
____exports.ModCallbackCustom.PRE_BERSERK_DEATH = 78
____exports.ModCallbackCustom[____exports.ModCallbackCustom.PRE_BERSERK_DEATH] = "PRE_BERSERK_DEATH"
____exports.ModCallbackCustom.PRE_CUSTOM_REVIVE = 79
____exports.ModCallbackCustom[____exports.ModCallbackCustom.PRE_CUSTOM_REVIVE] = "PRE_CUSTOM_REVIVE"
____exports.ModCallbackCustom.PRE_ITEM_PICKUP = 80
____exports.ModCallbackCustom[____exports.ModCallbackCustom.PRE_ITEM_PICKUP] = "PRE_ITEM_PICKUP"
____exports.ModCallbackCustom.PRE_NEW_LEVEL = 81
____exports.ModCallbackCustom[____exports.ModCallbackCustom.PRE_NEW_LEVEL] = "PRE_NEW_LEVEL"
return ____exports
 end,
["lua_modules.isaacscript-common.features.saveDataManager.exports"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__TypeOf = ____lualib.__TS__TypeOf
local __TS__ObjectKeys = ____lualib.__TS__ObjectKeys
local ____exports = {}
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____deepCopy = require("lua_modules.isaacscript-common.functions.deepCopy")
local deepCopy = ____deepCopy.deepCopy
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isString = ____types.isString
local ____constants = require("lua_modules.isaacscript-common.features.saveDataManager.constants")
local SAVE_DATA_MANAGER_FEATURE_NAME = ____constants.SAVE_DATA_MANAGER_FEATURE_NAME
local ____main = require("lua_modules.isaacscript-common.features.saveDataManager.main")
local forceSaveDataManagerLoad = ____main.forceSaveDataManagerLoad
local forceSaveDataManagerSave = ____main.forceSaveDataManagerSave
local restoreDefaultSaveData = ____main.restoreDefaultSaveData
local ____maps = require("lua_modules.isaacscript-common.features.saveDataManager.maps")
local saveDataConditionalFuncMap = ____maps.saveDataConditionalFuncMap
local saveDataDefaultsMap = ____maps.saveDataDefaultsMap
local saveDataMap = ____maps.saveDataMap
--- This is the entry point to the save data manager, a system which provides two major features:
-- 
-- 1. automatic resetting of variables on a new run, on a new level, or on a new room (as desired)
-- 2. automatic saving and loading of all tracked data to the "save#.dat" file
-- 
-- You feed this function with an anonymous object containing your variables, and then it will
-- automatically manage them for you. (See below for an example.)
-- 
-- The save data manager is meant to be called once for each feature of your mod. In other words,
-- you should not put all of the data for your mod on the same object. Instead, scope your variables
-- locally to a single file that contains a mod feature, and then call this function to register
-- them. For example:
-- 
-- ```ts
-- // in file: feature1.ts
-- import { saveDataManager } from "isaacscript-common";
-- 
-- // Declare local variables for this file or feature.
-- const v = {
--   // These variables are never reset; manage them yourself at will.
--   persistent: {
--     foo1: 0,
--   },
-- 
--   // These variables are reset at the beginning of every run.
--   run: {
--     foo2: 0,
--   },
-- 
--   // These variables are reset at the beginning of every level.
--   level: {
--     foo3: 0,
--   },
-- 
--   // These variables are reset at the beginning of every room.
--   room: {
--     foo4: 0,
--   },
-- };
-- // Every child object is optional; only create the ones that you need.
-- 
-- // Register the variables with the save data manager. (We need to provide a string key that
-- // matches the name of this file.)
-- function feature1Init() {
--   saveDataManager("feature1", v);
-- }
-- 
-- // Elsewhere in the file, use your variables.
-- function feature1Function() {
--   if (v.run.foo1 > 0) {
--     // Insert code here.
--   }
-- }
-- ```
-- 
-- - Save data is loaded from disk in the `POST_PLAYER_INIT` callback (i.e. the first callback that
--   can possibly run).
-- - Save data is recorded to disk in the `PRE_GAME_EXIT` callback.
-- 
-- Note that before using the save data manager, you must call the `upgradeMod` function. (Upgrade
-- your mod before registering any of your own callbacks so that the save data manager will run
-- before any of your code does.)
-- 
-- If you want the save data manager to load data before the `POST_PLAYER_INIT` callback (i.e. in
-- the main menu), then you should explicitly call the `saveDataManagerLoad` function. (The save
-- data manager cannot do this on its own because it cannot know when your mod features are finished
-- initializing.)
-- 
-- Finally, some features may have variables that need to be automatically reset per run/level, but
-- not saved to disk on game exit. (For example, if they contain functions or other non-serializable
-- data.) For these cases, set the second argument to `() => false`.
-- 
-- @param key The name of the file or feature that is submitting data to be managed by the save data
-- manager. The save data manager will throw an error if the key is already registered.
-- @param v An object that corresponds to the `SaveData` interface. The object is conventionally
-- called "v" for brevity. ("v" is short for "local variables").
-- @param conditionalFunc An optional function to run upon saving this key to disk. For example,
-- this allows features to only save data to disk if the feature is enabled.
-- Specify a value of `() => false` to completely disable saving this feature
-- to disk. Disabling saving to disk is useful if you are using data that is
-- not serializable. Alternatively, it could be useful if you want to use the
-- save data manager to automatically reset variables on run/level/room, but
-- not clutter the the "save#.dat" file with unnecessary keys.
function ____exports.saveDataManager(self, key, v, conditionalFunc)
    errorIfFeaturesNotInitialized(nil, SAVE_DATA_MANAGER_FEATURE_NAME)
    if not isString(nil, key) then
        error((("The " .. SAVE_DATA_MANAGER_FEATURE_NAME) .. " requires that keys are strings. You tried to use a key of type: ") .. __TS__TypeOf(key))
    end
    if saveDataMap[key] ~= nil then
        error((("The " .. SAVE_DATA_MANAGER_FEATURE_NAME) .. " is already managing save data for a key of: ") .. key)
    end
    saveDataMap[key] = v
    local saveDataKeys = __TS__ObjectKeys(v)
    if #saveDataKeys == 1 and saveDataKeys[1] == "room" then
        conditionalFunc = function() return false end
    end
    local saveDataTable = v
    local saveDataCopy = deepCopy(nil, saveDataTable, SerializationType.NONE, key)
    saveDataDefaultsMap[key] = saveDataCopy
    if conditionalFunc ~= nil then
        saveDataConditionalFuncMap:set(key, conditionalFunc)
    end
end
--- The save data manager will automatically load variables from disk at the appropriate times (i.e.
-- when a new run is started). Use this function to explicitly force the save data manager to load
-- all of its variables from disk immediately.
-- 
-- Obviously, doing this will overwrite the current data, so using this function can potentially
-- result in lost state.
function ____exports.saveDataManagerLoad(self)
    errorIfFeaturesNotInitialized(nil, SAVE_DATA_MANAGER_FEATURE_NAME)
    forceSaveDataManagerLoad(nil)
end
--- The save data manager will automatically save variables to disk at the appropriate times (i.e.
-- when the run is exited). Use this function to explicitly force the save data manager to write all
-- of its variables to disk immediately.
function ____exports.saveDataManagerSave(self)
    errorIfFeaturesNotInitialized(nil, SAVE_DATA_MANAGER_FEATURE_NAME)
    forceSaveDataManagerSave(nil)
end
--- - Sets the global variable of "g" equal to all of the save data variables for this mod.
-- - Sets the global variable of "gd" equal to all of the save data default variables for this mod.
-- 
-- This can make debugging easier, as you can access the variables from the game's debug console.
-- e.g. `l print(g.feature1.foo)`
function ____exports.saveDataManagerSetGlobal(self)
    errorIfFeaturesNotInitialized(nil, SAVE_DATA_MANAGER_FEATURE_NAME)
    g = saveDataMap
    gd = saveDataDefaultsMap
end
--- The save data manager will automatically reset variables at the appropriate times (i.e. when a
-- player enters a new room). Use this function to explicitly force the save data manager to reset a
-- specific variable group.
-- 
-- For example:
-- 
-- ```ts
-- const v = {
--   room: {
--     foo: 123,
--   },
-- };
-- 
-- saveDataManager("file1", v);
-- 
-- // Then, later on, to explicit reset all of the "room" variables:
-- saveDataManagerReset("file1", "room");
-- ```
function ____exports.saveDataManagerReset(self, key, childObjectKey)
    errorIfFeaturesNotInitialized(nil, SAVE_DATA_MANAGER_FEATURE_NAME)
    if not isString(nil, key) then
        error((("The " .. SAVE_DATA_MANAGER_FEATURE_NAME) .. " requires that keys are strings. You tried to use a key of type: ") .. __TS__TypeOf(key))
    end
    local saveData = saveDataMap[key]
    if saveData == nil then
        error((("The " .. SAVE_DATA_MANAGER_FEATURE_NAME) .. " is not managing save data for a key of: ") .. key)
    end
    restoreDefaultSaveData(nil, key, saveData, childObjectKey)
end
return ____exports
 end,
["lua_modules.isaacscript-common.enums.SerializationType"] = function(...) 
local ____exports = {}
____exports.SerializationType = {}
____exports.SerializationType.NONE = 0
____exports.SerializationType[____exports.SerializationType.NONE] = "NONE"
____exports.SerializationType.SERIALIZE = 1
____exports.SerializationType[____exports.SerializationType.SERIALIZE] = "SERIALIZE"
____exports.SerializationType.DESERIALIZE = 2
____exports.SerializationType[____exports.SerializationType.DESERIALIZE] = "DESERIALIZE"
return ____exports
 end,
["lua_modules.isaacscript-common.featuresInitialized"] = function(...) 
local ____exports = {}
local featuresInitialized = false
---
-- @internal
function ____exports.areFeaturesInitialized(self)
    return featuresInitialized
end
---
-- @internal
function ____exports.errorIfFeaturesNotInitialized(self, featureName)
    if not ____exports.areFeaturesInitialized(nil) then
        error(("The \"" .. featureName) .. "\" feature is not initialized. You must first upgrade your mod object by calling the \"upgradeMod\" function.")
    end
end
---
-- @internal
function ____exports.setFeaturesInitialized(self)
    featuresInitialized = true
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.deepCopy"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local Map = ____lualib.Map
local __TS__Iterator = ____lualib.__TS__Iterator
local __TS__ArraySort = ____lualib.__TS__ArraySort
local __TS__ArraySome = ____lualib.__TS__ArraySome
local ____exports = {}
local deepCopyTable, deepCopyDefaultMap, getNewDefaultMap, deepCopyMap, deepCopySet, deepCopyTSTLClass, deepCopyArray, deepCopyNormalLuaTable, getCopiedEntries, checkMetatable, deepCopyUserdata, COPYABLE_ISAAC_API_CLASS_TYPES_SET
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____CopyableIsaacAPIClassType = require("lua_modules.isaacscript-common.enums.private.CopyableIsaacAPIClassType")
local CopyableIsaacAPIClassType = ____CopyableIsaacAPIClassType.CopyableIsaacAPIClassType
local ____SerializationBrand = require("lua_modules.isaacscript-common.enums.private.SerializationBrand")
local SerializationBrand = ____SerializationBrand.SerializationBrand
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____constants = require("lua_modules.isaacscript-common.features.saveDataManager.constants")
local SAVE_DATA_MANAGER_DEBUG = ____constants.SAVE_DATA_MANAGER_DEBUG
local ____serializationBrand = require("lua_modules.isaacscript-common.features.saveDataManager.serializationBrand")
local isSerializationBrand = ____serializationBrand.isSerializationBrand
local ____array = require("lua_modules.isaacscript-common.functions.array")
local isArray = ____array.isArray
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____isaacAPIClass = require("lua_modules.isaacscript-common.functions.isaacAPIClass")
local getIsaacAPIClassName = ____isaacAPIClass.getIsaacAPIClassName
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
local logTable = ____log.logTable
local ____serialization = require("lua_modules.isaacscript-common.functions.serialization")
local copyIsaacAPIClass = ____serialization.copyIsaacAPIClass
local deserializeIsaacAPIClass = ____serialization.deserializeIsaacAPIClass
local isSerializedIsaacAPIClass = ____serialization.isSerializedIsaacAPIClass
local ____tstlClass = require("lua_modules.isaacscript-common.functions.tstlClass")
local getTSTLClassName = ____tstlClass.getTSTLClassName
local isDefaultMap = ____tstlClass.isDefaultMap
local isTSTLMap = ____tstlClass.isTSTLMap
local isTSTLSet = ____tstlClass.isTSTLSet
local isUserDefinedTSTLClass = ____tstlClass.isUserDefinedTSTLClass
local newTSTLClass = ____tstlClass.newTSTLClass
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isNumber = ____types.isNumber
local isPrimitive = ____types.isPrimitive
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local getTraversalDescription = ____utils.getTraversalDescription
local twoDimensionalSort = ____utils.twoDimensionalSort
--- `deepCopy` is a semi-generic deep cloner. It will recursively copy all of the values so that none
-- of the nested references remain.
-- 
-- It supports the following object types:
-- 
-- - Primitives (i.e. strings, numbers, and booleans)
-- - `LuaTable` / basic TSTL objects
-- - TSTL `Map`
-- - TSTL `Set`
-- - TSTL classes
-- - `DefaultMap`
-- - Isaac `Color` objects
-- - Isaac `KColor` objects
-- - Isaac `RNG` objects
-- - Isaac `Vector` objects
-- 
-- It does not support:
-- - objects with values of `null` (since that transpiles to `nil`)
-- - other Isaac API objects such as `EntityPtr` (that have a type of "userdata")
-- 
-- @param value The primitive or object to copy.
-- @param serializationType Has 3 possible values. Can leave objects as-is, or can serialize objects
-- to Lua tables, or can deserialize Lua tables to objects. Default is
-- `SerializationType.NONE`.
-- @param traversalDescription Used to track the current key that we are operating on.
function ____exports.deepCopy(self, value, serializationType, traversalDescription)
    if serializationType == nil then
        serializationType = SerializationType.NONE
    end
    if traversalDescription == nil then
        traversalDescription = ""
    end
    if SAVE_DATA_MANAGER_DEBUG then
        local logString = "deepCopy is operating on: " .. traversalDescription
        if serializationType == SerializationType.SERIALIZE then
            logString = logString .. " (serializing)"
        elseif serializationType == SerializationType.DESERIALIZE then
            logString = logString .. " (deserializing)"
        end
        logString = logString .. ": " .. tostring(value)
        log(logString)
    end
    local valueType = type(value)
    repeat
        local ____switch6 = valueType
        local ____cond6 = ____switch6 == "nil" or ____switch6 == "boolean" or ____switch6 == "number" or ____switch6 == "string"
        if ____cond6 then
            do
                return value
            end
        end
        ____cond6 = ____cond6 or (____switch6 == "function" or ____switch6 == "thread")
        if ____cond6 then
            do
                if serializationType == SerializationType.SERIALIZE then
                    error((("The deep copy function does not support serialization of \"" .. traversalDescription) .. "\", since it is type: ") .. valueType)
                end
                return value
            end
        end
        ____cond6 = ____cond6 or ____switch6 == "table"
        if ____cond6 then
            do
                local luaTable = value
                return deepCopyTable(nil, luaTable, serializationType, traversalDescription)
            end
        end
        ____cond6 = ____cond6 or ____switch6 == "userdata"
        if ____cond6 then
            do
                return deepCopyUserdata(nil, value, serializationType, traversalDescription)
            end
        end
    until true
end
function deepCopyTable(self, luaTable, serializationType, traversalDescription)
    if isDefaultMap(nil, luaTable) or luaTable[SerializationBrand.DEFAULT_MAP] ~= nil then
        return deepCopyDefaultMap(nil, luaTable, serializationType, traversalDescription)
    end
    if isTSTLMap(nil, luaTable) or luaTable[SerializationBrand.MAP] ~= nil then
        return deepCopyMap(nil, luaTable, serializationType, traversalDescription)
    end
    if isTSTLSet(nil, luaTable) or luaTable[SerializationBrand.SET] ~= nil then
        return deepCopySet(nil, luaTable, serializationType, traversalDescription)
    end
    local className = getTSTLClassName(nil, luaTable)
    if className == "WeakMap" then
        error("The deep copy function does not support copying the \"WeakMap\" class for: " .. traversalDescription)
    end
    if className == "WeakSet" then
        error("The deep copy function does not support copying the \"WeakSet\" class for: " .. traversalDescription)
    end
    if isUserDefinedTSTLClass(nil, luaTable) then
        return deepCopyTSTLClass(nil, luaTable, serializationType, traversalDescription)
    end
    checkMetatable(nil, luaTable, traversalDescription)
    if isSerializedIsaacAPIClass(nil, luaTable) and serializationType == SerializationType.DESERIALIZE then
        return deserializeIsaacAPIClass(nil, luaTable)
    end
    if isArray(nil, luaTable) then
        return deepCopyArray(nil, luaTable, serializationType, traversalDescription)
    end
    return deepCopyNormalLuaTable(nil, luaTable, serializationType, traversalDescription)
end
function deepCopyDefaultMap(self, defaultMap, serializationType, traversalDescription)
    local ____isDefaultMap_result_0
    if isDefaultMap(nil, defaultMap) then
        ____isDefaultMap_result_0 = defaultMap:getConstructorArg()
    else
        ____isDefaultMap_result_0 = nil
    end
    local constructorArg = ____isDefaultMap_result_0
    if serializationType == SerializationType.SERIALIZE and not isPrimitive(nil, constructorArg) then
        return deepCopyMap(nil, defaultMap, serializationType, traversalDescription)
    end
    local newDefaultMap = getNewDefaultMap(
        nil,
        defaultMap,
        serializationType,
        traversalDescription,
        constructorArg
    )
    local ____getCopiedEntries_result_1 = getCopiedEntries(nil, defaultMap, serializationType, traversalDescription)
    local entries = ____getCopiedEntries_result_1.entries
    local convertedNumberKeysToStrings = ____getCopiedEntries_result_1.convertedNumberKeysToStrings
    if convertedNumberKeysToStrings then
        if isDefaultMap(nil, newDefaultMap) then
            newDefaultMap:set(SerializationBrand.OBJECT_WITH_NUMBER_KEYS, "")
        else
            newDefaultMap[SerializationBrand.OBJECT_WITH_NUMBER_KEYS] = ""
        end
    end
    for ____, ____value in ipairs(entries) do
        local key = ____value[1]
        local value = ____value[2]
        if isDefaultMap(nil, newDefaultMap) then
            newDefaultMap:set(key, value)
        else
            newDefaultMap[key] = value
        end
    end
    return newDefaultMap
end
function getNewDefaultMap(self, defaultMap, serializationType, traversalDescription, constructorArg)
    repeat
        local ____switch31 = serializationType
        local ____cond31 = ____switch31 == SerializationType.NONE
        if ____cond31 then
            do
                return __TS__New(DefaultMap, constructorArg)
            end
        end
        ____cond31 = ____cond31 or ____switch31 == SerializationType.SERIALIZE
        if ____cond31 then
            do
                local newDefaultMap = {}
                newDefaultMap[SerializationBrand.DEFAULT_MAP] = ""
                newDefaultMap[SerializationBrand.DEFAULT_MAP_VALUE] = constructorArg
                return newDefaultMap
            end
        end
        ____cond31 = ____cond31 or ____switch31 == SerializationType.DESERIALIZE
        if ____cond31 then
            do
                if isDefaultMap(nil, defaultMap) then
                    error(("The deep copy function failed to deserialize a default map of \"" .. traversalDescription) .. "\", since it was not a Lua table.")
                end
                local defaultMapValue = defaultMap[SerializationBrand.DEFAULT_MAP_VALUE]
                if defaultMapValue == nil then
                    error((("The deep copy function failed to deserialize a default map of \"" .. traversalDescription) .. "\", since there was no serialization brand of: ") .. SerializationBrand.DEFAULT_MAP_VALUE)
                end
                return __TS__New(DefaultMap, defaultMapValue)
            end
        end
    until true
end
function deepCopyMap(self, map, serializationType, traversalDescription)
    local newMap
    if serializationType == SerializationType.SERIALIZE then
        newMap = {}
        newMap[SerializationBrand.MAP] = ""
    else
        newMap = __TS__New(Map)
    end
    local ____getCopiedEntries_result_2 = getCopiedEntries(nil, map, serializationType, traversalDescription)
    local entries = ____getCopiedEntries_result_2.entries
    local convertedNumberKeysToStrings = ____getCopiedEntries_result_2.convertedNumberKeysToStrings
    if convertedNumberKeysToStrings then
        if isTSTLMap(nil, newMap) then
            newMap:set(SerializationBrand.OBJECT_WITH_NUMBER_KEYS, "")
        else
            newMap[SerializationBrand.OBJECT_WITH_NUMBER_KEYS] = ""
        end
    end
    for ____, ____value in ipairs(entries) do
        local key = ____value[1]
        local value = ____value[2]
        if isTSTLMap(nil, newMap) then
            newMap:set(key, value)
        else
            newMap[key] = value
        end
    end
    return newMap
end
function deepCopySet(self, set, serializationType, traversalDescription)
    local newSet
    if serializationType == SerializationType.SERIALIZE then
        newSet = {}
        newSet[SerializationBrand.SET] = ""
    else
        newSet = __TS__New(Set)
    end
    local ____getCopiedEntries_result_3 = getCopiedEntries(nil, set, serializationType, traversalDescription)
    local entries = ____getCopiedEntries_result_3.entries
    local convertedNumberKeysToStrings = ____getCopiedEntries_result_3.convertedNumberKeysToStrings
    if convertedNumberKeysToStrings then
        if isTSTLSet(nil, newSet) then
            error("The deep copy function cannot convert number keys to strings for a Set.")
        else
            newSet[SerializationBrand.OBJECT_WITH_NUMBER_KEYS] = ""
        end
    end
    for ____, ____value in ipairs(entries) do
        local key = ____value[1]
        if isTSTLSet(nil, newSet) then
            newSet:add(key)
        else
            newSet[key] = ""
        end
    end
    return newSet
end
function deepCopyTSTLClass(self, tstlClass, serializationType, traversalDescription)
    local newClass
    if serializationType == SerializationType.SERIALIZE then
        newClass = {}
    else
        newClass = newTSTLClass(nil, tstlClass)
    end
    local ____getCopiedEntries_result_4 = getCopiedEntries(nil, tstlClass, serializationType, traversalDescription)
    local entries = ____getCopiedEntries_result_4.entries
    local convertedNumberKeysToStrings = ____getCopiedEntries_result_4.convertedNumberKeysToStrings
    if convertedNumberKeysToStrings then
        newClass[SerializationBrand.OBJECT_WITH_NUMBER_KEYS] = ""
    end
    for ____, ____value in ipairs(entries) do
        local key = ____value[1]
        local value = ____value[2]
        newClass[key] = value
    end
    return newClass
end
function deepCopyArray(self, array, serializationType, traversalDescription)
    local newArray = {}
    for ____, value in ipairs(array) do
        local newValue = ____exports.deepCopy(nil, value, serializationType, traversalDescription)
        newArray[#newArray + 1] = newValue
    end
    return newArray
end
function deepCopyNormalLuaTable(self, luaTable, serializationType, traversalDescription)
    local newTable = {}
    local ____getCopiedEntries_result_5 = getCopiedEntries(nil, luaTable, serializationType, traversalDescription)
    local entries = ____getCopiedEntries_result_5.entries
    local convertedNumberKeysToStrings = ____getCopiedEntries_result_5.convertedNumberKeysToStrings
    if convertedNumberKeysToStrings then
        newTable[SerializationBrand.OBJECT_WITH_NUMBER_KEYS] = ""
    end
    for ____, ____value in ipairs(entries) do
        local key = ____value[1]
        local value = ____value[2]
        newTable[key] = value
    end
    return newTable
end
function getCopiedEntries(self, object, serializationType, traversalDescription)
    local entries = {}
    if isTSTLMap(nil, object) or isTSTLSet(nil, object) or isDefaultMap(nil, object) then
        for ____, ____value in __TS__Iterator(object:entries()) do
            local key = ____value[1]
            local value = ____value[2]
            entries[#entries + 1] = {key, value}
        end
    else
        for key, value in pairs(object) do
            entries[#entries + 1] = {key, value}
        end
    end
    if SAVE_DATA_MANAGER_DEBUG then
        logTable(entries)
        __TS__ArraySort(entries, twoDimensionalSort)
    end
    local hasNumberKeys = __TS__ArraySome(
        entries,
        function(____, ____bindingPattern0)
            local key
            key = ____bindingPattern0[1]
            return isNumber(nil, key)
        end
    )
    local convertNumberKeysToStrings = serializationType == SerializationType.SERIALIZE and hasNumberKeys
    local copiedEntries = {}
    for ____, ____value in ipairs(entries) do
        local key = ____value[1]
        local value = ____value[2]
        do
            if isSerializationBrand(nil, key) then
                goto __continue78
            end
            traversalDescription = getTraversalDescription(nil, key, traversalDescription)
            local newValue = ____exports.deepCopy(nil, value, serializationType, traversalDescription)
            local keyToUse = convertNumberKeysToStrings and tostring(key) or key
            copiedEntries[#copiedEntries + 1] = {keyToUse, newValue}
        end
        ::__continue78::
    end
    return {entries = copiedEntries, convertedNumberKeysToStrings = convertNumberKeysToStrings}
end
function checkMetatable(self, luaTable, traversalDescription)
    local metatable = getmetatable(luaTable)
    if metatable == nil then
        return
    end
    local tableDescription = traversalDescription == "" and "the table to copy" or ("\"" .. traversalDescription) .. "\""
    error(("The deepCopy function detected that " .. tableDescription) .. " has a metatable. Copying tables with metatables is not supported, unless they are explicitly handled by the save data manager. (e.g. TypeScriptToLua Maps, TypeScriptToLua Sets, etc.)")
end
function deepCopyUserdata(self, value, serializationType, traversalDescription)
    local classType = getIsaacAPIClassName(nil, value)
    if classType == nil then
        error("The deep copy function was not able to derive the Isaac API class type for: " .. traversalDescription)
    end
    if not COPYABLE_ISAAC_API_CLASS_TYPES_SET:has(classType) then
        error((("The deep copy function does not support copying \"" .. traversalDescription) .. "\", since it is an Isaac API class of type: ") .. classType)
    end
    return copyIsaacAPIClass(nil, value, serializationType)
end
COPYABLE_ISAAC_API_CLASS_TYPES_SET = __TS__New(
    Set,
    getEnumValues(nil, CopyableIsaacAPIClassType)
)
return ____exports
 end,
["lua_modules.isaacscript-common.classes.DefaultMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__Class = ____lualib.__TS__Class
local Map = ____lualib.Map
local __TS__ClassExtends = ____lualib.__TS__ClassExtends
local __TS__TypeOf = ____lualib.__TS__TypeOf
local ____exports = {}
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isFunction = ____types.isFunction
local isPrimitive = ____types.isPrimitive
--- `DefaultMap` is a data structure that makes working with default values easier.
-- 
-- It is a common pattern to look up a value in a `Map`, and then, if the value does not exist, set
-- a default value for the key, and then return the default value. `DefaultMap` abstracts this
-- operation away by providing the `getAndSetDefault` method.
-- 
-- Using a `DefaultMap` is nice because it makes code more declarative, since you specify what the
-- default value is alongside the types of the keys/values.
-- 
-- When instantiating a new `DefaultMap`, you must specify default value as the first argument. (The
-- default value is the initial value that will be assigned to every new entry in the
-- `getAndSetDefault` method.) For example:
-- 
-- ```ts
-- // Initializes a new empty DefaultMap with a default value of "foo".
-- const defaultMapWithString = new DefaultMap<string, string>("foo");
-- 
-- const value = defaultMapWithString.getAndSetDefault("bar");
-- // value is now "foo" and an entry for "bar" is now set.
-- ```
-- 
-- Sometimes, instead of having a static initial value for every entry in the map, you will want a
-- dynamic initial value that is contingent upon the key or some other variable. In these cases, you
-- can instead specify that the `DefaultMap` should run a function that will return the initial
-- value. (This is referred to as a "factory function".) For example:
-- 
-- ```ts
-- // Initializes a new empty DefaultMap with a default value based on "someGlobalVariable".
-- const factoryFunction = () => someGlobalVariable ? 0 : 1;
-- const defaultMapWithFactoryFunction = new DefaultMap<string, string>(factoryFunction);
-- ```
-- 
-- Note that in TypeScript and Lua, booleans, numbers, and strings are "passed by value". This means
-- that when the `DefaultMap` creates a new entry, if the default value is one of these 3 types, the
-- values will be copied. On the other hand, arrays and maps and other complex data structures are
-- "passed by reference". This means that when the `DefaultMap` creates a new entry, if the default
-- value is an array, then it would not be copied. Instead, the same shared array would be assigned
-- to every entry. Thus, to solve this problem, any variable that is passed by reference must be
-- created using a factory function to ensure that each copy is unique. For example:
-- 
-- ```ts
-- // Initializes a new empty DefaultMap with a default value of a new empty array.
-- const factoryFunction = () => [];
-- const defaultMapWithArray = new DefaultMap<string, string[]>(factoryFunction);
-- ```
-- 
-- In the previous two examples, the factory functions did not have any arguments. But you can also
-- specify a factory function that takes one or more arguments:
-- 
-- ```ts
-- const factoryFunction = (arg: boolean) => arg ? 0 : 1;
-- const defaultMapWithArg = new DefaultMap<string, string, [arg: boolean]>(factoryFunction);
-- ```
-- 
-- Similar to a normal `Map`, you can also include an initializer list in the constructor as the
-- second argument:
-- 
-- ```ts
-- // Initializes a DefaultMap with a default value of "foo" and some initial values.
-- const defaultMapWithInitialValues = new DefaultMap<string, string>("foo", [
--   ["a1", "a2"],
--   ["b1", "b2"],
-- ], );
-- ```
-- 
-- Finally, note that `DefaultMap` has the following additional utility methods:
-- 
-- - `getAndSetDefault` - The method that is called inside the overridden `get` method. In most
--   cases, you can use the overridden `get` method instead of calling this function directly.
--   However, if a factory function was provided during instantiation, and the factory function has
--   one or more arguments, then you must call this method instead (and provide the corresponding
--   arguments).
-- - `getWithoutDefault` - Calls the original `Map.get` function (without setting the default
--   value).
-- - `getDefaultValue` - Returns the default value to be used for a new key. (If a factory function
--   was provided during instantiation, this will execute the factory function.)
-- - `getConstructorArg` - Helper method for cloning the map. Returns either the default value or
--   the reference to the factory function.
____exports.DefaultMap = __TS__Class()
local DefaultMap = ____exports.DefaultMap
DefaultMap.name = "DefaultMap"
__TS__ClassExtends(DefaultMap, Map)
function DefaultMap.prototype.____constructor(self, defaultValueOrFactoryFunction, initializerArray)
    local argIsPrimitive = isPrimitive(nil, defaultValueOrFactoryFunction)
    local argIsFunction = isFunction(nil, defaultValueOrFactoryFunction)
    if not argIsPrimitive and not argIsFunction then
        error(("Failed to instantiate a DefaultMap since the provided default value was of type \"" .. __TS__TypeOf(defaultValueOrFactoryFunction)) .. "\". This error usually means that you are trying to use an array (or some other non-primitive data structure that is passed by reference) as the default value. Instead, return the data structure in a factory function, like \"() => []\". See the DefaultMap documentation for more details.")
    end
    Map.prototype.____constructor(self, initializerArray)
    if argIsFunction then
        self.defaultValue = nil
        self.defaultValueFactory = defaultValueOrFactoryFunction
    else
        self.defaultValue = defaultValueOrFactoryFunction
        self.defaultValueFactory = nil
    end
end
function DefaultMap.prototype.getAndSetDefault(self, key, ...)
    local value = Map.prototype.get(self, key)
    if value ~= nil then
        return value
    end
    local defaultValue = self:getDefaultValue(...)
    self:set(key, defaultValue)
    return defaultValue
end
function DefaultMap.prototype.getDefaultValue(self, ...)
    if self.defaultValue ~= nil then
        return self.defaultValue
    end
    if self.defaultValueFactory ~= nil then
        return self:defaultValueFactory(...)
    end
    return error("A DefaultMap was incorrectly instantiated.")
end
function DefaultMap.prototype.getConstructorArg(self)
    if self.defaultValue ~= nil then
        return self.defaultValue
    end
    if self.defaultValueFactory ~= nil then
        return self.defaultValueFactory
    end
    return error("A DefaultMap was incorrectly instantiated.")
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.types"] = function(...) 
local ____exports = {}
function ____exports.isBoolean(self, variable)
    return type(variable) == "boolean"
end
function ____exports.isFunction(self, variable)
    return type(variable) == "function"
end
function ____exports.isNumber(self, variable)
    return type(variable) == "number"
end
--- Helper function to detect if a variable is a boolean, number, or string.
function ____exports.isPrimitive(self, variable)
    local variableType = type(variable)
    return variableType == "boolean" or variableType == "number" or variableType == "string"
end
function ____exports.isString(self, variable)
    return type(variable) == "string"
end
function ____exports.isTable(self, variable)
    return type(variable) == "table"
end
function ____exports.isUserdata(self, variable)
    return type(variable) == "userdata"
end
return ____exports
 end,
["lua_modules.isaacscript-common.enums.private.CopyableIsaacAPIClassType"] = function(...) 
local ____exports = {}
--- This must match the enumeration in the JSDoc comments for `deepCopy` and `merge`.
____exports.CopyableIsaacAPIClassType = {}
____exports.CopyableIsaacAPIClassType.COLOR = "Color"
____exports.CopyableIsaacAPIClassType.K_COLOR = "KColor"
____exports.CopyableIsaacAPIClassType.RNG = "RNG"
____exports.CopyableIsaacAPIClassType.VECTOR = "Vector"
return ____exports
 end,
["lua_modules.isaacscript-common.enums.private.SerializationBrand"] = function(...) 
local ____exports = {}
--- During serialization, we write an arbitrary string key to the object with a value of an empty
-- string. This is used during deserialization to instantiate the correct type of object.
-- 
-- Note that we do not bother branding TSTL classes because we have no way to invoke the proper
-- constructor during deserialization.
____exports.SerializationBrand = {}
____exports.SerializationBrand.DEFAULT_MAP = "__TSTL_DEFAULT_MAP"
____exports.SerializationBrand.MAP = "__TSTL_MAP"
____exports.SerializationBrand.SET = "__TSTL_SET"
____exports.SerializationBrand.COLOR = "__COLOR"
____exports.SerializationBrand.K_COLOR = "__K_COLOR"
____exports.SerializationBrand.RNG = "__RNG"
____exports.SerializationBrand.VECTOR = "__VECTOR"
____exports.SerializationBrand.DEFAULT_MAP_VALUE = "__TSTL_DEFAULT_MAP_VALUE"
____exports.SerializationBrand.OBJECT_WITH_NUMBER_KEYS = "__TSTL_OBJECT_WITH_NUMBER_KEYS"
return ____exports
 end,
["lua_modules.isaacscript-common.features.saveDataManager.constants"] = function(...) 
local ____exports = {}
--- Set this to true to enable more verbosity in the save data manger.
____exports.SAVE_DATA_MANAGER_DEBUG = false
____exports.SAVE_DATA_MANAGER_FEATURE_NAME = "save data manager"
return ____exports
 end,
["lua_modules.isaacscript-common.features.saveDataManager.serializationBrand"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____SerializationBrand = require("lua_modules.isaacscript-common.enums.private.SerializationBrand")
local SerializationBrand = ____SerializationBrand.SerializationBrand
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isString = ____types.isString
local SERIALIZATION_BRANDS = getEnumValues(nil, SerializationBrand)
local SERIALIZATION_BRAND_SET = __TS__New(Set, SERIALIZATION_BRANDS)
function ____exports.isSerializationBrand(self, key)
    if not isString(nil, key) then
        return false
    end
    return SERIALIZATION_BRAND_SET:has(key)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.enums"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArraySort = ____lualib.__TS__ArraySort
local __TS__ArrayMap = ____lualib.__TS__ArrayMap
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____array = require("lua_modules.isaacscript-common.functions.array")
local getRandomArrayElement = ____array.getRandomArrayElement
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local getRandomSeed = ____rng.getRandomSeed
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isString = ____types.isString
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local irange = ____utils.irange
--- TypeScriptToLua will transpile TypeScript enums to Lua tables that have a double mapping. Thus,
-- when you iterate over them, you will get both the names of the enums and the values of the enums,
-- in a random order. Use this helper function to get the entries of the enum with the reverse
-- mappings filtered out.
-- 
-- This function will return the enum values in a sorted order, which may not necessarily be the
-- same order as which they were declared in.
-- 
-- This function will work properly for both number enums and string enums. (Reverse mappings are
-- not created for string enums.)
-- 
-- Also see the `getEnumKeys` and `getEnumValues` helper functions.
-- 
-- For a more in depth explanation, see:
-- https://isaacscript.github.io/gotchas#iterating-over-enums
function ____exports.getEnumEntries(self, transpiledEnum)
    local enumEntries = {}
    for key, value in pairs(transpiledEnum) do
        if isString(nil, key) then
            enumEntries[#enumEntries + 1] = {key, value}
        end
    end
    __TS__ArraySort(
        enumEntries,
        function(____, ____bindingPattern0, ____bindingPattern1)
            local value1
            local _key1 = ____bindingPattern0[1]
            value1 = ____bindingPattern0[2]
            local value2
            local _key2 = ____bindingPattern1[1]
            value2 = ____bindingPattern1[2]
            return value1 < value2 and -1 or (value1 > value2 and 1 or 0)
        end
    )
    return enumEntries
end
--- TypeScriptToLua will transpile TypeScript enums to Lua tables that have a double mapping. Thus,
-- when you iterate over them, you will get both the names of the enums and the values of the enums,
-- in a random order. If all you need are the keys of an enum, use this helper function.
-- 
-- This function will return the enum keys in a sorted order, which may not necessarily be the same
-- order as which they were declared in.
-- 
-- This function will work properly for both number enums and string enums. (Reverse mappings are
-- not created for string enums.)
-- 
-- Also see the `getEnumEntries` and `getEnumValues` helper functions.
-- 
-- For a more in depth explanation, see:
-- https://isaacscript.github.io/gotchas#iterating-over-enums
function ____exports.getEnumKeys(self, transpiledEnum)
    local enumEntries = ____exports.getEnumEntries(nil, transpiledEnum)
    return __TS__ArrayMap(
        enumEntries,
        function(____, ____bindingPattern0)
            local key
            key = ____bindingPattern0[1]
            local _value = ____bindingPattern0[2]
            return key
        end
    )
end
--- Helper function to get the amount of entries inside of an enum.
function ____exports.getEnumLength(self, transpiledEnum)
    local enumEntries = ____exports.getEnumEntries(nil, transpiledEnum)
    return #enumEntries
end
--- TypeScriptToLua will transpile TypeScript enums to Lua tables that have a double mapping. Thus,
-- when you iterate over them, you will get both the names of the enums and the values of the enums,
-- in a random order. If all you need are the values of an enum, use this helper function.
-- 
-- This function will return the enum values in a sorted order, which may not necessarily be the
-- same order as which they were declared in.
-- 
-- This function will work properly for both number enums and string enums. (Reverse mappings are
-- not created for string enums.)
-- 
-- Also see the `getEnumEntries` and `getEnumKeys` helper functions.
-- 
-- For a more in depth explanation, see:
-- https://isaacscript.github.io/gotchas#iterating-over-enums
function ____exports.getEnumValues(self, transpiledEnum)
    local enumEntries = ____exports.getEnumEntries(nil, transpiledEnum)
    return __TS__ArrayMap(
        enumEntries,
        function(____, ____bindingPattern0)
            local value
            local _key = ____bindingPattern0[1]
            value = ____bindingPattern0[2]
            return value
        end
    )
end
--- Helper function to get the enum value with the highest value.
-- 
-- Note that this is not necessarily the enum value that is declared last, since there is no way to
-- infer that at run-time.
function ____exports.getLastEnumValue(self, transpiledEnum)
    local enumValues = ____exports.getEnumValues(nil, transpiledEnum)
    local lastElement = enumValues[#enumValues]
    if lastElement == nil then
        error("Failed to get the last value from an enum since the enum was empty.")
    end
    return lastElement
end
--- Helper function to get a random value from the provided enum.
-- 
-- @param transpiledEnum The enum to get the value from.
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
-- @param exceptions Optional. An array of elements to skip over if selected.
function ____exports.getRandomEnumValue(self, transpiledEnum, seedOrRNG, exceptions)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if exceptions == nil then
        exceptions = {}
    end
    local enumValues = ____exports.getEnumValues(nil, transpiledEnum)
    return getRandomArrayElement(nil, enumValues, seedOrRNG, exceptions)
end
--- Helper function to check every value of a custom enum for -1. Will throw an run-time error if any
-- -1 values are found. This is helpful because many methods of the Isaac class return -1 if they
-- fail.
-- 
-- For example:
-- 
-- ```ts
-- enum EntityTypeCustom {
--   FOO = Isaac.GetEntityTypeByName("Foo"),
-- }
-- 
-- validateCustomEnum("EntityTypeCustom", EntityTypeCustom);
-- ```
function ____exports.validateCustomEnum(self, transpiledEnumName, transpiledEnum)
    for ____, ____value in ipairs(____exports.getEnumEntries(nil, transpiledEnum)) do
        local key = ____value[1]
        local value = ____value[2]
        if value == -1 then
            error((("Failed to find the custom enum value: " .. transpiledEnumName) .. ".") .. key)
        end
    end
end
--- Helper function to validate if every value in an enum is contiguous, starting at 0.
-- 
-- This is useful to automate checking large enums for typos.
function ____exports.validateEnumContiguous(self, transpiledEnumName, transpiledEnum)
    local values = ____exports.getEnumValues(nil, transpiledEnum)
    local valuesSet = __TS__New(Set, values)
    local lastValue = values[#values]
    if lastValue == nil then
        error("Failed to validate that an enum was contiguous, since the last value was undefined.")
    end
    if type(lastValue) ~= "number" then
        error("Failed to validate that an enum was contiguous, since the last value was not a number.")
    end
    for ____, value in ipairs(irange(nil, lastValue)) do
        if not valuesSet:has(value) then
            error((("Failed to find a custom enum value of " .. tostring(value)) .. " for: ") .. transpiledEnumName)
        end
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.array"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayEvery = ____lualib.__TS__ArrayEvery
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArrayIndexOf = ____lualib.__TS__ArrayIndexOf
local __TS__ArraySplice = ____lualib.__TS__ArraySplice
local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local __TS__ArraySort = ____lualib.__TS__ArraySort
local __TS__ArrayMap = ____lualib.__TS__ArrayMap
local __TS__ArraySlice = ____lualib.__TS__ArraySlice
local __TS__ArrayConcat = ____lualib.__TS__ArrayConcat
local __TS__ArrayUnshift = ____lualib.__TS__ArrayUnshift
local __TS__ObjectKeys = ____lualib.__TS__ObjectKeys
local __TS__ArraySome = ____lualib.__TS__ArraySome
local __TS__ArrayReduce = ____lualib.__TS__ArrayReduce
local ____exports = {}
local ____random = require("lua_modules.isaacscript-common.functions.random")
local getRandomInt = ____random.getRandomInt
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local getRandomSeed = ____rng.getRandomSeed
local isRNG = ____rng.isRNG
local newRNG = ____rng.newRNG
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isNumber = ____types.isNumber
local isTable = ____types.isTable
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local erange = ____utils.erange
local ____repeat = ____utils["repeat"]
--- Helper function to get a random index from the provided array.
-- 
-- @param array The array to get the index from.
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
function ____exports.getRandomArrayIndex(self, array, seedOrRNG)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if #array == 0 then
        error("Failed to get a random array index since the provided array is empty.")
    end
    return getRandomInt(nil, 0, #array - 1, seedOrRNG)
end
--- Shuffles the provided array in-place using the Fisher-Yates algorithm.
-- 
-- From: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array
-- 
-- @param array The array to shuffle.
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
function ____exports.shuffleArrayInPlace(self, array, seedOrRNG)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    local currentIndex = #array
    local rng = isRNG(nil, seedOrRNG) and seedOrRNG or newRNG(nil, seedOrRNG)
    while currentIndex > 0 do
        currentIndex = currentIndex - 1
        local randomIndex = ____exports.getRandomArrayIndex(nil, array, rng)
        ____exports.swapArrayElements(nil, array, currentIndex, randomIndex)
    end
end
--- Helper function to swap two different array elements. (The elements will be swapped in-place.)
function ____exports.swapArrayElements(self, array, i, j)
    local value1 = array[i + 1]
    local value2 = array[j + 1]
    array[i + 1] = value2
    array[j + 1] = value1
end
--- Helper function for determining if two arrays contain the exact same elements. Note that this
-- only performs a shallow comparison.
function ____exports.arrayEquals(self, array1, array2)
    if #array1 ~= #array2 then
        return false
    end
    return __TS__ArrayEvery(
        array1,
        function(____, array1Element, i)
            local array2Element = array2[i + 1]
            return array1Element == array2Element
        end
    )
end
--- Shallow copies and removes the specified element(s) from the array. Returns the copied array. If
-- the specified element(s) are not found in the array, it will simply return a shallow copy of the
-- array.
-- 
-- This function is variadic, meaning that you can specify N arguments to remove N elements.
function ____exports.arrayRemove(self, originalArray, ...)
    local elementsToRemove = {...}
    local elementsToRemoveSet = __TS__New(Set, elementsToRemove)
    local array = {}
    for ____, element in ipairs(originalArray) do
        if not elementsToRemoveSet:has(element) then
            array[#array + 1] = element
        end
    end
    return array
end
--- Removes the specified element(s) from the array. If the specified element(s) are not found in the
-- array, this function will do nothing. Returns true if one or more elements were removed.
-- 
-- This function is variadic, meaning that you can specify N arguments to remove N elements.
function ____exports.arrayRemoveInPlace(self, array, ...)
    local elementsToRemove = {...}
    local removedOneOrMoreElements = false
    for ____, element in ipairs(elementsToRemove) do
        local index = __TS__ArrayIndexOf(array, element)
        if index > -1 then
            removedOneOrMoreElements = true
            __TS__ArraySplice(array, index, 1)
        end
    end
    return removedOneOrMoreElements
end
--- Shallow copies and removes the elements at the specified indexes from the array. Returns the
-- copied array. If the specified indexes are not found in the array, it will simply return a
-- shallow copy of the array.
-- 
-- This function is variadic, meaning that you can specify N arguments to remove N elements.
function ____exports.arrayRemoveIndex(self, originalArray, ...)
    local indexesToRemove = {...}
    local indexesToRemoveSet = __TS__New(Set, indexesToRemove)
    local array = {}
    __TS__ArrayForEach(
        originalArray,
        function(____, element, i)
            if not indexesToRemoveSet:has(i) then
                array[#array + 1] = element
            end
        end
    )
    return array
end
--- Removes the elements at the specified indexes from the array. If the specified indexes are not
-- found in the array, this function will do nothing. Returns true if one or more elements were
-- removed.
-- 
-- This function is variadic, meaning that you can specify N arguments to remove N elements.
function ____exports.arrayRemoveIndexInPlace(self, array, ...)
    local indexesToRemove = {...}
    local legalIndexes = __TS__ArrayFilter(
        indexesToRemove,
        function(____, i) return i >= 0 and i < #array end
    )
    __TS__ArraySort(legalIndexes)
    if #legalIndexes == 0 then
        return false
    end
    do
        local i = #array - 1
        while i >= 0 do
            __TS__ArraySplice(array, i, 1)
            i = i - 1
        end
    end
    return true
end
function ____exports.arrayToString(self, array)
    if #array == 0 then
        return "[]"
    end
    local strings = __TS__ArrayMap(
        array,
        function(____, element) return tostring(element) end
    )
    local commaSeparatedStrings = table.concat(strings, ", ")
    return ("[" .. commaSeparatedStrings) .. "]"
end
--- Helper function to combine two or more arrays. Returns a new array that is the composition of all
-- of the specified arrays.
-- 
-- This function is variadic, meaning that you can specify N arguments to combine N arrays. Note
-- that this will only perform a shallow copy of the array elements.
function ____exports.combineArrays(self, ...)
    local arrays = {...}
    local elements = {}
    for ____, array in ipairs(arrays) do
        for ____, element in ipairs(array) do
            elements[#elements + 1] = element
        end
    end
    return elements
end
--- Helper function to perform a shallow copy.
-- 
-- @param oldArray The array to copy.
-- @param numElements Optional. If specified, will only copy the first N elements. By default, the
-- entire array will be copied.
function ____exports.copyArray(self, oldArray, numElements)
    if numElements == nil then
        numElements = #oldArray
    end
    local newArray = {}
    do
        local i = 0
        while i < numElements do
            local oldElement = oldArray[i + 1]
            if oldElement ~= nil then
                newArray[#newArray + 1] = oldElement
            end
            i = i + 1
        end
    end
    return newArray
end
--- Helper function to remove all of the elements in an array in-place.
function ____exports.emptyArray(self, array)
    __TS__ArraySplice(array, 0, #array)
end
--- Helper function to get all possible combinations of the given array. This includes the
-- combination of an empty array.
-- 
-- For example, if this function is provided an array containing 1, 2, and 3, then it will return an
-- array containing the following arrays:
-- 
-- - []
-- - [1]
-- - [2]
-- - [3]
-- - [1, 2]
-- - [1, 3]
-- - [2, 3]
-- - [1, 2, 3]
-- 
-- From: https://github.com/firstandthird/combinations/blob/master/index.js
-- 
-- @param array The array to get the combinations of.
-- @param min Optional. The minimum number of elements to include in each combination. Default is 1.
-- @param max Optional. The maximum number of elements to include in each combination. Default is
-- the length of the array.
function ____exports.getArrayCombinations(self, array, min, max)
    if min == nil or min <= 0 then
        min = 1
    end
    if max == nil or max <= 0 then
        max = #array
    end
    local addCombinations
    addCombinations = function(____, n, src, got, all)
        if n == 0 then
            if #got > 0 then
                all[#all + 1] = got
            end
            return
        end
        do
            local j = 0
            while j < #src do
                local value = src[j + 1]
                addCombinations(
                    nil,
                    n - 1,
                    __TS__ArraySlice(src, j + 1),
                    __TS__ArrayConcat(got, {value}),
                    all
                )
                j = j + 1
            end
        end
    end
    local all = {}
    do
        local i = min
        while i < #array do
            addCombinations(
                nil,
                i,
                array,
                {},
                all
            )
            i = i + 1
        end
    end
    if #array == max then
        all[#all + 1] = array
    end
    __TS__ArrayUnshift(all, {})
    return all
end
--- Helper function to get an array containing the indexes of an array.
-- 
-- For example, an array of `["Apple", "Banana"]` would return an array of `[0, 1]`.
function ____exports.getArrayIndexes(self, array)
    return erange(nil, #array)
end
--- Helper function to return the last element of an array.
-- 
-- If the array is empty, this will return undefined.
function ____exports.getLastElement(self, array)
    return array[#array]
end
--- Helper function to get a random element from the provided array.
-- 
-- @param array The array to get an element from.
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
-- @param exceptions Optional. An array of elements to skip over if selected.
function ____exports.getRandomArrayElement(self, array, seedOrRNG, exceptions)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if exceptions == nil then
        exceptions = {}
    end
    if #array == 0 then
        error("Failed to get a random array element since the provided array is empty.")
    end
    local arrayWithoutExceptions = ____exports.arrayRemove(
        nil,
        array,
        table.unpack(exceptions)
    )
    local randomIndex = ____exports.getRandomArrayIndex(nil, arrayWithoutExceptions, seedOrRNG)
    local randomElement = arrayWithoutExceptions[randomIndex + 1]
    if randomElement == nil then
        error(("Failed to get a random array element since the random index of " .. tostring(randomIndex)) .. " was not valid.")
    end
    return randomElement
end
--- Helper function to get a random element from the provided array. Once the random element is
-- decided, it is then removed from the array (in-place).
-- 
-- @param array The array to get an element from.
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
-- @param exceptions Optional. An array of elements to skip over if selected.
function ____exports.getRandomArrayElementAndRemove(self, array, seedOrRNG, exceptions)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if exceptions == nil then
        exceptions = {}
    end
    local randomArrayElement = ____exports.getRandomArrayElement(nil, array, seedOrRNG, exceptions)
    ____exports.arrayRemoveInPlace(nil, array, randomArrayElement)
    return randomArrayElement
end
--- Initializes an array with all elements containing the specified default value.
-- 
-- For example:
-- 
-- ```ts
-- const playerTransformations = initArray(false, PlayerForm.NUM_PLAYER_FORMS - 1);
-- ```
function ____exports.initArray(self, defaultValue, size)
    local array = {}
    ____repeat(
        nil,
        size,
        function()
            array[#array + 1] = defaultValue
        end
    )
    return array
end
--- Since Lua uses tables for every non-primitive data structure, it is non-trivial to determine if a
-- particular table is being used as an array. `isArray` returns true if:
-- 
-- - the table contains all numerical indexes that are contiguous, starting at 1
-- - the table has no keys (i.e. an "empty" table)
function ____exports.isArray(self, object)
    if not isTable(nil, object) then
        return false
    end
    local metatable = getmetatable(object)
    if metatable ~= nil then
        return false
    end
    local keys = __TS__ObjectKeys(object)
    local hasAllNumberKeys = __TS__ArrayEvery(
        keys,
        function(____, key) return isNumber(nil, key) end
    )
    if not hasAllNumberKeys then
        return false
    end
    local tableLength = #object
    if tableLength == 0 then
        return true
    end
    do
        local i = 1
        while i <= tableLength do
            local element = object[i]
            if element == nil then
                return false
            end
            i = i + 1
        end
    end
    return true
end
--- Helper function to see if every element in the array is N + 1.
-- 
-- For example, `[2, 3, 4]` would return true, and `[2, 3, 5]` would return false.
function ____exports.isArrayContiguous(self, array)
    local lastValue
    for ____, element in ipairs(array) do
        if lastValue == nil then
            lastValue = element - 1
        end
        if element ~= lastValue - 1 then
            return false
        end
    end
    return true
end
--- Checks if an array is in the provided 2-dimensional array.
function ____exports.isArrayInArray(self, arrayToMatch, parentArray)
    return __TS__ArraySome(
        parentArray,
        function(____, element) return ____exports.arrayEquals(nil, element, arrayToMatch) end
    )
end
--- Shallow copies and shuffles the array using the Fisher-Yates algorithm. Returns the copied array.
-- 
-- From: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array
-- 
-- @param originalArray The array to shuffle.
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
function ____exports.shuffleArray(self, originalArray, seedOrRNG)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    local array = ____exports.copyArray(nil, originalArray)
    ____exports.shuffleArrayInPlace(nil, array, seedOrRNG)
    return array
end
--- Helper function to sum every value in an array together.
function ____exports.sumArray(self, array)
    return __TS__ArrayReduce(
        array,
        function(____, accumulator, element) return accumulator + element end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.random"] = function(...) 
local ____exports = {}
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local getRandomSeed = ____rng.getRandomSeed
local isRNG = ____rng.isRNG
local newRNG = ____rng.newRNG
--- This returns a random float between 0 and 1. It is inclusive on the low end, but exclusive on the
-- high end. (This is because the `RNG.RandomFloat` method will never return a value of exactly 1.)
-- 
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
function ____exports.getRandom(self, seedOrRNG)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    local rng = isRNG(nil, seedOrRNG) and seedOrRNG or newRNG(nil, seedOrRNG)
    return rng:RandomFloat()
end
--- This returns a random float between min and max.
-- 
-- For example:
-- 
-- ```ts
-- const realNumberBetweenOneAndThree = getRandomFloat(1, 3);
-- ```
-- 
-- @param min The lower bound for the random number (inclusive).
-- @param max The upper bound for the random number (exclusive).
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
function ____exports.getRandomFloat(self, min, max, seedOrRNG)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if min > max then
        local oldMin = min
        local oldMax = max
        min = oldMax
        max = oldMin
    end
    return min + ____exports.getRandom(nil, seedOrRNG) * (max - min)
end
--- This returns a random integer between min and max. It is inclusive on both ends.
-- 
-- Note that this function will invoke the `Next` method on the `RNG` object before returning the
-- random number.
-- 
-- For example:
-- 
-- ```ts
-- const oneTwoOrThree = getRandomInt(1, 3);
-- ```
-- 
-- @param min The lower bound for the random number (inclusive).
-- @param max The upper bound for the random number (inclusive).
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
function ____exports.getRandomInt(self, min, max, seedOrRNG)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    local rng = isRNG(nil, seedOrRNG) and seedOrRNG or newRNG(nil, seedOrRNG)
    if min > max then
        local oldMin = min
        local oldMax = max
        min = oldMax
        max = oldMin
    end
    return rng:RandomInt(max - min + 1) + min
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.rng"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__TypeOf = ____lualib.__TS__TypeOf
local ____exports = {}
local RECOMMENDED_SHIFT_IDX, OBJECT_NAME
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____SerializationBrand = require("lua_modules.isaacscript-common.enums.private.SerializationBrand")
local SerializationBrand = ____SerializationBrand.SerializationBrand
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____isaacAPIClass = require("lua_modules.isaacscript-common.functions.isaacAPIClass")
local isaacAPIClassEquals = ____isaacAPIClass.isaacAPIClassEquals
local isIsaacAPIClassOfType = ____isaacAPIClass.isIsaacAPIClassOfType
local ____table = require("lua_modules.isaacscript-common.functions.table")
local getNumbersFromTable = ____table.getNumbersFromTable
local tableHasKeys = ____table.tableHasKeys
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isTable = ____types.isTable
--- Helper function to get a random `Seed` value to be used in spawning entities and so on. Use this
-- instead of calling the `Random` function directly since that can return a value of 0 and crash
-- the game.
function ____exports.getRandomSeed(self)
    local randomNumber = Random()
    local safeRandomNumber = randomNumber == 0 and 1 or randomNumber
    return safeRandomNumber
end
--- Helper function to check if something is an instantiated RNG object.
function ____exports.isRNG(self, object)
    return isIsaacAPIClassOfType(nil, object, OBJECT_NAME)
end
--- Helper function to initialize an RNG object using Blade's recommended shift index.
-- 
-- @param seed The seed to initialize it with. Default is `getRandomSeed()`.
function ____exports.newRNG(self, seed)
    if seed == nil then
        seed = ____exports.getRandomSeed(nil)
    end
    local rng = RNG()
    ____exports.setSeed(nil, rng, seed)
    return rng
end
--- Helper function to set a seed to an RNG object using Blade's recommended shift index.
function ____exports.setSeed(self, rng, seed)
    if seed == 0 then
        error("You cannot set an RNG object to a seed of 0, or the game will crash.")
    end
    rng:SetSeed(seed, RECOMMENDED_SHIFT_IDX)
end
RECOMMENDED_SHIFT_IDX = 35
local KEYS = {"seed"}
OBJECT_NAME = "RNG"
--- Helper function to copy an `RNG` object.
-- 
-- @param rng The RNG object to copy. In the case of deserialization, this will actually be a Lua
-- table instead of an instantiated RNG class.
-- @param serializationType Default is `SerializationType.NONE`.
function ____exports.copyRNG(self, rng, serializationType)
    if serializationType == nil then
        serializationType = SerializationType.NONE
    end
    repeat
        local ____switch3 = serializationType
        local ____cond3 = ____switch3 == SerializationType.NONE
        if ____cond3 then
            do
                if not ____exports.isRNG(nil, rng) then
                    error(((("Failed to copy a " .. OBJECT_NAME) .. " object since the provided object was not a userdata ") .. OBJECT_NAME) .. " class.")
                end
                local seed = rng:GetSeed()
                return ____exports.newRNG(nil, seed)
            end
        end
        ____cond3 = ____cond3 or ____switch3 == SerializationType.SERIALIZE
        if ____cond3 then
            do
                if not ____exports.isRNG(nil, rng) then
                    error(((("Failed to serialize a " .. OBJECT_NAME) .. " object since the provided object was not a userdata ") .. OBJECT_NAME) .. " class.")
                end
                local seed = rng:GetSeed()
                local rngTable = {}
                rngTable.seed = seed
                rngTable[SerializationBrand.RNG] = ""
                return rngTable
            end
        end
        ____cond3 = ____cond3 or ____switch3 == SerializationType.DESERIALIZE
        if ____cond3 then
            do
                if not isTable(nil, rng) then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object was not a Lua table.")
                end
                local seedNumber = table.unpack(getNumbersFromTable(
                    nil,
                    rng,
                    OBJECT_NAME,
                    table.unpack(KEYS)
                ))
                local seed = seedNumber
                return ____exports.newRNG(nil, seed)
            end
        end
    until true
end
--- Used to determine is the given table is a serialized `RNG` object created by the save data
-- manager and/or the `deepCopy` function.
function ____exports.isSerializedRNG(self, object)
    if not isTable(nil, object) then
        return false
    end
    return tableHasKeys(
        nil,
        object,
        table.unpack(KEYS)
    ) and object[SerializationBrand.RNG] ~= nil
end
function ____exports.rngEquals(self, rng1, rng2)
    return isaacAPIClassEquals(nil, rng1, rng2, KEYS)
end
--- Helper function to iterate over the provided object and set the seed for all of the values that
-- are RNG objects equal to a particular seed.
function ____exports.setAllRNGToSeed(self, object, seed)
    if not isTable(nil, object) then
        error("Failed to iterate over the object containing RNG objects since the type of the provided object was: " .. __TS__TypeOf(object))
    end
    local setAtLeastOneSeed = false
    for _key, value in pairs(object) do
        if ____exports.isRNG(nil, value) then
            ____exports.setSeed(nil, value, seed)
            setAtLeastOneSeed = true
        end
    end
    if not setAtLeastOneSeed then
        error(("Failed to set all RNG objects to seed " .. tostring(seed)) .. " because the parent object did not contain any RNG objects.")
    end
end
--- Helper function to iterate over the provided object and set the seed for all of the values that
-- are RNG objects equal to the start seed for the current run.
function ____exports.setAllRNGToStartSeed(self, object)
    local seeds = game:GetSeeds()
    local startSeed = seeds:GetStartSeed()
    ____exports.setAllRNGToSeed(nil, object, startSeed)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.isaacAPIClass"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayEvery = ____lualib.__TS__ArrayEvery
local ____exports = {}
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isString = ____types.isString
local isUserdata = ____types.isUserdata
--- Helper function to get the name of a class from the Isaac API. This is contained within the
-- "__type" metatable key.
-- 
-- For example, a `Vector` class is has a name of "Vector".
-- 
-- Returns undefined if the object is not of type `userdata` or if the "__type" metatable key does
-- not exist.
function ____exports.getIsaacAPIClassName(self, object)
    if not isUserdata(nil, object) then
        return nil
    end
    local metatable = getmetatable(object)
    if metatable == nil then
        return nil
    end
    local classType = metatable.__type
    if not isString(nil, classType) then
        return nil
    end
    return classType
end
--- Helper function to check if something is an instantiated class from the Isaac API. (All classes
-- from the Isaac API have a type of "userdata" in Lua with a metatable key of "__type" equal to the
-- name of the class.)
function ____exports.isIsaacAPIClass(self, object)
    local isaacAPIClassType = ____exports.getIsaacAPIClassName(nil, object)
    return isaacAPIClassType ~= nil
end
function ____exports.isIsaacAPIClassOfType(self, object, classType)
    local isaacAPIClassType = ____exports.getIsaacAPIClassName(nil, object)
    return isaacAPIClassType == classType or isaacAPIClassType == "const " .. classType
end
--- Helper function to check if an instantiated Isaac API class is equal to another one of the same
-- type. You must provide the list of keys to check for.
function ____exports.isaacAPIClassEquals(self, object1, object2, keys)
    local table1 = object1
    local table2 = object2
    return __TS__ArrayEvery(
        keys,
        function(____, key) return table1[key] == table2[key] end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.table"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__TypeOf = ____lualib.__TS__TypeOf
local __TS__ObjectKeys = ____lualib.__TS__ObjectKeys
local __TS__ArrayEvery = ____lualib.__TS__ArrayEvery
local __TS__ArraySort = ____lualib.__TS__ArraySort
local ____exports = {}
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isBoolean = ____types.isBoolean
local isNumber = ____types.isNumber
local isString = ____types.isString
--- In a Map, you can use the `clear` method to delete every element. However, in a LuaTable, the
-- `clear` method does not exist. Use this helper function as a drop-in replacement for this.
function ____exports.clearTable(self, luaTable)
    for key in pairs(luaTable) do
        luaTable[key] = nil
    end
end
--- Helper function to copy specific values from a object to a table.
function ____exports.copyValuesToTable(self, object, keys, luaTable)
    local otherTable = object
    for ____, key in ipairs(keys) do
        local value = otherTable[key]
        luaTable[key] = value
    end
end
--- Helper function to safely get boolean values from a Lua table. Will throw an error if the
-- specific value does not exist on the table.
-- 
-- This function is variadic, meaning that you can specify N arguments to get N values.
function ____exports.getBooleansFromTable(self, luaTable, objectName, ...)
    local keys = {...}
    local booleans = {}
    for ____, key in ipairs(keys) do
        local value = luaTable[key]
        if value == nil then
            error(((("Failed to find a value for \"" .. key) .. "\" in a table representing a \"") .. objectName) .. "\" object.")
        end
        if isBoolean(nil, value) then
            booleans[#booleans + 1] = value
        else
            error((((("Failed to get the boolean for the \"" .. key) .. "\" value of a table representing a \"") .. objectName) .. "\" object because the type was: ") .. __TS__TypeOf(value))
        end
    end
    return booleans
end
--- Helper function to safely get number values from a Lua table. Will throw an error if the specific
-- value does not exist on the table or if it cannot be converted to a number.
-- 
-- This function is variadic, meaning that you can specify N arguments to get N values.
function ____exports.getNumbersFromTable(self, luaTable, objectName, ...)
    local keys = {...}
    local numbers = {}
    for ____, key in ipairs(keys) do
        local value = luaTable[key]
        if value == nil then
            error(((("Failed to find a value for \"" .. key) .. "\" in a table representing a \"") .. objectName) .. "\" object.")
        end
        if isNumber(nil, value) then
            numbers[#numbers + 1] = value
        elseif isString(nil, value) then
            local number = tonumber(value)
            if number == nil then
                error((((("Failed to convert the \"" .. key) .. "\" value of a table representing a \"") .. objectName) .. "\" object to a number: ") .. value)
            end
            numbers[#numbers + 1] = number
        else
            error((((("Failed to get the number for the \"" .. key) .. "\" value of a table representing a \"") .. objectName) .. "\" object because the type was: ") .. __TS__TypeOf(value))
        end
    end
    return numbers
end
--- Helper function to safely get string values from a Lua table. Will throw an error if the specific
-- value does not exist on the table.
-- 
-- This function is variadic, meaning that you can specify N arguments to get N values.
function ____exports.getStringsFromTable(self, luaTable, objectName, ...)
    local keys = {...}
    local strings = {}
    for ____, key in ipairs(keys) do
        local value = luaTable[key]
        if value == nil then
            error(((("Failed to find a value for \"" .. key) .. "\" in a table representing a \"") .. objectName) .. "\" object.")
        end
        if isString(nil, value) then
            strings[#strings + 1] = value
        else
            local ____string = tostring(value)
            strings[#strings + 1] = ____string
        end
    end
    return strings
end
--- Helper function to iterate over a table deterministically. This is useful because by default, the
-- `pairs` function will return the keys of a Lua table in a random order.
-- 
-- This function will sort the table entries based on the value of the key.
-- 
-- This function will only work on tables that have number keys or string keys. It will throw a
-- runtime error if it encounters a key of another type.
-- 
-- @param luaTable The table to iterate over.
-- @param func The function to run for each iteration.
-- @param inOrder Optional. Whether to iterate in order. True by default. You can dynamically set to
-- false in situations where iterating randomly would not matter and you need the
-- extra performance.
function ____exports.iterateTableInOrder(self, luaTable, func, inOrder)
    if inOrder == nil then
        inOrder = true
    end
    if not inOrder then
        for key, value in pairs(luaTable) do
            func(nil, key, value)
        end
        return
    end
    local keys = __TS__ObjectKeys(luaTable)
    local hasAllNumberKeys = __TS__ArrayEvery(
        keys,
        function(____, key) return isNumber(nil, key) end
    )
    local hasAllStringKeys = __TS__ArrayEvery(
        keys,
        function(____, key) return isString(nil, key) end
    )
    if not hasAllNumberKeys and not hasAllStringKeys then
        for key, value in pairs(luaTable) do
            func(nil, key, value)
        end
        return
    end
    __TS__ArraySort(keys)
    for ____, key in ipairs(keys) do
        local keyIndex = key
        local value = luaTable[keyIndex]
        func(nil, keyIndex, value)
    end
end
--- Helper function to check if a Lua table has all of the provided keys.
-- 
-- This function is variadic, meaning that you can specify as many arguments as you want to check
-- for.
function ____exports.tableHasKeys(self, luaTable, ...)
    local keys = {...}
    return __TS__ArrayEvery(
        keys,
        function(____, key) return luaTable[key] ~= nil end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.utils"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__StringReplace = ____lualib.__TS__StringReplace
local __TS__StringSubstr = ____lualib.__TS__StringSubstr
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RenderMode = ____isaac_2Dtypescript_2Ddefinitions.RenderMode
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____consoleCommandsSet = require("lua_modules.isaacscript-common.sets.consoleCommandsSet")
local CONSOLE_COMMANDS_SET = ____consoleCommandsSet.CONSOLE_COMMANDS_SET
local HEX_STRING_LENGTH = 6
--- Helper function to return an array with the elements from start to end. It is inclusive at the
-- start and exclusive at the end. (The "e" stands for exclusive.)
-- 
-- For example, `erange(1, 3)` will return `[1, 2]`.
-- 
-- If only one argument is specified, then it will assume that the start is 0.
function ____exports.erange(self, start, ____end)
    if ____end == nil then
        ____end = start
        start = 0
    end
    local array = {}
    do
        local i = start
        while i < ____end do
            array[#array + 1] = i
            i = i + 1
        end
    end
    return array
end
--- Helper function to log what is happening in functions that recursively move through nested data
-- structures.
function ____exports.getTraversalDescription(self, key, traversalDescription)
    if traversalDescription ~= "" then
        traversalDescription = traversalDescription .. " --> "
    end
    traversalDescription = traversalDescription .. tostring(key)
    return traversalDescription
end
--- Converts a hex string like "#33aa33" to a KColor object.
-- 
-- @param hexString A hex string like "#ffffff" or "ffffff". (The "#" character is optional.)
function ____exports.hexToKColor(self, hexString, alpha)
    hexString = __TS__StringReplace(hexString, "#", "")
    if #hexString ~= HEX_STRING_LENGTH then
        error(("Hex strings must be of length " .. tostring(HEX_STRING_LENGTH)) .. ".")
    end
    local rString = __TS__StringSubstr(hexString, 0, 2)
    local R = tonumber("0x" .. rString)
    if R == nil then
        error(("Failed to convert `0x" .. rString) .. "` to a number.")
    end
    local gString = __TS__StringSubstr(hexString, 2, 2)
    local G = tonumber("0x" .. gString)
    if G == nil then
        error(("Failed to convert `0x" .. gString) .. "` to a number.")
    end
    local bString = __TS__StringSubstr(hexString, 4, 2)
    local B = tonumber("0x" .. bString)
    if B == nil then
        error(("Failed to convert `0x" .. bString) .. "` to a number.")
    end
    local base = 255
    return KColor(R / base, G / base, B / base, alpha)
end
--- Helper function to return an array with the elements from start to end, inclusive. (The "i"
-- stands for inclusive.)
-- 
-- For example, `irange(1, 3)` will return `[1, 2, 3]`.
-- 
-- If only one argument is specified, then it will assume that the start is 0.
function ____exports.irange(self, start, ____end)
    if ____end == nil then
        ____end = start
        start = 0
    end
    local array = {}
    do
        local i = start
        while i <= ____end do
            array[#array + 1] = i
            i = i + 1
        end
    end
    return array
end
--- Since this is a UI element, we do not want to draw it in water reflections. `renderOffset` will
-- be a non-zero value in reflections.
function ____exports.isReflectionRender(self)
    local room = game:GetRoom()
    local renderMode = room:GetRenderMode()
    return renderMode == RenderMode.WATER_REFLECT
end
--- Helper function to see if a particular command is a vanilla console command. This is useful
-- because the `EXECUTE_CMD` callback will not fire for any vanilla commands.
function ____exports.isVanillaConsoleCommand(self, commandName)
    return CONSOLE_COMMANDS_SET:has(commandName)
end
--- Helper function to print something to the in-game console. Use this instead of invoking the
-- `Isaac.ConsoleOutput` method directly because it will automatically insert a newline at the end
-- of the message (which `Isaac.ConsoleOutput` does not do by default).
function ____exports.printConsole(self, msg)
    Isaac.ConsoleOutput(msg .. "\n")
end
--- Helper function to print whether something was enabled or disabled to the in-game console.
function ____exports.printEnabled(self, enabled, description)
    local enabledText = enabled and "Enabled" or "Disabled"
    ____exports.printConsole(nil, ((enabledText .. " ") .. description) .. ".")
end
--- Helper function to repeat code N times. This is faster to type and cleaner than using a for loop.
-- 
-- For example:
-- 
-- ```ts
-- const player = Isaac.GetPlayer();
-- repeat(10, () => {
--   player.AddCollectible(CollectibleType.STEVEN);
-- });
-- ```
-- 
-- The repeated function is passed the index of the iteration, if needed:
-- 
-- ```ts
-- repeat(3, (i) => {
--   print(i); // Prints "0", "1", "2"
-- });
-- ```
____exports["repeat"] = function(self, n, func)
    do
        local i = 0
        while i < n do
            func(nil, i)
            i = i + 1
        end
    end
end
--- Helper function to signify that the enclosing code block is not yet complete. Using this function
-- is similar to writing a "TODO" comment, but it has the benefit of preventing ESLint errors due to
-- early returns.
-- 
-- When you see this function, it simply means that the programmer intends to add in more code to
-- this spot later.
-- 
-- This function does not actually do anything. (It is an "empty" function.)
function ____exports.todo(self)
end
--- Helper function to sort a two-dimensional array by the first element.
-- 
-- For example:
-- 
-- ```ts
-- const myArray = [[1, 2], [2, 3], [3, 4]];
-- myArray.sort(twoDimensionalSort);
-- ```
-- 
-- From:
-- https://stackoverflow.com/questions/16096872/how-to-sort-2-dimensional-array-by-column-value
function ____exports.twoDimensionalSort(self, a, b)
    if a[1] == nil or b[1] == nil then
        error("Failed to two-dimensional sort since the first element of the array was undefined.")
    end
    if a[1] == b[1] then
        return 0
    end
    return a[1] < b[1] and -1 or 1
end
return ____exports
 end,
["lua_modules.isaacscript-common.sets.consoleCommandsSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
--- The set of vanilla console commands, as documented here:
-- https://bindingofisaacrebirth.fandom.com/wiki/Debug_Console
____exports.CONSOLE_COMMANDS_SET = __TS__New(Set, {
    "achievement",
    "challenge",
    "clear",
    "clearcache",
    "clearseeds",
    "combo",
    "copy",
    "costumetest",
    "curse",
    "cutscene",
    "debug",
    "delirious",
    "eggs",
    "giveitem",
    "g",
    "goto",
    "gridspawn",
    "listcollectibles",
    "lua",
    "l",
    "luamem",
    "luamod",
    "luarun",
    "macro",
    "m",
    "metro",
    "playsfx",
    "prof",
    "profstop",
    "remove",
    "r",
    "reloadfx",
    "reloadshaders",
    "repeat",
    "reseed",
    "restart",
    "seed",
    "spawn",
    "stage",
    "time",
    "addplayer",
    "forceroom",
    "giveitem2",
    "g2",
    "netdelay",
    "netstart",
    "remove2",
    "r2",
    "reloadwisps",
    "restock",
    "rewind",
    "testbosspool"
})
return ____exports
 end,
["lua_modules.isaacscript-common.functions.log"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
local Map = ____lualib.Map
local __TS__Spread = ____lualib.__TS__Spread
local __TS__ArraySort = ____lualib.__TS__ArraySort
local __TS__TypeOf = ____lualib.__TS__TypeOf
local __TS__ObjectKeys = ____lualib.__TS__ObjectKeys
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local DamageFlag = ____isaac_2Dtypescript_2Ddefinitions.DamageFlag
local EffectVariant = ____isaac_2Dtypescript_2Ddefinitions.EffectVariant
local EntityFlag = ____isaac_2Dtypescript_2Ddefinitions.EntityFlag
local GameStateFlag = ____isaac_2Dtypescript_2Ddefinitions.GameStateFlag
local GridEntityType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityType
local GridRoom = ____isaac_2Dtypescript_2Ddefinitions.GridRoom
local LevelStateFlag = ____isaac_2Dtypescript_2Ddefinitions.LevelStateFlag
local ProjectileFlag = ____isaac_2Dtypescript_2Ddefinitions.ProjectileFlag
local SeedEffect = ____isaac_2Dtypescript_2Ddefinitions.SeedEffect
local SoundEffect = ____isaac_2Dtypescript_2Ddefinitions.SoundEffect
local TearFlag = ____isaac_2Dtypescript_2Ddefinitions.TearFlag
local UseFlag = ____isaac_2Dtypescript_2Ddefinitions.UseFlag
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local sfxManager = ____cachedClasses.sfxManager
local ____array = require("lua_modules.isaacscript-common.functions.array")
local arrayToString = ____array.arrayToString
local ____collectibles = require("lua_modules.isaacscript-common.functions.collectibles")
local getCollectibleName = ____collectibles.getCollectibleName
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local getEntities = ____entity.getEntities
local getEntityID = ____entity.getEntityID
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumEntries = ____enums.getEnumEntries
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local hasFlag = ____flag.hasFlag
local ____gridEntity = require("lua_modules.isaacscript-common.functions.gridEntity")
local getGridEntities = ____gridEntity.getGridEntities
local ____isaacAPIClass = require("lua_modules.isaacscript-common.functions.isaacAPIClass")
local getIsaacAPIClassName = ____isaacAPIClass.getIsaacAPIClassName
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getEffectsList = ____player.getEffectsList
local getPlayerName = ____player.getPlayerName
local ____playerHealth = require("lua_modules.isaacscript-common.functions.playerHealth")
local getPlayerHealth = ____playerHealth.getPlayerHealth
local ____roomData = require("lua_modules.isaacscript-common.functions.roomData")
local getRoomData = ____roomData.getRoomData
local getRoomGridIndex = ____roomData.getRoomGridIndex
local getRoomListIndex = ____roomData.getRoomListIndex
local ____set = require("lua_modules.isaacscript-common.functions.set")
local combineSets = ____set.combineSets
local getSortedSetValues = ____set.getSortedSetValues
local ____table = require("lua_modules.isaacscript-common.functions.table")
local iterateTableInOrder = ____table.iterateTableInOrder
local ____trinkets = require("lua_modules.isaacscript-common.functions.trinkets")
local getTrinketName = ____trinkets.getTrinketName
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isTable = ____types.isTable
local isUserdata = ____types.isUserdata
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local printConsole = ____utils.printConsole
local ____vector = require("lua_modules.isaacscript-common.functions.vector")
local vectorToString = ____vector.vectorToString
--- Helper function to prefix the name of the function and the line number before a debug message.
function ____exports.getDebugPrependString(self, msg, numParentFunctions)
    if numParentFunctions == nil then
        numParentFunctions = 3
    end
    if debug ~= nil then
        local debugTable = debug.getinfo(numParentFunctions)
        if debugTable ~= nil then
            return (((tostring(debugTable.name) .. ":") .. tostring(debugTable.linedefined)) .. " - ") .. msg
        end
    end
    if getParentFunctionDescription ~= nil then
        return (tostring(getParentFunctionDescription(numParentFunctions + 1)) .. " - ") .. msg
    end
    return msg
end
--- Helper function to avoid typing out `Isaac.DebugString()`.
-- 
-- If you have the "--luadebug" launch flag turned on or the Racing+ sandbox enabled, then this
-- function will also prepend the function name and the line number before the string.
function ____exports.log(msg)
    local debugMsg = ____exports.getDebugPrependString(nil, msg)
    Isaac.DebugString(debugMsg)
end
--- Helper function for printing out every flag that is turned on. Useful when debugging.
function ____exports.logFlags(flags, flagEnum, description)
    if description == nil then
        description = ""
    end
    if description ~= "" then
        description = "flag"
    end
    ____exports.log((("Logging " .. description) .. " values for: ") .. tostring(flags))
    local hasNoFlags = true
    for ____, ____value in ipairs(getEnumEntries(nil, flagEnum)) do
        local key = ____value[1]
        local value = ____value[2]
        if hasFlag(nil, flags, value) then
            ____exports.log(((("  Has flag: " .. key) .. " (") .. tostring(value)) .. ")")
            hasNoFlags = false
        end
    end
    if hasNoFlags then
        ____exports.log("  n/a (no flags)")
    end
end
local IGNORE_EFFECT_VARIANTS = __TS__New(Set, {
    EffectVariant.BLOOD_EXPLOSION,
    EffectVariant.BLOOD_PARTICLE,
    EffectVariant.TINY_BUG,
    EffectVariant.TINY_FLY,
    EffectVariant.WATER_DROPLET,
    EffectVariant.WALL_BUG,
    EffectVariant.FALLING_EMBER,
    EffectVariant.LIGHT,
    EffectVariant.TADPOLE
})
function ____exports.logArray(array)
    local arrayString = arrayToString(nil, array)
    ____exports.log("Array: " .. arrayString)
end
function ____exports.logColor(color)
    ____exports.log((((((((((((("Color: R" .. tostring(color.R)) .. ", G") .. tostring(color.G)) .. ", B") .. tostring(color.B)) .. ", A") .. tostring(color.A)) .. ", RO") .. tostring(color.RO)) .. ", BO") .. tostring(color.BO)) .. ", GO") .. tostring(color.GO))
end
--- Helper function for printing out every damage flag that is turned on. Useful when debugging.
function ____exports.logDamageFlags(flags)
    ____exports.logFlags(flags, DamageFlag, "damage")
end
function ____exports.logEffects(player)
    local effects = getEffectsList(nil, player)
    ____exports.log("Logging player effects:")
    if #effects == 0 then
        ____exports.log("  n/a (no effects)")
        return
    end
    __TS__ArrayForEach(
        effects,
        function(____, effect, i)
            local effectDescription
            if effect.Item:IsCollectible() then
                local collectibleName = getCollectibleName(nil, effect.Item.ID)
                effectDescription = "Collectible: " .. collectibleName
            elseif effect.Item:IsTrinket() then
                local trinketName = getTrinketName(nil, effect.Item.ID)
                effectDescription = "Trinket: " .. trinketName
            elseif effect.Item:IsNull() then
                effectDescription = "Null item: " .. tostring(effect.Item.ID)
            else
                effectDescription = "Unknown type of effect: " .. tostring(effect.Item.ID)
            end
            ____exports.log(((((("  " .. tostring(i + 1)) .. ") ") .. effectDescription) .. " (x") .. tostring(effect.Count)) .. ")")
        end
    )
end
--- Helper function for printing out every entity (or filtered entity) in the current room.
function ____exports.logEntities(includeBackgroundEffects, entityTypeFilter)
    local msg = "Entities in the room"
    if entityTypeFilter ~= nil then
        msg = msg .. (" (filtered to entity type " .. tostring(entityTypeFilter)) .. ")"
    elseif not includeBackgroundEffects then
        msg = msg .. " (not including background effects)"
    end
    msg = msg .. ":\n"
    local entities = getEntities(nil)
    local numMatchedEntities = 0
    __TS__ArrayForEach(
        entities,
        function(____, entity, i)
            if entityTypeFilter ~= nil and entity.Type ~= entityTypeFilter then
                return
            end
            local effect = entity:ToEffect()
            if not includeBackgroundEffects and effect ~= nil and IGNORE_EFFECT_VARIANTS:has(effect.Variant) then
                return
            end
            local entityID = getEntityID(nil, entity)
            msg = msg .. (tostring(i + 1) .. ") ") .. entityID
            local bomb = entity:ToBomb()
            if bomb ~= nil then
                msg = msg .. " (bomb)"
            end
            if effect ~= nil then
                msg = msg .. (" (effect) (State: " .. tostring(effect.State)) .. ")"
            end
            local familiar = entity:ToFamiliar()
            if familiar ~= nil then
                msg = msg .. (" (familiar) (State: " .. tostring(familiar.State)) .. ")"
            end
            local knife = entity:ToKnife()
            if knife ~= nil then
                msg = msg .. " (knife)"
            end
            local laser = entity:ToLaser()
            if laser ~= nil then
                msg = msg .. " (laser)"
            end
            local npc = entity:ToNPC()
            if npc ~= nil then
                msg = msg .. (" (NPC) (State: " .. tostring(npc.State)) .. ")"
            end
            local pickup = entity:ToPickup()
            if pickup ~= nil then
                msg = msg .. (" (pickup) (State: " .. tostring(pickup.State)) .. ")"
            end
            local player = entity:ToPlayer()
            if player ~= nil then
                msg = msg .. " (player)"
            end
            local projectile = entity:ToProjectile()
            if projectile ~= nil then
                msg = msg .. " (projectile)"
            end
            local tear = entity:ToTear()
            if tear ~= nil then
                msg = msg .. " (tear)"
            end
            msg = msg .. "\n"
            msg = msg .. ("  - Index: " .. tostring(entity.Index)) .. "\n"
            msg = msg .. ("  - InitSeed: " .. tostring(entity.InitSeed)) .. "\n"
            msg = msg .. ("  - DropSeed: " .. tostring(entity.DropSeed)) .. "\n"
            msg = msg .. ((("  - Position: (" .. tostring(entity.Position.X)) .. ", ") .. tostring(entity.Position.Y)) .. ")\n"
            msg = msg .. ((("  - Velocity: (" .. tostring(entity.Velocity.X)) .. ", ") .. tostring(entity.Velocity.Y)) .. ")\n"
            msg = msg .. ((("  - HP: " .. tostring(entity.HitPoints)) .. " / ") .. tostring(entity.MaxHitPoints)) .. "\n"
            msg = msg .. ("  - Parent: " .. tostring(entity.Parent)) .. "\n"
            msg = msg .. ("  - Child: " .. tostring(entity.Child)) .. "\n"
            msg = msg .. ("  - SpawnerEntity: " .. tostring(entity.SpawnerEntity)) .. "\n"
            msg = msg .. ((("  - SpawnerType / SpawnerVariant: " .. tostring(entity.SpawnerType)) .. ".") .. tostring(entity.SpawnerVariant)) .. "\n"
            if npc ~= nil then
                msg = msg .. ("  - CanShutDoors: " .. tostring(npc.CanShutDoors)) .. "\n"
            end
            numMatchedEntities = numMatchedEntities + 1
        end
    )
    if numMatchedEntities == 0 then
        msg = msg .. "(no entities matched)\n"
    else
        msg = msg .. ((("(" .. tostring(numMatchedEntities)) .. " total ") .. (numMatchedEntities == 1 and "entity" or "entities")) .. ")\n"
    end
    ____exports.log(msg)
end
--- Helper function for printing out every entity flag that is turned on. Useful when debugging.
function ____exports.logEntityFlags(flags)
    ____exports.logFlags(flags, EntityFlag, "entity")
end
function ____exports.logEntityID(entity)
    ____exports.log((((("Entity: " .. tostring(entity.Type)) .. ".") .. tostring(entity.Variant)) .. ".") .. tostring(entity.SubType))
end
--- Helper function to log an error message and also print it to the console for better visibility.
-- 
-- This is useful in situations where using the `error` function would be dangerous (since it
-- prevents all of the subsequent code in the callback from running).
function ____exports.logError(msg)
    local errorMsg = "Error: " .. msg
    ____exports.log(errorMsg)
    printConsole(nil, errorMsg)
end
--- Helper function for printing out every game state flag that is turned on. Useful when debugging.
function ____exports.logGameStateFlags()
    ____exports.log("Logging game state flags:")
    local gameStateFlagEntries = getEnumEntries(nil, GameStateFlag)
    local hasNoFlags = true
    for ____, ____value in ipairs(gameStateFlagEntries) do
        local key = ____value[1]
        local gameStateFlag = ____value[2]
        local flagValue = game:GetStateFlag(gameStateFlag)
        if flagValue then
            ____exports.log(((("  Has flag: " .. key) .. " (") .. tostring(gameStateFlag)) .. ")")
            hasNoFlags = false
        end
    end
    if hasNoFlags then
        ____exports.log("  n/a (no flags)")
    end
end
--- Helper function for printing out every grid entity (or filtered grid entity) in the current room.
function ____exports.logGridEntities(includeWalls, gridEntityTypeFilter)
    local msg = "Grid entities in the room"
    if gridEntityTypeFilter ~= nil then
        msg = msg .. (" (filtered to grid entity type " .. tostring(gridEntityTypeFilter)) .. ")"
    elseif not includeWalls then
        msg = msg .. " (not including walls)"
    end
    msg = msg .. ":\n"
    local gridEntities = getGridEntities(nil)
    local numMatchedEntities = 0
    __TS__ArrayForEach(
        gridEntities,
        function(____, gridEntity)
            local gridEntityIndex = gridEntity:GetGridIndex()
            local gridEntityType = gridEntity:GetType()
            local gridEntityVariant = gridEntity:GetVariant()
            local gridEntityDesc = gridEntity:GetSaveState()
            if gridEntityTypeFilter ~= nil and gridEntityType ~= gridEntityTypeFilter then
                return
            end
            if not includeWalls and gridEntityType == GridEntityType.WALL and gridEntityTypeFilter ~= GridEntityType.WALL then
                return
            end
            msg = msg .. (((((tostring(gridEntityIndex) .. ") ") .. tostring(gridEntityType)) .. ".") .. tostring(gridEntityVariant)) .. ".") .. tostring(gridEntity.State)
            local door = gridEntity:ToDoor()
            if door ~= nil then
                msg = msg .. " (door)"
            end
            local pit = gridEntity:ToPit()
            if pit ~= nil then
                msg = msg .. " (pit)"
            end
            local poop = gridEntity:ToPoop()
            if poop ~= nil then
                msg = msg .. " (poop)"
            end
            local pressurePlate = gridEntity:ToPressurePlate()
            if pressurePlate ~= nil then
                msg = msg .. " (pressurePlate)"
            end
            local rock = gridEntity:ToRock()
            if rock ~= nil then
                msg = msg .. " (rock)"
            end
            local spikes = gridEntity:ToSpikes()
            if spikes ~= nil then
                msg = msg .. " (spikes)"
            end
            local tnt = gridEntity:ToTNT()
            if tnt ~= nil then
                msg = msg .. " (TNT)"
            end
            msg = msg .. ("  - VarData: " .. tostring(gridEntity.VarData)) .. "\n"
            msg = msg .. ((("  - Position: (" .. tostring(gridEntity.Position.X)) .. ", ") .. tostring(gridEntity.Position.Y)) .. ")\n"
            msg = msg .. ("  - SpawnSeed: " .. tostring(gridEntityDesc.SpawnSeed)) .. "\n"
            msg = msg .. ("  - VariableSeed: " .. tostring(gridEntityDesc.VariableSeed)) .. ")\n"
            if door ~= nil then
                msg = msg .. ("  - Slot: " .. tostring(door.Slot)) .. "\n"
                msg = msg .. ("  - Direction: " .. tostring(door.Direction)) .. "\n"
                msg = msg .. ("  - TargetRoomIndex: " .. tostring(door.TargetRoomIndex)) .. "\n"
                msg = msg .. ("  - TargetRoomType: " .. tostring(door.TargetRoomType)) .. "\n"
            end
            numMatchedEntities = numMatchedEntities + 1
        end
    )
    if numMatchedEntities == 0 then
        msg = msg .. "(no grid entities matched)\n"
    else
        msg = msg .. ((("(" .. tostring(numMatchedEntities)) .. " total grid ") .. (numMatchedEntities == 1 and "entity" or "entities")) .. ")\n"
    end
    ____exports.log(msg)
end
function ____exports.logKColor(kColor)
    ____exports.log((((((("Color: R" .. tostring(kColor.Red)) .. ", G") .. tostring(kColor.Green)) .. ", B") .. tostring(kColor.Blue)) .. ", A") .. tostring(kColor.Alpha))
end
--- Helper function for printing out every level state flag that is turned on. Useful when debugging.
function ____exports.logLevelStateFlags()
    local level = game:GetLevel()
    local levelStateFlagEntries = getEnumEntries(nil, LevelStateFlag)
    ____exports.log("Logging level state flags:")
    local hasNoFlags = true
    for ____, ____value in ipairs(levelStateFlagEntries) do
        local key = ____value[1]
        local levelStateFlag = ____value[2]
        local flagValue = level:GetStateFlag(levelStateFlag)
        if flagValue then
            ____exports.log(((("  Has flag: " .. key) .. " (") .. tostring(levelStateFlag)) .. ")")
            hasNoFlags = false
        end
    end
    if hasNoFlags then
        ____exports.log("  n/a (no flags)")
    end
end
function ____exports.logMap(map)
    ____exports.log("Printing out a TSTL Map:")
    local mapKeys = {__TS__Spread(map:keys())}
    __TS__ArraySort(mapKeys)
    for ____, key in ipairs(mapKeys) do
        local value = map:get(key)
        ____exports.log((("  " .. tostring(key)) .. " --> ") .. tostring(value))
    end
    ____exports.log("  The size of the map was: " .. tostring(map.size))
end
function ____exports.logPlayerHealth(player)
    local playerName = getPlayerName(nil, player)
    local playerHealth = getPlayerHealth(nil, player)
    ____exports.log(("Player health for " .. playerName) .. ":")
    ____exports.log("  Max hearts: " .. tostring(playerHealth.maxHearts))
    ____exports.log("  Hearts: " .. tostring(playerHealth.hearts))
    ____exports.log("  Eternal hearts: " .. tostring(playerHealth.eternalHearts))
    ____exports.log("  Soul hearts: " .. tostring(playerHealth.soulHearts))
    ____exports.log("  Bone hearts: " .. tostring(playerHealth.boneHearts))
    ____exports.log("  Golden hearts: " .. tostring(playerHealth.goldenHearts))
    ____exports.log("  Rotten hearts: " .. tostring(playerHealth.rottenHearts))
    ____exports.log("  Broken hearts: " .. tostring(playerHealth.brokenHearts))
    ____exports.log("  Soul charges: " .. tostring(playerHealth.soulCharges))
    ____exports.log("  Blood charges: " .. tostring(playerHealth.bloodCharges))
    ____exports.log(("  Soul heart types: [" .. table.concat(playerHealth.soulHeartTypes, ",")) .. "]")
end
--- Helper function for printing out every projectile flag that is turned on. Useful when debugging.
function ____exports.logProjectileFlags(flags)
    ____exports.logFlags(flags, ProjectileFlag, "projectile")
end
--- Helper function for logging information about the current room.
function ____exports.logRoom()
    local roomGridIndex = getRoomGridIndex(nil)
    local roomListIndex = getRoomListIndex(nil)
    local roomData = getRoomData(nil)
    if roomData == nil then
        ____exports.log("Current room data is undefined.")
    else
        ____exports.log("Current room stage ID: " .. tostring(roomData.StageID))
        ____exports.log((((("Current room type/variant/sub-type: " .. tostring(roomData.Type)) .. ".") .. tostring(roomData.Variant)) .. ".") .. tostring(roomData.Subtype))
        ____exports.log("Current room name: " .. roomData.Name)
    end
    local roomGridIndexName = GridRoom[roomGridIndex]
    if roomGridIndexName == nil then
        ____exports.log("Current room grid index: " .. tostring(roomGridIndex))
    else
        ____exports.log(((("Current room grid index: " .. tostring(roomGridIndex)) .. " (GridRoom.") .. roomGridIndexName) .. ")")
    end
    ____exports.log("Current room list index: " .. tostring(roomListIndex))
end
--- Helper function for printing out every seed effect (i.e. Easter Egg) that is turned on for the
-- particular run.
function ____exports.logSeedEffects()
    local seeds = game:GetSeeds()
    local seedEffectEntries = getEnumEntries(nil, SeedEffect)
    ____exports.log("Logging seed effects:")
    local hasNoSeedEffects = true
    for ____, ____value in ipairs(seedEffectEntries) do
        local key = ____value[1]
        local seedEffect = ____value[2]
        if seeds:HasSeedEffect(seedEffect) then
            ____exports.log(((("  " .. key) .. " (") .. tostring(seedEffect)) .. ")")
            hasNoSeedEffects = false
        end
    end
    if hasNoSeedEffects then
        ____exports.log("  n/a (no seed effects)")
    end
end
function ____exports.logSet(set)
    ____exports.log("Printing out a TSTL Set:")
    local setValues = getSortedSetValues(nil, set)
    for ____, value in ipairs(setValues) do
        ____exports.log("  Value: " .. tostring(value))
    end
    ____exports.log("  The size of the set was: " .. tostring(set.size))
end
--- Helper function for logging every sound effect that is currently playing.
function ____exports.logSounds()
    local soundEffects = getEnumEntries(nil, SoundEffect)
    for ____, ____value in ipairs(soundEffects) do
        local key = ____value[1]
        local soundEffect = ____value[2]
        if sfxManager:IsPlaying(soundEffect) then
            ____exports.log(((("Currently playing sound effect: " .. key) .. " (") .. tostring(soundEffect)) .. ")")
        end
    end
end
--- Helper function for logging every key and value of a table. This is a deep log; the function will
-- recursively call itself if it counters a table within a table.
-- 
-- This function will only work on tables that have string keys (because it logs the keys in order,
-- instead of randomly). It will throw a runtime error if it encounters a non-string key.
function ____exports.logTable(luaTable, parentTables)
    if parentTables == nil then
        parentTables = 0
    end
    if parentTables == 0 then
        ____exports.log("Printing out a Lua table:")
    end
    local numSpaces = (parentTables + 1) * 2
    local indentation = string.rep(
        " ",
        math.floor(numSpaces)
    )
    if not isTable(nil, luaTable) then
        ____exports.log(((indentation .. "n/a (encountered a variable of type \"") .. __TS__TypeOf(luaTable)) .. "\" instead of a table)")
        return
    end
    iterateTableInOrder(
        nil,
        luaTable,
        function(____, key, value)
            ____exports.log(((indentation .. tostring(key)) .. " --> ") .. tostring(value))
            if isTable(nil, value) then
                if key == "__class" then
                    ____exports.log(indentation .. "  (skipping enumerating this key to avoid infinite recursion)")
                else
                    ____exports.logTable(value, parentTables + 1)
                end
            end
        end
    )
    ____exports.log((indentation .. "The size of the table was: ") .. tostring(#luaTable))
end
--- Helper function to print out the differences between the entries of two tables. Note that this
-- will only do a shallow comparison.
function ____exports.logTableDifferences(table1, table2)
    ____exports.log("Comparing two Lua tables:")
    local table1Keys = __TS__ObjectKeys(table1)
    local table1KeysSet = __TS__New(Set, table1Keys)
    local table2Keys = __TS__ObjectKeys(table2)
    local table2KeysSet = __TS__New(Set, table2Keys)
    local keysSet = combineSets(nil, table1KeysSet, table2KeysSet)
    local keys = {__TS__Spread(keysSet:values())}
    __TS__ArraySort(keys)
    for ____, key in ipairs(keys) do
        if not table1KeysSet:has(key) then
            ____exports.log("  Table 1 is missing key: " .. key)
        elseif not table2KeysSet:has(key) then
            ____exports.log("  Table 2 is missing key: " .. key)
        else
            local value1 = table1[key]
            local value2 = table2[key]
            if value1 ~= value2 then
                ____exports.log(((((("  " .. key) .. " --> \"") .. tostring(value1)) .. "\" versus \"") .. tostring(value2)) .. "\"")
            end
        end
    end
end
--- Helper function for printing out every tear flag that is turned on. Useful when debugging.
function ____exports.logTearFlags(flags)
    ____exports.logFlags(flags, TearFlag, "tear")
end
--- Helper function for printing out every use flag that is turned on. Useful when debugging.
function ____exports.logUseFlags(flags)
    ____exports.logFlags(flags, UseFlag, "use")
end
--- Helper function to enumerate all of the properties of a "userdata" object (i.e. an object from
-- the Isaac API).
function ____exports.logUserdata(userdata)
    if isUserdata(nil, userdata) then
        ____exports.log("Userdata: [not userdata]")
        return
    end
    local metatable = getmetatable(userdata)
    if metatable == nil then
        ____exports.log("Userdata: [no metatable]")
        return
    end
    local classType = getIsaacAPIClassName(nil, userdata)
    if classType == nil then
        ____exports.log("Userdata: [no class type]")
    else
        ____exports.log("Userdata: " .. classType)
    end
    ____exports.logTable(metatable)
end
function ____exports.logVector(vector, round)
    if round == nil then
        round = false
    end
    local vectorString = vectorToString(nil, vector, round)
    ____exports.log("Vector: " .. vectorString)
end
--- Converts every `isaacscript-common` function that begins with "log" to a global function.
-- 
-- This is useful when printing out variables from the in-game debug console.
function ____exports.setLogFunctionsGlobal(self)
    local globals = _G
    globals.log = ____exports.log
    globals.logArray = ____exports.logArray
    globals.logColor = ____exports.logColor
    globals.logDamageFlags = ____exports.logDamageFlags
    globals.logEffects = ____exports.logEffects
    globals.logEntities = ____exports.logEntities
    globals.logEntityID = ____exports.logEntityID
    globals.logEntityFlags = ____exports.logEntityFlags
    globals.logError = ____exports.logError
    globals.logFlags = ____exports.logFlags
    globals.logGameStateFlags = ____exports.logGameStateFlags
    globals.logGridEntities = ____exports.logGridEntities
    globals.logKColor = ____exports.logKColor
    globals.logLevelStateFlags = ____exports.logLevelStateFlags
    globals.logMap = ____exports.logMap
    globals.logPlayerHealth = ____exports.logPlayerHealth
    globals.logProjectileFlags = ____exports.logProjectileFlags
    globals.logRoom = ____exports.logRoom
    globals.logSeedEffects = ____exports.logSeedEffects
    globals.logSet = ____exports.logSet
    globals.logSounds = ____exports.logSounds
    globals.logTable = ____exports.logTable
    globals.logTableDifferences = ____exports.logTableDifferences
    globals.logTearFlags = ____exports.logTearFlags
    globals.logUseFlags = ____exports.logUseFlags
    globals.logUserdata = ____exports.logUserdata
    globals.logVector = ____exports.logVector
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.collectibles"] = function(...) 
local ____exports = {}
local initQuestionMarkSprite, COLLECTIBLE_SPRITE_LAYER, COLLECTIBLE_SHADOW_LAYER
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local ItemConfigTagZero = ____isaac_2Dtypescript_2Ddefinitions.ItemConfigTagZero
local ItemType = ____isaac_2Dtypescript_2Ddefinitions.ItemType
local PickupPrice = ____isaac_2Dtypescript_2Ddefinitions.PickupPrice
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local itemConfig = ____cachedClasses.itemConfig
local ____constants = require("lua_modules.isaacscript-common.constants")
local BLIND_ITEM_PNG_PATH = ____constants.BLIND_ITEM_PNG_PATH
local DEFAULT_ITEM_POOL_TYPE = ____constants.DEFAULT_ITEM_POOL_TYPE
local ____constantsFirstLast = require("lua_modules.isaacscript-common.constantsFirstLast")
local FIRST_COLLECTIBLE_TYPE = ____constantsFirstLast.FIRST_COLLECTIBLE_TYPE
local FIRST_MODDED_COLLECTIBLE_TYPE = ____constantsFirstLast.FIRST_MODDED_COLLECTIBLE_TYPE
local LAST_COLLECTIBLE_TYPE = ____constantsFirstLast.LAST_COLLECTIBLE_TYPE
local LAST_VANILLA_COLLECTIBLE_TYPE = ____constantsFirstLast.LAST_VANILLA_COLLECTIBLE_TYPE
local ____collectibleDescriptionMap = require("lua_modules.isaacscript-common.maps.collectibleDescriptionMap")
local COLLECTIBLE_DESCRIPTION_MAP = ____collectibleDescriptionMap.COLLECTIBLE_DESCRIPTION_MAP
local DEFAULT_COLLECTIBLE_DESCRIPTION = ____collectibleDescriptionMap.DEFAULT_COLLECTIBLE_DESCRIPTION
local ____collectibleNameMap = require("lua_modules.isaacscript-common.maps.collectibleNameMap")
local COLLECTIBLE_NAME_MAP = ____collectibleNameMap.COLLECTIBLE_NAME_MAP
local DEFAULT_COLLECTIBLE_NAME = ____collectibleNameMap.DEFAULT_COLLECTIBLE_NAME
local ____singleUseActiveCollectibleTypesSet = require("lua_modules.isaacscript-common.sets.singleUseActiveCollectibleTypesSet")
local SINGLE_USE_ACTIVE_COLLECTIBLE_TYPES_SET = ____singleUseActiveCollectibleTypesSet.SINGLE_USE_ACTIVE_COLLECTIBLE_TYPES_SET
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local getEntityID = ____entity.getEntityID
local ____pickupVariants = require("lua_modules.isaacscript-common.functions.pickupVariants")
local isCollectible = ____pickupVariants.isCollectible
local ____roomData = require("lua_modules.isaacscript-common.functions.roomData")
local getRoomListIndex = ____roomData.getRoomListIndex
local ____sprite = require("lua_modules.isaacscript-common.functions.sprite")
local clearSprite = ____sprite.clearSprite
local spriteEquals = ____sprite.spriteEquals
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local irange = ____utils.irange
function initQuestionMarkSprite(self)
    local sprite = Sprite()
    sprite:Load("gfx/005.100_collectible.anm2", false)
    sprite:ReplaceSpritesheet(1, "gfx/items/collectibles/questionmark.png")
    sprite:LoadGraphics()
    return sprite
end
function ____exports.clearCollectibleSprite(self, collectible)
    ____exports.setCollectibleSprite(nil, collectible, nil)
end
--- Helper function to remove the collectible from a collectible pedestal and make it appear as if a
-- player has already taken the item. This is accomplished by changing the sub-type to
-- `CollectibleType.NULL` and then setting the sprite to an empty/missing PNG file.
-- 
-- For more information, see the documentation for the "clearSprite" helper function.
function ____exports.setCollectibleEmpty(self, collectible)
    if not isCollectible(nil, collectible) then
        local entityID = getEntityID(nil, collectible)
        error("The \"setCollectibleEmpty\" function was given a non-collectible: " .. entityID)
    end
    collectible.SubType = CollectibleType.NULL
    ____exports.clearCollectibleSprite(nil, collectible)
end
--- Helper function to change the sprite of a collectible pedestal entity.
-- 
-- For more information about removing the collectible sprite, see the documentation for the
-- "clearSprite" helper function.
-- 
-- @param collectible The collectible whose sprite you want to modify.
-- @param pngPath Equal to either the spritesheet path to load (e.g.
-- "gfx/items/collectibles/collectibles_001_thesadonion.png") or undefined. If
-- undefined, the sprite will be removed, making it appear like the collectible has
-- already been taken by the player.
function ____exports.setCollectibleSprite(self, collectible, pngPath)
    if not isCollectible(nil, collectible) then
        local entityID = getEntityID(nil, collectible)
        error("The \"setCollectibleSprite\" function was given a non-collectible: " .. entityID)
    end
    local sprite = collectible:GetSprite()
    if pngPath == nil then
        clearSprite(nil, sprite, COLLECTIBLE_SPRITE_LAYER, COLLECTIBLE_SHADOW_LAYER)
    else
        sprite:ReplaceSpritesheet(COLLECTIBLE_SPRITE_LAYER, pngPath)
        sprite:LoadGraphics()
    end
end
--- Helper function to change the collectible on a pedestal. Simply updating the `SubType` property
-- is not sufficient because the sprite will not change.
function ____exports.setCollectibleSubType(self, collectible, newCollectibleType)
    if not isCollectible(nil, collectible) then
        local entityID = getEntityID(nil, collectible)
        error("The \"setCollectibleSubType\" function was given a non-collectible: " .. entityID)
    end
    if newCollectibleType == CollectibleType.NULL then
        ____exports.setCollectibleEmpty(nil, collectible)
        return
    end
    collectible:Morph(
        EntityType.PICKUP,
        PickupVariant.COLLECTIBLE,
        newCollectibleType,
        true,
        true,
        true
    )
end
COLLECTIBLE_SPRITE_LAYER = 1
COLLECTIBLE_SHADOW_LAYER = 4
local GLITCHED_ITEM_THRESHOLD = 4000000000
local questionMarkSprite = initQuestionMarkSprite(nil)
--- Helper function to check if two collectible sprites have the same sprite sheet loaded.
function ____exports.collectibleSpriteEquals(self, sprite1, sprite2)
    local xStart = -1
    local xFinish = 1
    local xIncrement = 1
    local yStart = -40
    local yFinish = 10
    local yIncrement = 3
    return spriteEquals(
        nil,
        sprite1,
        sprite2,
        COLLECTIBLE_SPRITE_LAYER,
        xStart,
        xFinish,
        xIncrement,
        yStart,
        yFinish,
        yIncrement
    )
end
--- Helper function to get the in-game description for a collectible. Returns "Unknown" if the
-- provided collectible type was not valid.
function ____exports.getCollectibleDescription(self, collectibleType)
    local collectibleDescription = COLLECTIBLE_DESCRIPTION_MAP:get(collectibleType)
    if collectibleDescription ~= nil then
        return collectibleDescription
    end
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem ~= nil then
        return itemConfigItem.Description
    end
    return DEFAULT_COLLECTIBLE_DESCRIPTION
end
--- Helper function to get the coin cost that a collectible item would be if it were being offered in
-- a Devil Room deal. Returns 0 if passed `CollectibleType.NULL`.
function ____exports.getCollectibleDevilCoinPrice(self, collectibleType)
    if collectibleType == CollectibleType.NULL then
        return 0
    end
    local defaultCollectiblePrice = 15
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem == nil then
        return defaultCollectiblePrice
    end
    return itemConfigItem.DevilPrice * defaultCollectiblePrice
end
--- Helper function to get the heart cost that a collectible item would be if it were being offered
-- in a Devil Room deal. Returns 0 if passed `CollectibleType.NULL`.
function ____exports.getCollectibleDevilHeartPrice(self, collectibleType, player)
    local maxHearts = player:GetMaxHearts()
    if collectibleType == CollectibleType.NULL then
        return 0
    end
    if maxHearts == 0 then
        return PickupPrice.THREE_SOUL_HEARTS
    end
    local defaultCollectiblePrice = PickupPrice.ONE_HEART
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem == nil then
        return defaultCollectiblePrice
    end
    local twoHeartPrice = maxHearts == 2 and PickupPrice.ONE_HEART_AND_TWO_SOUL_HEARTS or PickupPrice.TWO_HEARTS
    return itemConfigItem.DevilPrice == 2 and twoHeartPrice or PickupPrice.ONE_HEART
end
--- Helper function to get the path to a collectible's sprite. Returns the path to the question mark
-- sprite (i.e. from Curse of the Blind) if the provided collectible type was not valid.
function ____exports.getCollectibleGfxFilename(self, collectibleType)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem == nil then
        return BLIND_ITEM_PNG_PATH
    end
    return itemConfigItem.GfxFileName
end
--- Mods often have to track variables relating to a collectible. Finding an index for these kinds of
-- data structures is difficult, since collectibles are respawned every time a player re-enters a
-- room, so the `PtrHash` will change. Instead, we use a 4-tuple of the room list index, the grid
-- index of the collectible in the room, the collectible's SubType, and the collectible's InitSeed.
-- 
-- Collectibles that are shifted by Tainted Isaac's mechanic will have unique collectible indexes
-- because the SubType is different. (The collectible entities share the same InitSeed.)
-- 
-- Collectibles that are rolled (with e.g. a D6) will have unique collectible indexes because the
-- SubType and InitSeed are different. If you want to track collectibles independently of any
-- rerolls, then you can use the `PtrHash` as an index instead. (The `PtrHash` will not persist
-- between rooms, however.)
-- 
-- Note that:
-- - The grid index is a necessary part of the collectible index because Diplopia and Crooked Penny
--   can cause two or more collectibles with the same SubType and InitSeed to exist in the same
--   room.
-- - This index will fail in the case where the player uses Diplopia or a successful Crooked Penny
--   seven or more times in the same room, since that will cause two or more collectibles with the
--   same grid index, SubType, and InitSeed to exist.
-- - The SubType is a necessary part of the collectible index because Tainted Isaac will
--   continuously cause collectibles to morph into new sub-types with the same InitSeed.
-- - Using a collectible's position as part of the index is problematic, since players can push a
--   pedestal. (Even using the grid index does not solve this problem, since it is possible in
--   certain cases for collectibles to be spawned at a position that is not aligned with the grid,
--   and the pedestal pushed to an adjacent tile, but this case should be extremely rare.)
-- - Mega Chests spawn two collectibles on the exact same position. However, both of them will have
--   different InitSeeds, so this is not a problem for this indexing scheme.
-- - The indexing scheme used is different for collectibles that are inside of a Treasure Room or
--   Boss Room, in order to handle the case of the player seeing the same collectible again in a
--   post-Ascent Treasure Room or Boss Room. A 5-tuple of stage, stage type, grid index, SubType,
--   and InitSeed is used in this case. (Using the room list index or the room grid index is not
--   suitable for this purpose, since both of these values can change in the post-Ascent rooms.)
--   Even though Treasure Rooms and Boss Rooms are grouped together in this scheme, there probably
--   will not be collectibles with the same grid index, SubType, and InitSeed.
function ____exports.getCollectibleIndex(self, collectible)
    if not isCollectible(nil, collectible) then
        local entityID = getEntityID(nil, collectible)
        error("The \"getCollectibleIndex\" function was given a non-collectible: " .. entityID)
    end
    local level = game:GetLevel()
    local stage = level:GetStage()
    local stageType = level:GetStageType()
    local room = game:GetRoom()
    local roomType = room:GetType()
    local gridIndex = room:GetGridIndex(collectible.Position)
    local roomListIndex = getRoomListIndex(nil)
    if roomType == RoomType.TREASURE or roomType == RoomType.BOSS then
        return (((((((tostring(stage) .. ",") .. tostring(stageType)) .. ",") .. tostring(gridIndex)) .. ",") .. tostring(collectible.SubType)) .. ",") .. tostring(collectible.InitSeed)
    end
    return (((((tostring(roomListIndex) .. ",") .. tostring(gridIndex)) .. ",") .. tostring(collectible.SubType)) .. ",") .. tostring(collectible.InitSeed)
end
--- Helper function to get the initial amount of charges that a collectible has. Returns 0 if the
-- provided collectible type was not valid.
function ____exports.getCollectibleInitCharge(self, collectibleType)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem == nil then
        return 0
    end
    return itemConfigItem.InitCharge
end
--- Helper function to get the `ItemType` of a collectible. Returns `ItemType.ITEM_NULL` if the
-- provided collectible type was not valid.
function ____exports.getCollectibleItemType(self, collectibleType)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem == nil then
        return ItemType.NULL
    end
    return itemConfigItem.Type
end
--- Helper function to get the maximum amount of charges that a collectible has. Returns 0 if the
-- provided collectible type was not valid.
function ____exports.getCollectibleMaxCharges(self, collectibleType)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem == nil then
        return 0
    end
    return itemConfigItem.MaxCharges
end
--- Helper function to get the name of a collectible. Returns "Unknown" if the provided collectible
-- type is not valid.
-- 
-- For example:
-- 
-- ```ts
-- const collectibleType = CollectibleType.SAD_ONION;
-- const collectibleName = getCollectibleName(collectibleType); // collectibleName is "Sad Onion"
-- ```
function ____exports.getCollectibleName(self, collectibleType)
    local collectibleName = COLLECTIBLE_NAME_MAP:get(collectibleType)
    if collectibleName ~= nil then
        return collectibleName
    end
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem ~= nil then
        return itemConfigItem.Name
    end
    return DEFAULT_COLLECTIBLE_NAME
end
function ____exports.getCollectiblePedestalType(self, collectible)
    if not isCollectible(nil, collectible) then
        local entityID = getEntityID(nil, collectible)
        error("The \"getCollectiblePedestalType\" function was given a non-collectible: " .. entityID)
    end
    local sprite = collectible:GetSprite()
    return sprite:GetOverlayFrame()
end
--- Helper function to get the path to a collectible's quality. Returns 0 if the provided collectible
-- type was not valid.
function ____exports.getCollectibleQuality(self, collectibleType)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem == nil then
        return 0
    end
    return itemConfigItem.Quality
end
--- Helper function to get the tags of a collectible (which is the composition of zero or more
-- `ItemConfigTag`). Returns 0 if the provided collectible type is not valid.
-- 
-- For example:
-- 
-- ```ts
-- const collectibleType = CollectibleType.SAD_ONION;
-- const itemConfigTags = getCollectibleTags(collectibleType); // itemConfigTags is "18350080"
-- ```
function ____exports.getCollectibleTags(self, collectibleType)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    return itemConfigItem == nil and ItemConfigTagZero or itemConfigItem.Tags
end
--- Helper function to get an array that represents the all modded collectible types.
-- 
-- This function is only useful when building collectible type objects. For most purposes, you
-- should use the `getModdedCollectibleSet` helper function instead.
-- 
-- Returns an empty array if there are no modded collectible types.
-- 
-- (This function is named differently from the `getVanillaCollectibleTypeRange` function because
-- all modded collectible types are contiguous. Thus, each value represents a real
-- `CollectibleType`.)
function ____exports.getModdedCollectibleTypes(self)
    if LAST_VANILLA_COLLECTIBLE_TYPE == LAST_COLLECTIBLE_TYPE then
        return {}
    end
    return irange(nil, FIRST_MODDED_COLLECTIBLE_TYPE, LAST_COLLECTIBLE_TYPE)
end
--- Helper function to get an array that represents the range from the first collectible type to the
-- last vanilla collectible type. This will include integers that do not represent any valid
-- collectible types.
-- 
-- This function is only useful when building collectible type objects. For most purposes, you
-- should use the `getVanillaCollectibleSet` helper function instead.
function ____exports.getVanillaCollectibleTypeRange(self)
    return irange(nil, FIRST_COLLECTIBLE_TYPE, LAST_VANILLA_COLLECTIBLE_TYPE)
end
--- Returns true if the item type in the item config is equal to `ItemType.ITEM_ACTIVE`.
function ____exports.isActiveCollectible(self, collectibleType)
    local itemType = ____exports.getCollectibleItemType(nil, collectibleType)
    return itemType == ItemType.ACTIVE
end
--- Returns true if the collectible has a red question mark sprite.
function ____exports.isBlindCollectible(self, collectible)
    if not isCollectible(nil, collectible) then
        local entityID = getEntityID(nil, collectible)
        error("The \"isBlindCollectible\" function was given a non-collectible: " .. entityID)
    end
    local sprite = collectible:GetSprite()
    local animation = sprite:GetAnimation()
    local frame = sprite:GetFrame()
    questionMarkSprite:SetFrame(animation, frame)
    return ____exports.collectibleSpriteEquals(nil, sprite, questionMarkSprite)
end
--- Returns whether or not the given collectible is a "glitched" item. All items are replaced by
-- glitched items once a player has TMTRAINER. However, glitched items can also "naturally" appear
-- in secret rooms and I AM ERROR rooms if the "Corrupted Data" achievement is unlocked.
function ____exports.isGlitchedCollectible(self, pickup)
    return pickup.Variant == PickupVariant.COLLECTIBLE and pickup.SubType > GLITCHED_ITEM_THRESHOLD
end
--- Returns true if the collectible has the "Hidden" attribute in the item config.
-- 
-- Hidden collectibles will not show up in any pools and Eden will not start with them.
function ____exports.isHiddenCollectible(self, collectibleType)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    return itemConfigItem ~= nil and itemConfigItem.Hidden
end
--- Returns true if the item type in the item config is equal to `ItemType.ITEM_PASSIVE` or
-- `ItemType.ITEM_FAMILIAR`.
function ____exports.isPassiveCollectible(self, collectibleType)
    local itemType = ____exports.getCollectibleItemType(nil, collectibleType)
    return itemType == ItemType.PASSIVE or itemType == ItemType.FAMILIAR
end
--- Helper function to determine if a particular collectible will disappear from the player's
-- inventory upon use. Note that this will not work will modded items, as there is no way to
-- dynamically know if a modded item will disappear.
function ____exports.isSingleUseCollectible(self, collectibleType)
    return SINGLE_USE_ACTIVE_COLLECTIBLE_TYPES_SET:has(collectibleType)
end
function ____exports.isValidCollectibleType(self, collectibleType)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    return itemConfigItem ~= nil
end
--- Helper function to put a message in the log.txt file to let the Rebirth Item Tracker know that it
-- should remove an item.
-- 
-- The "item tracker" in this function does not refer to the in-game item tracker, but rather to the
-- Python program located at: https://github.com/Rchardon/RebirthItemTracker
function ____exports.removeCollectibleFromItemTracker(self, collectibleType)
    local collectibleName = ____exports.getCollectibleName(nil, collectibleType)
    Isaac.DebugString(((("Removing collectible " .. tostring(collectibleType)) .. " (") .. collectibleName) .. ") on player 0 (Player)")
end
--- Helper function to remove all pickup delay on a collectible. By default, collectibles have a 20
-- frame delay before they can be picked up by a player.
function ____exports.removeCollectiblePickupDelay(self, collectible)
    if not isCollectible(nil, collectible) then
        local entityID = getEntityID(nil, collectible)
        error("The \"removeCollectiblePickupDelay\" function was given a non-collectible: " .. entityID)
    end
    collectible.Wait = 0
end
--- Helper function to set a collectible sprite to a question mark (i.e. how collectibles look when
-- the player has Curse of the Blind).
function ____exports.setCollectibleBlind(self, collectible)
    if not isCollectible(nil, collectible) then
        local entityID = getEntityID(nil, collectible)
        error("The \"setCollectibleBlind\" function was given a non-collectible: " .. entityID)
    end
    ____exports.setCollectibleSprite(nil, collectible, BLIND_ITEM_PNG_PATH)
end
--- Helper function to change a collectible into a "glitched" item (like the ones that appear when
-- the player has TMTRAINER).
function ____exports.setCollectibleGlitched(self, collectible)
    if not isCollectible(nil, collectible) then
        local entityID = getEntityID(nil, collectible)
        error("The \"setCollectibleGlitched\" function was given a non-collectible: " .. entityID)
    end
    local player = Isaac.GetPlayer()
    local hasTMTRAINER = player:HasCollectible(CollectibleType.TMTRAINER)
    if not hasTMTRAINER then
        player:AddCollectible(CollectibleType.TMTRAINER, 0, false)
    end
    local itemPool = game:GetItemPool()
    local collectibleType = itemPool:GetCollectible(DEFAULT_ITEM_POOL_TYPE)
    ____exports.setCollectibleSubType(nil, collectible, collectibleType)
    if not hasTMTRAINER then
        player:RemoveCollectible(CollectibleType.TMTRAINER)
    end
end
--- Helper function to put a message in the log.txt file to let the Rebirth Item Tracker know that
-- the build has been rerolled.
function ____exports.setCollectiblesRerolledForItemTracker(self)
    Isaac.DebugString("Added 3 Collectibles")
end
return ____exports
 end,
["lua_modules.isaacscript-common.constants"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Dimension = ____isaac_2Dtypescript_2Ddefinitions.Dimension
local ItemPoolType = ____isaac_2Dtypescript_2Ddefinitions.ItemPoolType
local LevelStage = ____isaac_2Dtypescript_2Ddefinitions.LevelStage
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local TrinketSlot = ____isaac_2Dtypescript_2Ddefinitions.TrinketSlot
local ____constantsFirstLast = require("lua_modules.isaacscript-common.constantsFirstLast")
local NUM_NORMAL_PILL_COLORS = ____constantsFirstLast.NUM_NORMAL_PILL_COLORS
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumLength = ____enums.getEnumLength
local getLastEnumValue = ____enums.getLastEnumValue
--- The distance of the laser when Azazel does not have any range up items yet. For more info, see
-- the documentation for the `getAzazelBrimstoneDistance` function.
____exports.AZAZEL_DEFAULT_BRIMSTONE_DISTANCE = 75.125
--- The path to the png file for collectible items during Curse of the Blind, making them appear with
-- a red question mark.
____exports.BLIND_ITEM_PNG_PATH = "gfx/items/collectibles/questionmark.png"
--- Bombs explode when their frame count is equal to this value.
____exports.BOMB_EXPLODE_FRAME = 45
--- This is the initial value of the `EntityPickup.Wait` property after a collectible is spawned.
____exports.COLLECTIBLE_INITIAL_WAIT = 20
____exports.DEFAULT_ITEM_POOL_TYPE = ItemPoolType.TREASURE
--- This is also the distance that a player spawns from the door that they enter a room from.
____exports.DISTANCE_OF_GRID_TILE = 40
____exports.DOOR_HITBOX_RADIUS = 11
--- When Eggies take fatal damage, they go into NpcState.STATE_SUICIDE and spawn 14 Swarm Spiders
-- while their StateFrame ticks upwards. The 14th spider appears when the StateFrame is at this
-- value.
____exports.EGGY_STATE_FRAME_OF_FINAL_SPIDER = 45
--- A non-existent or completely transparent PNG file for use in clearing sprites. For more
-- information, see the documentation for the `clearSprite` helper function.
____exports.EMPTY_PNG_PATH = "gfx/none.png"
--- The random items that appear when the player has TMTRAINER are generated on the fly as they are
-- encountered by the player. The first TMTRAINER item takes the final possible 32 bit number. The
-- second TMTRAINER item subtracts one from that, and so on.
____exports.FIRST_GLITCHED_COLLECTIBLE_TYPE = (1 << 32) - 1
____exports.GAME_FRAMES_PER_SECOND = 30
____exports.GRID_INDEX_CENTER_OF_1X1_ROOM = 67
____exports.ISAAC_FRAMES_PER_SECOND = 60
--- The floor is represented by a 13x13 grid. Room indexes start at 0. The first column is
-- represented by grid indexes 0, 13, 26, and so on.
____exports.LEVEL_GRID_COLUMN_HEIGHT = 13
--- The floor is represented by a 13x13 grid. Room indexes start at 0. The first row is represented
-- by grid indexes from 0 to 12. The second row is represented by grid indexes from 13 to 25, and so
-- on.
____exports.LEVEL_GRID_ROW_WIDTH = 13
--- The floor is represented by a 13x13 grid. Room indexes start at 0. The first row is represented
-- by grid indexes from 0 to 12. The second row is represented by grid indexes from 13 to 25, and so
-- on. The maximum room index possible is 168. (It is not 169 because we start at 0 instead of 1.)
____exports.MAX_LEVEL_GRID_INDEX = 168
--- The game has a limit on the number of currently spawned familiars and will refuse to spawn any
-- more if it reaches the limit. Blue flies and blue spiders have a lower priority and will be
-- deleted to make room for other familiars.
____exports.MAX_NUM_FAMILIARS = 64
--- The game can only handle up to four different players.
____exports.MAX_NUM_INPUTS = 4
--- With Birthright, it is possible for Magdalene to have 18 heart containers.
____exports.MAX_PLAYER_HEART_CONTAINERS = 18
--- As the player continues to move in a direction, they will accelerate. When going from one wall to
-- another in a 2x2 room at 2.0 speed (the maximum that the speed stat can rise to), the amount of
-- units moved per update frame will climb to around 9.797 as they hit the opposite wall. The
-- constant specifies a value of 9.8 to be safe.
____exports.MAX_PLAYER_SPEED_IN_UNITS = 9.8
____exports.MAX_PLAYER_TRINKET_SLOTS = getEnumLength(nil, TrinketSlot)
--- If you set `EntityPlayer.ShotSpeed` lower than this value, it will have no effect.
____exports.MIN_PLAYER_SHOT_SPEED_STAT = 0.6
--- If you set `EntityPlayer.Speed` lower than this value, it will have no effect.
____exports.MIN_PLAYER_SPEED_STAT = 0.1
____exports.FIRST_ROOM_TYPE = RoomType.DEFAULT
____exports.LAST_ROOM_TYPE = getLastEnumValue(nil, RoomType)
--- The maximum speed stat that a player can have. Any additional speed beyond this will not take
-- effect.
____exports.MAX_SPEED_STAT = 2
____exports.FIRST_STAGE = LevelStage.BASEMENT_1
____exports.LAST_STAGE = getLastEnumValue(nil, LevelStage)
--- Corresponds to the maximum value for `EntityPlayer.SamsonBerserkCharge`.
____exports.MAX_TAINTED_SAMSON_BERSERK_CHARGE = 100000
____exports.NUM_DIMENSIONS = getEnumLength(nil, Dimension) - 1
--- The pill pool for each run is comprised of one effect for each unique pill color (minus gold and
-- horse pills.)
____exports.NUM_PILLS_IN_POOL = NUM_NORMAL_PILL_COLORS
____exports.SECOND_IN_MILLISECONDS = 1000
____exports.MINUTE_IN_MILLISECONDS = 60 * ____exports.SECOND_IN_MILLISECONDS
____exports.ONE_BY_ONE_ROOM_GRID_SIZE = 135
--- After taking damage, `EntityPlayer.SamsonBerserkCharge` is incremented by this amount.
____exports.TAINTED_SAMSON_BERSERK_CHARGE_FROM_TAKING_DAMAGE = 10000
--- This is the number of draw coordinates that each heart spans on the UI in the upper left hand
-- corner.
____exports.UI_HEART_WIDTH = 12
--- This is a safer version of the `Vector.One` constant. (Other mods can mutate this `Vector.One`,
-- so it is not safe to use.)
____exports.VectorOne = Vector(1, 1)
--- This is a safer version of the `Vector.Zero` constant. (Other mods can mutate `Vector.Zero`
-- vector, so it is not safe to use.)
____exports.VectorZero = Vector(0, 0)
return ____exports
 end,
["lua_modules.isaacscript-common.constantsFirstLast"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Card = ____isaac_2Dtypescript_2Ddefinitions.Card
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local PillColor = ____isaac_2Dtypescript_2Ddefinitions.PillColor
local PillEffect = ____isaac_2Dtypescript_2Ddefinitions.PillEffect
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local itemConfig = ____cachedClasses.itemConfig
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumLength = ____enums.getEnumLength
local getLastEnumValue = ____enums.getLastEnumValue
--- Equal to `CollectibleType.SAD_ONION`.
____exports.FIRST_COLLECTIBLE_TYPE = CollectibleType.SAD_ONION
--- Will change depending on how many modded collectibles there are.
-- 
-- Equal to `itemConfig.GetCollectibles().Size - 1`. (`Size` includes invalid collectibles. We
-- subtract one to account for `CollectibleType.NULL`.)
____exports.LAST_COLLECTIBLE_TYPE = itemConfig:GetCollectibles().Size - 1
--- Calculated from the `CollectibleType` enum.
-- 
-- Note that this cannot be calculated from the length of the enum, because unlike all of the other
-- enums, collectible types are not contiguous.
____exports.LAST_VANILLA_COLLECTIBLE_TYPE = getLastEnumValue(nil, CollectibleType)
--- If there are no modded collectibles, this constant will represent a collectible type that does
-- not exist.
____exports.FIRST_MODDED_COLLECTIBLE_TYPE = ____exports.LAST_VANILLA_COLLECTIBLE_TYPE + 1
--- Calculated from the `CollectibleType` enum. `CollectibleType.NULL` is not included.
____exports.NUM_VANILLA_COLLECTIBLE_TYPES = getEnumLength(nil, CollectibleType) - 1
--- Unlike vanilla collectible types, modded collectible types are always contiguous.
____exports.NUM_MODDED_COLLECTIBLE_TYPES = ____exports.LAST_COLLECTIBLE_TYPE - ____exports.LAST_VANILLA_COLLECTIBLE_TYPE
____exports.NUM_COLLECTIBLE_TYPES = ____exports.NUM_VANILLA_COLLECTIBLE_TYPES + ____exports.NUM_MODDED_COLLECTIBLE_TYPES
--- Will change depending on how many modded cards there are.
-- 
-- Equal to `itemConfig.GetTrinkets().Size - 1`. (We subtract one to account for
-- `TrinketType.NULL`.)
____exports.NUM_TRINKET_TYPES = itemConfig:GetTrinkets().Size - 1
--- Calculated from the `TrinketType` enum. `TrinketType.NULL` is not included.
____exports.NUM_VANILLA_TRINKET_TYPES = getEnumLength(nil, TrinketType) - 1
____exports.NUM_MODDED_TRINKET_TYPES = ____exports.NUM_TRINKET_TYPES - ____exports.NUM_VANILLA_TRINKET_TYPES
--- Equal to `TrinketType.SWALLOWED_PENNY`.
____exports.FIRST_TRINKET_TYPE = TrinketType.SWALLOWED_PENNY
--- Will change depending on how many modded cards there are.
-- 
-- Equal to `itemConfig.GetTrinkets().Size - 1`. (We subtract one to account for
-- `TrinketType.NULL`.)
____exports.LAST_TRINKET_TYPE = ____exports.NUM_TRINKET_TYPES
--- Calculated from the `TrinketType` enum.
____exports.LAST_VANILLA_TRINKET_TYPE = getLastEnumValue(nil, TrinketType)
--- If there are no modded trinkets, this constant will represent a trinket type that does not exist.
____exports.FIRST_MODDED_TRINKET_TYPE = ____exports.LAST_VANILLA_TRINKET_TYPE + 1
--- Will change depending on how many modded cards there are.
-- 
-- Equal to `itemConfig.GetCards().Size - 1`. (We subtract one to account for `Card.NULL`.)
____exports.NUM_CARDS = itemConfig:GetCards().Size - 1
--- Calculated from the `Card` enum. `Card.NULL` is not included.
____exports.NUM_VANILLA_CARDS = getEnumLength(nil, Card) - 1
____exports.NUM_MODDED_CARDS = ____exports.NUM_CARDS - ____exports.NUM_VANILLA_CARDS
--- Equal to `Card.FOOL`.
____exports.FIRST_CARD = Card.FOOL
--- Will change depending on how many modded cards there are.
-- 
-- Equal to `itemConfig.GetCards().Size - 1`. (We subtract one to account for `Card.NULL`.)
____exports.LAST_CARD = ____exports.NUM_CARDS
--- Calculated from the `Card` enum.
____exports.MAX_VANILLA_CARD = getLastEnumValue(nil, Card)
--- If there are no modded cards, this constant will represent a card that does not exist.
____exports.FIRST_MODDED_CARD = ____exports.MAX_VANILLA_CARD + 1
--- Will change depending on how many modded pill effects there are.
-- 
-- Equal to `itemConfig.GetPillEffects().Size - 1`. (We subtract one to account for
-- `PillEffect.NULL`.)
____exports.NUM_PILL_EFFECTS = itemConfig:GetPillEffects().Size - 1
--- Calculated from the `PillEffect` enum.
-- 
-- (There is no `PillEffect.NULL` in the custom enum, so we don't have to subtract one here.)
____exports.NUM_VANILLA_PILL_EFFECTS = getEnumLength(nil, PillEffect)
____exports.NUM_MODDED_PILL_EFFECTS = ____exports.NUM_PILL_EFFECTS - ____exports.NUM_VANILLA_PILL_EFFECTS
--- Equal to `PillEffect.BAD_GAS`.
____exports.FIRST_PILL_EFFECT = PillEffect.BAD_GAS
--- Will change depending on how many modded pill effects there are.
-- 
-- Equal to `itemConfig.GetPillEffects().Size - 1`. (We subtract one to account for
-- `PillEffect.NULL`.)
____exports.LAST_PILL_EFFECT = ____exports.NUM_PILL_EFFECTS
--- Calculated from the `PillEffect` enum.
____exports.LAST_VANILLA_PILL_EFFECT = getLastEnumValue(nil, PillEffect)
--- If there are no modded pill effects, this constant will represent a pill effect that does not
-- exist.
____exports.FIRST_MODDED_PILL_EFFECT = ____exports.LAST_VANILLA_PILL_EFFECT + 1
--- Equal to `PillColor.BLUE_BLUE`.
____exports.FIRST_PILL_COLOR = PillColor.BLUE_BLUE
--- Equal to `PillColor.WHITE_YELLOW`.
-- 
-- Note that `PillColor.GOLD` is technically higher, but that is not considered for the purposes of
-- this constant.
____exports.LAST_NORMAL_PILL_COLOR = PillColor.WHITE_YELLOW
--- Equal to `PillColor.HORSE_BLUE_BLUE`.
____exports.FIRST_HORSE_PILL_COLOR = PillColor.HORSE_BLUE_BLUE
--- Equal to `PillColor.HORSE_WHITE_YELLOW`.
-- 
-- Note that `PillColor.HORSE_GOLD` is technically higher, but that is not considered for the
-- purposes of this constant.
____exports.LAST_HORSE_PILL_COLOR = PillColor.HORSE_WHITE_YELLOW
____exports.NUM_NORMAL_PILL_COLORS = ____exports.LAST_NORMAL_PILL_COLOR - ____exports.FIRST_PILL_COLOR
--- Equal to `PlayerType.ISAAC`.
____exports.FIRST_CHARACTER = PlayerType.ISAAC
--- Calculated from the `PlayerType` enum.
____exports.LAST_VANILLA_CHARACTER = getLastEnumValue(nil, PlayerType)
--- If there are no modded characters, this constant will represent a character that does not exist.
____exports.FIRST_MODDED_CHARACTER = ____exports.LAST_VANILLA_CHARACTER + 1
return ____exports
 end,
["lua_modules.isaacscript-common.maps.collectibleDescriptionMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
____exports.DEFAULT_COLLECTIBLE_DESCRIPTION = "Unknown"
____exports.COLLECTIBLE_DESCRIPTION_MAP = __TS__New(Map, {
    {1, "Tears up"},
    {2, "Triple shot"},
    {3, "Homing shots"},
    {4, "DMG up"},
    {5, "Boomerang tears"},
    {6, "Tears up + range down"},
    {7, "DMG up"},
    {8, "Friends 'till the end"},
    {9, "Fly love"},
    {10, "Projectile protection"},
    {11, "Extra life"},
    {12, "All stats up!"},
    {13, "Poison touch + speed up"},
    {14, "Speed and range up"},
    {15, "HP up"},
    {16, "HP up"},
    {17, "99 keys"},
    {18, "$$$"},
    {19, "10 bombs"},
    {20, "We all float down here..."},
    {21, "The end is near"},
    {22, "HP up"},
    {23, "HP up"},
    {24, "HP up"},
    {25, "HP up"},
    {26, "HP up"},
    {27, "Speed up"},
    {28, "Speed up"},
    {29, "Range up"},
    {30, "Range up"},
    {31, "Range up"},
    {32, "Tears up"},
    {33, "Temporary flight"},
    {34, "Temporary DMG up"},
    {35, "Mass room damage"},
    {36, "Plop!"},
    {37, "Reusable bomb buddy"},
    {38, "Reusable tear burst"},
    {39, "Mass paralysis"},
    {40, "Become the bomb!"},
    {41, "Mass fear"},
    {42, "Reusable ranged bomb"},
    {44, "Teleport!"},
    {45, "Reusable regeneration"},
    {46, "Luck up"},
    {47, "Reusable air strike"},
    {48, "Piercing shots"},
    {49, "BLLLARRRRGGG!"},
    {50, "DMG up"},
    {51, "DMG up"},
    {52, "???"},
    {53, "Item snatcher"},
    {54, "Full visible map"},
    {55, "Eye in the back of your head"},
    {56, "Oops..."},
    {57, "Attack fly"},
    {58, "Temporary invincibility"},
    {60, "Building bridges"},
    {62, "Kills heal"},
    {63, "Stores energy"},
    {64, "50% off"},
    {65, "Summon bombs"},
    {66, "Temporary enemy slowdown"},
    {67, "Friends 'till the end"},
    {68, "Laser tears"},
    {69, "Charge shots"},
    {70, "Speed + DMG up"},
    {71, "Speed + range up"},
    {72, "Tears + faith up"},
    {73, "Gotta meat 'em all"},
    {74, "+25 coins"},
    {75, "Better pills"},
    {76, "I've seen everything"},
    {77, "Temporary badass"},
    {78, "Reusable soul protection"},
    {79, "DMG + speed up"},
    {80, "DMG + tears up"},
    {81, "9 lives"},
    {82, "Demon wings"},
    {83, "Temporary demon form"},
    {84, "Reusable level skip"},
    {85, "Reusable card generator "},
    {86, "Summon Monstro"},
    {87, "Cross tears"},
    {88, "Attack buddy"},
    {89, "Slow effect"},
    {90, "DMG up"},
    {91, "See-through doors"},
    {92, "+2 hearts"},
    {93, "Temporary Man-Pac"},
    {94, "Gives money"},
    {95, "Friends 'till the bbbbzzzt"},
    {96, "Gives kisses"},
    {97, "Reusable item generator"},
    {98, "Soul generator"},
    {99, "Sticky friend"},
    {100, "Psychic friend"},
    {101, "All stats up"},
    {102, "Reusable pill generator"},
    {103, "Poison damage"},
    {104, "Split shot"},
    {105, "Reroll your destiny"},
    {106, "Bigger boom"},
    {107, "Cut and run"},
    {108, "Damage resistance"},
    {109, "$$$ = DMG"},
    {110, "Freeze effect"},
    {111, "Toot on command"},
    {112, "Extra protection"},
    {113, "Auto-turret friend"},
    {114, "Stab stab stab"},
    {115, "Spectral tears"},
    {116, "Quicker charge"},
    {117, "Protective buddy"},
    {118, "Blood laser barrage"},
    {119, "HP up"},
    {120, "Tears + speed up, DMG down"},
    {121, "HP + DMG up, speed down"},
    {122, "Curse up"},
    {123, "Temporary buddy generator"},
    {124, "It's a mystery"},
    {125, "Homing bombs"},
    {126, "Feel my pain"},
    {127, "I don't remember..."},
    {128, "Attack fly"},
    {129, "HP up"},
    {130, "Flight + dash attack"},
    {131, "Gives bombs"},
    {132, "My Xmas present"},
    {133, "Soul converter"},
    {134, "Cursed?"},
    {135, "Portable blood bank"},
    {136, "Friends 'till the end"},
    {137, "Remote bomb detonation"},
    {138, "DMG + HP up"},
    {139, "More trinket room"},
    {140, "+5 poison bombs"},
    {141, "Ultimate grand supreme"},
    {142, "Pray for a miracle"},
    {143, "Speed + shot speed up"},
    {144, "He's greedy"},
    {145, "Reusable fly hive"},
    {146, "Reusable eternity "},
    {147, "Rocks don't stand a chance"},
    {148, "Fly revenge"},
    {149, "Explosive shots"},
    {150, "Tooth shot"},
    {151, "They grow inside"},
    {152, "Extra laser"},
    {153, "Quad shot"},
    {154, "DMG up"},
    {155, "Plop!"},
    {156, "Item martyr"},
    {157, "RAGE!"},
    {158, "I see my future"},
    {159, "Scary"},
    {160, "Holy white death"},
    {161, "Eternal life?"},
    {162, "Blessing of protection"},
    {163, "Spectral buddy"},
    {164, "Reusable flames"},
    {165, "Shot speed + damage up"},
    {166, "Reroll the basics"},
    {167, "Double shot buddy"},
    {168, "On-demand air strike"},
    {169, "Mega tears"},
    {170, "Daddy's love"},
    {171, "Mass enemy slowdown + damage"},
    {172, "My fate protects me"},
    {173, "Blessing of purity"},
    {174, "Random buddy"},
    {175, "Opens all doors..."},
    {176, "HP + shot speed up"},
    {177, "Gamble 24/7"},
    {178, "Splash!"},
    {179, "Flight eternal"},
    {180, "Toot on touch"},
    {181, "Flight + holy death"},
    {182, "Homing shots + DMG up"},
    {183, "Tears + shot speed up"},
    {184, "Flight + HP up"},
    {185, "Flight + spectral tears"},
    {186, "Mass enemy damage at a cost"},
    {187, "Swing it"},
    {188, "Mirrored buddy"},
    {189, "All stats up"},
    {190, "99 bombs"},
    {191, "Rainbow tears"},
    {192, "Temporary psychic shot"},
    {193, "DMG + HP up"},
    {194, "Shot speed up"},
    {195, "What's all this...?"},
    {196, "Tears up"},
    {197, "Damage + range up"},
    {198, "Stuff"},
    {199, "Better chest loot +2 keys"},
    {200, "Charm tears"},
    {201, "DMG up + concussive tears"},
    {202, "Golden touch"},
    {203, "1+1 free 4Evar"},
    {204, "Filled with goodies"},
    {205, "Infinite charge... at a cost"},
    {206, "DMG + tears up. An out-of-body experience!"},
    {207, "Gotta lick 'em all!"},
    {208, "DMG + challenge up"},
    {209, "Toxic blast +5 bombs"},
    {210, "Unbreakable"},
    {211, "Spider revenge"},
    {212, "Eternal life?"},
    {213, "Shielded tears"},
    {214, "Toxic blood"},
    {215, "He accepts your offering"},
    {216, "DMG + evil up"},
    {217, "You feel itchy..."},
    {218, "Regeneration + HP up"},
    {219, "HP up"},
    {220, "Tear blasts +5 bombs"},
    {221, "Bouncing tears"},
    {222, "Anti-gravity tears + tears up"},
    {223, "It hurts so good +5 bombs"},
    {224, "Bursting shots + tears up"},
    {225, "Sweet suffering"},
    {226, "HP up x3"},
    {227, "My life savings"},
    {228, "Fear shot + tears up"},
    {229, "Charged burst attack"},
    {230, "Evil + DMG up + fear shot"},
    {231, "Sticky feet..."},
    {232, "Let's slow this down a bit..."},
    {233, "Orbiting tears + range up"},
    {234, "Infestation shot"},
    {236, "Turdy touch"},
    {237, "Piercing shots + DMG up"},
    {238, "???"},
    {239, "???"},
    {240, "Some stats up, some stats down"},
    {241, "Wealth... but at what cost?"},
    {242, "Blocks damage... sometimes"},
    {243, "You feel guarded"},
    {244, "It's still being tested..."},
    {245, "Double shot"},
    {246, "Secrets"},
    {247, "Your friends rule"},
    {248, "Giant spiders and flies"},
    {249, "More options"},
    {250, "1+1 BOOM!"},
    {251, "Extra card room"},
    {252, "Extra pill room"},
    {253, "HP + luck up"},
    {254, "DMG + range up"},
    {255, "Tears + shot speed up"},
    {256, "Burning blast +5 bombs"},
    {257, "Flaming tears"},
    {258, "Syntax error"},
    {259, "DMG up + fear shot"},
    {260, "Curse immunity + evil up"},
    {261, "Short range mega tears"},
    {262, "Evil up. Your enemies will pay!"},
    {263, "Rune mimic"},
    {264, "Revenge fly"},
    {265, "Immortal friend"},
    {266, "Sticky babies"},
    {267, "We worked out all the kinks"},
    {268, "Infested friend"},
    {269, "Bloody friend"},
    {270, "Blood sucker"},
    {271, "?"},
    {272, "Big Beautiful Fly"},
    {273, "Explosive thoughts"},
    {274, "Sworn protector"},
    {275, "Evil friend"},
    {276, "Protect it"},
    {277, "Fear him"},
    {278, "He wants to take your life"},
    {279, "Fat protector"},
    {280, "She loves you"},
    {281, "Scape goat"},
    {282, "It's time you learned how"},
    {283, "REEROLLLLL!"},
    {284, "Reroll into something else"},
    {285, "Reroll enemies"},
    {286, "Card mimic"},
    {287, "Tome of knowledge"},
    {288, "It's a box of spiders"},
    {289, "Flame on"},
    {290, "Save your life"},
    {291, "..."},
    {292, "Reusable evil... but at what cost?"},
    {293, "Krampus rage"},
    {294, "Reusable knock-back"},
    {295, "Pay to win"},
    {296, "Convert your soul"},
    {297, "? ?"},
    {298, "You feel stumped"},
    {299, "Speed down + rage is building"},
    {300, "Ramming speed"},
    {301, "HP up + you feel protected"},
    {302, "Stompy"},
    {303, "You feel refreshed and protected"},
    {304, "You feel balanced"},
    {305, "Poison tears"},
    {306, "Piercing shots + speed up"},
    {307, "All stats up"},
    {308, "Trail of tears"},
    {309, "Tears up + knock-back shot"},
    {310, "DMG up, tears + shot speed down"},
    {311, "Sweet revenge"},
    {312, "HP up + you feel healthy"},
    {313, "Holy shield"},
    {314, "HP up + speed down + you feel stompy"},
    {315, "Magnetic tears"},
    {316, "Cursed charge shot"},
    {317, "Toxic splash damage"},
    {318, "Conjoined friend"},
    {319, "Near-sighted friend"},
    {320, "Controlled friend"},
    {321, "The ol' ball and chain"},
    {322, "Mongo friend"},
    {323, "Collected tears"},
    {324, "Undefined"},
    {325, "Lose your head"},
    {326, "Invincibility at a cost"},
    {327, "Fate chosen"},
    {328, "Fate chosen"},
    {329, "Controlled tears"},
    {330, "DMG down + tears way up"},
    {331, "God tears"},
    {332, "Eternal life?"},
    {333, "I know all"},
    {334, "I feel all"},
    {335, "I am all"},
    {336, "Toxic aura tears"},
    {337, "I think it's broken"},
    {338, "It will never leave you"},
    {339, "Evil + range + shot speed up"},
    {340, "Speed up + size down"},
    {341, "Tears + shot speed up"},
    {342, "HP + tears up + shot speed down"},
    {343, "Luck up"},
    {344, "Evil up"},
    {345, "DMG + range up"},
    {346, "HP up"},
    {347, "Double item vision"},
    {348, "Pill mimic"},
    {349, "Flip a coin"},
    {350, "Mass poison"},
    {351, "Giga fart!"},
    {352, "Be gentle..."},
    {353, "Cross blast + 5 bombs"},
    {354, "HP up. Don't swallow the prize!"},
    {355, "Range + luck up"},
    {356, "Active power up"},
    {357, "Double your friends"},
    {358, "Double wiz shot!"},
    {359, "Stick it to 'em!"},
    {360, "Dark friend"},
    {361, "Your fate beside you"},
    {362, "What's in the box?"},
    {363, "Protective friend"},
    {364, "Friendly fly"},
    {365, "Lost protector"},
    {366, "We put bombs in your bombs!"},
    {367, "Egg sack bombs!"},
    {368, "Intensifying tears"},
    {369, "Transcendent tears"},
    {370, "Range + tears up"},
    {371, "Embrace chaos"},
    {372, "Bbbzzzzzt! "},
    {373, "Accuracy brings power"},
    {374, "Holy death shot"},
    {375, "Blast resistance"},
    {376, "Never ending stores!"},
    {377, "Spider love"},
    {378, "Uh oh..."},
    {379, "Wide shot"},
    {380, "Money talks"},
    {381, "Tears up + your future shines brighter"},
    {382, "Gotta fetch 'em all!"},
    {383, "Remote tear detonation"},
    {384, "A gurd of your own!"},
    {385, "Bumbo want coin!"},
    {386, "Rerolls rocks"},
    {387, "Peace be with you"},
    {388, "He wants your keys!"},
    {389, "Rune generator"},
    {390, "Sworn friend"},
    {391, "Turn your enemy"},
    {392, "The heavens will change you"},
    {393, "The kiss of death"},
    {394, "Directed tears"},
    {395, "Laser ring tears"},
    {396, "Short cutter"},
    {397, "Controlled tears"},
    {398, "Shrink shot!"},
    {399, "Consume thy enemy!"},
    {400, "Your destiny"},
    {401, "Sticky bomb shot"},
    {402, "!!!"},
    {403, "Mod buddy"},
    {404, "He farts"},
    {405, "Double tap glitch"},
    {406, "Reroll stats"},
    {407, "Aura stat boost"},
    {408, "Call to the void"},
    {409, "I reward an empty vessel"},
    {410, "Eye shot"},
    {411, "Their blood brings rage!"},
    {412, "Feed them hate"},
    {413, "Feed them love"},
    {414, "There's options"},
    {415, "The untainted gain power"},
    {416, "More money!"},
    {417, "Damage booster"},
    {418, "Rainbow effects!"},
    {419, "I-Teleport!"},
    {420, "Spin the black circle!"},
    {421, "Love toots"},
    {422, "Turn back time"},
    {423, "Protect me from myself"},
    {424, "More sacks!"},
    {425, "Scared of the dark?"},
    {426, "Follows my every move..."},
    {427, "Booom!"},
    {428, "You feel cozy"},
    {429, "Penny tears"},
    {430, "Turret follower"},
    {431, "ydduB Buddy"},
    {432, "Prize bombs"},
    {433, "Me! And my shaaaadow!"},
    {434, "Bug catcher"},
    {435, "4-way buddy!"},
    {436, "Don't cry over it..."},
    {437, "Roll again"},
    {438, "Tears up"},
    {439, "What's inside?"},
    {440, "Matt's kidney stone"},
    {441, "Laser breath"},
    {442, "Loss is power"},
    {443, "Trick or treat?"},
    {444, "He's a bleeder!"},
    {445, "Bark at the moon!"},
    {446, "Toxic breath"},
    {447, "Crying makes me toot"},
    {448, "Blood and guts!"},
    {449, "It itches..."},
    {450, "Gold tears!"},
    {451, "I see the future"},
    {452, "I'm leaking..."},
    {453, "Bone tears!"},
    {454, "Hold me!"},
    {455, "I remember this..."},
    {456, "HP up"},
    {457, "Hard headed!"},
    {458, "What's in there?"},
    {459, "Booger tears!"},
    {460, "Blind tears!"},
    {461, "Egg tears!"},
    {462, "Possessed tears!"},
    {463, "Acid tears!"},
    {464, "A gift from above"},
    {465, "360 tears!"},
    {466, "Outbreak!"},
    {467, "Watch where you point that!"},
    {468, "It follows"},
    {469, ":("},
    {470, "Lil hush!"},
    {471, "Ain't he cute?"},
    {472, "Hail to the king baby"},
    {473, "Chub chub"},
    {474, "You broke it!"},
    {475, "My last resort"},
    {476, "What will it be?"},
    {477, "Consume"},
    {478, "Stop!"},
    {479, "Trinket melter!"},
    {480, "Gain more friends!"},
    {481, "109"},
    {482, "Change"},
    {483, "BOOOOOOOOOM!"},
    {484, "I can't believe it's not butter bean!"},
    {485, "50/50"},
    {486, "I feel numb..."},
    {487, "A pound of flesh..."},
    {488, "Waggles a finger"},
    {489, "Reroll forever"},
    {490, "..."},
    {491, "Pills pills pills!"},
    {492, "Yo listen!"},
    {493, "Panic = power"},
    {494, "Electric tears"},
    {495, "Flame tears"},
    {496, "Needle shot"},
    {497, "Camo kid"},
    {498, "You feel very balanced"},
    {499, "Peace be with you"},
    {500, "Gives sacks"},
    {501, "Money = health!"},
    {502, "Creep shots"},
    {503, "Big brother is watching"},
    {504, "Friendly fly"},
    {505, "Gotta catch em..."},
    {506, "Watch your back!"},
    {507, "More blood!"},
    {508, "It's sharp!"},
    {509, "Bloody friend"},
    {510, "Unleash the power!"},
    {511, "He's violent"},
    {512, "Nothing can escape"},
    {513, "Party time!"},
    {514, "Lag!"},
    {515, "Wrapped up nice for you!"},
    {516, "Sprinkles."},
    {517, "Rapid bomb drops"},
    {518, "What could it be?!"},
    {519, "Delirious friend"},
    {520, "Bloody recharge"},
    {521, "Allow 6 weeks for delivery"},
    {522, "Power of the mind"},
    {523, "Pack and unpack"},
    {524, "Static tears"},
    {525, "You're tearing me apart!"},
    {526, "Lil harbingers!"},
    {527, "Caaan do!"},
    {528, "Eclipsed by the moon"},
    {529, "Eyeball tears"},
    {530, "Just hope you're not next..."},
    {531, "I'm seeing red..."},
    {532, "Feed them!"},
    {533, "Smite thy enemy"},
    {534, "Extra active item room"},
    {535, "You feel safe"},
    {536, "He demands a sacrifice"},
    {537, "Puking buddy"},
    {538, "Choking hazard"},
    {539, "Sacrificial insemination"},
    {540, "Skipping tears"},
    {541, "HP up?"},
    {542, "Projectile shield"},
    {543, "Portable sanctuary"},
    {544, "Stabbing time"},
    {545, "Rise from the grave"},
    {546, "Father's blessing"},
    {547, "Tears up + you feel empty"},
    {548, "Fetch!"},
    {549, "Everything hurts"},
    {550, "It feels cursed"},
    {551, "It feels cursed"},
    {552, "Lost but not forgotten"},
    {553, "Spore shot"},
    {554, "4me"},
    {555, "Pain from gain"},
    {556, "Temporary demon form"},
    {557, "Reusable fortunes"},
    {558, "More eyes"},
    {559, "Zap!"},
    {560, "No it doesn't..."},
    {561, "DMG down + tears up + you feel nutty"},
    {562, "It's only up from there"},
    {563, "Random blast +5 bombs"},
    {564, "Tears + shot speed up"},
    {565, "What a cute little thing!"},
    {566, "Sweet dreams"},
    {567, "Keep the flame burning"},
    {568, "Double tap shield"},
    {569, "Bleed me dry"},
    {570, "Tasty rainbow"},
    {571, "Speed up + your feet feel stronger"},
    {572, "DMG up + range up + controlled tears"},
    {573, "Halo of tears"},
    {574, "Purifying light"},
    {575, "Invasive friend"},
    {576, "Filthy friends"},
    {577, "A king's fortune... but at what cost?"},
    {578, "Party time!"},
    {579, "Divine blade"},
    {580, "Explore the other side"},
    {581, "Flamboyant protector"},
    {582, "Tears up. A mind changing experience!"},
    {583, "Rocket propulsion +5 bombs"},
    {584, "Spiritual companionship"},
    {585, "A sacred offering"},
    {586, "May you get what you came for"},
    {588, "Radiant victory"},
    {589, "The moon's blessing shines upon you"},
    {590, "Speed up + you feel elusive"},
    {591, "HP up + you feel pretty"},
    {592, "Born to rock"},
    {593, "Double tap dash"},
    {594, "You're a gas giant!"},
    {595, "Ring of tears"},
    {596, "Ice tears"},
    {597, "Open the floodgates"},
    {598, "Size down"},
    {599, "Extra curse rooms"},
    {600, "Tears up"},
    {601, "Tears up, you feel forgiven"},
    {602, "Exclusive access!"},
    {603, "Instant energy!"},
    {604, "Mother's strength"},
    {605, "Plop!"},
    {606, "Stare into the abyss"},
    {607, "Messy friend"},
    {608, "Iced iced baby"},
    {609, "???"},
    {610, "Fat buddy"},
    {611, "Hear my pain"},
    {612, "Protect him"},
    {614, "Bloody blast + HP up"},
    {615, "Puffy buddy"},
    {616, "It burns"},
    {617, "Magnetizing tears"},
    {618, "Delicious!"},
    {619, "???"},
    {621, "Full HP + temporary DMG up"},
    {622, "In the beginning"},
    {623, "Open your enemies"},
    {624, "Collect them all!"},
    {625, "I'm a big boy now!"},
    {626, "???"},
    {627, "???"},
    {628, "Where am I?"},
    {629, "Defense drone"},
    {631, "Slice but no dice"},
    {632, "Luck up + you feel protected"},
    {633, "Ascended"},
    {634, "Help from beyond"},
    {635, "Bait and switch"},
    {636, "Time to start over"},
    {637, "They pack a punch!"},
    {638, "Erase thy enemy"},
    {639, "Gross!"},
    {640, "Unleash their sorrow"},
    {641, "Spill your guts"},
    {642, "All your desires fulfilled"},
    {643, "Awaken your faith"},
    {644, "+1 to lowest stat"},
    {645, "Itching for revenge"},
    {646, "Demon blast +5 bombs"},
    {647, "Beat the juice out of them!"},
    {649, "Bouncy friend"},
    {650, "Play time!"},
    {651, "Follow the light"},
    {652, "Kick it!"},
    {653, "Begone!"},
    {654, "Worse pills + evil up"},
    {655, "Let it rip!"},
    {656, "A king's fortune... but at what cost?"},
    {657, "Clogged enemies"},
    {658, "Micro friends"},
    {659, "Tear size + range up"},
    {660, "A link to your future"},
    {661, "They lurk inside"},
    {663, "You feel prickly"},
    {664, "All you can eat"},
    {665, "An eye for secrets"},
    {667, "A helping hand"},
    {668, "..."},
    {669, "All stats up"},
    {670, "There might be options"},
    {671, "Power of love"},
    {672, "Blood money"},
    {673, "Deliver me from evil"},
    {674, "Unfinished business"},
    {675, "Shards of knowledge"},
    {676, "It multiplies"},
    {677, "The true out-of-body experience!"},
    {678, "Fetus shots"},
    {679, "Abyssal friend"},
    {680, "Oh no..."},
    {681, "It hungers"},
    {682, "Clingy buddy"},
    {683, "Break your enemies"},
    {684, "Out for blood"},
    {685, "Your faith grows"},
    {686, "Power of faith"},
    {687, "Best friends forever!"},
    {688, "Let him free"},
    {689, "?????"},
    {690, "Bounce away!"},
    {691, "Destined for greatness"},
    {692, "He awaits your offering"},
    {693, "Infest"},
    {694, "Eternal sorrow"},
    {695, "May your rage bring haste"},
    {696, "Divine protection"},
    {697, "He wants revenge"},
    {698, "Double trouble!"},
    {699, "Ancient power"},
    {700, "I can see see the future future future"},
    {701, "Buried memories"},
    {702, "Hot blooded"},
    {703, "Lost brother"},
    {704, "Rip and tear"},
    {705, "One with the shadows"},
    {706, "Come forth from the depths"},
    {707, "HP up"},
    {708, "DMG up"},
    {709, "Angel breaker"},
    {710, "Make your destiny"},
    {711, "Life and death"},
    {712, "Item summoner"},
    {713, "Return"},
    {714, "Come back"},
    {715, "Saved for later"},
    {716, "Spending power"},
    {717, "Under a rock"},
    {719, "Portable shop"},
    {720, "Anything is possible"},
    {721, "Isaac and his mother lived alone in a small house on a hill"},
    {722, "Repent"},
    {723, "-1"},
    {724, "Thick blooded"},
    {725, "Your stomach rumbles"},
    {726, "Double tap sneeze"},
    {727, "Spooky blast +5 bombs"},
    {728, "Demonic gestation"},
    {729, "Chuck away!"},
    {730, "DMG + luck up"},
    {731, "DMG + range up"},
    {732, "DMG up"}
})
return ____exports
 end,
["lua_modules.isaacscript-common.maps.collectibleNameMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
____exports.DEFAULT_COLLECTIBLE_NAME = "Unknown"
____exports.COLLECTIBLE_NAME_MAP = __TS__New(Map, {
    {1, "The Sad Onion"},
    {2, "The Inner Eye"},
    {3, "Spoon Bender"},
    {4, "Cricket's Head"},
    {5, "My Reflection"},
    {6, "Number One"},
    {7, "Blood of the Martyr"},
    {8, "Brother Bobby"},
    {9, "Skatole"},
    {10, "Halo of Flies"},
    {11, "1up!"},
    {12, "Magic Mushroom"},
    {13, "The Virus"},
    {14, "Roid Rage"},
    {15, "<3"},
    {16, "Raw Liver"},
    {17, "Skeleton Key"},
    {18, "A Dollar"},
    {19, "Boom!"},
    {20, "Transcendence"},
    {21, "The Compass"},
    {22, "Lunch"},
    {23, "Dinner"},
    {24, "Dessert"},
    {25, "Breakfast"},
    {26, "Rotten Meat"},
    {27, "Wooden Spoon"},
    {28, "The Belt"},
    {29, "Mom's Underwear"},
    {30, "Mom's Heels"},
    {31, "Mom's Lipstick"},
    {32, "Wire Coat Hanger"},
    {33, "The Bible"},
    {34, "The Book of Belial"},
    {35, "The Necronomicon"},
    {36, "The Poop"},
    {37, "Mr. Boom"},
    {38, "Tammy's Head"},
    {39, "Mom's Bra"},
    {40, "Kamikaze!"},
    {41, "Mom's Pad"},
    {42, "Bob's Rotten Head"},
    {44, "Teleport!"},
    {45, "Yum Heart"},
    {46, "Lucky Foot"},
    {47, "Doctor's Remote"},
    {48, "Cupid's Arrow"},
    {49, "Shoop da Whoop!"},
    {50, "Steven"},
    {51, "Pentagram"},
    {52, "Dr. Fetus"},
    {53, "Magneto"},
    {54, "Treasure Map"},
    {55, "Mom's Eye"},
    {56, "Lemon Mishap"},
    {57, "Distant Admiration"},
    {58, "Book of Shadows"},
    {60, "The Ladder"},
    {62, "Charm of the Vampire"},
    {63, "The Battery"},
    {64, "Steam Sale"},
    {65, "Anarchist Cookbook"},
    {66, "The Hourglass"},
    {67, "Sister Maggy"},
    {68, "Technology"},
    {69, "Chocolate Milk"},
    {70, "Growth Hormones"},
    {71, "Mini Mush"},
    {72, "Rosary"},
    {73, "Cube of Meat"},
    {74, "A Quarter"},
    {75, "PHD"},
    {76, "X-Ray Vision"},
    {77, "My Little Unicorn"},
    {78, "Book of Revelations"},
    {79, "The Mark"},
    {80, "The Pact"},
    {81, "Dead Cat"},
    {82, "Lord of the Pit"},
    {83, "The Nail"},
    {84, "We Need To Go Deeper!"},
    {85, "Deck of Cards"},
    {86, "Monstro's Tooth"},
    {87, "Loki's Horns"},
    {88, "Little Chubby"},
    {89, "Spider Bite"},
    {90, "The Small Rock"},
    {91, "Spelunker Hat"},
    {92, "Super Bandage"},
    {93, "The Gamekid"},
    {94, "Sack of Pennies"},
    {95, "Robo-Baby"},
    {96, "Little C.H.A.D."},
    {97, "The Book of Sin"},
    {98, "The Relic"},
    {99, "Little Gish"},
    {100, "Little Steven"},
    {101, "The Halo"},
    {102, "Mom's Bottle of Pills"},
    {103, "The Common Cold"},
    {104, "The Parasite"},
    {105, "The D6"},
    {106, "Mr. Mega"},
    {107, "The Pinking Shears"},
    {108, "The Wafer"},
    {109, "Money = Power"},
    {110, "Mom's Contacts"},
    {111, "The Bean"},
    {112, "Guardian Angel"},
    {113, "Demon Baby"},
    {114, "Mom's Knife"},
    {115, "Ouija Board"},
    {116, "9 Volt"},
    {117, "Dead Bird"},
    {118, "Brimstone"},
    {119, "Blood Bag"},
    {120, "Odd Mushroom"},
    {121, "Odd Mushroom"},
    {122, "Whore of Babylon"},
    {123, "Monster Manual"},
    {124, "Dead Sea Scrolls"},
    {125, "Bobby-Bomb"},
    {126, "Razor Blade"},
    {127, "Forget Me Now"},
    {128, "Forever Alone"},
    {129, "Bucket of Lard"},
    {130, "A Pony"},
    {131, "Bomb Bag"},
    {132, "A Lump of Coal"},
    {133, "Guppy's Paw"},
    {134, "Guppy's Tail"},
    {135, "IV Bag"},
    {136, "Best Friend"},
    {137, "Remote Detonator"},
    {138, "Stigmata"},
    {139, "Mom's Purse"},
    {140, "Bob's Curse"},
    {141, "Pageant Boy"},
    {142, "Scapular"},
    {143, "Speed Ball"},
    {144, "Bum Friend"},
    {145, "Guppy's Head"},
    {146, "Prayer Card"},
    {147, "Notched Axe"},
    {148, "Infestation"},
    {149, "Ipecac"},
    {150, "Tough Love"},
    {151, "The Mulligan"},
    {152, "Technology 2"},
    {153, "Mutant Spider"},
    {154, "Chemical Peel"},
    {155, "The Peeper"},
    {156, "Habit"},
    {157, "Bloody Lust"},
    {158, "Crystal Ball"},
    {159, "Spirit of the Night"},
    {160, "Crack the Sky"},
    {161, "Ankh"},
    {162, "Celtic Cross"},
    {163, "Ghost Baby"},
    {164, "The Candle"},
    {165, "Cat-o-nine-tails"},
    {166, "D20"},
    {167, "Harlequin Baby"},
    {168, "Epic Fetus"},
    {169, "Polyphemus"},
    {170, "Daddy Longlegs"},
    {171, "Spider Butt"},
    {172, "Sacrificial Dagger"},
    {173, "Mitre"},
    {174, "Rainbow Baby"},
    {175, "Dad's Key"},
    {176, "Stem Cells"},
    {177, "Portable Slot"},
    {178, "Holy Water"},
    {179, "Fate"},
    {180, "The Black Bean"},
    {181, "White Pony"},
    {182, "Sacred Heart"},
    {183, "Tooth Picks"},
    {184, "Holy Grail"},
    {185, "Dead Dove"},
    {186, "Blood Rights"},
    {187, "Guppy's Hairball"},
    {188, "Abel"},
    {189, "SMB Super Fan"},
    {190, "Pyro"},
    {191, "3 Dollar Bill"},
    {192, "Telepathy For Dummies"},
    {193, "MEAT!"},
    {194, "Magic 8 Ball"},
    {195, "Mom's Coin Purse"},
    {196, "Squeezy"},
    {197, "Jesus Juice"},
    {198, "Box"},
    {199, "Mom's Key"},
    {200, "Mom's Eyeshadow"},
    {201, "Iron Bar"},
    {202, "Midas' Touch"},
    {203, "Humbleing Bundle"},
    {204, "Fanny Pack"},
    {205, "Sharp Plug"},
    {206, "Guillotine"},
    {207, "Ball of Bandages"},
    {208, "Champion Belt"},
    {209, "Butt Bombs"},
    {210, "Gnawed Leaf"},
    {211, "Spiderbaby"},
    {212, "Guppy's Collar"},
    {213, "Lost Contact"},
    {214, "Anemic"},
    {215, "Goat Head"},
    {216, "Ceremonial Robes"},
    {217, "Mom's Wig"},
    {218, "Placenta"},
    {219, "Old Bandage"},
    {220, "Sad Bombs"},
    {221, "Rubber Cement"},
    {222, "Anti-Gravity"},
    {223, "Pyromaniac"},
    {224, "Cricket's Body"},
    {225, "Gimpy"},
    {226, "Black Lotus"},
    {227, "Piggy Bank"},
    {228, "Mom's Perfume"},
    {229, "Monstro's Lung"},
    {230, "Abaddon"},
    {231, "Ball of Tar"},
    {232, "Stop Watch"},
    {233, "Tiny Planet"},
    {234, "Infestation 2"},
    {236, "E. Coli"},
    {237, "Death's Touch"},
    {238, "Key Piece 1"},
    {239, "Key Piece 2"},
    {240, "Experimental Treatment"},
    {241, "Contract from Below"},
    {242, "Infamy"},
    {243, "Trinity Shield"},
    {244, "Tech.5"},
    {245, "20/20"},
    {246, "Blue Map"},
    {247, "BFFS!"},
    {248, "Hive Mind"},
    {249, "There's Options"},
    {250, "BOGO Bombs"},
    {251, "Starter Deck"},
    {252, "Little Baggy"},
    {253, "Magic Scab"},
    {254, "Blood Clot"},
    {255, "Screw"},
    {256, "Hot Bombs"},
    {257, "Fire Mind"},
    {258, "Missing No."},
    {259, "Dark Matter"},
    {260, "Black Candle"},
    {261, "Proptosis"},
    {262, "Missing Page 2"},
    {263, "Clear Rune"},
    {264, "Smart Fly"},
    {265, "Dry Baby"},
    {266, "Juicy Sack"},
    {267, "Robo-Baby 2.0"},
    {268, "Rotten Baby"},
    {269, "Headless Baby"},
    {270, "Leech"},
    {271, "Mystery Sack"},
    {272, "BBF"},
    {273, "Bob's Brain"},
    {274, "Best Bud"},
    {275, "Lil Brimstone"},
    {276, "Isaac's Heart"},
    {277, "Lil Haunt"},
    {278, "Dark Bum"},
    {279, "Big Fan"},
    {280, "Sissy Longlegs"},
    {281, "Punching Bag"},
    {282, "How to Jump"},
    {283, "D100"},
    {284, "D4"},
    {285, "D10"},
    {286, "Blank Card"},
    {287, "Book of Secrets"},
    {288, "Box of Spiders"},
    {289, "Red Candle"},
    {290, "The Jar"},
    {291, "Flush!"},
    {292, "Satanic Bible"},
    {293, "Head of Krampus"},
    {294, "Butter Bean"},
    {295, "Magic Fingers"},
    {296, "Converter"},
    {297, "Pandora's Box"},
    {298, "Unicorn Stump"},
    {299, "Taurus"},
    {300, "Aries"},
    {301, "Cancer"},
    {302, "Leo"},
    {303, "Virgo"},
    {304, "Libra"},
    {305, "Scorpio"},
    {306, "Sagittarius"},
    {307, "Capricorn"},
    {308, "Aquarius"},
    {309, "Pisces"},
    {310, "Eve's Mascara"},
    {311, "Judas' Shadow"},
    {312, "Maggy's Bow"},
    {313, "Holy Mantle"},
    {314, "Thunder Thighs"},
    {315, "Strange Attractor"},
    {316, "Cursed Eye"},
    {317, "Mysterious Liquid"},
    {318, "Gemini"},
    {319, "Cain's Other Eye"},
    {320, "???'s Only Friend"},
    {321, "Samson's Chains"},
    {322, "Mongo Baby"},
    {323, "Isaac's Tears"},
    {324, "Undefined"},
    {325, "Scissors"},
    {326, "Breath of Life"},
    {327, "The Polaroid"},
    {328, "The Negative"},
    {329, "The Ludovico Technique"},
    {330, "Soy Milk"},
    {331, "Godhead"},
    {332, "Lazarus' Rags"},
    {333, "The Mind"},
    {334, "The Body"},
    {335, "The Soul"},
    {336, "Dead Onion"},
    {337, "Broken Watch"},
    {338, "The Boomerang"},
    {339, "Safety Pin"},
    {340, "Caffeine Pill"},
    {341, "Torn Photo"},
    {342, "Blue Cap"},
    {343, "Latch Key"},
    {344, "Match Book"},
    {345, "Synthoil"},
    {346, "A Snack"},
    {347, "Diplopia"},
    {348, "Placebo"},
    {349, "Wooden Nickel"},
    {350, "Toxic Shock"},
    {351, "Mega Bean"},
    {352, "Glass Cannon"},
    {353, "Bomber Boy"},
    {354, "Crack Jacks"},
    {355, "Mom's Pearls"},
    {356, "Car Battery"},
    {357, "Box of Friends"},
    {358, "The Wiz"},
    {359, "8 Inch Nails"},
    {360, "Incubus"},
    {361, "Fate's Reward"},
    {362, "Lil Chest"},
    {363, "Sworn Protector"},
    {364, "Friend Zone"},
    {365, "Lost Fly"},
    {366, "Scatter Bombs"},
    {367, "Sticky Bombs"},
    {368, "Epiphora"},
    {369, "Continuum"},
    {370, "Mr. Dolly"},
    {371, "Curse of the Tower"},
    {372, "Charged Baby"},
    {373, "Dead Eye"},
    {374, "Holy Light"},
    {375, "Host Hat"},
    {376, "Restock"},
    {377, "Bursting Sack"},
    {378, "Number Two"},
    {379, "Pupula Duplex"},
    {380, "Pay To Play"},
    {381, "Eden's Blessing"},
    {382, "Friendly Ball"},
    {383, "Tear Detonator"},
    {384, "Lil Gurdy"},
    {385, "Bumbo"},
    {386, "D12"},
    {387, "Censer"},
    {388, "Key Bum"},
    {389, "Rune Bag"},
    {390, "Seraphim"},
    {391, "Betrayal"},
    {392, "Zodiac"},
    {393, "Serpent's Kiss"},
    {394, "Marked"},
    {395, "Tech X"},
    {396, "Ventricle Razor"},
    {397, "Tractor Beam"},
    {398, "God's Flesh"},
    {399, "Maw of the Void"},
    {400, "Spear of Destiny"},
    {401, "Explosivo"},
    {402, "Chaos"},
    {403, "Spider Mod"},
    {404, "Farting Baby"},
    {405, "GB Bug"},
    {406, "D8"},
    {407, "Purity"},
    {408, "Athame"},
    {409, "Empty Vessel"},
    {410, "Evil Eye"},
    {411, "Lusty Blood"},
    {412, "Cambion Conception"},
    {413, "Immaculate Conception"},
    {414, "More Options"},
    {415, "Crown of Light"},
    {416, "Deep Pockets"},
    {417, "Succubus"},
    {418, "Fruit Cake"},
    {419, "Teleport 2.0"},
    {420, "Black Powder"},
    {421, "Kidney Bean"},
    {422, "Glowing Hour Glass"},
    {423, "Circle of Protection"},
    {424, "Sack Head"},
    {425, "Night Light"},
    {426, "Obsessed Fan"},
    {427, "Mine Crafter"},
    {428, "PJs"},
    {429, "Head of the Keeper"},
    {430, "Papa Fly"},
    {431, "Multidimensional Baby"},
    {432, "Glitter Bombs"},
    {433, "My Shadow"},
    {434, "Jar of Flies"},
    {435, "Lil Loki"},
    {436, "Milk!"},
    {437, "D7"},
    {438, "Binky"},
    {439, "Mom's Box"},
    {440, "Kidney Stone"},
    {441, "Mega Blast"},
    {442, "Dark Prince's Crown"},
    {443, "Apple!"},
    {444, "Lead Pencil"},
    {445, "Dog Tooth"},
    {446, "Dead Tooth"},
    {447, "Linger Bean"},
    {448, "Shard of Glass"},
    {449, "Metal Plate"},
    {450, "Eye of Greed"},
    {451, "Tarot Cloth"},
    {452, "Varicose Veins"},
    {453, "Compound Fracture"},
    {454, "Polydactyly"},
    {455, "Dad's Lost Coin"},
    {456, "Midnight Snack"},
    {457, "Cone Head"},
    {458, "Belly Button"},
    {459, "Sinus Infection"},
    {460, "Glaucoma"},
    {461, "Parasitoid"},
    {462, "Eye of Belial"},
    {463, "Sulfuric Acid"},
    {464, "Glyph of Balance"},
    {465, "Analog Stick"},
    {466, "Contagion"},
    {467, "Finger!"},
    {468, "Shade"},
    {469, "Depression"},
    {470, "Hushy"},
    {471, "Lil Monstro"},
    {472, "King Baby"},
    {473, "Big Chubby"},
    {474, "Broken Glass Cannon"},
    {475, "Plan C"},
    {476, "D1"},
    {477, "Void"},
    {478, "Pause"},
    {479, "Smelter"},
    {480, "Compost"},
    {481, "Dataminer"},
    {482, "Clicker"},
    {483, "Mama Mega!"},
    {484, "Wait What?"},
    {485, "Crooked Penny"},
    {486, "Dull Razor"},
    {487, "Potato Peeler"},
    {488, "Metronome"},
    {489, "D infinity"},
    {490, "Eden's Soul"},
    {491, "Acid Baby"},
    {492, "YO LISTEN!"},
    {493, "Adrenaline"},
    {494, "Jacob's Ladder"},
    {495, "Ghost Pepper"},
    {496, "Euthanasia"},
    {497, "Camo Undies"},
    {498, "Duality"},
    {499, "Eucharist"},
    {500, "Sack of Sacks"},
    {501, "Greed's Gullet"},
    {502, "Large Zit"},
    {503, "Little Horn"},
    {504, "Brown Nugget"},
    {505, "Poke Go"},
    {506, "Backstabber"},
    {507, "Sharp Straw"},
    {508, "Mom's Razor"},
    {509, "Bloodshot Eye"},
    {510, "Delirious"},
    {511, "Angry Fly"},
    {512, "Black Hole"},
    {513, "Bozo"},
    {514, "Broken Modem"},
    {515, "Mystery Gift"},
    {516, "Sprinkler"},
    {517, "Fast Bombs"},
    {518, "Buddy in a Box"},
    {519, "Lil Delirium"},
    {520, "Jumper Cables"},
    {521, "Coupon"},
    {522, "Telekinesis"},
    {523, "Moving Box"},
    {524, "Technology Zero"},
    {525, "Leprosy"},
    {526, "7 Seals"},
    {527, "Mr. ME!"},
    {528, "Angelic Prism"},
    {529, "Pop!"},
    {530, "Death's List"},
    {531, "Haemolacria"},
    {532, "Lachryphagy"},
    {533, "Trisagion"},
    {534, "Schoolbag"},
    {535, "Blanket"},
    {536, "Sacrificial Altar"},
    {537, "Lil Spewer"},
    {538, "Marbles"},
    {539, "Mystery Egg"},
    {540, "Flat Stone"},
    {541, "Marrow"},
    {542, "Slipped Rib"},
    {543, "Hallowed Ground"},
    {544, "Pointy Rib"},
    {545, "Book of the Dead"},
    {546, "Dad's Ring"},
    {547, "Divorce Papers"},
    {548, "Jaw Bone"},
    {549, "Brittle Bones"},
    {550, "Broken Shovel"},
    {551, "Broken Shovel"},
    {552, "Mom's Shovel"},
    {553, "Mucormycosis"},
    {554, "2Spooky"},
    {555, "Golden Razor"},
    {556, "Sulfur"},
    {557, "Fortune Cookie"},
    {558, "Eye Sore"},
    {559, "120 Volt"},
    {560, "It Hurts"},
    {561, "Almond Milk"},
    {562, "Rock Bottom"},
    {563, "Nancy Bombs"},
    {564, "A Bar of Soap"},
    {565, "Blood Puppy"},
    {566, "Dream Catcher"},
    {567, "Paschal Candle"},
    {568, "Divine Intervention"},
    {569, "Blood Oath"},
    {570, "Playdough Cookie"},
    {571, "Orphan Socks"},
    {572, "Eye of the Occult"},
    {573, "Immaculate Heart"},
    {574, "Monstrance"},
    {575, "The Intruder"},
    {576, "Dirty Mind"},
    {577, "Damocles"},
    {578, "Free Lemonade"},
    {579, "Spirit Sword"},
    {580, "Red Key"},
    {581, "Psy Fly"},
    {582, "Wavy Cap"},
    {583, "Rocket in a Jar"},
    {584, "Book of Virtues"},
    {585, "Alabaster Box"},
    {586, "The Stairway"},
    {588, "Sol"},
    {589, "Luna"},
    {590, "Mercurius"},
    {591, "Venus"},
    {592, "Terra"},
    {593, "Mars"},
    {594, "Jupiter"},
    {595, "Saturnus"},
    {596, "Uranus"},
    {597, "Neptunus"},
    {598, "Pluto"},
    {599, "Voodoo Head"},
    {600, "Eye Drops"},
    {601, "Act of Contrition"},
    {602, "Member Card"},
    {603, "Battery Pack"},
    {604, "Mom's Bracelet"},
    {605, "The Scooper"},
    {606, "Ocular Rift"},
    {607, "Boiled Baby"},
    {608, "Freezer Baby"},
    {609, "Eternal D6"},
    {610, "Bird Cage"},
    {611, "Larynx"},
    {612, "Lost Soul"},
    {614, "Blood Bombs"},
    {615, "Lil Dumpy"},
    {616, "Bird's Eye"},
    {617, "Lodestone"},
    {618, "Rotten Tomato"},
    {619, "Birthright"},
    {621, "Red Stew"},
    {622, "Genesis"},
    {623, "Sharp Key"},
    {624, "Booster Pack"},
    {625, "Mega Mush"},
    {626, "Knife Piece 1"},
    {627, "Knife Piece 2"},
    {628, "Death Certificate"},
    {629, "Bot Fly"},
    {631, "Meat Cleaver"},
    {632, "Evil Charm"},
    {633, "Dogma"},
    {634, "Purgatory"},
    {635, "Stitches"},
    {636, "R Key"},
    {637, "Knockout Drops"},
    {638, "Eraser"},
    {639, "Yuck Heart"},
    {640, "Urn of Souls"},
    {641, "Akeldama"},
    {642, "Magic Skin"},
    {643, "Revelation"},
    {644, "Consolation Prize"},
    {645, "Tinytoma"},
    {646, "Brimstone Bombs"},
    {647, "4.5 Volt"},
    {649, "Fruity Plum"},
    {650, "Plum Flute"},
    {651, "Star of Bethlehem"},
    {652, "Cube Baby"},
    {653, "Vade Retro"},
    {654, "False PHD"},
    {655, "Spin to Win"},
    {656, "Damocles"},
    {657, "Vasculitis"},
    {658, "Giant Cell"},
    {659, "Tropicamide"},
    {660, "Card Reading"},
    {661, "Quints"},
    {663, "Tooth and Nail"},
    {664, "Binge Eater"},
    {665, "Guppy's Eye"},
    {667, "Strawman"},
    {668, "Dad's Note"},
    {669, "Sausage"},
    {670, "Options?"},
    {671, "Candy Heart"},
    {672, "A Pound of Flesh"},
    {673, "Redemption"},
    {674, "Spirit Shackles"},
    {675, "Cracked Orb"},
    {676, "Empty Heart"},
    {677, "Astral Projection"},
    {678, "C Section"},
    {679, "Lil Abaddon"},
    {680, "Montezuma's Revenge"},
    {681, "Lil Portal"},
    {682, "Worm Friend"},
    {683, "Bone Spurs"},
    {684, "Hungry Soul"},
    {685, "Jar of Wisps"},
    {686, "Soul Locket"},
    {687, "Friend Finder"},
    {688, "Inner Child"},
    {689, "Glitched Crown"},
    {690, "Belly Jelly"},
    {691, "Sacred Orb"},
    {692, "Sanguine Bond"},
    {693, "The Swarm"},
    {694, "Heartbreak"},
    {695, "Bloody Gust"},
    {696, "Salvation"},
    {697, "Vanishing Twin"},
    {698, "Twisted Pair"},
    {699, "Azazel's Rage"},
    {700, "Echo Chamber"},
    {701, "Isaac's Tomb"},
    {702, "Vengeful Spirit"},
    {703, "Esau Jr."},
    {704, "Berserk!"},
    {705, "Dark Arts"},
    {706, "Abyss"},
    {707, "Supper"},
    {708, "Stapler"},
    {709, "Suplex!"},
    {710, "Bag of Crafting"},
    {711, "Flip"},
    {712, "Lemegeton"},
    {713, "Sumptorium"},
    {714, "Recall"},
    {715, "Hold"},
    {716, "Keeper's Sack"},
    {717, "Keeper's Kin"},
    {719, "Keeper's Box"},
    {720, "Everything Jar"},
    {721, "TMTRAINER"},
    {722, "Anima Sola"},
    {723, "Spindown Dice"},
    {724, "Hypercoagulation"},
    {725, "IBS"},
    {726, "Hemoptysis"},
    {727, "Ghost Bombs"},
    {728, "Gello"},
    {729, "Decap Attack"},
    {730, "Glass Eye"},
    {731, "Stye"},
    {732, "Mom's Ring"}
})
return ____exports
 end,
["lua_modules.isaacscript-common.sets.singleUseActiveCollectibleTypesSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
____exports.SINGLE_USE_ACTIVE_COLLECTIBLE_TYPES_SET = __TS__New(Set, {
    CollectibleType.FORGET_ME_NOW,
    CollectibleType.EDENS_SOUL,
    CollectibleType.ALABASTER_BOX,
    CollectibleType.PLAN_C,
    CollectibleType.MAMA_MEGA,
    CollectibleType.SACRIFICIAL_ALTAR,
    CollectibleType.DEATH_CERTIFICATE,
    CollectibleType.R_KEY
})
return ____exports
 end,
["lua_modules.isaacscript-common.functions.entity"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local __TS__StringSplit = ____lualib.__TS__StringSplit
local ____exports = {}
local setPrimitiveEntityFields
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____constants = require("lua_modules.isaacscript-common.constants")
local VectorZero = ____constants.VectorZero
local ____storyBossesSet = require("lua_modules.isaacscript-common.sets.storyBossesSet")
local STORY_BOSSES_SET = ____storyBossesSet.STORY_BOSSES_SET
local ____isaacAPIClass = require("lua_modules.isaacscript-common.functions.isaacAPIClass")
local getIsaacAPIClassName = ____isaacAPIClass.getIsaacAPIClassName
local ____random = require("lua_modules.isaacscript-common.functions.random")
local getRandom = ____random.getRandom
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local isRNG = ____rng.isRNG
local newRNG = ____rng.newRNG
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isPrimitive = ____types.isPrimitive
function setPrimitiveEntityFields(self, entity, metatable, entityFields)
    local propGetTable = metatable.__propget
    if propGetTable == nil then
        error("Failed to get the \"__propget\" table for an entity.")
    end
    for key in pairs(propGetTable) do
        local indexKey = key
        local value = entity[indexKey]
        if isPrimitive(nil, value) then
            entityFields[indexKey] = value
        end
    end
end
--- Helper function to remove all of the entities in the supplied array.
-- 
-- @param entities The array of entities to remove.
-- @param cap Optional. If specified, will only remove the given amount of entities.
-- @returns An array of the entities that were removed.
function ____exports.removeEntities(self, entities, cap)
    if #entities == 0 then
        return {}
    end
    local entitiesRemoved = {}
    for ____, entity in ipairs(entities) do
        entity:Remove()
        entitiesRemoved[#entitiesRemoved + 1] = entity
        if cap ~= nil and #entitiesRemoved >= cap then
            return entitiesRemoved
        end
    end
    return entitiesRemoved
end
--- Helper function to count the number of entities in room. Use this over the vanilla
-- `Isaac.CountEntities` method to avoid having to specify a spawner and to handle ignoring charmed
-- enemies.
-- 
-- @param entityType Default is -1. -1 matches every entity type.
-- @param variant Default is -1. -1 matches every variant.
-- @param subType Default is -1. -1 matches every sub-type.
-- @param ignoreFriendly Default is false.
function ____exports.countEntities(self, entityType, variant, subType, ignoreFriendly)
    if entityType == nil then
        entityType = -1
    end
    if variant == nil then
        variant = -1
    end
    if subType == nil then
        subType = -1
    end
    if ignoreFriendly == nil then
        ignoreFriendly = false
    end
    if not ignoreFriendly then
        return Isaac.CountEntities(nil, entityType, variant, subType)
    end
    local entities = Isaac.FindByType(
        entityType,
        variant,
        subType,
        false,
        ignoreFriendly
    )
    return #entities
end
--- Helper function to check if one or more of a specific kind of entity is present in the current
-- room. It uses the `countEntities` helper function to determine this.
-- 
-- @param entityType Default is -1. -1 matches every entity type.
-- @param variant Default is -1. -1 matches every variant.
-- @param subType Default is -1. -1 matches every sub-type.
-- @param ignoreFriendly Default is false.
function ____exports.doesEntityExist(self, entityType, variant, subType, ignoreFriendly)
    if entityType == nil then
        entityType = -1
    end
    if variant == nil then
        variant = -1
    end
    if subType == nil then
        subType = -1
    end
    if ignoreFriendly == nil then
        ignoreFriendly = false
    end
    local count = ____exports.countEntities(
        nil,
        entityType,
        variant,
        subType,
        ignoreFriendly
    )
    return count > 0
end
--- Given an array of entities, this helper function returns the closest one to a provided reference
-- entity.
-- 
-- For example:
-- 
-- ```ts
-- const player = Isaac.GetPlayer();
-- const gapers = getEntities(EntityType.GAPER);
-- const closestGaper = getClosestEntityTo(player, gapers);
-- ```
function ____exports.getClosestEntityTo(self, referenceEntity, entities)
    local closestEntity
    local closestDistance = math.huge
    for ____, entity in ipairs(entities) do
        local distance = referenceEntity.Position:Distance(entity.Position)
        if distance < closestDistance then
            closestEntity = entity
            closestDistance = distance
        end
    end
    return closestEntity
end
--- Helper function to get all of the entities in the room or all of the entities that match a
-- specific entity type / variant / sub-type.
-- 
-- Due to bugs with `Isaac.FindInRadius`, this function uses `Isaac.GetRoomEntities`, which is more
-- expensive but also more robust. (If a matching entity type is provided, then `Isaac.FindByType`
-- will be used instead.)
-- 
-- For example:
-- 
-- ```ts
-- // Make all of the entities in the room invisible
-- for (const entity of getEntities()) {
--   entity.Visible = false;
-- }
-- ```
-- 
-- @param entityType Optional. If specified, will only return NPCs that match this entity type.
-- @param variant Optional. If specified, will only return NPCs that match this variant. Default is
-- -1. -1 matches every variant.
-- @param subType Optional. If specified, will only return NPCs that match this sub-type. Default is
-- -1. -1 matches every sub-type.
-- @param ignoreFriendly Optional. If set to true, it will exclude friendly NPCs from being
-- returned. Default is false. Will only be taken into account if
-- `matchingEntityType` is specified.
function ____exports.getEntities(self, entityType, variant, subType, ignoreFriendly)
    if variant == nil then
        variant = -1
    end
    if subType == nil then
        subType = -1
    end
    if ignoreFriendly == nil then
        ignoreFriendly = false
    end
    if entityType == nil then
        return Isaac.GetRoomEntities()
    end
    return Isaac.FindByType(entityType, variant, subType, ignoreFriendly)
end
--- Helper function to get all the fields on an entity. For example, this is useful for comparing it
-- to another entity later.
-- 
-- This function will only get fields that are equal to booleans, numbers, or strings, as comparing
-- other types is non-trivial.
function ____exports.getEntityFields(self, entity)
    local entityFields = {}
    local metatable = getmetatable(entity)
    if metatable == nil then
        error("Failed to get the metatable for an entity.")
    end
    setPrimitiveEntityFields(nil, entity, metatable, entityFields)
    local className = getIsaacAPIClassName(nil, entity)
    if className == "Entity" then
        return entityFields
    end
    local parentTable = metatable.__parent
    if parentTable == nil then
        error("Failed to get the \"__parent\" table for an entity.")
    end
    setPrimitiveEntityFields(nil, entity, parentTable, entityFields)
    return entityFields
end
--- Helper function to return a string containing the entity's type, variant, and sub-type.
function ____exports.getEntityID(self, entity)
    return (((tostring(entity.Type) .. ".") .. tostring(entity.Variant)) .. ".") .. tostring(entity.SubType)
end
--- Helper function to compare two different arrays of entities. Returns the entities that are in the
-- second array but not in the first array.
function ____exports.getFilteredNewEntities(self, oldEntities, newEntities)
    local oldEntitiesSet = __TS__New(Set)
    for ____, entity in ipairs(oldEntities) do
        local ptrHash = GetPtrHash(entity)
        oldEntitiesSet:add(ptrHash)
    end
    return __TS__ArrayFilter(
        newEntities,
        function(____, entity)
            local ptrHash = GetPtrHash(entity)
            return not oldEntitiesSet:has(ptrHash)
        end
    )
end
--- Helper function to measure an entity's velocity to see if it is moving.
-- 
-- @param entity The entity whose velocity to measure.
-- @param threshold Optional. The threshold from 0 to consider to be moving. Default is 0.01.
function ____exports.isEntityMoving(self, entity, threshold)
    if threshold == nil then
        threshold = 0.01
    end
    return entity.Velocity:Length() >= threshold
end
--- Helper function to determine if the specified entity type is an end-game story boss, like Isaac,
-- Blue Baby, Mega Satan, The Beast, and so on. This is useful because certain effects should only
-- apply to non-story bosses, like Vanishing Twin. Also see the `STORY_BOSSES` constant.
function ____exports.isStoryBoss(self, entityType)
    return STORY_BOSSES_SET:has(entityType)
end
--- Helper function to parse a string that contains an entity type, a variant, and a sub-type,
-- separated by periods.
-- 
-- For example, passing "45.0.1" would return an array of [45, 0, 1].
-- 
-- Returns undefined if the string cannot be parsed.
function ____exports.parseEntityID(self, entityID)
    local entityIDArray = __TS__StringSplit(entityID, ".")
    if #entityIDArray ~= 3 then
        return nil
    end
    local entityTypeString, variantString, subTypeString = table.unpack(entityIDArray)
    local entityType = tonumber(entityTypeString)
    if entityType == nil then
        return nil
    end
    local variant = tonumber(variantString)
    if variant == nil then
        return nil
    end
    local subType = tonumber(subTypeString)
    if subType == nil then
        return nil
    end
    return {entityType, variant, subType}
end
--- Helper function to parse a string that contains an entity type and a variant separated by a
-- period.
-- 
-- For example, passing "45.0" would return an array of [45, 0].
-- 
-- Returns undefined if the string cannot be parsed.
function ____exports.parseEntityTypeVariantString(self, entityTypeVariantString)
    local entityTypeVariantArray = __TS__StringSplit(entityTypeVariantString, ".")
    if #entityTypeVariantArray ~= 2 then
        return nil
    end
    local entityTypeString, variantString = table.unpack(entityTypeVariantArray)
    local entityType = tonumber(entityTypeString)
    if entityType == nil then
        return nil
    end
    local variant = tonumber(variantString)
    if variant == nil then
        return nil
    end
    return {entityType, variant}
end
--- Helper function to remove all of the matching entities in the room.
-- 
-- @param entityType The entity type to match.
-- @param entityVariant Optional. The variant to match. Default is -1. -1 matches every variant.
-- @param entitySubType Optional. The sub-type to match. Default is -1. -1 matches every sub-type.
-- @param cap Optional. If specified, will only remove the given amount of collectibles.
-- @returns An array of the entities that were removed.
function ____exports.removeAllMatchingEntities(self, entityType, entityVariant, entitySubType, cap)
    if entityVariant == nil then
        entityVariant = -1
    end
    if entitySubType == nil then
        entitySubType = -1
    end
    if cap == nil then
        cap = nil
    end
    local entities = ____exports.getEntities(nil, entityType, entityVariant, entitySubType)
    return ____exports.removeEntities(nil, entities, cap)
end
--- Helper function to reroll an enemy. Use this instead of the vanilla "Game.RerollEnemy" function
-- if you want the rerolled enemy to be returned.
-- 
-- @param entity The entity to reroll.
-- @returns If the game failed to reroll the enemy, returns undefined. Otherwise, returns the
-- rerolled entity.
function ____exports.rerollEnemy(self, entity)
    local oldEntities = ____exports.getEntities(nil)
    local wasRerolled = game:RerollEnemy(entity)
    if not wasRerolled then
        return nil
    end
    local newEntities = ____exports.getEntities(nil)
    local filteredNewEntities = ____exports.getFilteredNewEntities(nil, oldEntities, newEntities)
    if #filteredNewEntities == 0 then
        error("Failed to find the new entity generated by the \"Game.RerollEnemy\" method.")
    end
    return filteredNewEntities[1]
end
function ____exports.setEntityRandomColor(self, entity)
    local rng = newRNG(nil, entity.InitSeed)
    local r = getRandom(nil, rng)
    local g = getRandom(nil, rng)
    local b = getRandom(nil, rng)
    local color = Color(r, g, b)
    entity:SetColor(
        color,
        100000,
        100000,
        false,
        false
    )
end
--- Helper function to spawn an entity. Use this instead of the `Isaac.Spawn` method if you do not
-- need to specify the velocity or spawner.
-- 
-- Also see the `spawnWithSeed` helper function.
function ____exports.spawn(self, entityType, variant, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    if seedOrRNG == nil then
        return Isaac.Spawn(
            entityType,
            variant,
            subType,
            position,
            velocity,
            spawner
        )
    end
    local seed = isRNG(nil, seedOrRNG) and seedOrRNG:Next() or seedOrRNG
    return game:Spawn(
        entityType,
        variant,
        position,
        velocity,
        spawner,
        subType,
        seed
    )
end
--- Helper function to spawn an entity. Use this instead of the `Game.Spawn` method if you do not
-- need to specify the velocity or spawner.
function ____exports.spawnWithSeed(self, entityType, variant, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawn(
        nil,
        entityType,
        variant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.sets.storyBossesSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
____exports.STORY_BOSSES_SET = __TS__New(Set, {
    EntityType.MOM,
    EntityType.MOMS_HEART,
    EntityType.SATAN,
    EntityType.ISAAC,
    EntityType.THE_LAMB,
    EntityType.MEGA_SATAN,
    EntityType.MEGA_SATAN_2,
    EntityType.ULTRA_GREED,
    EntityType.HUSH,
    EntityType.DELIRIUM,
    EntityType.MOTHER,
    EntityType.DOGMA,
    EntityType.BEAST
})
return ____exports
 end,
["lua_modules.isaacscript-common.functions.pickupVariants"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
--- For `PickupVariant.HEART` (10)
function ____exports.isHeart(self, pickup)
    return pickup.Variant == PickupVariant.HEART
end
--- For `PickupVariant.COIN` (20)
function ____exports.isCoin(self, pickup)
    return pickup.Variant == PickupVariant.COIN
end
--- For `PickupVariant.KEY` (30)
function ____exports.isKey(self, pickup)
    return pickup.Variant == PickupVariant.KEY
end
--- For `PickupVariant.BOMB` (40)
function ____exports.isBomb(self, pickup)
    return pickup.Variant == PickupVariant.BOMB
end
--- For `PickupVariant.POOP` (42)
function ____exports.isPoop(self, pickup)
    return pickup.Variant == PickupVariant.POOP
end
--- For `PickupVariant.SACK` (69)
function ____exports.isSack(self, pickup)
    return pickup.Variant == PickupVariant.SACK
end
--- For `PickupVariant.PILL` (70)
function ____exports.isPill(self, pickup)
    return pickup.Variant == PickupVariant.PILL
end
--- For `PickupVariant.LIL_BATTERY` (90)
function ____exports.isBattery(self, pickup)
    return pickup.Variant == PickupVariant.LIL_BATTERY
end
--- For `PickupVariant.COLLECTIBLE` (100)
function ____exports.isCollectible(self, pickup)
    return pickup.Variant == PickupVariant.COLLECTIBLE
end
--- For `PickupVariant.TAROT_CARD` (300)
function ____exports.isCardPickup(self, pickup)
    return pickup.Variant == PickupVariant.TAROT_CARD
end
--- For `PickupVariant.TRINKET` (350)
function ____exports.isTrinket(self, pickup)
    return pickup.Variant == PickupVariant.TRINKET
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.roomData"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local DoorSlotFlag = ____isaac_2Dtypescript_2Ddefinitions.DoorSlotFlag
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____doors = require("lua_modules.isaacscript-common.functions.doors")
local doorSlotFlagToDoorSlot = ____doors.doorSlotFlagToDoorSlot
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local hasFlag = ____flag.hasFlag
--- Helper function to get the room data for the provided room.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
function ____exports.getRoomData(self, roomGridIndex)
    local roomDescriptor = ____exports.getRoomDescriptor(nil, roomGridIndex)
    return roomDescriptor.Data
end
--- Helper function to get the descriptor for a room.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
function ____exports.getRoomDescriptor(self, roomGridIndex)
    local level = game:GetLevel()
    if roomGridIndex == nil then
        roomGridIndex = ____exports.getRoomGridIndex(nil)
    end
    return level:GetRoomByIdx(roomGridIndex)
end
--- Alias for the `Level.GetCurrentRoomDesc` method. Use this to make it more clear what type of
-- `RoomDescriptor` object that you are retrieving.
function ____exports.getRoomDescriptorReadOnly(self)
    local level = game:GetLevel()
    return level:GetCurrentRoomDesc()
end
--- Helper function to get the grid index of the current room.
-- 
-- - If the current room is inside of the grid, this function will return the `SafeGridIndex` from
--   the room descriptor. (The safe grid index is defined as the top-left 1x1 section that the room
--   overlaps with, or the top-right 1x1 section of a `RoomType.SHAPE_LTL` room.)
-- - If the current room is outside of the grid, it will return the index from the
--   `Level.GetCurrentRoomIndex` method (since `SafeGridIndex` is bugged for these cases).
-- 
-- Use this function instead of the `Level.GetCurrentRoomIndex` method directly because the latter
-- will return the specific 1x1 quadrant that the player entered the room at. For most situations,
-- using the safe grid index is more reliable than this.
-- 
-- Data structures that store data per room should use the room's `ListIndex` instead of
-- `SafeGridIndex`, since the former is unique across different dimensions.
function ____exports.getRoomGridIndex(self)
    local level = game:GetLevel()
    local currentRoomIndex = level:GetCurrentRoomIndex()
    if currentRoomIndex < 0 then
        return currentRoomIndex
    end
    local roomDescriptor = ____exports.getRoomDescriptorReadOnly(nil)
    return roomDescriptor.SafeGridIndex
end
--- Helper function to get the set of allowed door slots for the room at the supplied grid index.
-- This corresponds to the doors that are enabled in the STB/XML file for the room.
function ____exports.getRoomAllowedDoors(self, roomGridIndex)
    local allowedDoors = __TS__New(Set)
    local roomData = ____exports.getRoomData(nil, roomGridIndex)
    if roomData == nil then
        return allowedDoors
    end
    local doorSlotFlags = getEnumValues(nil, DoorSlotFlag)
    for ____, doorSlotFlag in ipairs(doorSlotFlags) do
        if hasFlag(nil, roomData.Doors, doorSlotFlag) then
            local doorSlot = doorSlotFlagToDoorSlot(nil, doorSlotFlag)
            allowedDoors:add(doorSlot)
        end
    end
    return allowedDoors
end
--- Helper function to get the list grid index of the provided room, which is equal to the index in
-- the `RoomList.Get` method. In other words, this is equal to the order that the room was created
-- by the floor generation algorithm.
-- 
-- Use this as an index for data structures that store data per room, since it is unique across
-- different dimensions.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
function ____exports.getRoomListIndex(self, roomGridIndex)
    local roomDescriptor = ____exports.getRoomDescriptor(nil, roomGridIndex)
    return roomDescriptor.ListIndex
end
--- Helper function to get the name of the room as it appears in the STB/XML data.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
-- @returns The room name. Returns "Unknown" if the type was not found.
function ____exports.getRoomName(self, roomGridIndex)
    local roomData = ____exports.getRoomData(nil, roomGridIndex)
    return roomData == nil and "Unknown" or roomData.Name
end
--- Helper function to get the name of the room as it appears in the STB/XML data.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
-- @returns The room name. Returns "Unknown" if the type was not found.
function ____exports.getRoomShape(self, roomGridIndex)
    local roomData = ____exports.getRoomData(nil, roomGridIndex)
    local ____temp_0
    if roomData == nil then
        ____temp_0 = nil
    else
        ____temp_0 = roomData.Shape
    end
    return ____temp_0
end
--- Helper function to get the stage ID for a room from the XML/STB data. The room stage ID will
-- correspond to the first number in the filename of the XML/STB file. For example, a Depths room
-- would have a stage ID of 7.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
-- @returns The room stage ID. Returns -1 if the stage ID was not found.
function ____exports.getRoomStageID(self, roomGridIndex)
    local roomData = ____exports.getRoomData(nil, roomGridIndex)
    return roomData == nil and -1 or roomData.StageID
end
--- Helper function to get the sub-type for a room from the XML/STB data. The room sub-type will
-- correspond to different things depending on what XML/STB file it draws from. For example, in the
-- "00.special rooms.stb" file, an Angel Room with a sub-type of 0 will correspond to a normal Angel
-- Room and a sub-type of 1 will correspond to an Angel Room shop for The Stairway.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
-- @returns The room sub-type. Returns -1 if the sub-type was not found.
function ____exports.getRoomSubType(self, roomGridIndex)
    local roomData = ____exports.getRoomData(nil, roomGridIndex)
    return roomData == nil and -1 or roomData.Subtype
end
--- Helper function for getting the type of the room with the given grid index.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
-- @returns The room data type. Returns -1 if the type was not found.
function ____exports.getRoomType(self, roomGridIndex)
    local roomData = ____exports.getRoomData(nil, roomGridIndex)
    return roomData == nil and -1 or roomData.Type
end
--- Helper function to get the variant for a room from the XML/STB data. You can think of a room
-- variant as its identifier. For example, to go to Basement room #123, you would use a console
-- command of `goto d.123` while on the Basement.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
-- @returns The room variant. Returns -1 if the variant was not found.
function ____exports.getRoomVariant(self, roomGridIndex)
    local roomData = ____exports.getRoomData(nil, roomGridIndex)
    return roomData == nil and -1 or roomData.Variant
end
--- Note that the room visited count will be inaccurate during the period before the PostNewRoom
-- callback has fired (i.e. when entities are initializing and performing their first update). This
-- is because the variable is only incremented immediately before the PostNewRoom callback fires.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
function ____exports.getRoomVisitedCount(self, roomGridIndex)
    local roomDescriptor = ____exports.getRoomDescriptor(nil, roomGridIndex)
    return roomDescriptor.VisitedCount
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.doors"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__Spread = ____lualib.__TS__Spread
local __TS__ArrayMap = ____lualib.__TS__ArrayMap
local __TS__New = ____lualib.__TS__New
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local __TS__ArrayFind = ____lualib.__TS__ArrayFind
local ____exports = {}
local ROOM_ENTRY_OFFSET_FROM_DOOR
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local DoorSlot = ____isaac_2Dtypescript_2Ddefinitions.DoorSlot
local DoorState = ____isaac_2Dtypescript_2Ddefinitions.DoorState
local DoorVariant = ____isaac_2Dtypescript_2Ddefinitions.DoorVariant
local GridRoom = ____isaac_2Dtypescript_2Ddefinitions.GridRoom
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____doorSlotFlagToDoorSlot = require("lua_modules.isaacscript-common.objects.doorSlotFlagToDoorSlot")
local DEFAULT_DOOR_SLOT = ____doorSlotFlagToDoorSlot.DEFAULT_DOOR_SLOT
local DOOR_SLOT_FLAG_TO_DOOR_SLOT = ____doorSlotFlagToDoorSlot.DOOR_SLOT_FLAG_TO_DOOR_SLOT
local ____doorSlotToDirection = require("lua_modules.isaacscript-common.objects.doorSlotToDirection")
local DOOR_SLOT_TO_DIRECTION = ____doorSlotToDirection.DOOR_SLOT_TO_DIRECTION
local ____doorSlotToDoorSlotFlag = require("lua_modules.isaacscript-common.objects.doorSlotToDoorSlotFlag")
local DOOR_SLOT_TO_DOOR_SLOT_FLAG = ____doorSlotToDoorSlotFlag.DOOR_SLOT_TO_DOOR_SLOT_FLAG
local ____oppositeDoorSlots = require("lua_modules.isaacscript-common.objects.oppositeDoorSlots")
local OPPOSITE_DOOR_SLOTS = ____oppositeDoorSlots.OPPOSITE_DOOR_SLOTS
local ____roomShapeToDoorSlots = require("lua_modules.isaacscript-common.objects.roomShapeToDoorSlots")
local ROOM_SHAPE_TO_DOOR_SLOTS = ____roomShapeToDoorSlots.ROOM_SHAPE_TO_DOOR_SLOTS
local ____bitwise = require("lua_modules.isaacscript-common.functions.bitwise")
local arrayToBitFlags = ____bitwise.arrayToBitFlags
local ____direction = require("lua_modules.isaacscript-common.functions.direction")
local directionToVector = ____direction.directionToVector
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____tstlClass = require("lua_modules.isaacscript-common.functions.tstlClass")
local isTSTLSet = ____tstlClass.isTSTLSet
function ____exports.doorSlotToDirection(self, doorSlot)
    return DOOR_SLOT_TO_DIRECTION[doorSlot]
end
--- Helper function to help calculate the position that a player will enter a room at.
-- 
-- When players enter a room, they do not appear exactly on the location of the door, because then
-- they would immediately collide with the loading zone. Instead, they are offset by a certain
-- amount of units.
function ____exports.getDoorEnterPositionOffset(self, doorSlot)
    local direction = ____exports.doorSlotToDirection(nil, doorSlot)
    local vector = directionToVector(nil, direction)
    return vector * ROOM_ENTRY_OFFSET_FROM_DOOR
end
--- Helper function to get all of the doors in the room. By default, it will return every door. You
-- can optionally specify one or more room types to return only the doors that match the specified
-- room types.
function ____exports.getDoors(self, ...)
    local roomTypes = {...}
    local room = game:GetRoom()
    local roomTypesSet = __TS__New(Set, roomTypes)
    local doorSlots = getEnumValues(nil, DoorSlot)
    local doors = {}
    for ____, doorSlot in ipairs(doorSlots) do
        do
            local door = room:GetDoor(doorSlot)
            if door == nil then
                goto __continue18
            end
            if roomTypesSet.size == 0 or roomTypesSet:has(door.TargetRoomType) then
                doors[#doors + 1] = door
            end
        end
        ::__continue18::
    end
    return doors
end
function ____exports.isRepentanceDoor(self, door)
    return door.TargetRoomIndex == GridRoom.SECRET_EXIT
end
function ____exports.isSecretRoomDoor(self, door)
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_08_HoleInWall.anm2"
end
--- Helper function to remove a single door.
function ____exports.removeDoor(self, door)
    local room = game:GetRoom()
    room:RemoveDoor(door.Slot)
end
--- Helper function to remove the doors provided.
-- 
-- This function is variadic, meaning that you can specify as many doors as you want to remove.
function ____exports.removeDoors(self, ...)
    local doors = {...}
    for ____, door in ipairs(doors) do
        ____exports.removeDoor(nil, door)
    end
end
ROOM_ENTRY_OFFSET_FROM_DOOR = 40
function ____exports.closeAllDoors(self)
    for ____, door in ipairs(____exports.getDoors(nil)) do
        door:Close(true)
    end
end
--- Use this instead of the `GridEntityDoor.Close` method if you want the door to immediately close
-- without an animation.
function ____exports.closeDoorFast(self, door)
    door.State = DoorState.CLOSED
    local sprite = door:GetSprite()
    sprite:Play("Closed", true)
end
function ____exports.doorSlotFlagToDoorSlot(self, doorSlotFlag)
    local doorSlot = DOOR_SLOT_FLAG_TO_DOOR_SLOT[doorSlotFlag]
    return doorSlot == nil and DEFAULT_DOOR_SLOT or doorSlot
end
function ____exports.doorSlotToDoorSlotFlag(self, doorSlot)
    return DOOR_SLOT_TO_DOOR_SLOT_FLAG[doorSlot]
end
function ____exports.getAngelRoomDoor(self)
    local angelRoomDoors = ____exports.getDoors(nil, RoomType.ANGEL)
    local ____temp_0
    if #angelRoomDoors == 0 then
        ____temp_0 = nil
    else
        ____temp_0 = angelRoomDoors[1]
    end
    return ____temp_0
end
function ____exports.getDevilRoomDoor(self)
    local devilRoomDoors = ____exports.getDoors(nil, RoomType.DEVIL)
    local ____temp_1
    if #devilRoomDoors == 0 then
        ____temp_1 = nil
    else
        ____temp_1 = devilRoomDoors[1]
    end
    return ____temp_1
end
--- If there is both a Devil Room and an Angel Room door, this function will return door with the
-- lowest slot number.
function ____exports.getDevilRoomOrAngelRoomDoor(self)
    local devilRoomOrAngelRoomDoors = ____exports.getDoors(nil, RoomType.DEVIL, RoomType.ANGEL)
    local ____temp_2
    if #devilRoomOrAngelRoomDoors == 0 then
        ____temp_2 = nil
    else
        ____temp_2 = devilRoomOrAngelRoomDoors[1]
    end
    return ____temp_2
end
--- Helper function to get the position that a player will enter a room at.
-- 
-- When players enter a room, they do not appear exactly on the location of the door, because then
-- they would immediately collide with the loading zone. Instead, they are offset by a certain
-- amount of units.
function ____exports.getDoorEnterPosition(self, door)
    local offset = ____exports.getDoorEnterPositionOffset(nil, door.Slot)
    return door.Position + offset
end
--- Helper function to convert an array of door slots or a set of door slots to the resulting bit
-- flag number.
function ____exports.getDoorSlotFlags(self, doorSlots)
    local doorSlotArray = isTSTLSet(nil, doorSlots) and ({__TS__Spread(doorSlots:values())}) or doorSlots
    local doorSlotFlagArray = __TS__ArrayMap(
        doorSlotArray,
        function(____, doorSlot) return ____exports.doorSlotToDoorSlotFlag(nil, doorSlot) end
    )
    return arrayToBitFlags(nil, doorSlotFlagArray)
end
--- Helper function to get the possible door slots that can exist for a given room shape.
function ____exports.getDoorSlotsForRoomShape(self, roomShape)
    return ROOM_SHAPE_TO_DOOR_SLOTS[roomShape]
end
--- Helper function to get all of the doors in the room that lead to the provided room index.
-- 
-- This function is variadic, meaning that you can specify N arguments to return all of the doors
-- that match any of the N room grid indexes.
function ____exports.getDoorsToRoomIndex(self, ...)
    local roomGridIndex = {...}
    local roomGridIndexesSet = __TS__New(Set, roomGridIndex)
    local doors = ____exports.getDoors(nil)
    return __TS__ArrayFilter(
        doors,
        function(____, door) return roomGridIndexesSet:has(door.TargetRoomIndex) end
    )
end
function ____exports.getOppositeDoorSlot(self, doorSlot)
    return OPPOSITE_DOOR_SLOTS[doorSlot]
end
function ____exports.getRepentanceDoor(self)
    local doors = ____exports.getDoors(nil)
    return __TS__ArrayFind(
        doors,
        function(____, door) return ____exports.isRepentanceDoor(nil, door) end
    )
end
--- Helper function to find unused door slots in the room that can be used to make custom doors.
function ____exports.getUnusedDoorSlots(self)
    local room = game:GetRoom()
    local doorSlots = getEnumValues(nil, DoorSlot)
    return __TS__ArrayFilter(
        doorSlots,
        function(____, doorSlot) return room:IsDoorSlotAllowed(doorSlot) and room:GetDoor(doorSlot) == nil end
    )
end
function ____exports.isAngelRoomDoor(self, door)
    return door.TargetRoomType == RoomType.ANGEL
end
function ____exports.isDevilRoomDoor(self, door)
    return door.TargetRoomType == RoomType.DEVIL
end
--- Helper function to see if a door slot could exist for a given room shape.
function ____exports.isDoorSlotInRoomShape(self, doorSlot, roomShape)
    local doorSlots = ____exports.getDoorSlotsForRoomShape(nil, roomShape)
    return doorSlots:has(doorSlot)
end
--- This refers to the Repentance door that spawns in a boss room after defeating the boss. You have
-- to spend one key to open it. It has a sprite filename of "gfx/grid/Door_Downpour.anm2".
function ____exports.isDoorToDownpour(self, door)
    if not ____exports.isRepentanceDoor(nil, door) then
        return false
    end
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_Downpour.anm2"
end
--- This refers to the Repentance door that spawns in a boss room after defeating the boss. You have
-- to spend two hearts to open it. It has a sprite filename of "gfx/grid/Door_Mausoleum.anm2".
function ____exports.isDoorToMausoleum(self, door)
    if not ____exports.isRepentanceDoor(nil, door) then
        return false
    end
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_Mausoleum.anm2"
end
--- This refers to the "strange door" located on the first room of Depths 2. You open it with either
-- a Polaroid or a Negative. It has a sprite filename of "gfx/grid/Door_Mausoleum_Alt.anm2".
function ____exports.isDoorToMausoleumAscent(self, door)
    if not ____exports.isRepentanceDoor(nil, door) then
        return false
    end
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_Mausoleum_Alt.anm2"
end
--- This refers to the Repentance door that spawns in a boss room after defeating the boss. You have
-- to spend two bombs to open it. It has a sprite filename of "gfx/grid/Door_Mines.anm2".
function ____exports.isDoorToMines(self, door)
    if not ____exports.isRepentanceDoor(nil, door) then
        return false
    end
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_Mines.anm2"
end
--- This refers to the Repentance door that spawns after defeating Mom. You open it with the
-- completed knife. It has a sprite filename of "gfx/grid/Door_MomsHeart.anm2".
function ____exports.isDoorToMomsHeart(self, door)
    if not ____exports.isRepentanceDoor(nil, door) then
        return false
    end
    local sprite = door:GetSprite()
    local filename = sprite:GetFilename()
    return filename == "gfx/grid/Door_MomsHeart.anm2"
end
function ____exports.isHiddenSecretRoomDoor(self, door)
    local sprite = door:GetSprite()
    local animation = sprite:GetAnimation()
    return ____exports.isSecretRoomDoor(nil, door) and animation == "Hidden"
end
--- Helper function to reset an unlocked door back to a locked state. Doing this is non-trivial
-- because in addition to calling the `GridEntityDoor.SetLocked` method, you must also:
-- 
-- - Set the `VisitedCount` of the room's `RoomDescription` to 0.
-- - Set the variant to `DoorVariant.DOOR_LOCKED`.
-- - Close the door.
function ____exports.lockDoor(self, door)
    local level = game:GetLevel()
    local roomDescriptor = level:GetRoomByIdx(door.TargetRoomIndex)
    roomDescriptor.VisitedCount = 0
    door:SetVariant(DoorVariant.LOCKED)
    door:SetLocked(true)
    door:Close(true)
end
--- For the purposes of this function, doors to Secret Rooms or Super Secret Rooms that have not been
-- discovered yet will not be opened.
function ____exports.openAllDoors(self)
    for ____, door in ipairs(____exports.getDoors(nil)) do
        door:Open()
    end
end
--- Use this instead of the `GridEntityDoor.Open` method if you want the door to immediately open
-- without an animation.
function ____exports.openDoorFast(self, door)
    door.State = DoorState.OPEN
    local sprite = door:GetSprite()
    sprite:Play("Opened", true)
end
--- Helper function to remove all of the doors in the room. By default, it will remove every door.
-- You can optionally specify one or more room types to remove only the doors that match the
-- specified room types.
-- 
-- @returns The number of doors removed.
function ____exports.removeAllDoors(self, ...)
    local doors = ____exports.getDoors(nil, ...)
    ____exports.removeDoors(
        nil,
        table.unpack(doors)
    )
    return #doors
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.doorSlotFlagToDoorSlot"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local DoorSlot = ____isaac_2Dtypescript_2Ddefinitions.DoorSlot
local DoorSlotFlag = ____isaac_2Dtypescript_2Ddefinitions.DoorSlotFlag
____exports.DEFAULT_DOOR_SLOT = DoorSlot.NO_DOOR_SLOT
____exports.DOOR_SLOT_FLAG_TO_DOOR_SLOT = {
    [DoorSlotFlag.LEFT_0] = DoorSlot.LEFT_0,
    [DoorSlotFlag.UP_0] = DoorSlot.UP_0,
    [DoorSlotFlag.RIGHT_0] = DoorSlot.RIGHT_0,
    [DoorSlotFlag.DOWN_0] = DoorSlot.DOWN_0,
    [DoorSlotFlag.LEFT_1] = DoorSlot.LEFT_1,
    [DoorSlotFlag.UP_1] = DoorSlot.UP_1,
    [DoorSlotFlag.RIGHT_1] = DoorSlot.RIGHT_1,
    [DoorSlotFlag.DOWN_1] = DoorSlot.DOWN_1
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.doorSlotToDirection"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
local DoorSlot = ____isaac_2Dtypescript_2Ddefinitions.DoorSlot
____exports.DOOR_SLOT_TO_DIRECTION = {
    [DoorSlot.NO_DOOR_SLOT] = Direction.NO_DIRECTION,
    [DoorSlot.LEFT_0] = Direction.LEFT,
    [DoorSlot.UP_0] = Direction.UP,
    [DoorSlot.RIGHT_0] = Direction.RIGHT,
    [DoorSlot.DOWN_0] = Direction.DOWN,
    [DoorSlot.LEFT_1] = Direction.LEFT,
    [DoorSlot.UP_1] = Direction.UP,
    [DoorSlot.RIGHT_1] = Direction.RIGHT,
    [DoorSlot.DOWN_1] = Direction.DOWN
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.doorSlotToDoorSlotFlag"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local DoorSlot = ____isaac_2Dtypescript_2Ddefinitions.DoorSlot
local DoorSlotFlag = ____isaac_2Dtypescript_2Ddefinitions.DoorSlotFlag
local DoorSlotFlagZero = ____isaac_2Dtypescript_2Ddefinitions.DoorSlotFlagZero
____exports.DOOR_SLOT_TO_DOOR_SLOT_FLAG = {
    [DoorSlot.NO_DOOR_SLOT] = DoorSlotFlagZero,
    [DoorSlot.LEFT_0] = DoorSlotFlag.LEFT_0,
    [DoorSlot.UP_0] = DoorSlotFlag.UP_0,
    [DoorSlot.RIGHT_0] = DoorSlotFlag.RIGHT_0,
    [DoorSlot.DOWN_0] = DoorSlotFlag.DOWN_0,
    [DoorSlot.LEFT_1] = DoorSlotFlag.LEFT_1,
    [DoorSlot.UP_1] = DoorSlotFlag.UP_1,
    [DoorSlot.RIGHT_1] = DoorSlotFlag.RIGHT_1,
    [DoorSlot.DOWN_1] = DoorSlotFlag.DOWN_1
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.oppositeDoorSlots"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local DoorSlot = ____isaac_2Dtypescript_2Ddefinitions.DoorSlot
____exports.OPPOSITE_DOOR_SLOTS = {
    [DoorSlot.NO_DOOR_SLOT] = nil,
    [DoorSlot.LEFT_0] = DoorSlot.RIGHT_0,
    [DoorSlot.UP_0] = DoorSlot.DOWN_0,
    [DoorSlot.RIGHT_0] = DoorSlot.LEFT_0,
    [DoorSlot.LEFT_1] = DoorSlot.RIGHT_1,
    [DoorSlot.DOWN_0] = DoorSlot.UP_0,
    [DoorSlot.UP_1] = DoorSlot.DOWN_1,
    [DoorSlot.RIGHT_1] = DoorSlot.LEFT_1,
    [DoorSlot.DOWN_1] = DoorSlot.UP_1
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.roomShapeToDoorSlots"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local DoorSlot = ____isaac_2Dtypescript_2Ddefinitions.DoorSlot
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
local ALL_DOOR_SLOTS_SET = __TS__New(Set, {
    DoorSlot.LEFT_0,
    DoorSlot.UP_0,
    DoorSlot.RIGHT_0,
    DoorSlot.DOWN_0,
    DoorSlot.LEFT_1,
    DoorSlot.UP_1,
    DoorSlot.RIGHT_1,
    DoorSlot.DOWN_1
})
____exports.ROOM_SHAPE_TO_DOOR_SLOTS = {
    [RoomShape.SHAPE_1x1] = __TS__New(Set, {DoorSlot.LEFT_0, DoorSlot.UP_0, DoorSlot.RIGHT_0, DoorSlot.DOWN_0}),
    [RoomShape.IH] = __TS__New(Set, {DoorSlot.LEFT_0, DoorSlot.RIGHT_0}),
    [RoomShape.IV] = __TS__New(Set, {DoorSlot.UP_0, DoorSlot.DOWN_0}),
    [RoomShape.SHAPE_1x2] = __TS__New(Set, {
        DoorSlot.LEFT_0,
        DoorSlot.UP_0,
        DoorSlot.RIGHT_0,
        DoorSlot.DOWN_0,
        DoorSlot.LEFT_1,
        DoorSlot.RIGHT_1
    }),
    [RoomShape.IIV] = __TS__New(Set, {DoorSlot.UP_0, DoorSlot.DOWN_0}),
    [RoomShape.SHAPE_2x1] = __TS__New(Set, {
        DoorSlot.LEFT_0,
        DoorSlot.UP_0,
        DoorSlot.RIGHT_0,
        DoorSlot.DOWN_0,
        DoorSlot.UP_1,
        DoorSlot.DOWN_1
    }),
    [RoomShape.IIH] = __TS__New(Set, {DoorSlot.LEFT_0, DoorSlot.RIGHT_0}),
    [RoomShape.SHAPE_2x2] = ALL_DOOR_SLOTS_SET,
    [RoomShape.LTL] = ALL_DOOR_SLOTS_SET,
    [RoomShape.LTR] = ALL_DOOR_SLOTS_SET,
    [RoomShape.LBL] = ALL_DOOR_SLOTS_SET,
    [RoomShape.LBR] = ALL_DOOR_SLOTS_SET
}
return ____exports
 end,
["lua_modules.isaacscript-common.functions.bitwise"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ParseInt = ____lualib.__TS__ParseInt
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local addFlag = ____flag.addFlag
--- Helper function to convert a set of flags to a single `BitFlags` object.
function ____exports.arrayToBitFlags(self, array)
    local flags = 0
    for ____, flag in ipairs(array) do
        flags = addFlag(nil, flags, flag)
    end
    return flags
end
--- Helper function to convert an array of bits to the resulting decimal number.
function ____exports.convertBinaryToDecimal(self, bits)
    local bitsString = table.concat(bits, "")
    return __TS__ParseInt(bitsString, 2)
end
--- Helper function to convert a number to an array of bits.
function ____exports.convertDecimalToBinary(self, number)
    local bits = {}
    local i = 0
    while number > 0 do
        bits[i + 1] = number % 2
        number = math.floor(number / 2)
        i = i + 1
    end
    return bits
end
--- Helper function to count the number of bits that are set to 1 in a binary representation of a
-- number.
function ____exports.countSetBits(self, n)
    local count = 0
    while n > 0 do
        n = n & n - 1
        count = count + 1
    end
    return count
end
--- Helper function to get the value of a specific but in a binary representation of a number.
function ____exports.getKBitOfN(self, k, n)
    return n >> k & 1
end
--- Helper function to get the number of bits in a binary representation of a number.
function ____exports.getNumBitsOfN(self, n)
    local numBits = 0
    while n > 0 do
        numBits = numBits + 1
        n = n >> 1
    end
    return numBits
end
--- Helper function to convert a set of flags to a single `BitFlags` object.
function ____exports.setToBitFlags(self, set)
    local flags = 0
    for ____, flag in __TS__Iterator(set:values()) do
        flags = addFlag(nil, flags, flag)
    end
    return flags
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.flag"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local DamageFlag = ____isaac_2Dtypescript_2Ddefinitions.DamageFlag
--- Helper function to add a bit flag to an existing set of bit flags.
-- 
-- This is a variadic function, so pass as many flags as you want to add.
-- 
-- Example 1:
-- 
-- ```ts
-- // Give the player spectral tears
-- const player = Isaac.GetPlayer();
-- player.TearFlags = addFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL);
-- ```
-- 
-- Example 2:
-- 
-- ```ts
-- // Give the player spectral and homing tears
-- const player = Isaac.GetPlayer();
-- player.TearFlags = addFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL, TearFlags.TEAR_HOMING);
-- ```
-- 
-- @param flags The existing set of bit flags.
-- @param flagsToAdd One or more bit flags to add, each as a separate argument.
-- @returns The combined bit flags.
function ____exports.addFlag(self, flags, ...)
    local flagsToAdd = {...}
    local flagsAsInt = flags
    for ____, flagToAdd in ipairs(flagsToAdd) do
        flagsAsInt = flagsAsInt | flagToAdd
    end
    return flagsAsInt
end
--- Helper function for casting a flag enum value to a `BitFlags` object.
-- 
-- This is useful because the compiler will prevent you from assigning a specific flag to a
-- `BitFlags` property. (It does this to ensure type safety, since `BitFlags` can represent a zero
-- value or a composition of N flags.)
-- 
-- For example:
-- 
-- ```ts
-- player.TearFlags = bitFlags(TearFlag.SPECTRAL);
-- ```
function ____exports.bitFlags(self, flag)
    return flag
end
--- Helper function to get the key associated with a particular flag.
-- 
-- (Since bit flags are represented by custom objects instead of normal TypeScript enums, you cannot
-- use the reverse mapping to find the associated key of a given enum value. Use this helper
-- function instead of indexing the enum directly.)
function ____exports.getFlagName(self, flag, flagEnum)
    for key, value in pairs(flagEnum) do
        if value == flag then
            return key
        end
    end
    return nil
end
--- Helper function to determine if a particular bit flag is set to true.
-- 
-- This is a variadic function, so pass as many flags as you want to check for. If passed multiple
-- flags, it will only return true if all of the flags are set.
-- 
-- For example:
-- 
-- ```ts
-- const player = Isaac.GetPlayer();
-- if (hasFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL) {
--   // The player currently has spectral tears
-- }
-- ```
-- 
-- @param flags The existing set of bit flags.
-- @param flagsToCheck One or more bit flags to check for, each as a separate argument.
function ____exports.hasFlag(self, flags, ...)
    local flagsToCheck = {...}
    local flagsAsInt = flags
    for ____, flagToCheck in ipairs(flagsToCheck) do
        if not (flagsAsInt & flagToCheck == flagToCheck) then
            return false
        end
    end
    return true
end
--- Helper function to check if every bit in the flag is turned off.
-- 
-- (This is equivalent to checking if the flag is equal to 0, but this is not possible without
-- casting the flag to a number.)
function ____exports.isEmptyFlag(self, flag)
    return flag == 0
end
--- Helper function to determine whether damage to a player in the EntityTakeDmg callback was
-- self-inflicted. For example, damage from a Curse Room door, a Razor, or a Blood Donation Machine
-- would count as self-inflicted damage.
function ____exports.isSelfDamage(self, damageFlags)
    return ____exports.hasFlag(nil, damageFlags, DamageFlag.NO_PENALTIES) or ____exports.hasFlag(nil, damageFlags, DamageFlag.RED_HEARTS)
end
--- Helper function to remove a bit flag from an existing set of bit flags.
-- 
-- This is a variadic function, so pass as many flags as you want to remove.
-- 
-- For example:
-- 
-- ```ts
-- // Remove spectral tears from the player, if present
-- const player = Isaac.GetPlayer();
-- player.TearFlags = removeFlag(player.TearFlags, TearFlags.TEAR_SPECTRAL);
-- ```
-- 
-- @param flags The existing set of bit flags.
-- @param flagsToRemove One or more bit flags to remove, each as a separate argument.
-- @returns The combined bit flags.
function ____exports.removeFlag(self, flags, ...)
    local flagsToRemove = {...}
    local flagsAsInt = flags
    for ____, flagToRemove in ipairs(flagsToRemove) do
        flagsAsInt = flagsAsInt & ~flagToRemove
    end
    return flagsAsInt
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.direction"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
local ____directionNames = require("lua_modules.isaacscript-common.objects.directionNames")
local DIRECTION_NAMES = ____directionNames.DIRECTION_NAMES
local ____directionToDegrees = require("lua_modules.isaacscript-common.objects.directionToDegrees")
local DIRECTION_TO_DEGREES = ____directionToDegrees.DIRECTION_TO_DEGREES
local ____directionToVector = require("lua_modules.isaacscript-common.objects.directionToVector")
local DIRECTION_TO_VECTOR = ____directionToVector.DIRECTION_TO_VECTOR
--- Helper function to convert the degrees of an angle to the `Direction` enum.
-- 
-- Note that this function considers 0 degrees to be pointing to the right, which is unusual because
-- 0 normally corresponds to up. (This corresponds to how the `Vector.GetAngleDegrees` method
-- works.)
function ____exports.angleToDirection(self, angleDegrees)
    local positiveDegrees = angleDegrees
    while positiveDegrees < 0 do
        positiveDegrees = positiveDegrees + 360
    end
    local normalizedDegrees = positiveDegrees % 360
    if normalizedDegrees < 45 then
        return Direction.RIGHT
    end
    if normalizedDegrees < 135 then
        return Direction.DOWN
    end
    if normalizedDegrees < 225 then
        return Direction.LEFT
    end
    if normalizedDegrees < 315 then
        return Direction.UP
    end
    return Direction.RIGHT
end
function ____exports.directionToDegrees(self, direction)
    return DIRECTION_TO_DEGREES[direction]
end
function ____exports.directionToVector(self, direction)
    return DIRECTION_TO_VECTOR[direction]
end
function ____exports.getDirectionName(self, direction)
    return DIRECTION_NAMES[direction]
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.directionNames"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
____exports.DIRECTION_NAMES = {
    [Direction.NO_DIRECTION] = nil,
    [Direction.LEFT] = "left",
    [Direction.UP] = "up",
    [Direction.RIGHT] = "right",
    [Direction.DOWN] = "down"
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.directionToDegrees"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
____exports.DIRECTION_TO_DEGREES = {
    [Direction.NO_DIRECTION] = 0,
    [Direction.LEFT] = 180,
    [Direction.UP] = 270,
    [Direction.RIGHT] = 0,
    [Direction.DOWN] = 90
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.directionToVector"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
local ____constants = require("lua_modules.isaacscript-common.constants")
local VectorZero = ____constants.VectorZero
____exports.DIRECTION_TO_VECTOR = {
    [Direction.NO_DIRECTION] = VectorZero,
    [Direction.LEFT] = Vector(-1, 0),
    [Direction.UP] = Vector(0, -1),
    [Direction.RIGHT] = Vector(1, 0),
    [Direction.DOWN] = Vector(0, 1)
}
return ____exports
 end,
["lua_modules.isaacscript-common.functions.tstlClass"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local newTSTLClassFromMetatable, VANILLA_TSTL_CLASSES
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isString = ____types.isString
local isTable = ____types.isTable
--- Helper function to get the name of a TypeScriptToLua class. TSTL classes are Lua tables created
-- with the `__TS__Class` Lua function from the TSTL lualib. Their name is contained within
-- "constructor.name" metatable key.
-- 
-- For example, a `Map` class is has a name of "Map".
-- 
-- Returns undefined if the object is not a table or if the aforementioned metatable key does not
-- exist.
function ____exports.getTSTLClassName(self, object)
    if not isTable(nil, object) then
        return nil
    end
    local metatable = getmetatable(object)
    if metatable == nil then
        return nil
    end
    local constructor = metatable.constructor
    if constructor == nil then
        return nil
    end
    return constructor.name
end
--- Returns whether or not this is a class that is provided as part of the TypeScriptToLua
-- transpiler, such as a `Map` or a `Set`.
function ____exports.isVanillaTSTLClass(self, object)
    local className = ____exports.getTSTLClassName(nil, object)
    if className == nil then
        return false
    end
    return VANILLA_TSTL_CLASSES:has(className)
end
function newTSTLClassFromMetatable(self, metatable)
    local newClass = {}
    local newClassMetatable = setmetatable(newClass, metatable.constructor.prototype)
    newClassMetatable:____constructor()
    return newClass
end
VANILLA_TSTL_CLASSES = __TS__New(Set, {"Map", "Set", "WeakMap", "WeakSet"})
local TSTL_CLASS_METATABLE_KEYS = __TS__New(Set, {"____constructor", "__index", "constructor"})
--- Helper function to determine if a given object is a TypeScriptToLua `Map`.
-- 
-- It is not reliable to use the `instanceof` operator to determine this because each Lua module has
-- their own copies of the entire lualib and thus their own instantiated version of a `Map`.
function ____exports.isDefaultMap(self, object)
    local className = ____exports.getTSTLClassName(nil, object)
    return className == "DefaultMap"
end
--- Returns whether or not this is a class that is provided by the `isaacscript-common` library, such
-- as a `DefaultMap`.
function ____exports.isIsaacScriptCommonClass(self, object)
    return ____exports.isDefaultMap(nil, object)
end
--- Helper function to determine if a given object is a TypeScriptToLua `Map`.
-- 
-- It is not reliable to use the `instanceof` operator to determine this because each Lua module has
-- their own copies of the entire lualib and thus their own instantiated version of a `Map`.
function ____exports.isTSTLMap(self, object)
    local className = ____exports.getTSTLClassName(nil, object)
    return className == "Map"
end
--- Helper function to determine if a given object is a TypeScriptToLua `Set`.
-- 
-- It is not reliable to use the `instanceof` operator to determine this because each Lua module has
-- their own copies of the entire lualib and thus their own instantiated version of a `Set`.
function ____exports.isTSTLSet(self, object)
    local className = ____exports.getTSTLClassName(nil, object)
    return className == "Set"
end
--- TypeScriptToLua classes are Lua tables that have a metatable with a certain amount of keys.
function ____exports.isUserDefinedTSTLClass(self, object)
    if ____exports.isVanillaTSTLClass(nil, object) or ____exports.isIsaacScriptCommonClass(nil, object) then
        return false
    end
    if not isTable(nil, object) then
        return false
    end
    local metatable = getmetatable(object)
    if metatable == nil then
        return false
    end
    local numKeys = 0
    for key in pairs(metatable) do
        numKeys = numKeys + 1
        if not isString(nil, key) then
            return false
        end
        if not TSTL_CLASS_METATABLE_KEYS:has(key) then
            return false
        end
    end
    return numKeys == TSTL_CLASS_METATABLE_KEYS.size
end
--- Initializes a new TypeScriptToLua class in the situation where you do not know what kind of class
-- it is. This function requires that you provide an instantiated class of the same type, as it will
-- use the class constructor that is present on the other object's metatable to initialize the new
-- class.
function ____exports.newTSTLClass(self, oldClass)
    local metatable = getmetatable(oldClass)
    if metatable == nil then
        error("Failed to instantiate a new TypeScriptToLua class since the provided old class does not have a metatable.")
    end
    return newTSTLClassFromMetatable(nil, metatable)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.sprite"] = function(...) 
local ____exports = {}
local ____constants = require("lua_modules.isaacscript-common.constants")
local EMPTY_PNG_PATH = ____constants.EMPTY_PNG_PATH
local VectorZero = ____constants.VectorZero
local ____kColor = require("lua_modules.isaacscript-common.functions.kColor")
local kColorEquals = ____kColor.kColorEquals
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local erange = ____utils.erange
--- Helper function to check if two texels on a sprite are equivalent to each other.
function ____exports.texelEquals(self, sprite1, sprite2, position, layerID)
    local kColor1 = sprite1:GetTexel(position, VectorZero, 1, layerID)
    local kColor2 = sprite2:GetTexel(position, VectorZero, 1, layerID)
    return kColorEquals(nil, kColor1, kColor2)
end
--- Helper function to clear a specific layer from a sprite.
-- 
-- This function is variadic, so pass as many layer IDs as you want to clear. If no specific layers
-- are passed, it will clear every layer.
-- 
-- Since there is no official API method to "clear" a sprite, we can work around it by setting the
-- spritesheet to a non-existent or completely transparent file. If the path to the spritesheet does
-- not exist, then this function might cause spurious errors to appear in the "log.txt file". To
-- silence these errors, create a transparent 1 pixel PNG file in your mod's resources folder at the
-- path corresponding to the "EMPTY_PNG_PATH" constant.
function ____exports.clearSprite(self, sprite, ...)
    local layerIDs = {...}
    if #layerIDs == 0 then
        local numLayers = sprite:GetLayerCount()
        layerIDs = erange(nil, numLayers)
    end
    for ____, layerID in ipairs(layerIDs) do
        sprite:ReplaceSpritesheet(layerID, EMPTY_PNG_PATH)
    end
    sprite:LoadGraphics()
end
--- Helper function that returns the number of the final frame in a particular animation for a
-- sprite. By default, it will use the currently playing animation, but you can also specify a
-- specific animation to check.
-- 
-- Note that this function is bugged with the Stop Watch or the Broken Watch, since using the
-- `Sprite.SetFrame` method will reset the internal accumulator used to slow down the playback speed
-- of the animation. (The `PlaybackSpeed` property of the sprite is not used.) Thus, it is only safe
-- to use this function on animations that are not slowed down by Stop Watch or Broken Watch, such
-- as player animations.
function ____exports.getLastFrameOfAnimation(self, sprite, animation)
    local currentAnimation = sprite:GetAnimation()
    local currentFrame = sprite:GetFrame()
    if animation ~= nil and animation ~= currentAnimation then
        sprite:SetAnimation(animation)
    end
    sprite:SetLastFrame()
    local finalFrame = sprite:GetFrame()
    if animation ~= nil and animation ~= currentAnimation then
        sprite:Play(currentAnimation, true)
    end
    sprite:SetFrame(currentFrame)
    return finalFrame
end
--- Helper function to check if two sprite layers have the same sprite sheet by using the
-- `Sprite.GetTexel` method.
-- 
-- Since checking every single texel in the entire sprite is very expensive, this function requires
-- that you provide a range of specific texels to check.
function ____exports.spriteEquals(self, sprite1, sprite2, layerID, xStart, xFinish, xIncrement, yStart, yFinish, yIncrement)
    do
        local x = xStart
        while x <= xFinish do
            do
                local y = yStart
                while y <= yFinish do
                    local position = Vector(x, y)
                    if not ____exports.texelEquals(
                        nil,
                        sprite1,
                        sprite2,
                        position,
                        layerID
                    ) then
                        return false
                    end
                    y = y + yIncrement
                end
            end
            x = x + xIncrement
        end
    end
    return true
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.kColor"] = function(...) 
local ____exports = {}
local OBJECT_NAME
local ____SerializationBrand = require("lua_modules.isaacscript-common.enums.private.SerializationBrand")
local SerializationBrand = ____SerializationBrand.SerializationBrand
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____isaacAPIClass = require("lua_modules.isaacscript-common.functions.isaacAPIClass")
local isaacAPIClassEquals = ____isaacAPIClass.isaacAPIClassEquals
local isIsaacAPIClassOfType = ____isaacAPIClass.isIsaacAPIClassOfType
local ____table = require("lua_modules.isaacscript-common.functions.table")
local copyValuesToTable = ____table.copyValuesToTable
local getNumbersFromTable = ____table.getNumbersFromTable
local tableHasKeys = ____table.tableHasKeys
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isTable = ____types.isTable
--- Helper function to check if something is an instantiated KColor object.
function ____exports.isKColor(self, object)
    return isIsaacAPIClassOfType(nil, object, OBJECT_NAME)
end
local KEYS = {"Red", "Green", "Blue", "Alpha"}
OBJECT_NAME = "KColor"
--- Helper function to copy a `KColor` object.
-- 
-- @param kColor The KColor object to copy. In the case of deserialization, this will actually be a
-- Lua table instead of an instantiated KColor class.
-- @param serializationType Default is `SerializationType.NONE`.
function ____exports.copyKColor(self, kColor, serializationType)
    if serializationType == nil then
        serializationType = SerializationType.NONE
    end
    repeat
        local ____switch3 = serializationType
        local ____cond3 = ____switch3 == SerializationType.NONE
        if ____cond3 then
            do
                if not ____exports.isKColor(nil, kColor) then
                    error(((("Failed to copy a " .. OBJECT_NAME) .. " object since the provided object was not a userdata ") .. OBJECT_NAME) .. " class.")
                end
                return KColor(kColor.Red, kColor.Green, kColor.Blue, kColor.Alpha)
            end
        end
        ____cond3 = ____cond3 or ____switch3 == SerializationType.SERIALIZE
        if ____cond3 then
            do
                if not ____exports.isKColor(nil, kColor) then
                    error(((("Failed to serialize a " .. OBJECT_NAME) .. " object since the provided object was not a userdata ") .. OBJECT_NAME) .. " class.")
                end
                local kColorTable = {}
                copyValuesToTable(nil, kColor, KEYS, kColorTable)
                kColorTable[SerializationBrand.K_COLOR] = ""
                return kColorTable
            end
        end
        ____cond3 = ____cond3 or ____switch3 == SerializationType.DESERIALIZE
        if ____cond3 then
            do
                if not isTable(nil, kColor) then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object was not a Lua table.")
                end
                local r, g, b, a = table.unpack(getNumbersFromTable(
                    nil,
                    kColor,
                    OBJECT_NAME,
                    table.unpack(KEYS)
                ))
                if r == nil then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object did not have a value for: r")
                end
                if g == nil then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object did not have a value for: g")
                end
                if b == nil then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object did not have a value for: b")
                end
                if a == nil then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object did not have a value for: a")
                end
                return KColor(r, g, b, a)
            end
        end
    until true
end
--- Returns `KColor(1, 1, 1, 1)`.
function ____exports.getDefaultKColor(self)
    return KColor(1, 1, 1, 1)
end
--- Used to determine is the given table is a serialized `KColor` object created by the save data
-- manager and/or the `deepCopy` function.
function ____exports.isSerializedKColor(self, object)
    if not isTable(nil, object) then
        return false
    end
    return tableHasKeys(
        nil,
        object,
        table.unpack(KEYS)
    ) and object[SerializationBrand.K_COLOR] ~= nil
end
function ____exports.kColorEquals(self, kColor1, kColor2)
    return isaacAPIClassEquals(nil, kColor1, kColor2, KEYS)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.gridEntity"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local Map = ____lualib.Map
local ____exports = {}
local getAllGridEntities
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local GridCollisionClass = ____isaac_2Dtypescript_2Ddefinitions.GridCollisionClass
local GridEntityType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityType
local PoopGridEntityVariant = ____isaac_2Dtypescript_2Ddefinitions.PoopGridEntityVariant
local StatueVariant = ____isaac_2Dtypescript_2Ddefinitions.StatueVariant
local TrapdoorVariant = ____isaac_2Dtypescript_2Ddefinitions.TrapdoorVariant
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____constants = require("lua_modules.isaacscript-common.constants")
local DISTANCE_OF_GRID_TILE = ____constants.DISTANCE_OF_GRID_TILE
local ____gridEntityTypeToBrokenStateMap = require("lua_modules.isaacscript-common.maps.gridEntityTypeToBrokenStateMap")
local GRID_ENTITY_TYPE_TO_BROKEN_STATE_MAP = ____gridEntityTypeToBrokenStateMap.GRID_ENTITY_TYPE_TO_BROKEN_STATE_MAP
local ____gridEntityXMLMap = require("lua_modules.isaacscript-common.maps.gridEntityXMLMap")
local GRID_ENTITY_XML_MAP = ____gridEntityXMLMap.GRID_ENTITY_XML_MAP
local ____roomShapeToTopLeftWallGridIndexMap = require("lua_modules.isaacscript-common.maps.roomShapeToTopLeftWallGridIndexMap")
local DEFAULT_TOP_LEFT_WALL_GRID_INDEX = ____roomShapeToTopLeftWallGridIndexMap.DEFAULT_TOP_LEFT_WALL_GRID_INDEX
local ROOM_SHAPE_TO_TOP_LEFT_WALL_GRID_INDEX_MAP = ____roomShapeToTopLeftWallGridIndexMap.ROOM_SHAPE_TO_TOP_LEFT_WALL_GRID_INDEX_MAP
local ____math = require("lua_modules.isaacscript-common.functions.math")
local isCircleIntersectingRectangle = ____math.isCircleIntersectingRectangle
local ____rooms = require("lua_modules.isaacscript-common.functions.rooms")
local roomUpdateSafe = ____rooms.roomUpdateSafe
local ____sprite = require("lua_modules.isaacscript-common.functions.sprite")
local clearSprite = ____sprite.clearSprite
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local erange = ____utils.erange
local ____vector = require("lua_modules.isaacscript-common.functions.vector")
local isVector = ____vector.isVector
--- Helper function to get every legal grid index for the current room.
-- 
-- Under the hood, this uses the `Room.GetGridSize` method.
function ____exports.getAllGridIndexes(self)
    local room = game:GetRoom()
    local gridSize = room:GetGridSize()
    return erange(nil, gridSize)
end
function getAllGridEntities(self)
    local room = game:GetRoom()
    local gridEntities = {}
    for ____, gridIndex in ipairs(____exports.getAllGridIndexes(nil)) do
        local gridEntity = room:GetGridEntity(gridIndex)
        if gridEntity ~= nil then
            gridEntities[#gridEntities + 1] = gridEntity
        end
    end
    return gridEntities
end
--- Helper function to get the grid index of the top left wall. (This will depend on what the current
-- room shape is.)
function ____exports.getTopLeftWallGridIndex(self)
    local room = game:GetRoom()
    local roomShape = room:GetRoomShape()
    local topLeftWallGridIndex = ROOM_SHAPE_TO_TOP_LEFT_WALL_GRID_INDEX_MAP:get(roomShape)
    return topLeftWallGridIndex == nil and DEFAULT_TOP_LEFT_WALL_GRID_INDEX or topLeftWallGridIndex
end
--- Helper function to remove a grid entity simply by providing the grid entity object.
-- 
-- @param gridEntity The grid entity to remove.
-- @param updateRoom Optional. Whether or not to update the room after the grid entity is removed.
-- Default is true. This is generally a good idea because if the room is not
-- updated, you will be unable to spawn another grid entity on the same tile until
-- a frame has passed. However, doing this is expensive, since it involves a call
-- to `Isaac.GetRoomEntities`, so set it to false if you need to invoke this
-- function multiple times.
function ____exports.removeGrid(self, gridEntity, updateRoom)
    if updateRoom == nil then
        updateRoom = true
    end
    local room = game:GetRoom()
    local gridIndex = gridEntity:GetGridIndex()
    room:RemoveGridEntity(gridIndex, 0, false)
    if updateRoom then
        roomUpdateSafe(nil)
    end
end
--- Helper function to spawn a grid entity with a specific variant.
-- 
-- Use this instead of the `Isaac.GridSpawn` method since it:
-- - handles giving pits collision
-- - removes existing grid entities on the same tile, if any
-- - allows you to specify the grid index or the position
function ____exports.spawnGridWithVariant(self, gridEntityType, variant, gridIndexOrPosition)
    local room = game:GetRoom()
    local ____isVector_result_0
    if isVector(nil, gridIndexOrPosition) then
        ____isVector_result_0 = room:GetGridEntityFromPos(gridIndexOrPosition)
    else
        ____isVector_result_0 = room:GetGridEntity(gridIndexOrPosition)
    end
    local existingGridEntity = ____isVector_result_0
    if existingGridEntity ~= nil then
        ____exports.removeGrid(nil, existingGridEntity)
    end
    local position = isVector(nil, gridIndexOrPosition) and gridIndexOrPosition or room:GetGridPosition(gridIndexOrPosition)
    local gridEntity = Isaac.GridSpawn(gridEntityType, variant, position)
    if gridEntity == nil then
        return gridEntity
    end
    if gridEntityType == GridEntityType.PIT then
        local pit = gridEntity:ToPit()
        if pit ~= nil then
            pit:UpdateCollision()
        end
    elseif gridEntityType == GridEntityType.WALL then
        gridEntity.CollisionClass = GridCollisionClass.WALL
    end
    return gridEntity
end
local BREAKABLE_GRID_ENTITY_TYPES_BY_EXPLOSIONS = __TS__New(Set, {
    GridEntityType.ROCK,
    GridEntityType.ROCK_TINTED,
    GridEntityType.ROCK_BOMB,
    GridEntityType.ROCK_ALT,
    GridEntityType.SPIDER_WEB,
    GridEntityType.TNT,
    GridEntityType.POOP,
    GridEntityType.ROCK_SUPER_SPECIAL,
    GridEntityType.ROCK_SPIKED,
    GridEntityType.ROCK_ALT_2,
    GridEntityType.ROCK_GOLD
})
local BREAKABLE_GRID_ENTITY_TYPES_VARIANTS_BY_EXPLOSIONS = __TS__New(
    Set,
    {(tostring(GridEntityType.STATUE) .. ".") .. tostring(StatueVariant.ANGEL)}
)
--- Helper function to convert the grid entity type found in a room XML file to the corresponding
-- grid entity type and variant normally used by the game. For example, a rock is represented as
-- 1000.0 in a room XML file, but `GridEntityType.ROCK` is equal to 2.
function ____exports.convertXMLGridEntityType(self, gridEntityXMLType, gridEntityXMLVariant)
    local gridEntityArray = GRID_ENTITY_XML_MAP:get(gridEntityXMLType)
    if gridEntityArray == nil then
        error("Failed to find an entry in the grid entity map for XML entity type: " .. tostring(gridEntityXMLType))
    end
    local gridEntityType = gridEntityArray[1]
    local gridEntityVariant = gridEntityArray[2]
    if gridEntityType == GridEntityType.SPIKES_ON_OFF or gridEntityType == GridEntityType.PRESSURE_PLATE or gridEntityType == GridEntityType.TELEPORTER then
        gridEntityVariant = gridEntityXMLVariant
    end
    return {gridEntityType, gridEntityVariant}
end
--- Gets the entities that have a hitbox that overlaps with any part of the square that the grid
-- entity is on.
-- 
-- Note that this function will not work properly in the PostNewRoom callback, since entities do not
-- have collision yet in that callback.
function ____exports.getCollidingEntitiesWithGridEntity(self, gridEntity)
    local gridEntityCollisionTopLeft = Vector(gridEntity.Position.X - DISTANCE_OF_GRID_TILE / 2, gridEntity.Position.Y - DISTANCE_OF_GRID_TILE / 2)
    local gridEntityCollisionBottomRight = Vector(gridEntity.Position.X + DISTANCE_OF_GRID_TILE / 2, gridEntity.Position.Y + DISTANCE_OF_GRID_TILE / 2)
    local closeEntities = Isaac.FindInRadius(gridEntity.Position, DISTANCE_OF_GRID_TILE * 2)
    return __TS__ArrayFilter(
        closeEntities,
        function(____, entity) return entity:CollidesWithGrid() and isCircleIntersectingRectangle(
            nil,
            entity.Position,
            entity.Size + 0.1,
            gridEntityCollisionTopLeft,
            gridEntityCollisionBottomRight
        ) end
    )
end
--- Helper function to get every grid entity in the current room.
-- 
-- Use this function with no arguments to get every grid entity, or specify a variadic amount of
-- arguments to match specific grid entity types.
-- 
-- For example:
-- 
-- ```ts
-- for (const gridEntity of getGridEntities()) {
--   print(gridEntity.GetType())
-- }
-- ```
-- 
-- For example:
-- 
-- ```ts
-- const rocks = getGridEntities(
--   GridEntityType.ROCK,
--   GridEntityType.BLOCK,
--   GridEntityType.ROCK_TINTED,
-- );
-- ```
function ____exports.getGridEntities(self, ...)
    local gridEntityTypes = {...}
    local gridEntities = getAllGridEntities(nil)
    if #gridEntityTypes == 0 then
        return gridEntities
    end
    local gridEntityTypesSet = __TS__New(Set, gridEntityTypes)
    return __TS__ArrayFilter(
        gridEntities,
        function(____, gridEntity)
            local gridEntityType = gridEntity:GetType()
            return gridEntityTypesSet:has(gridEntityType)
        end
    )
end
--- Helper function to get a map of every grid entity in the current room. The indexes of the map are
-- equal to the grid index. The values of the map are equal to the grid entities.
-- 
-- Use this function with no arguments to get every grid entity, or specify a variadic amount of
-- arguments to match specific grid entity types.
function ____exports.getGridEntitiesMap(self, ...)
    local gridEntities = ____exports.getGridEntities(nil, ...)
    local gridEntityMap = __TS__New(Map)
    for ____, gridEntity in ipairs(gridEntities) do
        local gridIndex = gridEntity:GetGridIndex()
        gridEntityMap:set(gridIndex, gridEntity)
    end
    return gridEntityMap
end
--- Helper function to return a string containing the grid entity's type and variant.
function ____exports.getGridEntityID(self, gridEntity)
    local gridEntityType = gridEntity:GetType()
    local gridEntityVariant = gridEntity:GetVariant()
    return (tostring(gridEntityType) .. ".") .. tostring(gridEntityVariant)
end
--- Helper function to get all of the grid entities in the room that specifically match the type and
-- variant provided.
function ____exports.getMatchingGridEntities(self, gridEntityType, variant)
    local gridEntities = ____exports.getGridEntities(nil, gridEntityType)
    return __TS__ArrayFilter(
        gridEntities,
        function(____, gridEntity) return gridEntity:GetVariant() == variant end
    )
end
function ____exports.getSurroundingGridEntities(self, gridEntity)
    local room = game:GetRoom()
    local gridWidth = room:GetGridWidth()
    local gridIndex = gridEntity:GetGridIndex()
    local surroundingGridIndexes = {
        gridIndex - 1,
        gridIndex + 1,
        gridIndex - gridWidth - 1,
        gridIndex - gridWidth,
        gridIndex - gridWidth + 1,
        gridIndex + gridWidth - 1,
        gridIndex + gridWidth,
        gridIndex + gridWidth + 1
    }
    local surroundingGridEntities = {}
    for ____, surroundingGridIndex in ipairs(surroundingGridIndexes) do
        local surroundingGridEntity = room:GetGridEntity(surroundingGridIndex)
        if surroundingGridEntity ~= nil then
            surroundingGridEntities[#surroundingGridEntities + 1] = surroundingGridEntity
        end
    end
    return surroundingGridEntities
end
function ____exports.getTopLeftWall(self)
    local room = game:GetRoom()
    local topLeftWallGridIndex = ____exports.getTopLeftWallGridIndex(nil)
    return room:GetGridEntity(topLeftWallGridIndex)
end
function ____exports.isGridEntityBreakableByExplosion(self, gridEntity)
    local gridEntityType = gridEntity:GetType()
    local gridEntityVariant = gridEntity:GetVariant()
    local gridEntityTypeVariant = (tostring(gridEntityType) .. ".") .. tostring(gridEntityVariant)
    return BREAKABLE_GRID_ENTITY_TYPES_BY_EXPLOSIONS:has(gridEntityType) or BREAKABLE_GRID_ENTITY_TYPES_VARIANTS_BY_EXPLOSIONS:has(gridEntityTypeVariant)
end
--- Helper function to see if the provided gridEntity is in its respective broken state. See the
-- `GRID_ENTITY_TYPE_TO_BROKEN_STATE_MAP` constant for more details.
-- 
-- Note that in the case of `GridEntityType.LOCK` (11), the state will turn to being broken before
-- the actual collision for the entity is removed.
function ____exports.isGridEntityBroken(self, gridEntity)
    local gridEntityType = gridEntity:GetType()
    local brokenState = GRID_ENTITY_TYPE_TO_BROKEN_STATE_MAP:get(gridEntityType)
    return gridEntity.State == brokenState
end
--- Helper function to detect whether a given Void Portal is one that randomly spawns after a boss is
-- defeated or is one that naturally spawns in the room after Hush. (This is determined by looking
-- at the VarData of the entity.)
function ____exports.isPostBossVoidPortal(self, gridEntity)
    local saveState = gridEntity:GetSaveState()
    return saveState.VarData == 1
end
--- Helper function to all grid entities in the room except for ones matching the grid entity types
-- provided.
-- 
-- Note that this function will automatically update the room. (This means that you can spawn new
-- grid entities on the same tile on the same frame, if needed.)
-- 
-- For example:
-- 
-- ```ts
-- removeAllGridEntitiesExceptFor(
--   GridEntityType.WALL,
--   GridEntityType.DOOR,
-- );
-- ```
-- 
-- @returns True if one or more grid entities were removed, false otherwise.
function ____exports.removeAllGridExcept(self, ...)
    local gridEntityTypes = {...}
    local gridEntityTypeExceptions = __TS__New(Set, gridEntityTypes)
    local gridEntities = ____exports.getGridEntities(nil)
    local removedGridEntities = {}
    for ____, gridEntity in ipairs(gridEntities) do
        local gridEntityType = gridEntity:GetType()
        if not gridEntityTypeExceptions:has(gridEntityType) then
            ____exports.removeGrid(nil, gridEntity, false)
            removedGridEntities[#removedGridEntities + 1] = gridEntity
        end
    end
    if #removedGridEntities > 0 then
        roomUpdateSafe(nil)
    end
    return removedGridEntities
end
--- Helper function to remove all of the grid entities in the room that match the grid entity types
-- provided.
-- 
-- Note that this function will automatically update the room. (This means that you can spawn new
-- grid entities on the same tile on the same frame, if needed.)
-- 
-- For example:
-- 
-- ```ts
-- removeAllMatchingGridEntities(
--   GridEntityType.ROCK,
--   GridEntityType.BLOCK,
--   GridEntityType.ROCK_TINTED,
-- );
-- ```
-- 
-- @returns An array of the grid entities removed.
function ____exports.removeAllMatchingGridEntities(self, ...)
    local gridEntities = ____exports.getGridEntities(nil, ...)
    if #gridEntities == 0 then
        return {}
    end
    for ____, gridEntity in ipairs(gridEntities) do
        ____exports.removeGrid(nil, gridEntity, false)
    end
    roomUpdateSafe(nil)
    return gridEntities
end
--- Helper function to make a grid entity invisible. This is accomplished by setting its sprite to an
-- empty/missing PNG file.
-- 
-- For more information, see the documentation for the `clearSprite` helper function.
function ____exports.setGridEntityInvisible(self, gridEntity)
    local sprite = gridEntity:GetSprite()
    clearSprite(nil, sprite)
end
--- Helper function to spawn a giant poop. This is performed by spawning each of the four quadrant
-- grid entities in the appropriate positions.
function ____exports.spawnGiantPoop(self, topLeftGridIndex)
    local room = game:GetRoom()
    local gridWidth = room:GetGridWidth()
    local topRightGridIndex = topLeftGridIndex + 1
    local bottomLeftGridIndex = topLeftGridIndex + gridWidth
    local bottomRightGridIndex = bottomLeftGridIndex + 1
    ____exports.spawnGridWithVariant(nil, GridEntityType.POOP, PoopGridEntityVariant.GIGA_TOP_LEFT, topLeftGridIndex)
    ____exports.spawnGridWithVariant(nil, GridEntityType.POOP, PoopGridEntityVariant.GIGA_TOP_RIGHT, topRightGridIndex)
    ____exports.spawnGridWithVariant(nil, GridEntityType.POOP, PoopGridEntityVariant.GIGA_BOTTOM_LEFT, bottomLeftGridIndex)
    ____exports.spawnGridWithVariant(nil, GridEntityType.POOP, PoopGridEntityVariant.GIGA_BOTTOM_RIGHT, bottomRightGridIndex)
end
--- Helper function to spawn a grid entity.
-- 
-- This function assumes you want to give the grid entity a variant of 0. If you want to specify a
-- variant, use the `spawnGridWithVariant` helper function instead.
-- 
-- Use this instead of the `Isaac.GridSpawn` method since it:
-- - handles giving pits collision
-- - removes existing grid entities on the same tile, if any
-- - allows you to specify either the grid index or the position
function ____exports.spawnGrid(self, gridEntityType, gridIndexOrPosition)
    return ____exports.spawnGridWithVariant(nil, gridEntityType, 0, gridIndexOrPosition)
end
--- Helper function to spawn a Void Portal. This is more complicated than simply spawning a trapdoor
-- with the appropriate variant, as the game does not give it the correct sprite automatically.
function ____exports.spawnVoidPortal(self, gridIndex)
    local voidPortal = ____exports.spawnGridWithVariant(nil, GridEntityType.TRAPDOOR, TrapdoorVariant.VOID_PORTAL, gridIndex)
    if voidPortal == nil then
        return voidPortal
    end
    voidPortal.VarData = 1
    local sprite = voidPortal:GetSprite()
    sprite:Load("gfx/grid/voidtrapdoor.anm2", true)
    return voidPortal
end
return ____exports
 end,
["lua_modules.isaacscript-common.maps.gridEntityTypeToBrokenStateMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local GridEntityType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityType
local LockState = ____isaac_2Dtypescript_2Ddefinitions.LockState
local PoopState = ____isaac_2Dtypescript_2Ddefinitions.PoopState
local RockState = ____isaac_2Dtypescript_2Ddefinitions.RockState
local SpiderWebState = ____isaac_2Dtypescript_2Ddefinitions.SpiderWebState
local TNTState = ____isaac_2Dtypescript_2Ddefinitions.TNTState
____exports.GRID_ENTITY_TYPE_TO_BROKEN_STATE_MAP = __TS__New(Map, {
    {GridEntityType.ROCK, RockState.BROKEN},
    {GridEntityType.ROCK_TINTED, RockState.BROKEN},
    {GridEntityType.ROCK_BOMB, RockState.BROKEN},
    {GridEntityType.ROCK_ALT, RockState.BROKEN},
    {GridEntityType.SPIDER_WEB, SpiderWebState.BROKEN},
    {GridEntityType.LOCK, LockState.UNLOCKED},
    {GridEntityType.TNT, TNTState.EXPLODED},
    {GridEntityType.POOP, PoopState.COMPLETELY_DESTROYED},
    {GridEntityType.ROCK_SUPER_SPECIAL, RockState.BROKEN},
    {GridEntityType.ROCK_SPIKED, RockState.BROKEN},
    {GridEntityType.ROCK_ALT_2, RockState.BROKEN},
    {GridEntityType.ROCK_GOLD, RockState.BROKEN}
})
return ____exports
 end,
["lua_modules.isaacscript-common.maps.gridEntityXMLMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CrawlSpaceVariant = ____isaac_2Dtypescript_2Ddefinitions.CrawlSpaceVariant
local GridEntityType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityType
local GridEntityXMLType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityXMLType
local PitVariant = ____isaac_2Dtypescript_2Ddefinitions.PitVariant
local PoopGridEntityVariant = ____isaac_2Dtypescript_2Ddefinitions.PoopGridEntityVariant
local PressurePlateVariant = ____isaac_2Dtypescript_2Ddefinitions.PressurePlateVariant
local RockVariant = ____isaac_2Dtypescript_2Ddefinitions.RockVariant
local StatueVariant = ____isaac_2Dtypescript_2Ddefinitions.StatueVariant
local TrapdoorVariant = ____isaac_2Dtypescript_2Ddefinitions.TrapdoorVariant
--- This maps the GridEntityXMLType (i.e. the type contained in the room XML/STB file) to the
-- GridEntityType and the variant used by the game.
____exports.GRID_ENTITY_XML_MAP = __TS__New(Map, {
    {GridEntityXMLType.ROCK, {GridEntityType.ROCK, RockVariant.NORMAL}},
    {GridEntityXMLType.ROCK_BOMB, {GridEntityType.ROCK_BOMB, 0}},
    {GridEntityXMLType.ROCK_ALT, {GridEntityType.ROCK_ALT, 0}},
    {GridEntityXMLType.ROCK_TINTED, {GridEntityType.ROCK_TINTED, 0}},
    {GridEntityXMLType.ROCK_ALT_2, {GridEntityType.ROCK_ALT_2, 0}},
    {GridEntityXMLType.ROCK_EVENT, {GridEntityType.ROCK_ALT_2, RockVariant.EVENT}},
    {GridEntityXMLType.ROCK_SPIKED, {GridEntityType.ROCK_SPIKED, 0}},
    {GridEntityXMLType.ROCK_GOLD, {GridEntityType.ROCK_GOLD, 0}},
    {GridEntityXMLType.TNT, {GridEntityType.TNT, 0}},
    {GridEntityXMLType.POOP_RED, {GridEntityType.POOP, PoopGridEntityVariant.RED}},
    {GridEntityXMLType.POOP_RAINBOW, {GridEntityType.POOP, PoopGridEntityVariant.RAINBOW}},
    {GridEntityXMLType.POOP_CORN, {GridEntityType.POOP, PoopGridEntityVariant.CORN}},
    {GridEntityXMLType.POOP_GOLDEN, {GridEntityType.POOP, PoopGridEntityVariant.GOLDEN}},
    {GridEntityXMLType.POOP_BLACK, {GridEntityType.POOP, PoopGridEntityVariant.BLACK}},
    {GridEntityXMLType.POOP_WHITE, {GridEntityType.POOP, PoopGridEntityVariant.WHITE}},
    {GridEntityXMLType.POOP, {GridEntityType.POOP, PoopGridEntityVariant.NORMAL}},
    {GridEntityXMLType.POOP_CHARMING, {GridEntityType.POOP, PoopGridEntityVariant.CHARMING}},
    {GridEntityXMLType.BLOCK, {GridEntityType.BLOCK, 0}},
    {GridEntityXMLType.PILLAR, {GridEntityType.PILLAR, 0}},
    {GridEntityXMLType.SPIKES, {GridEntityType.SPIKES, 0}},
    {GridEntityXMLType.SPIKES_ON_OFF, {GridEntityType.SPIKES_ON_OFF, 0}},
    {GridEntityXMLType.SPIDER_WEB, {GridEntityType.SPIDER_WEB, 0}},
    {GridEntityXMLType.WALL, {GridEntityType.WALL, 0}},
    {GridEntityXMLType.PIT, {GridEntityType.PIT, PitVariant.NORMAL}},
    {GridEntityXMLType.FISSURE_SPAWNER, {GridEntityType.PIT, PitVariant.FISSURE_SPAWNER}},
    {GridEntityXMLType.PIT_EVENT, {GridEntityType.PIT, PitVariant.NORMAL}},
    {GridEntityXMLType.LOCK, {GridEntityType.LOCK, 0}},
    {GridEntityXMLType.PRESSURE_PLATE, {GridEntityType.PRESSURE_PLATE, PressurePlateVariant.PRESSURE_PLATE}},
    {GridEntityXMLType.STATUE_DEVIL, {GridEntityType.STATUE, StatueVariant.DEVIL}},
    {GridEntityXMLType.STATUE_ANGEL, {GridEntityType.STATUE, StatueVariant.ANGEL}},
    {GridEntityXMLType.TELEPORTER, {GridEntityType.TELEPORTER, 0}},
    {GridEntityXMLType.TRAPDOOR, {GridEntityType.TRAPDOOR, TrapdoorVariant.NORMAL}},
    {GridEntityXMLType.CRAWL_SPACE, {GridEntityType.CRAWL_SPACE, CrawlSpaceVariant.NORMAL}},
    {GridEntityXMLType.GRAVITY, {GridEntityType.GRAVITY, 0}}
})
return ____exports
 end,
["lua_modules.isaacscript-common.maps.roomShapeToTopLeftWallGridIndexMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
____exports.DEFAULT_TOP_LEFT_WALL_GRID_INDEX = 0
--- Only used for special room shapes where the top left wall grid index is not equal to
-- `DEFAULT_TOP_LEFT_WALL_GRID_INDEX`.
____exports.ROOM_SHAPE_TO_TOP_LEFT_WALL_GRID_INDEX_MAP = __TS__New(Map, {
    {RoomShape.IH, 30},
    {RoomShape.IV, 4},
    {RoomShape.IIV, 4},
    {RoomShape.IIH, 56},
    {RoomShape.LTL, 13}
})
return ____exports
 end,
["lua_modules.isaacscript-common.functions.math"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
local ____direction = require("lua_modules.isaacscript-common.functions.direction")
local directionToVector = ____direction.directionToVector
--- Helper function to normalize an integer.
-- 
-- - If `x` is less than `min`, then it will be clamped to `min`.
-- - If `x` is greater than `max`, then it will be clamped to `max`.
function ____exports.clamp(self, x, min, max)
    return math.max(
        min,
        math.min(x, max)
    )
end
function ____exports.getAngleDifference(self, angle1, angle2)
    local subtractedAngle = angle1 - angle2
    return (subtractedAngle + 180) % 360 - 180
end
--- Helper function to get an array of equidistant points on the circumference around a circle.
-- Useful for equally distributing things in a circle pattern.
-- 
-- @param centerPos A position that represents the center of the center to get the points from.
-- @param radius The radius of the circle.
-- @param numPoints The number of points on the circumference of the circle to get.
-- @param xMultiplier An optional multiplier to get the points around an oval. Default is 1.
-- @param yMultiplier An optional multiplier to get the points around an oval. Default is 1.
-- @param initialDirection By default, the first point on the circle will be on the top center, but
-- this can be optionally changed by specifying this argument.
function ____exports.getCircleDiscretizedPoints(self, centerPos, radius, numPoints, xMultiplier, yMultiplier, initialDirection)
    if xMultiplier == nil then
        xMultiplier = 1
    end
    if yMultiplier == nil then
        yMultiplier = 1
    end
    if initialDirection == nil then
        initialDirection = Direction.UP
    end
    local vector = directionToVector(nil, initialDirection)
    local initialPosition = vector * radius
    local positions = {}
    do
        local i = 0
        while i < numPoints do
            local rotatedPosition = initialPosition:Rotated(i * 360 / numPoints)
            rotatedPosition.X = rotatedPosition.X * xMultiplier
            rotatedPosition.Y = rotatedPosition.Y * yMultiplier
            local positionFromCenter = centerPos + rotatedPosition
            positions[#positions + 1] = positionFromCenter
            i = i + 1
        end
    end
    return positions
end
--- Helper function to check if a given position is within a given rectangle.
-- 
-- This is an inclusive check, meaning that it will return true if the position is on the border of
-- the rectangle.
function ____exports.inRectangle(self, position, topLeft, bottomRight)
    return position.X >= topLeft.X and position.X <= bottomRight.X and position.Y >= topLeft.Y and position.Y <= bottomRight.Y
end
--- From: https://www.geeksforgeeks.org/check-if-any-point-overlaps-the-given-circle-and-rectangle/
function ____exports.isCircleIntersectingRectangle(self, circleCenter, circleRadius, rectangleTopLeft, rectangleBottomRight)
    local nearestX = math.max(
        rectangleTopLeft.X,
        math.min(circleCenter.X, rectangleBottomRight.X)
    )
    local nearestY = math.max(
        rectangleTopLeft.Y,
        math.min(circleCenter.Y, rectangleBottomRight.Y)
    )
    local nearestPointToCircleOnRectangle = Vector(nearestX, nearestY)
    local distanceToCenterOfCircle = nearestPointToCircleOnRectangle:Distance(circleCenter)
    return distanceToCenterOfCircle <= circleRadius
end
function ____exports.isEven(self, num)
    return num & 1 == 0
end
function ____exports.isOdd(self, num)
    return num & 1 == 1
end
function ____exports.lerp(self, a, b, pos)
    return a + (b - a) * pos
end
function ____exports.lerpAngleDegrees(self, aStart, aEnd, percent)
    return aStart + ____exports.getAngleDifference(nil, aStart, aEnd) * percent
end
--- If rounding fails, this function returns 0.
-- From: http://lua-users.org/wiki/SimpleRound
-- 
-- @param num The number to round.
-- @param numDecimalPlaces Default is 0.
function ____exports.round(self, num, numDecimalPlaces)
    if numDecimalPlaces == nil then
        numDecimalPlaces = 0
    end
    local roundedNum = tonumber(string.format(
        ("%." .. tostring(numDecimalPlaces)) .. "f",
        num
    ))
    return roundedNum == nil and 0 or roundedNum
end
---
-- @returns 1 if n is positive, -1 if n is negative, or 0 if n is 0.
function ____exports.sign(self, n)
    if n > 0 then
        return 1
    end
    if n < 0 then
        return -1
    end
    return 0
end
function ____exports.tanh(self, x)
    return (math.exp(x) - math.exp(-x)) / (math.exp(x) + math.exp(-x))
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.rooms"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayMap = ____lualib.__TS__ArrayMap
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local __TS__Spread = ____lualib.__TS__Spread
local Map = ____lualib.Map
local __TS__StringIncludes = ____lualib.__TS__StringIncludes
local __TS__ArrayEvery = ____lualib.__TS__ArrayEvery
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local AngelRoomSubType = ____isaac_2Dtypescript_2Ddefinitions.AngelRoomSubType
local Dimension = ____isaac_2Dtypescript_2Ddefinitions.Dimension
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
local DoorSlot = ____isaac_2Dtypescript_2Ddefinitions.DoorSlot
local DungeonSubType = ____isaac_2Dtypescript_2Ddefinitions.DungeonSubType
local GridRoom = ____isaac_2Dtypescript_2Ddefinitions.GridRoom
local HomeRoomSubType = ____isaac_2Dtypescript_2Ddefinitions.HomeRoomSubType
local RoomDescriptorFlag = ____isaac_2Dtypescript_2Ddefinitions.RoomDescriptorFlag
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
local RoomTransitionAnim = ____isaac_2Dtypescript_2Ddefinitions.RoomTransitionAnim
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local SoundEffect = ____isaac_2Dtypescript_2Ddefinitions.SoundEffect
local StageID = ____isaac_2Dtypescript_2Ddefinitions.StageID
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local sfxManager = ____cachedClasses.sfxManager
local ____constants = require("lua_modules.isaacscript-common.constants")
local LEVEL_GRID_ROW_WIDTH = ____constants.LEVEL_GRID_ROW_WIDTH
local MAX_LEVEL_GRID_INDEX = ____constants.MAX_LEVEL_GRID_INDEX
local NUM_DIMENSIONS = ____constants.NUM_DIMENSIONS
local ____roomShapeToDoorSlotsToGridIndexDelta = require("lua_modules.isaacscript-common.objects.roomShapeToDoorSlotsToGridIndexDelta")
local ROOM_SHAPE_TO_DOOR_SLOTS_TO_GRID_INDEX_DELTA = ____roomShapeToDoorSlotsToGridIndexDelta.ROOM_SHAPE_TO_DOOR_SLOTS_TO_GRID_INDEX_DELTA
local ____roomTypeNames = require("lua_modules.isaacscript-common.objects.roomTypeNames")
local ROOM_TYPE_NAMES = ____roomTypeNames.ROOM_TYPE_NAMES
local ____mineShaftRoomSubTypesSet = require("lua_modules.isaacscript-common.sets.mineShaftRoomSubTypesSet")
local MINE_SHAFT_ROOM_SUB_TYPE_SET = ____mineShaftRoomSubTypesSet.MINE_SHAFT_ROOM_SUB_TYPE_SET
local ____doors = require("lua_modules.isaacscript-common.functions.doors")
local closeAllDoors = ____doors.closeAllDoors
local getDoors = ____doors.getDoors
local isHiddenSecretRoomDoor = ____doors.isHiddenSecretRoomDoor
local openDoorFast = ____doors.openDoorFast
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local getEntities = ____entity.getEntities
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local hasFlag = ____flag.hasFlag
local ____positionVelocity = require("lua_modules.isaacscript-common.functions.positionVelocity")
local getEntityPositions = ____positionVelocity.getEntityPositions
local getEntityVelocities = ____positionVelocity.getEntityVelocities
local setEntityPositions = ____positionVelocity.setEntityPositions
local setEntityVelocities = ____positionVelocity.setEntityVelocities
local ____roomData = require("lua_modules.isaacscript-common.functions.roomData")
local getRoomAllowedDoors = ____roomData.getRoomAllowedDoors
local getRoomData = ____roomData.getRoomData
local getRoomDescriptor = ____roomData.getRoomDescriptor
local getRoomDescriptorReadOnly = ____roomData.getRoomDescriptorReadOnly
local getRoomGridIndex = ____roomData.getRoomGridIndex
local getRoomName = ____roomData.getRoomName
local getRoomShape = ____roomData.getRoomShape
local getRoomStageID = ____roomData.getRoomStageID
local getRoomSubType = ____roomData.getRoomSubType
local ____roomShape = require("lua_modules.isaacscript-common.functions.roomShape")
local getGridIndexDelta = ____roomShape.getGridIndexDelta
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local erange = ____utils.erange
local irange = ____utils.irange
function ____exports.getRoomShapeNeighborGridIndexDeltas(self, roomShape)
    return {__TS__Spread(ROOM_SHAPE_TO_DOOR_SLOTS_TO_GRID_INDEX_DELTA[roomShape]:values())}
end
--- Helper function to get the room descriptor for every room on the level, including off-grid rooms.
-- Uses the `Level.GetRooms` method to accomplish this. Rooms without data are assumed to be
-- non-existent and are not added to the list.
-- 
-- @param includeExtraDimensionalRooms Optional. On some floors (e.g. Downpour 2, Mines 2),
-- extra-dimensional rooms are automatically be generated and can be
-- seen when you iterate over the `RoomList`. Default is false.
function ____exports.getRooms(self, includeExtraDimensionalRooms)
    if includeExtraDimensionalRooms == nil then
        includeExtraDimensionalRooms = false
    end
    local level = game:GetLevel()
    local roomList = level:GetRooms()
    local roomsMap = __TS__New(Map)
    if includeExtraDimensionalRooms then
        do
            local i = 0
            while i < roomList.Size do
                local roomDescriptor = roomList:Get(i)
                if roomDescriptor ~= nil and roomDescriptor.Data ~= nil then
                    roomsMap:set(roomDescriptor.ListIndex, roomDescriptor)
                end
                i = i + 1
            end
        end
    else
        for ____, roomGridIndex in ipairs(irange(nil, MAX_LEVEL_GRID_INDEX)) do
            local roomDescriptor = level:GetRoomByIdx(roomGridIndex)
            if roomDescriptor.Data ~= nil then
                roomsMap:set(roomDescriptor.ListIndex, roomDescriptor)
            end
        end
    end
    return {__TS__Spread(roomsMap:values())}
end
--- Helper function to check if a room exists at the given room grid index.
function ____exports.roomExists(self, roomGridIndex)
    local roomData = getRoomData(nil, roomGridIndex)
    return roomData ~= nil
end
--- Helper function for quickly switching to a new room without playing a particular animation. Use
-- this helper function over invoking the `Game.ChangeRoom` method directly to ensure that you do
-- not forget to set the `LeaveDoor` property and to prevent crashing on invalid room grid indexes.
function ____exports.changeRoom(self, roomGridIndex)
    local level = game:GetLevel()
    local roomData = getRoomData(nil, roomGridIndex)
    if roomData == nil then
        error(("Failed to change the room to grid index " .. tostring(roomGridIndex)) .. " because that room does not exist.")
    end
    level.LeaveDoor = DoorSlot.NO_DOOR_SLOT
    game:ChangeRoom(roomGridIndex)
end
--- Helper function to get an array with every valid `Dimension` (not including `Dimension.CURRENT`).
function ____exports.getAllDimensions(self)
    return erange(nil, NUM_DIMENSIONS)
end
--- Helper function to get the grid index for every room on the entire floor.
function ____exports.getAllRoomGridIndexes(self)
    local rooms = ____exports.getRooms(nil)
    return __TS__ArrayMap(
        rooms,
        function(____, roomDescriptor) return roomDescriptor.SafeGridIndex end
    )
end
--- Helper function to get the current dimension. Most of the time, this will be `Dimension.MAIN`,
-- but it can change if e.g. the player is in the mirror world of Downpour/Dross.
function ____exports.getDimension(self)
    local level = game:GetLevel()
    local roomGridIndex = getRoomGridIndex(nil)
    local roomDescription = level:GetRoomByIdx(roomGridIndex, Dimension.CURRENT)
    local currentRoomHash = GetPtrHash(roomDescription)
    for ____, dimension in ipairs(____exports.getAllDimensions(nil)) do
        local dimensionRoomDescription = level:GetRoomByIdx(roomGridIndex, dimension)
        local dimensionRoomHash = GetPtrHash(dimensionRoomDescription)
        if dimensionRoomHash == currentRoomHash then
            return dimension
        end
    end
    return error("Failed to get the current dimension.")
end
--- Helper function to get the number of rooms that are currently on the floor layout. This does not
-- include off-grid rooms, like the Devil Room.
function ____exports.getNumRooms(self)
    local rooms = ____exports.getRooms(nil)
    return #rooms
end
--- Helper function to get an array of all of the safe grid indexes for rooms that match the
-- specified room type.
-- 
-- This function only searches through rooms in the current dimension.
-- 
-- This function is variadic, meaning that you can specify N arguments to get the combined grid
-- indexes for N room types.
function ____exports.getRoomGridIndexesForType(self, ...)
    local roomTypesSet = __TS__New(Set, {...})
    local rooms = ____exports.getRooms(nil)
    local matchingRooms = __TS__ArrayFilter(
        rooms,
        function(____, roomDescriptor) return roomDescriptor.Data ~= nil and roomTypesSet:has(roomDescriptor.Data.Type) end
    )
    return __TS__ArrayMap(
        matchingRooms,
        function(____, roomDescriptor) return roomDescriptor.SafeGridIndex end
    )
end
--- Helper function to get the item pool type for the current room. For example, this returns
-- `ItemPoolType.ItemPoolType.POOL_ANGEL` if you are in an Angel Room.
function ____exports.getRoomItemPoolType(self)
    local itemPool = game:GetItemPool()
    local room = game:GetRoom()
    local roomType = room:GetType()
    local roomSeed = room:GetSpawnSeed()
    return itemPool:GetPoolForRoom(roomType, roomSeed)
end
--- Helper function to get the grid indexes of all the rooms connected to the given room index.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
function ____exports.getRoomNeighbors(self, roomGridIndex)
    local roomDescriptor = getRoomDescriptor(nil, roomGridIndex)
    if roomDescriptor.SafeGridIndex < 0 or roomDescriptor.SafeGridIndex > MAX_LEVEL_GRID_INDEX then
        return {}
    end
    local roomData = roomDescriptor.Data
    if roomData == nil then
        return {}
    end
    local roomShape = roomData.Shape
    local gridIndexDeltas = ____exports.getRoomShapeNeighborGridIndexDeltas(nil, roomShape)
    local gridIndexes = __TS__ArrayMap(
        gridIndexDeltas,
        function(____, gridIndexDelta) return roomDescriptor.SafeGridIndex + gridIndexDelta end
    )
    return __TS__ArrayFilter(
        gridIndexes,
        function(____, gridIndex) return ____exports.roomExists(nil, gridIndex) end
    )
end
--- Helper function to get the proper name of a room type.
-- 
-- For example, `RoomType.TREASURE` will return "Treasure Room".
function ____exports.getRoomTypeName(self, roomType)
    return ROOM_TYPE_NAMES[roomType]
end
--- Helper function to get the room descriptor for every room on the level except for rooms that are
-- not on the grid. Uses the `Level.GetRooms` method to accomplish this. Rooms without data are
-- assumed to be non-existent and are not added to the list.
-- 
-- @param includeExtraDimensionalRooms Optional. On some floors (e.g. Downpour 2, Mines 2),
-- extra-dimensional rooms are automatically be generated and can be
-- seen when you iterate over the `RoomList`. Default is false.
function ____exports.getRoomsInGrid(self, includeExtraDimensionalRooms)
    if includeExtraDimensionalRooms == nil then
        includeExtraDimensionalRooms = false
    end
    local rooms = ____exports.getRooms(nil, includeExtraDimensionalRooms)
    return __TS__ArrayFilter(
        rooms,
        function(____, roomDescriptor) return roomDescriptor.SafeGridIndex >= 0 end
    )
end
--- Helper function to get the room descriptor for every room on the level in a specific dimension.
-- Uses the `Level.GetRooms` method to accomplish this. Rooms without data are assumed to be
-- non-existent and are not added to the list.
-- 
-- @returns A map of room ListIndex to RoomDescriptor.
function ____exports.getRoomsOfDimension(self, dimension)
    local level = game:GetLevel()
    local roomsMap = __TS__New(Map)
    for ____, roomGridIndex in ipairs(irange(nil, MAX_LEVEL_GRID_INDEX)) do
        local roomDescriptor = level:GetRoomByIdx(roomGridIndex, dimension)
        if roomDescriptor.Data ~= nil then
            roomsMap:set(roomDescriptor.ListIndex, roomDescriptor)
        end
    end
    return {__TS__Spread(roomsMap:values())}
end
--- Helper function to determine if the current room shape is equal to `RoomShape.1x2` or
-- `RoomShape.2x1`.
function ____exports.in2x1Room(self)
    local room = game:GetRoom()
    local roomShape = room:GetRoomShape()
    return roomShape == RoomShape.SHAPE_1x2 or roomShape == RoomShape.SHAPE_2x1
end
function ____exports.inAngelShop(self)
    local room = game:GetRoom()
    local roomType = room:GetType()
    local roomSubType = getRoomSubType(nil)
    return roomType == RoomType.ANGEL and roomSubType == AngelRoomSubType.SHOP
end
function ____exports.inBeastRoom(self)
    local room = game:GetRoom()
    local roomType = room:GetType()
    local roomSubType = getRoomSubType(nil)
    return roomType == RoomType.DUNGEON and roomSubType == DungeonSubType.BEAST_ROOM
end
--- Helper function to check if the current room is a boss room for a particular boss. This will only
-- work for bosses that have dedicated boss rooms in the "00.special rooms.stb" file.
function ____exports.inBossRoomOf(self, bossID)
    local room = game:GetRoom()
    local roomType = room:GetType()
    local roomStageID = getRoomStageID(nil)
    local roomSubType = getRoomSubType(nil)
    return roomType == RoomType.BOSS and roomStageID == StageID.SPECIAL_ROOMS and roomSubType == bossID
end
--- Helper function for determining whether the current room is a crawl space. Use this function over
-- comparing to `RoomType.DUNGEON` or `GridRoom.DUNGEON_IDX` since there is a special case of the
-- player being in a boss fight that take place in a dungeon.
function ____exports.inCrawlSpace(self)
    local room = game:GetRoom()
    local roomType = room:GetType()
    local roomSubType = getRoomSubType(nil)
    return roomType == RoomType.DUNGEON and roomSubType == DungeonSubType.NORMAL
end
--- We cannot use the standard code in the `inDimension` function for this purpose since it is bugged
-- with the Death Certificate area.
function ____exports.inDeathCertificateArea(self)
    local roomStageID = getRoomStageID(nil)
    local roomSubType = getRoomSubType(nil)
    return roomStageID == StageID.HOME and (roomSubType == HomeRoomSubType.DEATH_CERTIFICATE_ENTRANCE or roomSubType == HomeRoomSubType.DEATH_CERTIFICATE_ITEMS)
end
--- Helper function to detect if the current room is a Treasure Room created when entering with a
-- Devil's Crown trinket. Under the hood, this checks for the `RoomDescriptorFlag.DEVIL_TREASURE`
-- flag.
function ____exports.inDevilsCrownTreasureRoom(self)
    local roomDescriptor = getRoomDescriptorReadOnly(nil)
    return hasFlag(nil, roomDescriptor.Flags, RoomDescriptorFlag.DEVIL_TREASURE)
end
function ____exports.inDimension(self, dimension)
    return dimension == ____exports.getDimension(nil)
end
function ____exports.inDoubleTrouble(self)
    local room = game:GetRoom()
    local roomType = room:GetType()
    local roomName = getRoomName(nil)
    return roomType == RoomType.BOSS and __TS__StringIncludes(roomName, "Double Trouble")
end
function ____exports.inGenesisRoom(self)
    local roomGridIndex = getRoomGridIndex(nil)
    return roomGridIndex == GridRoom.GENESIS
end
--- Helper function to determine if the current room shape is one of the four L room shapes.
function ____exports.inLRoom(self)
    local room = game:GetRoom()
    local roomShape = room:GetRoomShape()
    return roomShape == RoomShape.LTL or roomShape == RoomShape.LTR or roomShape == RoomShape.LBL or roomShape == RoomShape.LBR
end
function ____exports.inMegaSatanRoom(self)
    local roomGridIndex = getRoomGridIndex(nil)
    return roomGridIndex == GridRoom.MEGA_SATAN
end
--- Helper function to determine if the current room is part of the Repentance "escape sequence" in
-- the Mines/Ashpit.
function ____exports.inMineShaft(self)
    local roomStageID = getRoomStageID(nil)
    local roomSubType = getRoomSubType(nil)
    return (roomStageID == StageID.MINES or roomStageID == StageID.ASHPIT) and MINE_SHAFT_ROOM_SUB_TYPE_SET:has(roomSubType)
end
--- Helper function to check if the current room is a miniboss room for a particular miniboss. This
-- will only work for mini-bosses that have dedicated boss rooms in the "00.special rooms.stb" file.
function ____exports.inMinibossRoomOf(self, minibossID)
    local room = game:GetRoom()
    local roomType = room:GetType()
    local roomStageID = getRoomStageID(nil)
    local roomSubType = getRoomSubType(nil)
    return roomType == RoomType.MINI_BOSS and roomStageID == StageID.SPECIAL_ROOMS and roomSubType == minibossID
end
--- Helper function for checking if the room is a secret shop (from the Member Card collectible).
-- 
-- Secret shops are simply copies of normal shops, but with the backdrop of a secret room. In other
-- words, they will have the same room type, room variant, and room sub-type of a normal shop. Thus,
-- the only way to detect them is by using the grid index.
function ____exports.inSecretShop(self)
    local roomGridIndex = getRoomGridIndex(nil)
    return roomGridIndex == GridRoom.SECRET_SHOP
end
--- Helper function to determine whether or not the current room is the starting room of a floor. It
-- only returns true for the starting room of the primary dimension (meaning that being in the
-- starting room of the mirror world does not count).
function ____exports.inStartingRoom(self)
    local level = game:GetLevel()
    local startingRoomGridIndex = level:GetStartingRoomIndex()
    local roomGridIndex = getRoomGridIndex(nil)
    return roomGridIndex == startingRoomGridIndex and ____exports.inDimension(nil, Dimension.MAIN)
end
--- Helper function to loop through every room on the floor and see if it has been cleared.
-- 
-- This function will only check rooms in the current dimension.
-- 
-- @param onlyCheckRoomTypes Optional. A whitelist of room types. If specified, room types not in
-- the array will be ignored. If not specified, then all rooms will be
-- checked. Undefined by default.
function ____exports.isAllRoomsClear(self, onlyCheckRoomTypes)
    local ____temp_0
    if onlyCheckRoomTypes == nil then
        ____temp_0 = nil
    else
        ____temp_0 = __TS__New(Set, onlyCheckRoomTypes)
    end
    local roomTypeWhitelist = ____temp_0
    local rooms = ____exports.getRooms(nil)
    local matchingRooms = roomTypeWhitelist == nil and rooms or __TS__ArrayFilter(
        rooms,
        function(____, roomDescriptor) return roomDescriptor.Data ~= nil and roomTypeWhitelist:has(roomDescriptor.Data.Type) end
    )
    return __TS__ArrayEvery(
        matchingRooms,
        function(____, roomDescriptor) return roomDescriptor.Clear end
    )
end
function ____exports.isDoorSlotValidAtGridIndex(self, doorSlot, roomGridIndex)
    local allowedDoors = getRoomAllowedDoors(nil, roomGridIndex)
    return allowedDoors:has(doorSlot)
end
function ____exports.isDoorSlotValidAtGridIndexForRedRoom(self, doorSlot, roomGridIndex)
    local doorSlotValidAtGridIndex = ____exports.isDoorSlotValidAtGridIndex(nil, doorSlot, roomGridIndex)
    if not doorSlotValidAtGridIndex then
        return false
    end
    local roomShape = getRoomShape(nil, roomGridIndex)
    if roomShape == nil then
        return false
    end
    local delta = getGridIndexDelta(nil, roomShape, doorSlot)
    if delta == nil then
        return false
    end
    local redRoomGridIndex = roomGridIndex + delta
    return not ____exports.roomExists(nil, redRoomGridIndex) and redRoomGridIndex >= 0 and redRoomGridIndex <= MAX_LEVEL_GRID_INDEX
end
--- Helper function to detect if the provided room was created by the Red Key item. Under the hood,
-- this checks for the `RoomDescriptorFlag.FLAG_RED_ROOM` flag.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
function ____exports.isRedKeyRoom(self, roomGridIndex)
    local roomDescriptor = getRoomDescriptor(nil, roomGridIndex)
    return hasFlag(nil, roomDescriptor.Flags, RoomDescriptorFlag.RED_ROOM)
end
--- Helper function to determine if the provided room is part of the floor layout. For example, Devil
-- Rooms and the Mega Satan room are not considered to be inside the map.
-- 
-- @param roomGridIndex Optional. Default is the current room index.
function ____exports.isRoomInsideMap(self, roomGridIndex)
    if roomGridIndex == nil then
        roomGridIndex = getRoomGridIndex(nil)
    end
    return roomGridIndex >= 0
end
--- Helper function to get the coordinates of a given grid index. The floor is represented by a 13x13
-- grid. For example, since the starting room is in the center, the starting room grid index of 84
-- be equal to coordinates of (?, ?).
function ____exports.roomGridIndexToXY(self, roomGridIndex)
    local x = roomGridIndex % LEVEL_GRID_ROW_WIDTH
    local y = math.floor(roomGridIndex / LEVEL_GRID_ROW_WIDTH)
    return {x, y}
end
--- If the `Room.Update` method is called in a PostNewRoom callback, then some entities will slide
-- around (such as the player). Since those entity velocities are already at zero, setting them to
-- zero will have no effect. Thus, a generic solution is to record all of the entity
-- positions/velocities before updating the room, and then restore those positions/velocities.
function ____exports.roomUpdateSafe(self)
    local room = game:GetRoom()
    local entities = getEntities(nil)
    local entityPositions = getEntityPositions(nil, entities)
    local entityVelocities = getEntityVelocities(nil, entities)
    room:Update()
    setEntityPositions(nil, entityPositions, entities)
    setEntityVelocities(nil, entityVelocities, entities)
end
--- Helper function to convert an uncleared room to a cleared room in the PostNewRoom callback. This
-- is useful because if enemies are removed in this callback, a room drop will be awarded and the
-- doors will start closed and then open.
function ____exports.setRoomCleared(self)
    local room = game:GetRoom()
    local roomClear = room:IsClear()
    if roomClear then
        return
    end
    room:SetClear(true)
    for ____, door in ipairs(getDoors(nil)) do
        do
            if isHiddenSecretRoomDoor(nil, door) then
                goto __continue69
            end
            openDoorFast(nil, door)
            door.ExtraVisible = false
        end
        ::__continue69::
    end
    sfxManager:Stop(SoundEffect.DOOR_HEAVY_OPEN)
    game:ShakeScreen(0)
end
--- Helper function to emulate what happens when you bomb an Angel Statue or push a Reward Plate that
-- spawns an NPC.
function ____exports.setRoomUncleared(self)
    local room = game:GetRoom()
    room:SetClear(false)
    closeAllDoors(nil)
end
--- Helper function to change the current room. It can be used for both teleportation and "normal"
-- room transitions, depending on what is passed for the `direction` and `roomTransitionAnim`
-- arguments. Use this function instead of invoking the `Game.StartRoomTransition` method directly
-- so that you do not forget to set `Level.LeaveDoor` property and to prevent crashing on invalid
-- room grid indexes.
-- 
-- @param roomGridIndex The room grid index of the destination room.
-- @param direction Optional. Default is `Direction.NO_DIRECTION`.
-- @param roomTransitionAnim Optional. Default is `RoomTransitionAnim.TELEPORT`.
function ____exports.teleport(self, roomGridIndex, direction, roomTransitionAnim)
    if direction == nil then
        direction = Direction.NO_DIRECTION
    end
    if roomTransitionAnim == nil then
        roomTransitionAnim = RoomTransitionAnim.TELEPORT
    end
    local level = game:GetLevel()
    local roomData = getRoomData(nil, roomGridIndex)
    if roomData == nil then
        error(("Failed to change the room to grid index " .. tostring(roomGridIndex)) .. " because that room does not exist.")
    end
    level.LeaveDoor = DoorSlot.NO_DOOR_SLOT
    game:StartRoomTransition(roomGridIndex, direction, roomTransitionAnim)
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.roomShapeToDoorSlotsToGridIndexDelta"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local DoorSlot = ____isaac_2Dtypescript_2Ddefinitions.DoorSlot
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
local ____constants = require("lua_modules.isaacscript-common.constants")
local LEVEL_GRID_ROW_WIDTH = ____constants.LEVEL_GRID_ROW_WIDTH
local LEFT = -1
local UP = -LEVEL_GRID_ROW_WIDTH
local RIGHT = 1
local DOWN = LEVEL_GRID_ROW_WIDTH
--- Deltas are considered to be from the safe grid index of the room (i.e. the top left corner, or
-- top right corner in the case of `RoomShape.LTL`).
____exports.ROOM_SHAPE_TO_DOOR_SLOTS_TO_GRID_INDEX_DELTA = {
    [RoomShape.SHAPE_1x1] = __TS__New(Map, {{DoorSlot.LEFT_0, LEFT}, {DoorSlot.UP_0, UP}, {DoorSlot.RIGHT_0, RIGHT}, {DoorSlot.DOWN_0, DOWN}}),
    [RoomShape.IH] = __TS__New(Map, {{DoorSlot.LEFT_0, LEFT}, {DoorSlot.RIGHT_0, RIGHT}}),
    [RoomShape.IV] = __TS__New(Map, {{DoorSlot.UP_0, UP}, {DoorSlot.DOWN_0, DOWN}}),
    [RoomShape.SHAPE_1x2] = __TS__New(Map, {
        {DoorSlot.LEFT_0, LEFT},
        {DoorSlot.UP_0, UP},
        {DoorSlot.RIGHT_0, RIGHT},
        {DoorSlot.DOWN_0, DOWN + DOWN},
        {DoorSlot.LEFT_1, DOWN + LEFT},
        {DoorSlot.RIGHT_1, DOWN + RIGHT}
    }),
    [RoomShape.IIV] = __TS__New(Map, {{DoorSlot.UP_0, UP}, {DoorSlot.DOWN_0, DOWN + DOWN}}),
    [RoomShape.SHAPE_2x1] = __TS__New(Map, {
        {DoorSlot.LEFT_0, LEFT},
        {DoorSlot.UP_0, UP},
        {DoorSlot.RIGHT_0, RIGHT + RIGHT},
        {DoorSlot.DOWN_0, DOWN},
        {DoorSlot.UP_1, RIGHT + UP},
        {DoorSlot.DOWN_1, RIGHT + DOWN}
    }),
    [RoomShape.IIH] = __TS__New(Map, {{DoorSlot.LEFT_0, LEFT}, {DoorSlot.RIGHT_0, RIGHT + RIGHT}}),
    [RoomShape.SHAPE_2x2] = __TS__New(Map, {
        {DoorSlot.LEFT_0, LEFT},
        {DoorSlot.UP_0, UP},
        {DoorSlot.RIGHT_0, RIGHT + RIGHT},
        {DoorSlot.DOWN_0, DOWN + DOWN},
        {DoorSlot.LEFT_1, DOWN + LEFT},
        {DoorSlot.UP_1, RIGHT + UP},
        {DoorSlot.RIGHT_1, RIGHT + DOWN + RIGHT},
        {DoorSlot.DOWN_1, RIGHT + DOWN + DOWN}
    }),
    [RoomShape.LTL] = __TS__New(Map, {
        {DoorSlot.LEFT_0, LEFT},
        {DoorSlot.UP_0, DOWN + LEFT + UP},
        {DoorSlot.RIGHT_0, RIGHT},
        {DoorSlot.DOWN_0, DOWN + LEFT + DOWN},
        {DoorSlot.LEFT_1, DOWN + LEFT + LEFT},
        {DoorSlot.UP_1, UP},
        {DoorSlot.RIGHT_1, DOWN + RIGHT},
        {DoorSlot.DOWN_1, DOWN + DOWN}
    }),
    [RoomShape.LTR] = __TS__New(Map, {
        {DoorSlot.LEFT_0, LEFT},
        {DoorSlot.UP_0, UP},
        {DoorSlot.RIGHT_0, RIGHT},
        {DoorSlot.DOWN_0, DOWN + DOWN},
        {DoorSlot.LEFT_1, DOWN + LEFT},
        {DoorSlot.UP_1, DOWN + RIGHT + UP},
        {DoorSlot.RIGHT_1, DOWN + RIGHT + RIGHT},
        {DoorSlot.DOWN_1, DOWN + RIGHT + DOWN}
    }),
    [RoomShape.LBL] = __TS__New(Map, {
        {DoorSlot.LEFT_0, LEFT},
        {DoorSlot.UP_0, UP},
        {DoorSlot.RIGHT_0, RIGHT + RIGHT},
        {DoorSlot.DOWN_0, DOWN},
        {DoorSlot.LEFT_1, RIGHT + DOWN + LEFT},
        {DoorSlot.UP_1, RIGHT + UP},
        {DoorSlot.RIGHT_1, RIGHT + DOWN + RIGHT},
        {DoorSlot.DOWN_1, RIGHT + DOWN + DOWN}
    }),
    [RoomShape.LBR] = __TS__New(Map, {
        {DoorSlot.LEFT_0, LEFT},
        {DoorSlot.UP_0, UP},
        {DoorSlot.RIGHT_0, RIGHT + RIGHT},
        {DoorSlot.DOWN_0, DOWN + DOWN},
        {DoorSlot.LEFT_1, DOWN + LEFT},
        {DoorSlot.UP_1, RIGHT + UP},
        {DoorSlot.RIGHT_1, DOWN + RIGHT},
        {DoorSlot.DOWN_1, RIGHT + DOWN}
    })
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.roomTypeNames"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
____exports.DEFAULT_ROOM_TYPE_NAME = "Unknown"
____exports.ROOM_TYPE_NAMES = {
    [RoomType.DEFAULT] = "default room",
    [RoomType.SHOP] = "shop",
    [RoomType.ERROR] = "I AM ERROR Room",
    [RoomType.TREASURE] = "Treasure Room",
    [RoomType.BOSS] = "Boss Room",
    [RoomType.MINI_BOSS] = "Miniboss Room",
    [RoomType.SECRET] = "Secret Room",
    [RoomType.SUPER_SECRET] = "Super Secret Room",
    [RoomType.ARCADE] = "Arcade",
    [RoomType.CURSE] = "Curse Room",
    [RoomType.CHALLENGE] = "Challenge Room",
    [RoomType.LIBRARY] = "Library",
    [RoomType.SACRIFICE] = "Sacrifice Room",
    [RoomType.DEVIL] = "Devil Room",
    [RoomType.ANGEL] = "Angel Room",
    [RoomType.DUNGEON] = "Crawl Space",
    [RoomType.BOSS_RUSH] = "Boss Rush",
    [RoomType.CLEAN_BEDROOM] = "Clean Bedroom",
    [RoomType.DIRTY_BEDROOM] = "Dirty Bedroom",
    [RoomType.CHEST] = "Chest Room",
    [RoomType.DICE] = "Dice Room",
    [RoomType.BLACK_MARKET] = "Black Market",
    [RoomType.GREED_EXIT] = "Greed Exit Room",
    [RoomType.PLANETARIUM] = "Planetarium",
    [RoomType.TELEPORTER] = "Teleporter Room",
    [RoomType.TELEPORTER_EXIT] = "Teleporter Exit Room",
    [RoomType.SECRET_EXIT] = "Secret Exit",
    [RoomType.BLUE] = "Blue Room",
    [RoomType.ULTRA_SECRET] = "Ultra Secret Room"
}
return ____exports
 end,
["lua_modules.isaacscript-common.sets.mineShaftRoomSubTypesSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local MinesRoomSubType = ____isaac_2Dtypescript_2Ddefinitions.MinesRoomSubType
____exports.MINE_SHAFT_ROOM_SUB_TYPE_SET = __TS__New(Set, {
    MinesRoomSubType.MINESHAFT_ENTRANCE,
    MinesRoomSubType.MINESHAFT_LOBBY,
    MinesRoomSubType.MINESHAFT_KNIFE_PIECE,
    MinesRoomSubType.MINESHAFT_ROOM_PRE_CHASE,
    MinesRoomSubType.MINESHAFT_ROOM_POST_CHASE
})
return ____exports
 end,
["lua_modules.isaacscript-common.functions.positionVelocity"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArraySome = ____lualib.__TS__ArraySome
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EffectVariant = ____isaac_2Dtypescript_2Ddefinitions.EffectVariant
local HeavenLightDoorSubType = ____isaac_2Dtypescript_2Ddefinitions.HeavenLightDoorSubType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____constants = require("lua_modules.isaacscript-common.constants")
local DISTANCE_OF_GRID_TILE = ____constants.DISTANCE_OF_GRID_TILE
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local getEntities = ____entity.getEntities
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local getEffects = ____entitySpecific.getEffects
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getPlayerCloserThan = ____player.getPlayerCloserThan
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getPlayers = ____playerIndex.getPlayers
local MAX_FIND_FREE_POSITION_ATTEMPTS = 100
function ____exports.anyEntityCloserThan(self, entities, position, distance)
    return __TS__ArraySome(
        entities,
        function(____, entity) return position:Distance(entity.Position) <= distance end
    )
end
--- Iterates over all players and checks if any player is close enough to the specified position.
function ____exports.anyPlayerCloserThan(self, position, distance)
    local players = getPlayers(nil)
    return __TS__ArraySome(
        players,
        function(____, player) return player.Position:Distance(position) <= distance end
    )
end
--- Helper function to get a room position that is not overlapping with a grid entity, a heaven door,
-- or a player. The `Room.FindFreePickupSpawnPosition` method will return locations that overlap
-- with heaven doors and partially overlap with players, if the thing being spawned is bigger than a
-- tile (like a Blood Donation Machine). Use this function instead if you want to account for those
-- specific situations.
-- 
-- @param startingPosition The position to start searching from. If this position is not overlapping
-- with anything, then it will be returned.
-- @param avoidActiveEntities Optional. Default is false.
function ____exports.findFreePosition(self, startingPosition, avoidActiveEntities)
    if avoidActiveEntities == nil then
        avoidActiveEntities = false
    end
    local room = game:GetRoom()
    local heavenDoors = getEffects(nil, EffectVariant.HEAVEN_LIGHT_DOOR, HeavenLightDoorSubType.HEAVEN_DOOR)
    do
        local i = 0
        while i < MAX_FIND_FREE_POSITION_ATTEMPTS do
            do
                local position = room:FindFreePickupSpawnPosition(startingPosition, i, avoidActiveEntities)
                local closePlayer = getPlayerCloserThan(nil, position, DISTANCE_OF_GRID_TILE)
                if closePlayer ~= nil then
                    goto __continue7
                end
                local isCloseHeavenDoor = ____exports.anyEntityCloserThan(nil, heavenDoors, position, DISTANCE_OF_GRID_TILE)
                if isCloseHeavenDoor then
                    goto __continue7
                end
                return position
            end
            ::__continue7::
            i = i + 1
        end
    end
    return room:FindFreePickupSpawnPosition(startingPosition)
end
--- Helper function to get a map containing the positions of every entity in the current room.
-- 
-- This is useful for rewinding entity positions at a later time. Also see `setEntityPositions`.
-- 
-- @param entities Optional. If provided, will only get the positions of the provided entities. Use
-- this with cached entities to avoid invoking the `Isaac.GetRoomEntities` method
-- multiple times.
function ____exports.getEntityPositions(self, entities)
    if entities == nil then
        entities = getEntities(nil)
    end
    local entityPositions = __TS__New(Map)
    for ____, entity in ipairs(entities) do
        local ptrHash = GetPtrHash(entity)
        entityPositions:set(ptrHash, entity.Position)
    end
    return entityPositions
end
--- Helper function to get a map containing the velocities of every entity in the current room.
-- 
-- This is useful for rewinding entity velocities at a later time. Also see `setEntityVelocities`.
-- 
-- @param entities Optional. If provided, will only get the velocities of the provided entities. Use
-- this with cached entities to avoid invoking the `Isaac.GetRoomEntities` method
-- multiple times.
function ____exports.getEntityVelocities(self, entities)
    if entities == nil then
        entities = getEntities(nil)
    end
    local entityVelocities = __TS__New(Map)
    for ____, entity in ipairs(entities) do
        local ptrHash = GetPtrHash(entity)
        entityVelocities:set(ptrHash, entity.Velocity)
    end
    return entityVelocities
end
--- Helper function to set the position of every entity in the room based on a map of positions. If
-- an entity is found that does not have matching element in the provided map, then that entity will
-- be skipped.
-- 
-- This function is useful for rewinding entity positions at a later time. Also see
-- `getEntityPositions`.
-- 
-- @param entityPositions The map providing the positions for every entity.
-- @param entities Optional. If provided, will only set the positions of the provided entities. Use
-- this with cached entities to avoid invoking the `Isaac.GetRoomEntities` method
-- multiple times.
function ____exports.setEntityPositions(self, entityPositions, entities)
    if entities == nil then
        entities = getEntities(nil)
    end
    for ____, entity in ipairs(entities) do
        local ptrHash = GetPtrHash(entity)
        local entityPosition = entityPositions:get(ptrHash)
        if entityPosition ~= nil then
            entity.Position = entityPosition
        end
    end
end
--- Helper function to set the velocity of every entity in the room based on a map of velocities. If
-- an entity is found that does not have matching element in the provided map, then that entity will
-- be skipped.
-- 
-- This function is useful for rewinding entity velocities at a later time. Also see
-- `getEntityVelocities`.
-- 
-- @param entityVelocities The map providing the velocities for every entity.
-- @param entities Optional. If provided, will only set the velocities of the provided entities. Use
-- this with cached entities to avoid invoking the `Isaac.GetRoomEntities` method
-- multiple times.
function ____exports.setEntityVelocities(self, entityVelocities, entities)
    if entities == nil then
        entities = getEntities(nil)
    end
    for ____, entity in ipairs(entities) do
        local ptrHash = GetPtrHash(entity)
        local entityVelocity = entityVelocities:get(ptrHash)
        if entityVelocity ~= nil then
            entity.Velocity = entityVelocity
        end
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.entitySpecific"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local ____constants = require("lua_modules.isaacscript-common.constants")
local VectorZero = ____constants.VectorZero
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local getEntities = ____entity.getEntities
local getFilteredNewEntities = ____entity.getFilteredNewEntities
local removeEntities = ____entity.removeEntities
local spawn = ____entity.spawn
--- Helper function to get all of the `EntityType.BOMB` in the room.
-- 
-- For example:
-- 
-- ```ts
-- // Make all of the bombs in the room invisible
-- for (const bomb of getBombs()) {
--   bomb.Visible = false;
-- }
-- ```
function ____exports.getBombs(self, bombVariant, subType)
    if bombVariant == nil then
        bombVariant = -1
    end
    if subType == nil then
        subType = -1
    end
    local entities = getEntities(nil, EntityType.BOMB, bombVariant, subType)
    local bombs = {}
    for ____, entity in ipairs(entities) do
        local bomb = entity:ToBomb()
        if bomb ~= nil then
            bombs[#bombs + 1] = bomb
        end
    end
    return bombs
end
--- Helper function to get all of the `EntityType.EFFECT` in the room.
-- 
-- For example:
-- 
-- ```ts
-- // Make all of the effects in the room invisible
-- for (const effect of getEffects()) {
--   effect.Visible = false;
-- }
-- ```
function ____exports.getEffects(self, effectVariant, subType)
    if effectVariant == nil then
        effectVariant = -1
    end
    if subType == nil then
        subType = -1
    end
    local entities = getEntities(nil, EntityType.EFFECT, effectVariant, subType)
    local effects = {}
    for ____, entity in ipairs(entities) do
        local effect = entity:ToEffect()
        if effect ~= nil then
            effects[#effects + 1] = effect
        end
    end
    return effects
end
--- Helper function to get all of the familiars in the room.
-- 
-- For example:
-- 
-- ```ts
-- // Make all of the familiars in the room invisible
-- for (const familiar of getFamiliars()) {
--   familiar.Visible = false;
-- }
-- ```
function ____exports.getFamiliars(self, familiarVariant, subType)
    if familiarVariant == nil then
        familiarVariant = -1
    end
    if subType == nil then
        subType = -1
    end
    local entities = getEntities(nil, EntityType.FAMILIAR, familiarVariant, subType)
    local familiars = {}
    for ____, entity in ipairs(entities) do
        local familiar = entity:ToFamiliar()
        if familiar ~= nil then
            familiars[#familiars + 1] = familiar
        end
    end
    return familiars
end
--- Helper function to get all of the `EntityType.KNIFE` in the room.
-- 
-- For example:
-- 
-- ```ts
-- // Make all of the knives in the room invisible
-- for (const knife of getKnives()) {
--   knife.Visible = false;
-- }
-- ```
function ____exports.getKnives(self, knifeVariant, subType)
    if knifeVariant == nil then
        knifeVariant = -1
    end
    if subType == nil then
        subType = -1
    end
    local entities = getEntities(nil, EntityType.KNIFE, knifeVariant, subType)
    local knives = {}
    for ____, entity in ipairs(entities) do
        local knife = entity:ToKnife()
        if knife ~= nil then
            knives[#knives + 1] = knife
        end
    end
    return knives
end
--- Helper function to get all of the `EntityType.LASER` in the room.
-- 
-- For example:
-- 
-- ```ts
-- // Make all of the lasers in the room invisible
-- for (const laser of getLasers()) {
--   laser.Visible = false;
-- }
-- ```
function ____exports.getLasers(self, laserVariant, subType)
    if laserVariant == nil then
        laserVariant = -1
    end
    if subType == nil then
        subType = -1
    end
    local entities = getEntities(nil, EntityType.LASER, laserVariant, subType)
    local lasers = {}
    for ____, entity in ipairs(entities) do
        local laser = entity:ToLaser()
        if laser ~= nil then
            lasers[#lasers + 1] = laser
        end
    end
    return lasers
end
--- The same thing as the `getEntities` function, but returns only NPCs.
function ____exports.getNPCs(self, entityType, variant, subType, ignoreFriendly)
    if ignoreFriendly == nil then
        ignoreFriendly = false
    end
    local entities = getEntities(
        nil,
        entityType,
        variant,
        subType,
        ignoreFriendly
    )
    local npcs = {}
    for ____, entity in ipairs(entities) do
        local npc = entity:ToNPC()
        if npc ~= nil then
            npcs[#npcs + 1] = npc
        end
    end
    return npcs
end
--- Helper function to get all of the pickups in the room.
-- 
-- For example:
-- 
-- ```ts
-- // Make all of the pickups in the room invisible
-- for (const pickup of getPickups()) {
--   pickup.Visible = false;
-- }
-- ```
function ____exports.getPickups(self, pickupVariant, subType)
    if pickupVariant == nil then
        pickupVariant = -1
    end
    if subType == nil then
        subType = -1
    end
    local entities = getEntities(nil, EntityType.PICKUP, pickupVariant, subType)
    local pickups = {}
    for ____, entity in ipairs(entities) do
        local pickup = entity:ToPickup()
        if pickup ~= nil then
            pickups[#pickups + 1] = pickup
        end
    end
    return pickups
end
--- Helper function to get all of the `EntityType.PROJECTILE` in the room.
-- 
-- For example:
-- 
-- ```ts
-- // Make all of the projectiles in the room invisible
-- for (const projectile of getProjectiles()) {
--   projectile.Visible = false;
-- }
-- ```
function ____exports.getProjectiles(self, projectileVariant, subType)
    if projectileVariant == nil then
        projectileVariant = -1
    end
    if subType == nil then
        subType = -1
    end
    local entities = getEntities(nil, EntityType.PROJECTILE, projectileVariant, subType)
    local projectiles = {}
    for ____, entity in ipairs(entities) do
        local projectile = entity:ToProjectile()
        if projectile ~= nil then
            projectiles[#projectiles + 1] = projectile
        end
    end
    return projectiles
end
--- Helper function to get all of the `EntityType.SLOT` in the room.
-- 
-- For example:
-- 
-- ```ts
-- // Make all of the slots in the room invisible
-- for (const slot of getSlots()) {
--   slot.Visible = false;
-- }
-- ```
function ____exports.getSlots(self, slotVariant, subType)
    if slotVariant == nil then
        slotVariant = -1
    end
    if subType == nil then
        subType = -1
    end
    local slots = getEntities(nil, EntityType.SLOT, slotVariant, subType)
    return slots
end
--- Helper function to get all of the `EntityType.TEAR` in the room.
-- 
-- For example:
-- 
-- ```ts
-- // Make all of the tears in the room invisible
-- for (const tear of getTears()) {
--   tear.Visible = false;
-- }
-- ```
function ____exports.getTears(self, tearVariant, subType)
    if tearVariant == nil then
        tearVariant = -1
    end
    if subType == nil then
        subType = -1
    end
    local entities = getEntities(nil, EntityType.TEAR, tearVariant, subType)
    local tears = {}
    for ____, entity in ipairs(entities) do
        local tear = entity:ToTear()
        if tear ~= nil then
            tears[#tears + 1] = tear
        end
    end
    return tears
end
--- The base game `EntityNPC.FireProjectiles` method does not return anything, which is a problem in
-- situations where you need to work with the fired projectiles. This function invokes that method,
-- and then returns the projectiles that were spawned.
-- 
-- @param npc The EntityNPC firing projectiles.
-- @param position The starting position of the projectiles.
-- @param velocity The starting velocity of the projectiles.
-- @param projectilesMode A ProjectilesMode enum value defining how to fire the projectiles.
-- @param projectileParams A ProjectileParams object containing various parameters for the
-- projectiles.
-- @returns An array of EntityProjectiles containing all fired projectiles.
function ____exports.npcFireProjectiles(self, npc, position, velocity, projectilesMode, projectileParams)
    local oldEntities = ____exports.getProjectiles(nil)
    npc:FireProjectiles(position, velocity, projectilesMode, projectileParams)
    local newEntities = ____exports.getProjectiles(nil)
    local filteredNewEntities = getFilteredNewEntities(nil, oldEntities, newEntities)
    return filteredNewEntities
end
--- Helper function to remove all of the `EntityType.BOMB` in the room.
-- 
-- @param bombVariant Optional. If specified, will only remove bombs that match this variant.
-- @param subType Optional. If specified, will only remove bombs that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of bombs.
-- @returns An array of the bombs that were removed.
function ____exports.removeAllBombs(self, bombVariant, subType, cap)
    local bombs = ____exports.getBombs(nil, bombVariant, subType)
    return removeEntities(nil, bombs, cap)
end
--- Helper function to remove all of the effects in the room.
-- 
-- @param effectVariant Optional. If specified, will only remove effects that match this variant.
-- @param subType Optional. If specified, will only remove effects that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of effects.
-- @returns An array of the effects that were removed.
function ____exports.removeAllEffects(self, effectVariant, subType, cap)
    local effects = ____exports.getEffects(nil, effectVariant, subType)
    return removeEntities(nil, effects, cap)
end
--- Helper function to remove all of the familiars in the room.
-- 
-- @param familiarVariant Optional. If specified, will only remove familiars that match this
-- variant.
-- @param subType Optional. If specified, will only remove familiars that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of familiars.
-- @returns An array of the familiars that were removed.
function ____exports.removeAllFamiliars(self, familiarVariant, subType, cap)
    local familiars = ____exports.getFamiliars(nil, familiarVariant, subType)
    return removeEntities(nil, familiars, cap)
end
--- Helper function to remove all of the `EntityType.KNIFE` in the room.
-- 
-- @param knifeVariant Optional. If specified, will only remove knives that match this variant.
-- @param subType Optional. If specified, will only remove knives that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of knives.
-- @returns An array of the knives that were removed.
function ____exports.removeAllKnives(self, knifeVariant, subType, cap)
    local knives = ____exports.getKnives(nil, knifeVariant, subType)
    return removeEntities(nil, knives, cap)
end
--- Helper function to remove all of the `EntityType.LASER` in the room.
-- 
-- @param laserVariant Optional. If specified, will only remove lasers that match this variant.
-- @param subType Optional. If specified, will only remove lasers that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of lasers.
-- @returns An array of the lasers that were removed.
function ____exports.removeAllLasers(self, laserVariant, subType, cap)
    local lasers = ____exports.getLasers(nil, laserVariant, subType)
    return removeEntities(nil, lasers, cap)
end
--- Helper function to remove all NPCs in the room.
-- 
-- @param cap Optional. If specified, will only remove the given amount of NPCs.
-- @returns An array of the NPCs that were removed.
function ____exports.removeAllNPCs(self, cap)
    local npcs = ____exports.getNPCs(nil)
    return removeEntities(nil, npcs, cap)
end
--- Helper function to remove all of the pickups in the room.
-- 
-- @param pickupVariant Optional. If specified, will only remove pickups that match this variant.
-- @param subType Optional. If specified, will only remove pickups that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of pickups.
-- @returns An array of the pickups that were removed.
function ____exports.removeAllPickups(self, pickupVariant, subType, cap)
    local pickups = ____exports.getPickups(nil, pickupVariant, subType)
    return removeEntities(nil, pickups, cap)
end
--- Helper function to remove all of the `EntityType.PROJECTILE` in the room.
-- 
-- @param projectileVariant Optional. If specified, will only remove projectiles that match this
-- variant.
-- @param subType Optional. If specified, will only remove projectiles that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of projectiles.
-- @returns An array of the projectiles that were removed.
function ____exports.removeAllProjectiles(self, projectileVariant, subType, cap)
    local projectiles = ____exports.getProjectiles(nil, projectileVariant, subType)
    return removeEntities(nil, projectiles, cap)
end
--- Helper function to remove all of the `EntityType.SLOT` in the room.
-- 
-- @param slotVariant Optional. If specified, will only remove slots that match this variant.
-- @param subType Optional. If specified, will only remove slots that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of slots.
-- @returns An array of the slots that were removed.
function ____exports.removeAllSlots(self, slotVariant, subType, cap)
    local slots = ____exports.getSlots(nil, slotVariant, subType)
    return removeEntities(nil, slots, cap)
end
--- Helper function to remove all of the `EntityType.TEAR` in the room.
-- 
-- @param tearVariant Optional. If specified, will only remove tears that match this variant.
-- @param subType Optional. If specified, will only remove tears that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of tears.
-- @returns An array of the tears that were removed.
function ____exports.removeAllTears(self, tearVariant, subType, cap)
    local tears = ____exports.getTears(nil, tearVariant, subType)
    return removeEntities(nil, tears, cap)
end
--- Helper function to spawn a `EntityType.BOMB` (4).
function ____exports.spawnBomb(self, bombVariant, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    local entity = spawn(
        nil,
        EntityType.BOMB,
        bombVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
    local bomb = entity:ToBomb()
    if bomb == nil then
        error("Failed to spawn a bomb.")
    end
    return bomb
end
--- Helper function to spawn a `EntityType.BOMB` (4) with a specific seed.
function ____exports.spawnBombWithSeed(self, bombVariant, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnBomb(
        nil,
        bombVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.EFFECT` (1000).
function ____exports.spawnEffect(self, effectVariant, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    local entity = spawn(
        nil,
        EntityType.EFFECT,
        effectVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
    local effect = entity:ToEffect()
    if effect == nil then
        error("Failed to spawn an effect.")
    end
    return effect
end
--- Helper function to spawn a `EntityType.EFFECT` (1000) with a specific seed.
function ____exports.spawnEffectWithSeed(self, effectVariant, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnEffect(
        nil,
        effectVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.FAMILIAR` (3).
function ____exports.spawnFamiliar(self, familiarVariant, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    local entity = spawn(
        nil,
        EntityType.FAMILIAR,
        familiarVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
    local familiar = entity:ToFamiliar()
    if familiar == nil then
        error("Failed to spawn a familiar.")
    end
    return familiar
end
--- Helper function to spawn a `EntityType.FAMILIAR` (3) with a specific seed.
function ____exports.spawnFamiliarWithSeed(self, familiarVariant, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnFamiliar(
        nil,
        familiarVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.KNIFE` (8).
function ____exports.spawnKnife(self, knifeVariant, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    local entity = spawn(
        nil,
        EntityType.KNIFE,
        knifeVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
    local knife = entity:ToKnife()
    if knife == nil then
        error("Failed to spawn a knife.")
    end
    return knife
end
--- Helper function to spawn a `EntityType.KNIFE` (8) with a specific seed.
function ____exports.spawnKnifeWithSeed(self, knifeVariant, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnKnife(
        nil,
        knifeVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.LASER` (7).
function ____exports.spawnLaser(self, laserVariant, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    local entity = spawn(
        nil,
        EntityType.LASER,
        laserVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
    local laser = entity:ToLaser()
    if laser == nil then
        error("Failed to spawn a laser.")
    end
    return laser
end
--- Helper function to spawn a `EntityType.LASER` (7) with a specific seed.
function ____exports.spawnLaserWithSeed(self, laserVariant, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnLaser(
        nil,
        laserVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn an NPC.
function ____exports.spawnNPC(self, entityType, variant, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    local entity = spawn(
        nil,
        entityType,
        variant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
    local npc = entity:ToNPC()
    if npc == nil then
        error("Failed to spawn an NPC.")
    end
    return npc
end
--- Helper function to spawn an NPC with a specific seed.
function ____exports.spawnNPCWithSeed(self, entityType, variant, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnNPC(
        nil,
        entityType,
        variant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.PICKUP` (5).
function ____exports.spawnPickup(self, pickupVariant, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    local entity = spawn(
        nil,
        EntityType.PICKUP,
        pickupVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
    local pickup = entity:ToPickup()
    if pickup == nil then
        error("Failed to spawn a pickup.")
    end
    return pickup
end
--- Helper function to spawn a `EntityType.PICKUP` (5) with a specific seed.
function ____exports.spawnPickupWithSeed(self, pickupVariant, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnPickup(
        nil,
        pickupVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.PROJECTILE` (9).
function ____exports.spawnProjectile(self, projectileVariant, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    local entity = spawn(
        nil,
        EntityType.PROJECTILE,
        projectileVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
    local projectile = entity:ToProjectile()
    if projectile == nil then
        error("Failed to spawn a projectile.")
    end
    return projectile
end
--- Helper function to spawn a `EntityType.PROJECTILE` (9) with a specific seed.
function ____exports.spawnProjectileWithSeed(self, projectileVariant, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnProjectile(
        nil,
        projectileVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.SLOT` (6).
function ____exports.spawnSlot(self, slotVariant, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    return spawn(
        nil,
        EntityType.SLOT,
        slotVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.SLOT` (6) with a specific seed.
function ____exports.spawnSlotWithSeed(self, slotVariant, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnSlot(
        nil,
        slotVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.TEAR` (2).
function ____exports.spawnTear(self, tearVariant, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    local entity = spawn(
        nil,
        EntityType.TEAR,
        tearVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
    local tear = entity:ToTear()
    if tear == nil then
        error("Failed to spawn a tear.")
    end
    return tear
end
--- Helper function to spawn a `EntityType.EntityType` (2) with a specific seed.
function ____exports.spawnTearWithSeed(self, tearVariant, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnTear(
        nil,
        tearVariant,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.player"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArraySome = ____lualib.__TS__ArraySome
local __TS__ArrayFind = ____lualib.__TS__ArrayFind
local __TS__ArrayMap = ____lualib.__TS__ArrayMap
local Map = ____lualib.Map
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local __TS__ArrayEvery = ____lualib.__TS__ArrayEvery
local ____exports = {}
local isTaintedModded
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ActiveSlot = ____isaac_2Dtypescript_2Ddefinitions.ActiveSlot
local CacheFlag = ____isaac_2Dtypescript_2Ddefinitions.CacheFlag
local Challenge = ____isaac_2Dtypescript_2Ddefinitions.Challenge
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local FamiliarVariant = ____isaac_2Dtypescript_2Ddefinitions.FamiliarVariant
local NullItemID = ____isaac_2Dtypescript_2Ddefinitions.NullItemID
local PlayerForm = ____isaac_2Dtypescript_2Ddefinitions.PlayerForm
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local itemConfig = ____cachedClasses.itemConfig
local ____HealthType = require("lua_modules.isaacscript-common.enums.HealthType")
local HealthType = ____HealthType.HealthType
local ____array = require("lua_modules.isaacscript-common.functions.array")
local getLastElement = ____array.getLastElement
local sumArray = ____array.sumArray
local ____bitwise = require("lua_modules.isaacscript-common.functions.bitwise")
local countSetBits = ____bitwise.countSetBits
local getKBitOfN = ____bitwise.getKBitOfN
local getNumBitsOfN = ____bitwise.getNumBitsOfN
local ____character = require("lua_modules.isaacscript-common.functions.character")
local getCharacterMaxHeartContainers = ____character.getCharacterMaxHeartContainers
local getCharacterName = ____character.getCharacterName
local isVanillaCharacter = ____character.isVanillaCharacter
local ____collectibles = require("lua_modules.isaacscript-common.functions.collectibles")
local getCollectibleMaxCharges = ____collectibles.getCollectibleMaxCharges
local ____collectibleSet = require("lua_modules.isaacscript-common.functions.collectibleSet")
local getCollectibleArray = ____collectibleSet.getCollectibleArray
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getPlayerIndexVanilla = ____playerIndex.getPlayerIndexVanilla
local getPlayers = ____playerIndex.getPlayers
local ____tears = require("lua_modules.isaacscript-common.functions.tears")
local addTearsStat = ____tears.addTearsStat
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local ____repeat = ____utils["repeat"]
--- Helper function to get an array containing the characters of all of the current players.
function ____exports.getCharacters(self)
    local players = getPlayers(nil)
    return __TS__ArrayMap(
        players,
        function(____, player) return player:GetPlayerType() end
    )
end
--- Returns the number of black hearts that the player has, excluding any soul hearts. For example,
-- if the player has one full black heart, one full soul heart, and one half black heart, this
-- function returns 3.
-- 
-- This is different from the `EntityPlayer.GetBlackHearts` method, since that returns a bitmask.
function ____exports.getPlayerBlackHearts(self, player)
    local blackHeartsBitmask = player:GetBlackHearts()
    local blackHeartBits = countSetBits(nil, blackHeartsBitmask)
    return blackHeartBits * 2
end
--- Returns the maximum heart containers that the provided player can have. Normally, this is 12, but
-- it can change depending on the character (e.g. Keeper) and other things (e.g. Mother's Kiss).
-- This function does not account for Broken Hearts; use the `getPlayerAvailableHeartSlots` helper
-- function for that.
function ____exports.getPlayerMaxHeartContainers(self, player)
    local character = player:GetPlayerType()
    local characterMaxHeartContainers = getCharacterMaxHeartContainers(nil, character)
    if character == PlayerType.MAGDALENE and player:HasCollectible(CollectibleType.BIRTHRIGHT) then
        local extraMaxHeartContainersFromBirthright = 6
        return characterMaxHeartContainers + extraMaxHeartContainersFromBirthright
    end
    if ____exports.isKeeper(nil, player) then
        local numMothersKisses = player:GetTrinketMultiplier(TrinketType.MOTHERS_KISS)
        local hasGreedsGullet = player:HasCollectible(CollectibleType.GREEDS_GULLET)
        local coins = player:GetNumCoins()
        local greedsGulletCoinContainers = hasGreedsGullet and math.floor(coins / 25) or 0
        return characterMaxHeartContainers + numMothersKisses + greedsGulletCoinContainers
    end
    return characterMaxHeartContainers
end
--- Returns the number of soul hearts that the player has, excluding any black hearts. For example,
-- if the player has one full black heart, one full soul heart, and one half black heart, this
-- function returns 2.
-- 
-- This is different from the `EntityPlayer.GetSoulHearts` method, since that returns the combined
-- number of soul hearts and black hearts.
function ____exports.getPlayerSoulHearts(self, player)
    local soulHearts = player:GetSoulHearts()
    local blackHearts = ____exports.getPlayerBlackHearts(nil, player)
    return soulHearts - blackHearts
end
--- Helper function to check if a player is a specific character (i.e. `PlayerType`).
-- 
-- This function is variadic, meaning that you can supply as many characters as you want to check
-- for. Returns true if the player is any of the supplied characters.
function ____exports.isCharacter(self, player, ...)
    local characters = {...}
    local characterSet = __TS__New(Set, characters)
    local character = player:GetPlayerType()
    return characterSet:has(character)
end
--- Helper function for detecting when a player is Keeper or Tainted Keeper. Useful for situations
-- where you want to know if the health is coin hearts, for example.
function ____exports.isKeeper(self, player)
    local character = player:GetPlayerType()
    return character == PlayerType.KEEPER or character == PlayerType.KEEPER_B
end
function ____exports.isModdedPlayer(self, player)
    return not ____exports.isVanillaPlayer(nil, player)
end
function isTaintedModded(self, player)
    local character = player:GetPlayerType()
    local name = player:GetName()
    local taintedCharacter = Isaac.GetPlayerTypeByName(name, true)
    return character == taintedCharacter
end
function ____exports.isVanillaPlayer(self, player)
    local character = player:GetPlayerType()
    return isVanillaCharacter(nil, character)
end
local STAT_CACHE_FLAGS_SET = __TS__New(Set, {
    CacheFlag.DAMAGE,
    CacheFlag.FIRE_DELAY,
    CacheFlag.SHOT_SPEED,
    CacheFlag.RANGE,
    CacheFlag.SPEED,
    CacheFlag.LUCK
})
function ____exports.addCollectibleCostume(self, player, collectibleType)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem == nil then
        return
    end
    player:AddCostume(itemConfigItem, false)
end
--- Helper function to add a stat to a player based on the `CacheFlag` provided. Call this function
-- from the EvaluateCache callback.
-- 
-- Note that for `CacheFlag.FIRE_DELAY`, the "amount" argument will be interpreted as the tear stat
-- to add (and not the amount to mutate `EntityPlayer.MaxFireDelay` by).
-- 
-- This function supports the following cache flags:
-- - CacheFlag.DAMAGE (1 << 0)
-- - CacheFlag.FIRE_DELAY (1 << 1)
-- - CacheFlag.SHOT_SPEED (1 << 2)
-- - CacheFlag.RANGE (1 << 3)
-- - CacheFlag.SPEED (1 << 4)
-- - CacheFlag.LUCK (1 << 10)
function ____exports.addStat(self, player, cacheFlag, amount)
    if not STAT_CACHE_FLAGS_SET:has(cacheFlag) then
        error("You cannot add a stat to a player with the cache flag of: " .. tostring(cacheFlag))
    end
    repeat
        local ____switch6 = cacheFlag
        local ____cond6 = ____switch6 == CacheFlag.DAMAGE
        if ____cond6 then
            do
                player.Damage = player.Damage + amount
                break
            end
        end
        ____cond6 = ____cond6 or ____switch6 == CacheFlag.FIRE_DELAY
        if ____cond6 then
            do
                addTearsStat(nil, player, amount)
                break
            end
        end
        ____cond6 = ____cond6 or ____switch6 == CacheFlag.SHOT_SPEED
        if ____cond6 then
            do
                player.ShotSpeed = player.ShotSpeed + amount
                break
            end
        end
        ____cond6 = ____cond6 or ____switch6 == CacheFlag.RANGE
        if ____cond6 then
            do
                player.TearHeight = player.TearHeight + amount
                break
            end
        end
        ____cond6 = ____cond6 or ____switch6 == CacheFlag.SPEED
        if ____cond6 then
            do
                player.MoveSpeed = player.MoveSpeed + amount
                break
            end
        end
        ____cond6 = ____cond6 or ____switch6 == CacheFlag.LUCK
        if ____cond6 then
            do
                player.Luck = player.Luck + amount
                break
            end
        end
    until true
end
function ____exports.addTrinketCostume(self, player, trinketType)
    local itemConfigTrinket = itemConfig:GetTrinket(trinketType)
    if itemConfigTrinket == nil then
        return
    end
    player:AddCostume(itemConfigTrinket, false)
end
function ____exports.anyPlayerHasCollectible(self, collectibleType)
    local players = getPlayers(nil)
    return __TS__ArraySome(
        players,
        function(____, player) return player:HasCollectible(collectibleType) end
    )
end
function ____exports.anyPlayerHasTrinket(self, trinketType)
    local players = getPlayers(nil)
    return __TS__ArraySome(
        players,
        function(____, player) return player:HasTrinket(trinketType) end
    )
end
--- Helper function to determine if the given character is present.
-- 
-- This function is variadic, meaning that you can supply as many characters as you want to check
-- for. Returns true if any of the characters supplied are present.
function ____exports.anyPlayerIs(self, ...)
    local matchingCharacters = {...}
    local matchingCharacterSet = __TS__New(Set, matchingCharacters)
    local characters = ____exports.getCharacters(nil)
    return __TS__ArraySome(
        characters,
        function(____, character) return matchingCharacterSet:has(character) end
    )
end
--- Helper function to determine if a player will destroy a rock/pot/skull if they walk over it.
-- 
-- The following situations allow for this to be true:
-- - the player has Leo (collectible 302)
-- - the player has Thunder Thighs (collectible 314)
-- - the player is under the effects of Mega Mush (collectible 625)
-- - the player has Stompy (transformation 13)
function ____exports.canPlayerCrushRocks(self, player)
    local effects = player:GetEffects()
    return player:HasCollectible(CollectibleType.LEO) or player:HasCollectible(CollectibleType.THUNDER_THIGHS) or effects:HasCollectibleEffect(CollectibleType.MEGA_MUSH) or player:HasPlayerForm(PlayerForm.STOMPY)
end
--- Returns whether or not all of the player's soul-heart-type hearts are black hearts.
-- 
-- Note that this function does not consider red heart containers.
-- 
-- For example:
-- 
-- - If the player has one black heart, this function would return true.
-- - If the player has one soul heart and two black hearts, this function would return false.
-- - If the player has no black hearts, this function will return false.
-- - If the player has one red heart container and three black hearts, this function would return
--   true.
function ____exports.doesPlayerHaveAllBlackHearts(self, player)
    local soulHearts = ____exports.getPlayerSoulHearts(nil, player)
    local blackHearts = ____exports.getPlayerBlackHearts(nil, player)
    return blackHearts > 0 and soulHearts == 0
end
--- Returns whether or not all of the player's soul-heart-type hearts are soul hearts.
-- 
-- Note that this function does not consider red heart containers.
-- 
-- For example:
-- 
-- - If the player has two soul hearts and one black heart, this function would return false.
-- - If the player has no soul hearts, this function will return false.
-- - If the player has one red heart container and three soul hearts, this function would return
--   true.
function ____exports.doesPlayerHaveAllSoulHearts(self, player)
    local soulHearts = ____exports.getPlayerSoulHearts(nil, player)
    local blackHearts = ____exports.getPlayerBlackHearts(nil, player)
    return soulHearts > 0 and blackHearts == 0
end
--- Helper function to find the active slot that the player has the corresponding collectible type
-- in. Returns undefined if the player does not have the collectible in any active slot.
function ____exports.getActiveItemSlot(self, player, collectibleType)
    local activeSlots = getEnumValues(nil, ActiveSlot)
    return __TS__ArrayFind(
        activeSlots,
        function(____, activeSlot)
            local activeItem = player:GetActiveItem(activeSlot)
            return activeItem == collectibleType
        end
    )
end
--- Helper function to get how long Azazel's Brimstone laser should be. You can pass either an
-- `EntityPlayer` object or a tear height stat.
-- 
-- The formula for calculating it is: 32 - 2.5 * player.TearHeight
function ____exports.getAzazelBrimstoneDistance(self, playerOrTearHeight)
    local tearHeight = tonumber(playerOrTearHeight)
    if tearHeight == nil then
        local player = playerOrTearHeight
        tearHeight = player.TearHeight
    end
    return 32 - 2.5 * tearHeight
end
function ____exports.getClosestPlayer(self, position)
    local closestPlayer = nil
    local closestDistance = math.huge
    for ____, player in ipairs(getPlayers(nil)) do
        local distance = position:Distance(player.Position)
        if distance < closestDistance then
            closestPlayer = player
            closestDistance = distance
        end
    end
    if closestPlayer == nil then
        error("Failed to find the closest player.")
    end
    return closestPlayer
end
--- Helper function to get an array of temporary effects for a player. This is helpful so that you
-- don't have to manually create an array from an `EffectsList` object.
function ____exports.getEffectsList(self, player)
    local effects = player:GetEffects()
    local effectsList = effects:GetEffectsList()
    local effectArray = {}
    do
        local i = 0
        while i < effectsList.Size do
            local effect = effectsList:Get(i)
            if effect ~= nil then
                effectArray[#effectArray + 1] = effect
            end
            i = i + 1
        end
    end
    return effectArray
end
--- Helper function to return the player with the highest ID, according to the `Isaac.GetPlayer`
-- method.
function ____exports.getFinalPlayer(self)
    local players = getPlayers(nil)
    local lastPlayer = getLastElement(nil, players)
    if lastPlayer == nil then
        error("Failed to get the final player since there were 0 players.")
    end
    return lastPlayer
end
--- Helper function to get the first player with the lowest frame count. Useful to find a freshly
-- spawned player after using items like Esau Jr. Don't use this function if two or more players
-- will be spawned on the same frame.
function ____exports.getNewestPlayer(self)
    local newestPlayer = nil
    local lowestFrame = math.huge
    for ____, player in ipairs(getPlayers(nil)) do
        if player.FrameCount < lowestFrame then
            newestPlayer = player
            lowestFrame = player.FrameCount
        end
    end
    if newestPlayer == nil then
        error("Failed to find the newest player.")
    end
    return newestPlayer
end
--- Returns the number of slots that the player has remaining for new heart containers, accounting
-- for broken hearts. For example, if the player is Judas and has 1 red heart containers and 2 full
-- soul hearts and 3 broken hearts, then this function would return 6 (i.e. 12 - 1 - 2 - 3).
function ____exports.getPlayerAvailableHeartSlots(self, player)
    local maxHeartContainers = ____exports.getPlayerMaxHeartContainers(nil, player)
    local effectiveMaxHearts = player:GetEffectiveMaxHearts()
    local normalAndBoneHeartContainers = effectiveMaxHearts / 2
    local soulHearts = player:GetSoulHearts()
    local soulHeartContainers = math.ceil(soulHearts / 2)
    local totalHeartContainers = normalAndBoneHeartContainers + soulHeartContainers
    local brokenHearts = player:GetBrokenHearts()
    local totalOccupiedHeartSlots = totalHeartContainers + brokenHearts
    return maxHeartContainers - totalOccupiedHeartSlots
end
--- Iterates over all players and checks if any are close enough to the specified position.
-- 
-- @returns The first player found when iterating upwards from index 0.
function ____exports.getPlayerCloserThan(self, position, distance)
    local players = getPlayers(nil)
    return __TS__ArrayFind(
        players,
        function(____, player) return player.Position:Distance(position) <= distance end
    )
end
--- Helper function to return the total amount of collectibles that a player has that match the
-- collectible type(s) provided.
-- 
-- This function is variadic, meaning that you can specify N collectible types.
function ____exports.getPlayerCollectibleCount(self, player, ...)
    local collectibleTypes = {...}
    local numCollectibles = 0
    for ____, collectibleType in ipairs(collectibleTypes) do
        numCollectibles = numCollectibles + player:GetCollectibleNum(collectibleType, true)
    end
    return numCollectibles
end
--- Iterates over every item in the game and returns a map containing the number of each item that
-- the player has.
function ____exports.getPlayerCollectibleMap(self, player)
    local collectibleArray = getCollectibleArray(nil)
    local collectibleMap = __TS__New(Map)
    for ____, collectibleType in ipairs(collectibleArray) do
        local collectibleNum = player:GetCollectibleNum(collectibleType, true)
        if collectibleNum > 0 then
            collectibleMap:set(collectibleType, collectibleNum)
        end
    end
    return collectibleMap
end
--- Helper function to get the player from a tear, laser, bomb, etc.
function ____exports.getPlayerFromTear(self, entity)
    if entity.Parent ~= nil then
        local player = entity.Parent:ToPlayer()
        if player ~= nil then
            return player
        end
        local familiar = entity.Parent:ToFamiliar()
        if familiar ~= nil and familiar.Variant == FamiliarVariant.INCUBUS then
            return familiar.Player
        end
    end
    if entity.SpawnerEntity ~= nil then
        local player = entity.SpawnerEntity:ToPlayer()
        if player ~= nil then
            return player
        end
        local familiar = entity.SpawnerEntity:ToFamiliar()
        if familiar ~= nil and familiar.Variant == FamiliarVariant.INCUBUS then
            return familiar.Player
        end
    end
    return nil
end
--- Returns the number of red hearts that the player has, excluding any rotten hearts. For example,
-- if the player has one full black heart, one full soul heart, and one half black heart, this
-- function returns 3.
-- 
-- This is different from the `EntityPlayer.GetHearts` method, since that returns a value that
-- includes rotten hearts.
function ____exports.getPlayerHearts(self, player)
    local rottenHearts = player:GetRottenHearts()
    local hearts = player:GetHearts()
    return hearts - rottenHearts * 2
end
--- Helper function that returns the type of the rightmost heart. This does not including golden
-- hearts or broken hearts, since they cannot be damaged directly.
function ____exports.getPlayerLastHeart(self, player)
    local hearts = player:GetHearts()
    local effectiveMaxHearts = player:GetEffectiveMaxHearts()
    local soulHearts = player:GetSoulHearts()
    local blackHearts = player:GetBlackHearts()
    local eternalHearts = player:GetEternalHearts()
    local boneHearts = player:GetBoneHearts()
    local rottenHearts = player:GetRottenHearts()
    local soulHeartSlots = soulHearts / 2
    local lastHeartIndex = boneHearts + soulHeartSlots - 1
    local isLastHeartBone = player:IsBoneHeart(lastHeartIndex)
    if isLastHeartBone then
        local isLastContainerEmpty = hearts <= effectiveMaxHearts - 2
        if isLastContainerEmpty then
            return HealthType.BONE
        end
        if rottenHearts > 0 then
            return HealthType.ROTTEN
        end
        if eternalHearts > 0 then
            return HealthType.ETERNAL
        end
        return HealthType.RED
    end
    if soulHearts > 0 then
        local numBits = getNumBitsOfN(nil, blackHearts)
        local finalBit = getKBitOfN(nil, numBits - 1, blackHearts)
        local isBlack = finalBit == 1
        if isBlack then
            return HealthType.BLACK
        end
        return HealthType.SOUL
    end
    if eternalHearts > 0 then
        return HealthType.ETERNAL
    end
    if rottenHearts > 0 then
        return HealthType.ROTTEN
    end
    return HealthType.RED
end
--- Helper function to get the proper name of the player. Use this instead of the
-- `EntityPlayer.GetName` method because it accounts for Blue Baby, Lazarus II, and Tainted
-- characters.
function ____exports.getPlayerName(self, player)
    local character = player:GetPlayerType()
    return ____exports.isModdedPlayer(nil, player) and player:GetName() or getCharacterName(nil, character)
end
--- Returns the combined value of all of the player's red hearts, soul/black hearts, and bone hearts,
-- minus the value of the player's rotten hearts.
-- 
-- This is equivalent to the number of hits that the player can currently take, but does not take
-- into account double damage from champion enemies and/or being on later floors. (For example, on
-- Womb 1, players who have 1 soul heart remaining would die in 1 hit to anything, even though this
-- function would report that they have 2 hits remaining.)
function ____exports.getPlayerNumHitsRemaining(self, player)
    local hearts = player:GetHearts()
    local soulHearts = player:GetSoulHearts()
    local boneHearts = player:GetBoneHearts()
    local eternalHearts = player:GetEternalHearts()
    local rottenHearts = player:GetRottenHearts()
    return hearts + soulHearts + boneHearts + eternalHearts - rottenHearts
end
--- Helper function to get all of the players that are a certain character.
-- 
-- This function is variadic, meaning that you can supply as many characters as you want to check
-- for. Returns true if any of the characters supplied are present.
function ____exports.getPlayersOfType(self, ...)
    local characters = {...}
    local charactersSet = __TS__New(Set, characters)
    local players = getPlayers(nil)
    return __TS__ArrayFilter(
        players,
        function(____, player)
            local character = player:GetPlayerType()
            return charactersSet:has(character)
        end
    )
end
--- Helper function to get only the players that have a certain collectible.
-- 
-- This function is variadic, meaning that you can supply as many collectible types as you want to
-- check for. It only returns the players that have all of the collectibles.
function ____exports.getPlayersWithCollectible(self, ...)
    local collectibleTypes = {...}
    local players = getPlayers(nil)
    return __TS__ArrayFilter(
        players,
        function(____, player) return __TS__ArrayEvery(
            collectibleTypes,
            function(____, collectibleType) return player:HasCollectible(collectibleType) end
        ) end
    )
end
--- Helper function to get only the players that have a certain trinket.
-- 
-- This function is variadic, meaning that you can supply as many trinket types as you want to check
-- for. It only returns the players that have all of the trinkets.
function ____exports.getPlayersWithTrinket(self, ...)
    local trinketTypes = {...}
    local players = getPlayers(nil)
    return __TS__ArrayFilter(
        players,
        function(____, player) return __TS__ArrayEvery(
            trinketTypes,
            function(____, trinketType) return player:HasTrinket(trinketType) end
        ) end
    )
end
--- Helper function to determine how many heart containers that Tainted Magdalene has that will not
-- be automatically depleted over time. By default, this is 2, but this function will return 4 so
-- that it is consistent with the `player.GetHearts` and `player.GetMaxHearts` methods.
-- 
-- If Tainted Magdalene has Birthright, she will gained an additional non-temporary heart container.
-- 
-- This function does not validate whether or not the provided player is Tainted Magdalene; that
-- should be accomplished before invoking this function.
function ____exports.getTaintedMagdaleneNonTemporaryMaxHearts(self, player)
    local maxHearts = player:GetMaxHearts()
    local hasBirthright = player:HasCollectible(CollectibleType.BIRTHRIGHT)
    local maxNonTemporaryMaxHearts = hasBirthright and 6 or 4
    return math.min(maxHearts, maxNonTemporaryMaxHearts)
end
--- Returns the total number of collectibles amongst all players. For example, if player 1 has 1 Sad
-- Onion and player 2 has 2 Sad Onions, then this function would return 3.
function ____exports.getTotalPlayerCollectibles(self, collectibleType)
    local players = getPlayers(nil)
    local numCollectiblesArray = __TS__ArrayMap(
        players,
        function(____, player) return player:GetCollectibleNum(collectibleType) end
    )
    return sumArray(nil, numCollectiblesArray)
end
--- After touching a white fire, a player will turn into The Lost until they clear a room.
function ____exports.hasLostCurse(self, player)
    local effects = player:GetEffects()
    return effects:HasNullEffect(NullItemID.LOST_CURSE)
end
--- Returns whether or not the player can hold an additional active item, beyond what they are
-- currently carrying. This takes the Schoolbag into account.
-- 
-- If the player is the Tainted Soul, this always returns false, since that character cannot pick up
-- items. (Only Tainted Forgotten can pick up items.)
function ____exports.hasOpenActiveItemSlot(self, player)
    if ____exports.isCharacter(nil, player, PlayerType.THE_SOUL_B) then
        return false
    end
    local activeItemPrimary = player:GetActiveItem(ActiveSlot.PRIMARY)
    local activeItemSecondary = player:GetActiveItem(ActiveSlot.SECONDARY)
    local hasSchoolbag = player:HasCollectible(CollectibleType.SCHOOLBAG)
    if hasSchoolbag then
        return activeItemPrimary == CollectibleType.NULL or activeItemSecondary == CollectibleType.NULL
    end
    return activeItemPrimary == CollectibleType.NULL
end
function ____exports.isActiveSlotEmpty(self, player, activeSlot)
    local activeCollectibleType = player:GetActiveItem(activeSlot)
    return activeCollectibleType == CollectibleType.NULL
end
--- Helper function for detecting when a player is Bethany or Tainted Bethany. This is useful if you
-- need to adjust UI elements to account for Bethany's soul charges or Tainted Bethany's blood
-- charges.
function ____exports.isBethany(self, player)
    local character = player:GetPlayerType()
    return character == PlayerType.BETHANY or character == PlayerType.BETHANY_B
end
--- Helper function to see if a damage source is from a player. Use this instead of comparing to the
-- entity directly because it takes familiars into account.
function ____exports.isDamageFromPlayer(self, damageSource)
    local player = damageSource:ToPlayer()
    if player ~= nil then
        return true
    end
    local indirectPlayer = ____exports.getPlayerFromTear(nil, damageSource)
    return indirectPlayer ~= nil
end
--- Helper function for detecting when a player is Eden or Tainted Eden. Useful for situations where
-- you want to know if the starting stats were randomized, for example.
function ____exports.isEden(self, player)
    local character = player:GetPlayerType()
    return character == PlayerType.EDEN or character == PlayerType.EDEN_B
end
function ____exports.isFirstPlayer(self, player)
    return getPlayerIndexVanilla(nil, player) == 0
end
--- Helper function for detecting when a player is Jacob or Esau. This will only match the
-- non-tainted versions of these characters.
function ____exports.isJacobOrEsau(self, player)
    local character = player:GetPlayerType()
    return character == PlayerType.JACOB or character == PlayerType.ESAU
end
--- Helper function for detecting when a player is The Lost or Tainted Lost.
function ____exports.isLost(self, player)
    local character = player:GetPlayerType()
    return character == PlayerType.THE_LOST or character == PlayerType.THE_LOST_B
end
--- Helper function for detecting if a player is one of the Tainted characters.
function ____exports.isTainted(self, player)
    local character = player:GetPlayerType()
    local ____isVanillaPlayer_result_0
    if ____exports.isVanillaPlayer(nil, player) then
        ____isVanillaPlayer_result_0 = character >= PlayerType.ISAAC_B
    else
        ____isVanillaPlayer_result_0 = isTaintedModded(nil, player)
    end
    return ____isVanillaPlayer_result_0
end
--- Helper function for detecting when a player is Tainted Lazarus or Dead Tainted Lazarus.
function ____exports.isTaintedLazarus(self, player)
    local character = player:GetPlayerType()
    return character == PlayerType.LAZARUS_B or character == PlayerType.LAZARUS_2_B
end
--- Helper function to add one or more collectibles to a player.
-- 
-- This function is variadic, meaning that you can supply as many collectible types as you want to
-- add.
function ____exports.playerAddCollectible(self, player, ...)
    local collectibleTypes = {...}
    for ____, collectibleType in ipairs(collectibleTypes) do
        player:AddCollectible(collectibleType)
    end
end
--- Helper function to check to see if a player has one or more collectibles.
-- 
-- This function is variadic, meaning that you can supply as many collectible types as you want to
-- check for. Returns true if the player has any of the supplied collectible types.
function ____exports.playerHasCollectible(self, player, ...)
    local collectibleTypes = {...}
    return __TS__ArraySome(
        collectibleTypes,
        function(____, collectibleType) return player:HasCollectible(collectibleType) end
    )
end
--- Helper function to remove a collectible costume from a player. Use this helper function to avoid
-- having to request the collectible from the item config.
function ____exports.removeCollectibleCostume(self, player, collectibleType)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem == nil then
        return
    end
    player:RemoveCostume(itemConfigItem)
end
--- Helper function to remove the Dead Eye multiplier from a player.
-- 
-- Note that each time the `EntityPlayer.ClearDeadEyeCharge` method is called, it only has a chance
-- of working, so this function calls it 100 times to be safe.
function ____exports.removeDeadEyeMultiplier(self, player)
    ____repeat(
        nil,
        100,
        function()
            player:ClearDeadEyeCharge()
        end
    )
end
--- Helper function to remove a trinket costume from a player. Use this helper function to avoid
-- having to request the trinket from the item config.
function ____exports.removeTrinketCostume(self, player, trinketType)
    local itemConfigTrinket = itemConfig:GetTrinket(trinketType)
    if itemConfigTrinket == nil then
        return
    end
    player:RemoveCostume(itemConfigTrinket)
end
--- Helper function to set an active collectible to a particular slot. This has different behavior
-- than calling the `player.AddCollectible` method with the `activeSlot` argument, because this
-- function will not shift existing items into the Schoolbag and it handles
-- `ActiveSlot.SLOT_POCKET2`.
-- 
-- Note that if an item is set to `ActiveSlot.SLOT_POCKET2`, it will disappear after being used and
-- will be automatically removed upon entering a new room.
-- 
-- @param player The player to give the item to.
-- @param collectibleType The collectible type of the item to give.
-- @param activeSlot The slot to set.
-- @param charge Optional. The argument of charges to set. If not specified, the item will be set
-- with maximum charges.
-- @param keepInPools Optional. Whether or not to remove the item from pools. Default is false.
function ____exports.setActiveItem(self, player, collectibleType, activeSlot, charge, keepInPools)
    if keepInPools == nil then
        keepInPools = false
    end
    local itemPool = game:GetItemPool()
    local primaryCollectibleType = player:GetActiveItem(ActiveSlot.PRIMARY)
    local primaryCharge = player:GetActiveCharge(ActiveSlot.PRIMARY)
    local secondaryCollectibleType = player:GetActiveItem(ActiveSlot.SECONDARY)
    if charge == nil then
        charge = getCollectibleMaxCharges(nil, collectibleType)
    end
    if not keepInPools then
        itemPool:RemoveCollectible(collectibleType)
    end
    repeat
        local ____switch123 = activeSlot
        local ____cond123 = ____switch123 == ActiveSlot.PRIMARY
        if ____cond123 then
            do
                if primaryCollectibleType ~= CollectibleType.NULL then
                    player:RemoveCollectible(primaryCollectibleType)
                end
                player:AddCollectible(collectibleType, charge, false)
                break
            end
        end
        ____cond123 = ____cond123 or ____switch123 == ActiveSlot.SECONDARY
        if ____cond123 then
            do
                if primaryCollectibleType ~= CollectibleType.NULL then
                    player:RemoveCollectible(primaryCollectibleType)
                end
                if secondaryCollectibleType ~= CollectibleType.NULL then
                    player:RemoveCollectible(secondaryCollectibleType)
                end
                player:AddCollectible(secondaryCollectibleType, charge, false)
                if primaryCollectibleType ~= CollectibleType.NULL then
                    player:AddCollectible(primaryCollectibleType, primaryCharge, false)
                end
                break
            end
        end
        ____cond123 = ____cond123 or ____switch123 == ActiveSlot.POCKET
        if ____cond123 then
            do
                player:SetPocketActiveItem(collectibleType, activeSlot, keepInPools)
                player:SetActiveCharge(charge, activeSlot)
                break
            end
        end
        ____cond123 = ____cond123 or ____switch123 == ActiveSlot.POCKET_SINGLE_USE
        if ____cond123 then
            do
                player:SetPocketActiveItem(collectibleType, activeSlot, keepInPools)
                break
            end
        end
    until true
end
--- Helper function to blindfold the player by using a hack with the challenge variable.
-- 
-- The method used in this function was discovered by im_tem.
-- 
-- @param player The player to apply or remove the blindfold state from.
-- @param enabled Whether or not to apply or remove the blindfold.
-- @param modifyCostume Optional. Whether to add or remove the blindfold costume. Default is true.
function ____exports.setBlindfold(self, player, enabled, modifyCostume)
    if modifyCostume == nil then
        modifyCostume = true
    end
    local character = player:GetPlayerType()
    local challenge = Isaac.GetChallenge()
    if enabled then
        game.Challenge = Challenge.SOLAR_SYSTEM
        player:ChangePlayerType(character)
        game.Challenge = challenge
        if not modifyCostume then
            player:TryRemoveNullCostume(NullItemID.BLINDFOLD)
        end
    else
        game.Challenge = Challenge.NULL
        player:ChangePlayerType(character)
        game.Challenge = challenge
        if modifyCostume then
            player:TryRemoveNullCostume(NullItemID.BLINDFOLD)
        end
    end
end
--- Helper function to use an active item without showing an animation, keeping the item, or adding
-- any costumes.
function ____exports.useActiveItemTemp(self, player, collectibleType)
    player:UseActiveItem(
        collectibleType,
        false,
        false,
        true,
        false,
        -1
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.enums.HealthType"] = function(...) 
local ____exports = {}
--- This represents the type of health that is either given or taken away from a player. Note that we
-- cannot use the `HeartSubType` enum for this purpose this since it has no value for broken hearts
-- or max hearts.
____exports.HealthType = {}
____exports.HealthType.RED = 0
____exports.HealthType[____exports.HealthType.RED] = "RED"
____exports.HealthType.SOUL = 1
____exports.HealthType[____exports.HealthType.SOUL] = "SOUL"
____exports.HealthType.ETERNAL = 2
____exports.HealthType[____exports.HealthType.ETERNAL] = "ETERNAL"
____exports.HealthType.BLACK = 3
____exports.HealthType[____exports.HealthType.BLACK] = "BLACK"
____exports.HealthType.GOLDEN = 4
____exports.HealthType[____exports.HealthType.GOLDEN] = "GOLDEN"
____exports.HealthType.BONE = 5
____exports.HealthType[____exports.HealthType.BONE] = "BONE"
____exports.HealthType.ROTTEN = 6
____exports.HealthType[____exports.HealthType.ROTTEN] = "ROTTEN"
____exports.HealthType.BROKEN = 7
____exports.HealthType[____exports.HealthType.BROKEN] = "BROKEN"
____exports.HealthType.MAX_HEARTS = 8
____exports.HealthType[____exports.HealthType.MAX_HEARTS] = "MAX_HEARTS"
return ____exports
 end,
["lua_modules.isaacscript-common.functions.character"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local ____constantsFirstLast = require("lua_modules.isaacscript-common.constantsFirstLast")
local LAST_VANILLA_CHARACTER = ____constantsFirstLast.LAST_VANILLA_CHARACTER
local ____characterNames = require("lua_modules.isaacscript-common.objects.characterNames")
local CHARACTER_NAMES = ____characterNames.CHARACTER_NAMES
local ____charactersThatStartWithAnActiveItemSet = require("lua_modules.isaacscript-common.sets.charactersThatStartWithAnActiveItemSet")
local CHARACTERS_THAT_START_WITH_AN_ACTIVE_ITEM_SET = ____charactersThatStartWithAnActiveItemSet.CHARACTERS_THAT_START_WITH_AN_ACTIVE_ITEM_SET
local ____charactersWithBlackHeartFromEternalHeartSet = require("lua_modules.isaacscript-common.sets.charactersWithBlackHeartFromEternalHeartSet")
local CHARACTERS_WITH_BLACK_HEART_FROM_ETERNAL_HEART_SET = ____charactersWithBlackHeartFromEternalHeartSet.CHARACTERS_WITH_BLACK_HEART_FROM_ETERNAL_HEART_SET
local ____charactersWithFreeDevilDealsSet = require("lua_modules.isaacscript-common.sets.charactersWithFreeDevilDealsSet")
local CHARACTERS_WITH_FREE_DEVIL_DEALS_SET = ____charactersWithFreeDevilDealsSet.CHARACTERS_WITH_FREE_DEVIL_DEALS_SET
local ____charactersWithNoRedHeartsSet = require("lua_modules.isaacscript-common.sets.charactersWithNoRedHeartsSet")
local CHARACTERS_WITH_NO_RED_HEARTS_SET = ____charactersWithNoRedHeartsSet.CHARACTERS_WITH_NO_RED_HEARTS_SET
local ____charactersWithNoSoulHeartsSet = require("lua_modules.isaacscript-common.sets.charactersWithNoSoulHeartsSet")
local CHARACTERS_WITH_NO_SOUL_HEARTS_SET = ____charactersWithNoSoulHeartsSet.CHARACTERS_WITH_NO_SOUL_HEARTS_SET
local ____lostStyleCharactersSet = require("lua_modules.isaacscript-common.sets.lostStyleCharactersSet")
local LOST_STYLE_CHARACTERS_SET = ____lostStyleCharactersSet.LOST_STYLE_CHARACTERS_SET
function ____exports.isModdedCharacter(self, character)
    return not ____exports.isVanillaCharacter(nil, character)
end
function ____exports.isVanillaCharacter(self, character)
    return character <= LAST_VANILLA_CHARACTER
end
--- Helper function to determine if the given character can have red heart containers. Returns true
-- for characters like Isaac, Magdalene, or Cain. Returns true for Keeper and Tainted Keeper, even
-- though coin containers are not technically the same as red heart containers. Returns false for
-- characters like Blue Baby. Returns false for The Lost and Tainted Lost.
function ____exports.characterCanHaveRedHearts(self, character)
    return not CHARACTERS_WITH_NO_RED_HEARTS_SET:has(character)
end
--- Helper function to determine if the given character can have soul hearts. Returns true for
-- characters like Isaac, Magdalene, or Cain. Returns false for characters like Bethany. Returns
-- false for The Lost and Tainted Lost.
function ____exports.characterCanHaveSoulHearts(self, character)
    return not CHARACTERS_WITH_NO_SOUL_HEARTS_SET:has(character)
end
--- Helper function for determining whether the given character can take free Devil Deals. (e.g. The
-- Lost, Tainted Lost, etc.)
function ____exports.characterCanTakeFreeDevilDeals(self, character)
    return CHARACTERS_WITH_FREE_DEVIL_DEALS_SET:has(character)
end
--- Normally, characters get a red heart container upon reaching a new floor with an eternal heart,
-- but some characters grant a black heart instead. Returns true for Dark Judas and Tainted Judas.
-- Otherwise, returns false.
function ____exports.characterGetsBlackHeartFromEternalHeart(self, character)
    return CHARACTERS_WITH_BLACK_HEART_FROM_ETERNAL_HEART_SET:has(character)
end
--- Helper function to determine if the specified character starts with an active item.
-- 
-- For the purposes of this function, the save file is considered to be fully unlocked (e.g. Isaac
-- is considered to starts with the D6, but this is not the case on a brand new save file).
function ____exports.characterStartsWithActiveItem(self, character)
    return CHARACTERS_THAT_START_WITH_AN_ACTIVE_ITEM_SET:has(character)
end
--- - Most characters have a 56 frame death animation (i.e. the "Death" animation).
-- - The Lost and Tainted Lost have a 38 frame death animation (i.e. the "LostDeath" animation).
-- - Tainted Forgotten have a 20 frame death animation (i.e. the "ForgottenDeath" animation).
function ____exports.getCharacterDeathAnimationName(self, character)
    if LOST_STYLE_CHARACTERS_SET:has(character) then
        return "LostDeath"
    end
    if character == PlayerType.THE_FORGOTTEN_B then
        return "ForgottenDeath"
    end
    return "Death"
end
--- Returns the maximum heart containers that the provided character can have. Normally, this is 12,
-- but with Keeper it is 3, and with Tainted Keeper it is 2. This does not account for Birthright or
-- Mother's Kiss; use the `getPlayerMaxHeartContainers` helper function for that.
function ____exports.getCharacterMaxHeartContainers(self, character)
    if character == PlayerType.KEEPER then
        return 3
    end
    if character == PlayerType.THE_FORGOTTEN then
        return 6
    end
    if character == PlayerType.THE_SOUL then
        return 6
    end
    if character == PlayerType.KEEPER_B then
        return 2
    end
    return 12
end
--- Helper function to get the name of a character. Returns "Unknown" for modded characters.
function ____exports.getCharacterName(self, character)
    if ____exports.isModdedCharacter(nil, character) then
        return "Unknown"
    end
    return CHARACTER_NAMES[character]
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.characterNames"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
____exports.CHARACTER_NAMES = {
    [PlayerType.POSSESSOR] = "Possessor",
    [PlayerType.ISAAC] = "Isaac",
    [PlayerType.MAGDALENE] = "Magdalene",
    [PlayerType.CAIN] = "Cain",
    [PlayerType.JUDAS] = "Judas",
    [PlayerType.BLUE_BABY] = "Blue Baby",
    [PlayerType.EVE] = "Eve",
    [PlayerType.SAMSON] = "Samson",
    [PlayerType.AZAZEL] = "Azazel",
    [PlayerType.LAZARUS] = "Lazarus",
    [PlayerType.EDEN] = "Eden",
    [PlayerType.THE_LOST] = "The Lost",
    [PlayerType.LAZARUS_2] = "Lazarus II",
    [PlayerType.BLACK_JUDAS] = "Dark Judas",
    [PlayerType.LILITH] = "Lilith",
    [PlayerType.KEEPER] = "Keeper",
    [PlayerType.APOLLYON] = "Apollyon",
    [PlayerType.THE_FORGOTTEN] = "The Forgotten",
    [PlayerType.THE_SOUL] = "The Soul",
    [PlayerType.BETHANY] = "Bethany",
    [PlayerType.JACOB] = "Jacob",
    [PlayerType.ESAU] = "Esau",
    [PlayerType.ISAAC_B] = "Tainted Isaac",
    [PlayerType.MAGDALENE_B] = "Tainted Magdalene",
    [PlayerType.CAIN_B] = "Tainted Cain",
    [PlayerType.JUDAS_B] = "Tainted Judas",
    [PlayerType.BLUE_BABY_B] = "Tainted Blue Baby",
    [PlayerType.EVE_B] = "Tainted Eve",
    [PlayerType.SAMSON_B] = "Tainted Samson",
    [PlayerType.AZAZEL_B] = "Tainted Azazel",
    [PlayerType.LAZARUS_B] = "Tainted Lazarus",
    [PlayerType.EDEN_B] = "Tainted Eden",
    [PlayerType.THE_LOST_B] = "Tainted Lost",
    [PlayerType.LILITH_B] = "Tainted Lilith",
    [PlayerType.KEEPER_B] = "Tainted Keeper",
    [PlayerType.APOLLYON_B] = "Tainted Apollyon",
    [PlayerType.THE_FORGOTTEN_B] = "Tainted Forgotten",
    [PlayerType.BETHANY_B] = "Tainted Bethany",
    [PlayerType.JACOB_B] = "Tainted Jacob",
    [PlayerType.LAZARUS_2_B] = "Dead Tainted Lazarus",
    [PlayerType.JACOB_2_B] = "Dead Tainted Jacob",
    [PlayerType.THE_SOUL_B] = "Tainted Soul"
}
return ____exports
 end,
["lua_modules.isaacscript-common.sets.charactersThatStartWithAnActiveItemSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
____exports.CHARACTERS_THAT_START_WITH_AN_ACTIVE_ITEM_SET = __TS__New(Set, {
    PlayerType.ISAAC,
    PlayerType.MAGDALENE,
    PlayerType.JUDAS,
    PlayerType.BLUE_BABY,
    PlayerType.EVE,
    PlayerType.EDEN,
    PlayerType.THE_LOST,
    PlayerType.LILITH,
    PlayerType.KEEPER,
    PlayerType.APOLLYON,
    PlayerType.EDEN_B
})
return ____exports
 end,
["lua_modules.isaacscript-common.sets.charactersWithBlackHeartFromEternalHeartSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
____exports.CHARACTERS_WITH_BLACK_HEART_FROM_ETERNAL_HEART_SET = __TS__New(Set, {PlayerType.BLACK_JUDAS, PlayerType.JUDAS_B})
return ____exports
 end,
["lua_modules.isaacscript-common.sets.charactersWithFreeDevilDealsSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
____exports.CHARACTERS_WITH_FREE_DEVIL_DEALS_SET = __TS__New(Set, {PlayerType.THE_LOST, PlayerType.THE_LOST_B, PlayerType.JACOB_2_B})
return ____exports
 end,
["lua_modules.isaacscript-common.sets.charactersWithNoRedHeartsSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
--- The set of characters where red heart containers will be turned into soul hearts (e.g. Blue
-- Baby). This includes The Lost and Tainted Lost. This does not include Keeper or Tainted Keeper.
____exports.CHARACTERS_WITH_NO_RED_HEARTS_SET = __TS__New(Set, {
    PlayerType.BLUE_BABY,
    PlayerType.THE_LOST,
    PlayerType.BLACK_JUDAS,
    PlayerType.JUDAS_B,
    PlayerType.BLUE_BABY_B,
    PlayerType.THE_LOST_B,
    PlayerType.THE_FORGOTTEN_B,
    PlayerType.BETHANY_B
})
return ____exports
 end,
["lua_modules.isaacscript-common.sets.charactersWithNoSoulHeartsSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
--- The set of characters where soul hearts will be automatically stripped away (e.g. Bethany). This
-- includes The Lost and Tainted Lost.
____exports.CHARACTERS_WITH_NO_SOUL_HEARTS_SET = __TS__New(Set, {
    PlayerType.THE_LOST,
    PlayerType.KEEPER,
    PlayerType.BETHANY,
    PlayerType.THE_LOST_B,
    PlayerType.KEEPER_B
})
return ____exports
 end,
["lua_modules.isaacscript-common.sets.lostStyleCharactersSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
--- This is the set of characters that look like The Lost and play the "LostDeath" animation when
-- they die.
____exports.LOST_STYLE_CHARACTERS_SET = __TS__New(Set, {
    PlayerType.THE_LOST,
    PlayerType.THE_SOUL,
    PlayerType.THE_LOST_B,
    PlayerType.JACOB_2_B,
    PlayerType.THE_SOUL_B
})
return ____exports
 end,
["lua_modules.isaacscript-common.functions.collectibleSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArraySort = ____lualib.__TS__ArraySort
local ____exports = {}
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local itemConfig = ____cachedClasses.itemConfig
local ____constantsFirstLast = require("lua_modules.isaacscript-common.constantsFirstLast")
local FIRST_COLLECTIBLE_TYPE = ____constantsFirstLast.FIRST_COLLECTIBLE_TYPE
local LAST_COLLECTIBLE_TYPE = ____constantsFirstLast.LAST_COLLECTIBLE_TYPE
local LAST_VANILLA_COLLECTIBLE_TYPE = ____constantsFirstLast.LAST_VANILLA_COLLECTIBLE_TYPE
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local irange = ____utils.irange
local ALL_COLLECTIBLES_ARRAY = {}
local VANILLA_COLLECTIBLES_ARRAY = {}
local MODDED_COLLECTIBLES_ARRAY = {}
local ALL_COLLECTIBLES_SET = __TS__New(Set)
local VANILLA_COLLECTIBLES_SET = __TS__New(Set)
local MODDED_COLLECTIBLES_SET = __TS__New(Set)
local function initCollectibleArraysAndSets(self)
    if #ALL_COLLECTIBLES_ARRAY ~= 0 then
        return
    end
    local collectibleTypeRange = irange(nil, FIRST_COLLECTIBLE_TYPE, LAST_COLLECTIBLE_TYPE)
    for ____, collectibleType in ipairs(collectibleTypeRange) do
        do
            local itemConfigItem = itemConfig:GetCollectible(collectibleType)
            if itemConfigItem == nil then
                goto __continue4
            end
            ALL_COLLECTIBLES_ARRAY[#ALL_COLLECTIBLES_ARRAY + 1] = collectibleType
            if collectibleType <= LAST_VANILLA_COLLECTIBLE_TYPE then
                VANILLA_COLLECTIBLES_ARRAY[#VANILLA_COLLECTIBLES_ARRAY + 1] = collectibleType
            else
                MODDED_COLLECTIBLES_ARRAY[#MODDED_COLLECTIBLES_ARRAY + 1] = collectibleType
            end
        end
        ::__continue4::
    end
    __TS__ArraySort(ALL_COLLECTIBLES_ARRAY)
    __TS__ArraySort(VANILLA_COLLECTIBLES_ARRAY)
    __TS__ArraySort(MODDED_COLLECTIBLES_ARRAY)
    for ____, collectibleType in ipairs(ALL_COLLECTIBLES_ARRAY) do
        ALL_COLLECTIBLES_SET:add(collectibleType)
    end
    for ____, collectibleType in ipairs(VANILLA_COLLECTIBLES_ARRAY) do
        VANILLA_COLLECTIBLES_SET:add(collectibleType)
    end
    for ____, collectibleType in ipairs(MODDED_COLLECTIBLES_ARRAY) do
        MODDED_COLLECTIBLES_SET:add(collectibleType)
    end
end
--- Returns an array containing every valid collectible type in the game, including modded
-- collectibles.
-- 
-- Use this if you need to iterate over the collectibles in order. If you need to do O(1) lookups,
-- then use the `getCollectibleArray` helper function instead.
function ____exports.getCollectibleArray(self)
    initCollectibleArraysAndSets(nil)
    return ALL_COLLECTIBLES_ARRAY
end
--- Returns a set containing every valid collectible type in the game, including modded collectibles.
-- 
-- Use this if you need to do O(1) lookups. If you need to iterate over the collectibles in order,
-- then use the `getCollectibleArray` helper function instead.
function ____exports.getCollectibleSet(self)
    initCollectibleArraysAndSets(nil)
    return ALL_COLLECTIBLES_SET
end
--- Returns an array containing every modded collectible type in the game.
-- 
-- Use this if you need to iterate over the collectibles in order. If you need to do O(1) lookups,
-- then use the `getModdedCollectibleSet` helper function instead.
function ____exports.getModdedCollectibleArray(self)
    initCollectibleArraysAndSets(nil)
    return MODDED_COLLECTIBLES_ARRAY
end
--- Returns a set containing every modded collectible type in the game.
-- 
-- Use this if you need to do O(1) lookups. If you need to iterate over the collectibles in order,
-- then use the `getModdedCollectibleArray` helper function instead.
function ____exports.getModdedCollectibleSet(self)
    initCollectibleArraysAndSets(nil)
    return MODDED_COLLECTIBLES_SET
end
--- Returns an array containing every valid vanilla collectible type in the game.
-- 
-- Use this if you need to iterate over the collectibles in order. If you need to do O(1) lookups,
-- then use the `getVanillaCollectibleSet` helper function instead.
function ____exports.getVanillaCollectibleArray(self)
    initCollectibleArraysAndSets(nil)
    return VANILLA_COLLECTIBLES_ARRAY
end
--- Returns a set containing every valid vanilla collectible type in the game.
-- 
-- Use this if you need to do O(1) lookups. If you need to iterate over the collectibles in order,
-- then use the `getVanillaCollectibleArray` helper function instead.
function ____exports.getVanillaCollectibleSet(self)
    initCollectibleArraysAndSets(nil)
    return VANILLA_COLLECTIBLES_SET
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.playerIndex"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArrayFind = ____lualib.__TS__ArrayFind
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local ____exports = {}
local getPlayerIndexCollectibleType, DEFAULT_COLLECTIBLE_TYPE, EXCLUDED_CHARACTERS
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
--- Helper function to get every player with no restrictions, by using `Game.GetNumPlayers` and
-- `Isaac.GetPlayer`.
-- 
-- This function is almost never what you want to use. For most purposes, use the `getPlayers`
-- helper function instead to get a filtered list of players.
function ____exports.getAllPlayers(self)
    local numPlayers = game:GetNumPlayers()
    local players = {}
    do
        local i = 0
        while i < numPlayers do
            local player = Isaac.GetPlayer(i)
            players[#players + 1] = player
            i = i + 1
        end
    end
    return players
end
--- Mods often have to track variables relating to the player. In naive mods, information will only
-- be stored about the first player. However, in order to be robust, mods must handle up to 4
-- players playing at the same time. This means that information must be stored on a map data
-- structure. Finding a good index for these types of map data structures is difficult:
-- 
-- - We cannot use the index from `Isaac.GetPlayer(i)` since this fails in the case where there are
--   two players and the first player leaves the run.
-- - We cannot use `EntityPlayer.ControllerIndex` as an index because it fails in the case of Jacob
--   & Esau or Tainted Forgotten. It also fails in the case of a player changing their controls
--   mid-run.
-- - We cannot use `EntityPlayer.GetData().index` because it does not persist across saving and
--   continuing.
-- - We cannot use `GetPtrHash()` as an index because it does not persist across exiting and
--   relaunching the game.
-- - We cannot use `EntityPlayer.InitSeed` because it is not consistent with additional players
--   beyond the first.
-- 
-- Instead, we use the `EntityPlayer.GetCollectibleRNG` method with an arbitrary value of Sad Onion
-- (1). This works even if the player does not have any Sad Onions.
-- 
-- Since the RNG value is the same for both Tainted Lazarus and Dead Tainted Lazarus, we revert to
-- using the RNG of The Inner Eye (2) for Dead Tainted Lazarus.
-- 
-- Note that by default, this returns the same index for both The Forgotten and The Soul. (Even
-- though they are technically different characters, they share the same inventory and InitSeed.) If
-- this is not desired, pass true for the `differentiateForgottenAndSoul` argument, and the RNG of
-- Spoon Bender (3) will be used for The Soul.
function ____exports.getPlayerIndex(self, player, differentiateForgottenAndSoul)
    if differentiateForgottenAndSoul == nil then
        differentiateForgottenAndSoul = false
    end
    local playerToUse = player
    local isSubPlayer = player:IsSubPlayer()
    if isSubPlayer then
        local playerParent = ____exports.getSubPlayerParent(nil, player)
        if playerParent ~= nil then
            playerToUse = playerParent
        end
    end
    local collectibleType = getPlayerIndexCollectibleType(nil, player, differentiateForgottenAndSoul)
    local collectibleRNG = playerToUse:GetCollectibleRNG(collectibleType)
    local seed = collectibleRNG:GetSeed()
    return seed
end
function getPlayerIndexCollectibleType(self, player, differentiateForgottenAndSoul)
    local character = player:GetPlayerType()
    repeat
        local ____switch10 = character
        local ____cond10 = ____switch10 == PlayerType.THE_SOUL
        if ____cond10 then
            do
                return differentiateForgottenAndSoul and CollectibleType.SPOON_BENDER or DEFAULT_COLLECTIBLE_TYPE
            end
        end
        ____cond10 = ____cond10 or ____switch10 == PlayerType.LAZARUS_2_B
        if ____cond10 then
            do
                return CollectibleType.INNER_EYE
            end
        end
        do
            do
                return DEFAULT_COLLECTIBLE_TYPE
            end
        end
    until true
end
--- This function always excludes players with a non-undefined parent, since they are not real
-- players (e.g. the Strawman Keeper).
-- 
-- If this is not desired, use the `getAllPlayers` helper function instead.
-- 
-- @param performCharacterExclusions Whether or not to exclude characters that are not directly
-- controlled by the player (i.e. Esau & Tainted Soul). Default is
-- false.
function ____exports.getPlayers(self, performCharacterExclusions)
    if performCharacterExclusions == nil then
        performCharacterExclusions = false
    end
    local players = ____exports.getAllPlayers(nil)
    local nonChildPlayers = __TS__ArrayFilter(
        players,
        function(____, player) return not ____exports.isChildPlayer(nil, player) end
    )
    local nonChildPlayersFiltered = __TS__ArrayFilter(
        nonChildPlayers,
        function(____, player)
            local character = player:GetPlayerType()
            return not EXCLUDED_CHARACTERS:has(character)
        end
    )
    return performCharacterExclusions and nonChildPlayersFiltered or nonChildPlayers
end
--- Helper function to get a parent `EntityPlayer` object for a given `EntitySubPlayer` object. This
-- is useful because calling the `EntityPlayer.GetSubPlayer` method on a sub-player object will
-- return undefined.
function ____exports.getSubPlayerParent(self, subPlayer)
    local subPlayerPtrHash = GetPtrHash(subPlayer)
    local players = ____exports.getPlayers(nil)
    return __TS__ArrayFind(
        players,
        function(____, player)
            local thisPlayerSubPlayer = player:GetSubPlayer()
            if thisPlayerSubPlayer == nil then
                return false
            end
            local thisPlayerSubPlayerPtrHash = GetPtrHash(thisPlayerSubPlayer)
            return thisPlayerSubPlayerPtrHash == subPlayerPtrHash
        end
    )
end
--- Some players are "child" players, meaning that they have a non-undefined Parent property. (For
-- example, the Strawman Keeper.)
function ____exports.isChildPlayer(self, player)
    return player.Parent ~= nil
end
DEFAULT_COLLECTIBLE_TYPE = CollectibleType.SAD_ONION
EXCLUDED_CHARACTERS = __TS__New(Set, {PlayerType.ESAU, PlayerType.THE_SOUL_B})
function ____exports.getPlayerFromIndex(self, playerIndex)
    local players = ____exports.getPlayers(nil)
    return __TS__ArrayFind(
        players,
        function(____, player) return ____exports.getPlayerIndex(nil, player) == playerIndex end
    )
end
--- Helper function to return the index of this player with respect to the output of the
-- `Isaac.GetPlayer` method.
function ____exports.getPlayerIndexVanilla(self, playerToFind)
    local numPlayers = game:GetNumPlayers()
    local playerToFindHash = GetPtrHash(playerToFind)
    do
        local i = 0
        while i < numPlayers do
            local player = Isaac.GetPlayer(i)
            local playerHash = GetPtrHash(player)
            if playerHash == playerToFindHash then
                return i
            end
            i = i + 1
        end
    end
    return nil
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.tears"] = function(...) 
local ____exports = {}
--- - The `EntityPlayer` object stores a player's tear rate in the `MaxFireDelay` attribute. This is
--   equivalent to how many tears the player can shoot per frame.
-- - If you already have a "tears" stat and you want to convert it back to MaxFireDelay, then use
--   this function.
-- - In this context, the "tears stat" represents what is shown on the in-game stat UI.
function ____exports.getFireDelay(self, tearsStat)
    return math.max(30 / tearsStat - 1, -0.9999)
end
--- - The `EntityPlayer` object stores a player's tear rate in the `MaxFireDelay` attribute. This is
--   equivalent to how many tears the player can shoot per frame.
-- - If you want to convert this to the "tears" stat that is shown on the in-game stat UI, then use
--   this function.
function ____exports.getTearsStat(self, fireDelay)
    return 30 / (fireDelay + 1)
end
--- - Converts the specified amount of tears stat into MaxFireDelay and adds it to the player.
-- - This function should only be used inside the EvaluateCache callback.
-- - In this context, the "tears stat" represents what is shown on the in-game stat UI.
function ____exports.addTearsStat(self, player, tearsStat)
    local existingTearsStat = ____exports.getTearsStat(nil, player.MaxFireDelay)
    local newTearsStat = existingTearsStat + tearsStat
    local newMaxFireDelay = ____exports.getFireDelay(nil, newTearsStat)
    player.MaxFireDelay = newMaxFireDelay
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.roomShape"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local ____exports = {}
local ____roomShapeBounds = require("lua_modules.isaacscript-common.objects.roomShapeBounds")
local ROOM_SHAPE_BOUNDS = ____roomShapeBounds.ROOM_SHAPE_BOUNDS
local ____roomShapeLayoutSizes = require("lua_modules.isaacscript-common.objects.roomShapeLayoutSizes")
local ROOM_SHAPE_LAYOUT_SIZES = ____roomShapeLayoutSizes.ROOM_SHAPE_LAYOUT_SIZES
local ____roomShapeToBottomRightPosition = require("lua_modules.isaacscript-common.objects.roomShapeToBottomRightPosition")
local ROOM_SHAPE_TO_BOTTOM_RIGHT_POSITION = ____roomShapeToBottomRightPosition.ROOM_SHAPE_TO_BOTTOM_RIGHT_POSITION
local ____roomShapeToDoorSlotsToGridIndexDelta = require("lua_modules.isaacscript-common.objects.roomShapeToDoorSlotsToGridIndexDelta")
local ROOM_SHAPE_TO_DOOR_SLOTS_TO_GRID_INDEX_DELTA = ____roomShapeToDoorSlotsToGridIndexDelta.ROOM_SHAPE_TO_DOOR_SLOTS_TO_GRID_INDEX_DELTA
local ____roomShapeToGridWidth = require("lua_modules.isaacscript-common.objects.roomShapeToGridWidth")
local ROOM_SHAPE_TO_GRID_WIDTH = ____roomShapeToGridWidth.ROOM_SHAPE_TO_GRID_WIDTH
local ____roomShapeToTopLeftPosition = require("lua_modules.isaacscript-common.objects.roomShapeToTopLeftPosition")
local ROOM_SHAPE_TO_TOP_LEFT_POSITION = ____roomShapeToTopLeftPosition.ROOM_SHAPE_TO_TOP_LEFT_POSITION
local ____roomShapeVolumes = require("lua_modules.isaacscript-common.objects.roomShapeVolumes")
local ROOM_SHAPE_VOLUMES = ____roomShapeVolumes.ROOM_SHAPE_VOLUMES
local ____LRoomShapesSet = require("lua_modules.isaacscript-common.sets.LRoomShapesSet")
local L_ROOM_SHAPES_SET = ____LRoomShapesSet.L_ROOM_SHAPES_SET
--- Helper function to get the grid index delta that a door out of the given room shape would lead
-- to. For example, if you went through the bottom door in a room of `RoomShape.SHAPE_1x2`, you
-- would end up in a room with a grid index that is +26 units from the `SafeGridIndex` of where you
-- started.
function ____exports.getGridIndexDelta(self, roomShape, doorSlot)
    local doorSlotToGridIndexMap = ROOM_SHAPE_TO_DOOR_SLOTS_TO_GRID_INDEX_DELTA[roomShape]
    return doorSlotToGridIndexMap:get(doorSlot)
end
--- Helper function to get the grid position of the bottom-right tile of a given room shape.
-- 
-- "Vector(0, 0)" corresponds to the top left tile of a room, not including the walls. (The top-left
-- wall would be at "Vector(-1, -1)".)
function ____exports.getRoomShapeBottomRightPosition(self, roomShape)
    return ROOM_SHAPE_TO_BOTTOM_RIGHT_POSITION[roomShape]
end
--- Helper function to get the bounds of a room shape, which are a box representing its contents.
-- This does not include the tiles that the walls are on. L rooms use the same bounds as a 2x2 room.
function ____exports.getRoomShapeBounds(self, roomShape)
    return ROOM_SHAPE_BOUNDS[roomShape]
end
--- Helper function to get the dimensions of a room shape's layout. This is NOT the size of the
-- room's actual contents! For that, use the `getRoomShapeBounds` function.
-- 
-- For example, a horizontal narrow room has a layout size of equal to that of a 1x1 room.
function ____exports.getRoomShapeLayoutSize(self, roomShape)
    return ROOM_SHAPE_LAYOUT_SIZES[roomShape]
end
--- Helper function to get the grid position of the top-left tile of a given room shape.
-- 
-- "Vector(0, 0)" corresponds to the top left tile of a room, not including the walls. (The top-left
-- wall would be at "Vector(-1, -1)".)
function ____exports.getRoomShapeTopLeftPosition(self, roomShape)
    return ROOM_SHAPE_TO_TOP_LEFT_POSITION[roomShape]
end
--- Helper function to get the volume of a room shape, which is the amount of tiles that are inside
-- the room.
-- 
-- (This cannot be directly calculated from the bounds since L rooms are a special case.)
function ____exports.getRoomShapeVolume(self, roomShape)
    return ROOM_SHAPE_VOLUMES[roomShape]
end
function ____exports.getRoomShapeWidth(self, roomShape)
    return ROOM_SHAPE_TO_GRID_WIDTH[roomShape]
end
function ____exports.isLRoom(self, roomShape)
    return L_ROOM_SHAPES_SET:has(roomShape)
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.roomShapeBounds"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
local ____roomShapeVolumes = require("lua_modules.isaacscript-common.objects.roomShapeVolumes")
local NARROW_CONTENTS_HEIGHT = ____roomShapeVolumes.NARROW_CONTENTS_HEIGHT
local NARROW_CONTENTS_WIDTH = ____roomShapeVolumes.NARROW_CONTENTS_WIDTH
local ONE_BY_ONE_CONTENTS_HEIGHT = ____roomShapeVolumes.ONE_BY_ONE_CONTENTS_HEIGHT
local ONE_BY_ONE_CONTENTS_WIDTH = ____roomShapeVolumes.ONE_BY_ONE_CONTENTS_WIDTH
local TWO_BY_TWO_BOUNDS = {ONE_BY_ONE_CONTENTS_WIDTH * 2, ONE_BY_ONE_CONTENTS_HEIGHT * 2}
--- The size of a room shape's contents. This does not include the tiles that the walls are on. L
-- rooms use the same bounds as a 2x2 room.
____exports.ROOM_SHAPE_BOUNDS = {
    [RoomShape.SHAPE_1x1] = {ONE_BY_ONE_CONTENTS_WIDTH, ONE_BY_ONE_CONTENTS_HEIGHT},
    [RoomShape.IH] = {ONE_BY_ONE_CONTENTS_WIDTH, NARROW_CONTENTS_HEIGHT},
    [RoomShape.IV] = {NARROW_CONTENTS_WIDTH, ONE_BY_ONE_CONTENTS_HEIGHT},
    [RoomShape.SHAPE_1x2] = {ONE_BY_ONE_CONTENTS_WIDTH, ONE_BY_ONE_CONTENTS_HEIGHT * 2},
    [RoomShape.IIV] = {NARROW_CONTENTS_WIDTH, ONE_BY_ONE_CONTENTS_HEIGHT * 2},
    [RoomShape.SHAPE_2x1] = {ONE_BY_ONE_CONTENTS_WIDTH * 2, ONE_BY_ONE_CONTENTS_HEIGHT},
    [RoomShape.IIH] = {ONE_BY_ONE_CONTENTS_WIDTH * 2, NARROW_CONTENTS_HEIGHT},
    [RoomShape.SHAPE_2x2] = TWO_BY_TWO_BOUNDS,
    [RoomShape.LTL] = TWO_BY_TWO_BOUNDS,
    [RoomShape.LTR] = TWO_BY_TWO_BOUNDS,
    [RoomShape.LBL] = TWO_BY_TWO_BOUNDS,
    [RoomShape.LBR] = TWO_BY_TWO_BOUNDS
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.roomShapeVolumes"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
____exports.ONE_BY_ONE_CONTENTS_WIDTH = 13
____exports.ONE_BY_ONE_CONTENTS_HEIGHT = 7
local ONE_BY_ONE_VOLUME = ____exports.ONE_BY_ONE_CONTENTS_HEIGHT * ____exports.ONE_BY_ONE_CONTENTS_WIDTH
____exports.NARROW_CONTENTS_WIDTH = 5
____exports.NARROW_CONTENTS_HEIGHT = 3
local NARROW_HORIZONTAL_VOLUME = ____exports.ONE_BY_ONE_CONTENTS_WIDTH * ____exports.NARROW_CONTENTS_HEIGHT
local NARROW_VERTICAL_VOLUME = ____exports.NARROW_CONTENTS_WIDTH * ____exports.ONE_BY_ONE_CONTENTS_HEIGHT
local ONE_BY_TWO_VOLUME = ONE_BY_ONE_VOLUME * 2
local L_ROOM_VOLUME = ONE_BY_ONE_VOLUME * 3
--- Volume is the amount of tiles that are inside the room shape.
-- 
-- (This cannot be directly calculated from the bounds since L rooms are a special case.)
____exports.ROOM_SHAPE_VOLUMES = {
    [RoomShape.SHAPE_1x1] = ONE_BY_ONE_VOLUME,
    [RoomShape.IH] = NARROW_HORIZONTAL_VOLUME,
    [RoomShape.IV] = NARROW_VERTICAL_VOLUME,
    [RoomShape.SHAPE_1x2] = ONE_BY_TWO_VOLUME,
    [RoomShape.IIV] = NARROW_VERTICAL_VOLUME * 2,
    [RoomShape.SHAPE_2x1] = ONE_BY_TWO_VOLUME,
    [RoomShape.IIH] = NARROW_HORIZONTAL_VOLUME * 2,
    [RoomShape.SHAPE_2x2] = ONE_BY_ONE_VOLUME * 4,
    [RoomShape.LTL] = L_ROOM_VOLUME,
    [RoomShape.LTR] = L_ROOM_VOLUME,
    [RoomShape.LBL] = L_ROOM_VOLUME,
    [RoomShape.LBR] = L_ROOM_VOLUME
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.roomShapeLayoutSizes"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
local ____roomShapeVolumes = require("lua_modules.isaacscript-common.objects.roomShapeVolumes")
local ONE_BY_ONE_CONTENTS_HEIGHT = ____roomShapeVolumes.ONE_BY_ONE_CONTENTS_HEIGHT
local ONE_BY_ONE_CONTENTS_WIDTH = ____roomShapeVolumes.ONE_BY_ONE_CONTENTS_WIDTH
local ONE_BY_ONE_LAYOUT_SIZE = {ONE_BY_ONE_CONTENTS_WIDTH, ONE_BY_ONE_CONTENTS_HEIGHT}
local TWO_BY_ONE_VERTICAL_LAYOUT_SIZE = {ONE_BY_ONE_CONTENTS_WIDTH, ONE_BY_ONE_CONTENTS_HEIGHT * 2}
local TWO_BY_ONE_HORIZONTAL_LAYOUT_SIZE = {ONE_BY_ONE_CONTENTS_WIDTH * 2, ONE_BY_ONE_CONTENTS_HEIGHT}
local TWO_BY_TWO_LAYOUT_SIZE = {ONE_BY_ONE_CONTENTS_WIDTH * 2, ONE_BY_ONE_CONTENTS_HEIGHT * 2}
--- The dimensions of a room shape's layout. This is NOT the size of the room's actual contents! For
-- that, use `ROOM_SHAPE_BOUNDS`.
-- 
-- For example, a horizontal narrow room has a layout size of equal to that of a 1x1 room.
____exports.ROOM_SHAPE_LAYOUT_SIZES = {
    [RoomShape.SHAPE_1x1] = ONE_BY_ONE_LAYOUT_SIZE,
    [RoomShape.IH] = ONE_BY_ONE_LAYOUT_SIZE,
    [RoomShape.IV] = ONE_BY_ONE_LAYOUT_SIZE,
    [RoomShape.SHAPE_1x2] = TWO_BY_ONE_VERTICAL_LAYOUT_SIZE,
    [RoomShape.IIV] = TWO_BY_ONE_VERTICAL_LAYOUT_SIZE,
    [RoomShape.SHAPE_2x1] = TWO_BY_ONE_HORIZONTAL_LAYOUT_SIZE,
    [RoomShape.IIH] = TWO_BY_ONE_HORIZONTAL_LAYOUT_SIZE,
    [RoomShape.SHAPE_2x2] = TWO_BY_TWO_LAYOUT_SIZE,
    [RoomShape.LTL] = TWO_BY_TWO_LAYOUT_SIZE,
    [RoomShape.LTR] = TWO_BY_TWO_LAYOUT_SIZE,
    [RoomShape.LBL] = TWO_BY_TWO_LAYOUT_SIZE,
    [RoomShape.LBR] = TWO_BY_TWO_LAYOUT_SIZE
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.roomShapeToBottomRightPosition"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
local TWO_BY_TWO_BOTTOM_RIGHT_POSITION = Vector(25, 13)
local ONE_BY_TWO_VERTICAL_BOTTOM_RIGHT_POSITION = Vector(12, 13)
--- "Vector(0, 0)" corresponds to the top left tile of a room, not including the walls. (The top-left
-- wall would be at "Vector(-1, -1)".)
____exports.ROOM_SHAPE_TO_BOTTOM_RIGHT_POSITION = {
    [RoomShape.SHAPE_1x1] = Vector(12, 6),
    [RoomShape.IH] = Vector(12, 4),
    [RoomShape.IV] = Vector(8, 6),
    [RoomShape.SHAPE_1x2] = ONE_BY_TWO_VERTICAL_BOTTOM_RIGHT_POSITION,
    [RoomShape.IIV] = Vector(8, 13),
    [RoomShape.SHAPE_2x1] = Vector(25, 6),
    [RoomShape.IIH] = Vector(25, 4),
    [RoomShape.SHAPE_2x2] = TWO_BY_TWO_BOTTOM_RIGHT_POSITION,
    [RoomShape.LTL] = TWO_BY_TWO_BOTTOM_RIGHT_POSITION,
    [RoomShape.LTR] = TWO_BY_TWO_BOTTOM_RIGHT_POSITION,
    [RoomShape.LBL] = TWO_BY_TWO_BOTTOM_RIGHT_POSITION,
    [RoomShape.LBR] = ONE_BY_TWO_VERTICAL_BOTTOM_RIGHT_POSITION
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.roomShapeToGridWidth"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
local ONE_BY_ONE_WIDTH = 15
local TWO_BY_ONE_WIDTH = 28
____exports.ROOM_SHAPE_TO_GRID_WIDTH = {
    [RoomShape.SHAPE_1x1] = ONE_BY_ONE_WIDTH,
    [RoomShape.IH] = ONE_BY_ONE_WIDTH,
    [RoomShape.IV] = ONE_BY_ONE_WIDTH,
    [RoomShape.SHAPE_1x2] = ONE_BY_ONE_WIDTH,
    [RoomShape.IIV] = ONE_BY_ONE_WIDTH,
    [RoomShape.SHAPE_2x1] = TWO_BY_ONE_WIDTH,
    [RoomShape.IIH] = TWO_BY_ONE_WIDTH,
    [RoomShape.SHAPE_2x2] = TWO_BY_ONE_WIDTH,
    [RoomShape.LTL] = TWO_BY_ONE_WIDTH,
    [RoomShape.LTR] = TWO_BY_ONE_WIDTH,
    [RoomShape.LBL] = TWO_BY_ONE_WIDTH,
    [RoomShape.LBR] = TWO_BY_ONE_WIDTH
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.roomShapeToTopLeftPosition"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
local ____constants = require("lua_modules.isaacscript-common.constants")
local VectorZero = ____constants.VectorZero
local NARROW_HORIZONTAL_TOP_LEFT_POSITION = Vector(0, 2)
local NARROW_VERTICAL_TOP_LEFT_POSITION = Vector(4, 0)
--- "Vector(0, 0)" corresponds to the top left tile of a room, not including the walls. (The top-left
-- wall would be at "Vector(-1, -1)".)
____exports.ROOM_SHAPE_TO_TOP_LEFT_POSITION = {
    [RoomShape.SHAPE_1x1] = VectorZero,
    [RoomShape.IH] = NARROW_HORIZONTAL_TOP_LEFT_POSITION,
    [RoomShape.IV] = NARROW_VERTICAL_TOP_LEFT_POSITION,
    [RoomShape.SHAPE_1x2] = VectorZero,
    [RoomShape.IIV] = NARROW_VERTICAL_TOP_LEFT_POSITION,
    [RoomShape.SHAPE_2x1] = VectorZero,
    [RoomShape.IIH] = NARROW_HORIZONTAL_TOP_LEFT_POSITION,
    [RoomShape.SHAPE_2x2] = VectorZero,
    [RoomShape.LTL] = Vector(13, 0),
    [RoomShape.LTR] = VectorZero,
    [RoomShape.LBL] = VectorZero,
    [RoomShape.LBR] = VectorZero
}
return ____exports
 end,
["lua_modules.isaacscript-common.sets.LRoomShapesSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
____exports.L_ROOM_SHAPES_SET = __TS__New(Set, {RoomShape.LTL, RoomShape.LTR, RoomShape.LBL, RoomShape.LBR})
return ____exports
 end,
["lua_modules.isaacscript-common.functions.vector"] = function(...) 
local ____exports = {}
local OBJECT_NAME
local ____SerializationBrand = require("lua_modules.isaacscript-common.enums.private.SerializationBrand")
local SerializationBrand = ____SerializationBrand.SerializationBrand
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____direction = require("lua_modules.isaacscript-common.functions.direction")
local angleToDirection = ____direction.angleToDirection
local ____isaacAPIClass = require("lua_modules.isaacscript-common.functions.isaacAPIClass")
local isaacAPIClassEquals = ____isaacAPIClass.isaacAPIClassEquals
local isIsaacAPIClassOfType = ____isaacAPIClass.isIsaacAPIClassOfType
local ____table = require("lua_modules.isaacscript-common.functions.table")
local copyValuesToTable = ____table.copyValuesToTable
local getNumbersFromTable = ____table.getNumbersFromTable
local tableHasKeys = ____table.tableHasKeys
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isTable = ____types.isTable
--- Helper function to check if something is an instantiated Vector object.
function ____exports.isVector(self, object)
    return isIsaacAPIClassOfType(nil, object, OBJECT_NAME)
end
local KEYS = {"X", "Y"}
OBJECT_NAME = "Vector"
--- Helper function to copy a `Vector` object.
-- 
-- @param vector The vector to copy. In the case of deserialization, this will actually be a Lua
-- table instead of an instantiated Vector class.
-- @param serializationType Default is `SerializationType.NONE`.
function ____exports.copyVector(self, vector, serializationType)
    if serializationType == nil then
        serializationType = SerializationType.NONE
    end
    repeat
        local ____switch3 = serializationType
        local ____cond3 = ____switch3 == SerializationType.NONE
        if ____cond3 then
            do
                if not ____exports.isVector(nil, vector) then
                    error(((("Failed to copy a " .. OBJECT_NAME) .. " object since the provided object was not a userdata ") .. OBJECT_NAME) .. " class.")
                end
                return Vector(vector.X, vector.Y)
            end
        end
        ____cond3 = ____cond3 or ____switch3 == SerializationType.SERIALIZE
        if ____cond3 then
            do
                if not ____exports.isVector(nil, vector) then
                    error(((("Failed to serialize a " .. OBJECT_NAME) .. " object since the provided object was not a userdata ") .. OBJECT_NAME) .. " class.")
                end
                local vectorTable = {}
                copyValuesToTable(nil, vector, KEYS, vectorTable)
                vectorTable[SerializationBrand.VECTOR] = ""
                return vectorTable
            end
        end
        ____cond3 = ____cond3 or ____switch3 == SerializationType.DESERIALIZE
        if ____cond3 then
            do
                if not isTable(nil, vector) then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object was not a Lua table.")
                end
                local x, y = table.unpack(getNumbersFromTable(
                    nil,
                    vector,
                    OBJECT_NAME,
                    table.unpack(KEYS)
                ))
                if x == nil then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object did not have a value for: x")
                end
                if y == nil then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object did not have a value for: y")
                end
                return Vector(x, y)
            end
        end
    until true
end
--- Used to determine is the given table is a serialized `Vector` object created by the save data
-- manager and/or the `deepCopy` function.
function ____exports.isSerializedVector(self, object)
    if not isTable(nil, object) then
        return false
    end
    return tableHasKeys(
        nil,
        object,
        table.unpack(KEYS)
    ) and object[SerializationBrand.VECTOR] ~= nil
end
function ____exports.vectorEquals(self, vector1, vector2)
    return isaacAPIClassEquals(nil, vector1, vector2, KEYS)
end
--- Helper function for finding out which way a vector is pointing.
function ____exports.vectorToDirection(self, vector)
    local angleDegrees = vector:GetAngleDegrees()
    return angleToDirection(nil, angleDegrees)
end
function ____exports.vectorToString(self, vector, round)
    if round == nil then
        round = false
    end
    local x = round and math.floor(vector.X + 0.5) or vector.X
    local y = round and math.floor(vector.Y + 0.5) or vector.Y
    return ((("(" .. tostring(x)) .. ", ") .. tostring(y)) .. ")"
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.playerHealth"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayMap = ____lualib.__TS__ArrayMap
local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ActiveSlot = ____isaac_2Dtypescript_2Ddefinitions.ActiveSlot
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local HeartSubType = ____isaac_2Dtypescript_2Ddefinitions.HeartSubType
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local ____constants = require("lua_modules.isaacscript-common.constants")
local MAX_PLAYER_HEART_CONTAINERS = ____constants.MAX_PLAYER_HEART_CONTAINERS
local ____HealthType = require("lua_modules.isaacscript-common.enums.HealthType")
local HealthType = ____HealthType.HealthType
local ____charge = require("lua_modules.isaacscript-common.functions.charge")
local getTotalCharge = ____charge.getTotalCharge
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getPlayerBlackHearts = ____player.getPlayerBlackHearts
local getPlayerHearts = ____player.getPlayerHearts
local getPlayerSoulHearts = ____player.getPlayerSoulHearts
local isCharacter = ____player.isCharacter
local setActiveItem = ____player.setActiveItem
function ____exports.removeAllPlayerHealth(self, player)
    local goldenHearts = player:GetGoldenHearts()
    local eternalHearts = player:GetEternalHearts()
    local boneHearts = player:GetBoneHearts()
    local brokenHearts = player:GetBrokenHearts()
    player:AddGoldenHearts(goldenHearts * -1)
    player:AddEternalHearts(eternalHearts * -1)
    player:AddBoneHearts(boneHearts * -1)
    player:AddBrokenHearts(brokenHearts * -1)
    player:AddMaxHearts(MAX_PLAYER_HEART_CONTAINERS * -2, true)
    player:AddSoulHearts(MAX_PLAYER_HEART_CONTAINERS * -2)
    if isCharacter(nil, player, PlayerType.THE_SOUL) then
        local forgotten = player:GetSubPlayer()
        if forgotten ~= nil then
            local forgottenBoneHearts = forgotten:GetBoneHearts()
            forgotten:AddBoneHearts(forgottenBoneHearts * -1)
        end
    end
end
--- Helper function to set a player's health to a specific state. You can use this in combination
-- with the `getPlayerHealth` function to restore the player's health back to a certain
-- configuration at a later time.
-- 
-- Based on the `REVEL.LoadHealth` function in the Revelations mod.
function ____exports.setPlayerHealth(self, player, playerHealth)
    local character = player:GetPlayerType()
    local subPlayer = player:GetSubPlayer()
    ____exports.removeAllPlayerHealth(nil, player)
    local alabasterBoxes = {}
    if player:HasCollectible(CollectibleType.ALABASTER_BOX) then
        for ____, activeSlot in ipairs(getEnumValues(nil, ActiveSlot)) do
            local activeItem = player:GetActiveItem()
            if activeItem == CollectibleType.ALABASTER_BOX then
                local totalCharge = getTotalCharge(nil, player, activeSlot)
                setActiveItem(nil, player, CollectibleType.NULL, activeSlot)
                alabasterBoxes[#alabasterBoxes + 1] = {activeSlot, totalCharge}
            end
        end
    end
    if character == PlayerType.THE_SOUL and subPlayer ~= nil then
        subPlayer:AddMaxHearts(playerHealth.maxHearts, false)
    else
        player:AddMaxHearts(playerHealth.maxHearts, false)
    end
    player:AddEternalHearts(playerHealth.eternalHearts)
    local soulHeartsRemaining = playerHealth.soulHearts
    __TS__ArrayForEach(
        playerHealth.soulHeartTypes,
        function(____, heartType, i)
            local isHalf = playerHealth.soulHearts + playerHealth.boneHearts * 2 < (i + 1) * 2
            local addAmount = 2
            if isHalf or heartType == HeartSubType.BONE or soulHeartsRemaining < 2 then
                addAmount = 1
            end
            if heartType == HeartSubType.SOUL then
                player:AddSoulHearts(addAmount)
                soulHeartsRemaining = soulHeartsRemaining - addAmount
            elseif heartType == HeartSubType.BLACK then
                player:AddBlackHearts(addAmount)
                soulHeartsRemaining = soulHeartsRemaining - addAmount
            elseif heartType == HeartSubType.BONE then
                player:AddBoneHearts(addAmount)
            end
        end
    )
    player:AddRottenHearts(playerHealth.rottenHearts)
    if character == PlayerType.MAGDALENE_B then
        local effectiveHearts = playerHealth.hearts / 2
        player:AddHearts(effectiveHearts)
    else
        player:AddHearts(playerHealth.hearts)
    end
    player:AddGoldenHearts(playerHealth.goldenHearts)
    player:AddBrokenHearts(playerHealth.brokenHearts)
    if character == PlayerType.BETHANY then
        player:SetSoulCharge(playerHealth.soulCharges)
    elseif character == PlayerType.BETHANY_B then
        player:SetBloodCharge(playerHealth.bloodCharges)
    end
    for ____, ____value in ipairs(alabasterBoxes) do
        local activeSlot = ____value[1]
        local totalCharge = ____value[2]
        setActiveItem(
            nil,
            player,
            CollectibleType.ALABASTER_BOX,
            activeSlot,
            totalCharge
        )
    end
end
function ____exports.addPlayerHealthType(self, player, healthType, numHearts)
    repeat
        local ____switch3 = healthType
        local ____cond3 = ____switch3 == HealthType.RED
        if ____cond3 then
            do
                player:AddHearts(numHearts)
                break
            end
        end
        ____cond3 = ____cond3 or ____switch3 == HealthType.SOUL
        if ____cond3 then
            do
                player:AddSoulHearts(numHearts)
                break
            end
        end
        ____cond3 = ____cond3 or ____switch3 == HealthType.ETERNAL
        if ____cond3 then
            do
                player:AddEternalHearts(numHearts)
                break
            end
        end
        ____cond3 = ____cond3 or ____switch3 == HealthType.BLACK
        if ____cond3 then
            do
                player:AddBlackHearts(numHearts)
                break
            end
        end
        ____cond3 = ____cond3 or ____switch3 == HealthType.GOLDEN
        if ____cond3 then
            do
                player:AddGoldenHearts(numHearts)
                break
            end
        end
        ____cond3 = ____cond3 or ____switch3 == HealthType.BONE
        if ____cond3 then
            do
                player:AddBoneHearts(numHearts)
                break
            end
        end
        ____cond3 = ____cond3 or ____switch3 == HealthType.ROTTEN
        if ____cond3 then
            do
                player:AddRottenHearts(numHearts)
                break
            end
        end
        ____cond3 = ____cond3 or ____switch3 == HealthType.BROKEN
        if ____cond3 then
            do
                player:AddBrokenHearts(numHearts)
                break
            end
        end
        ____cond3 = ____cond3 or ____switch3 == HealthType.MAX_HEARTS
        if ____cond3 then
            do
                player:AddMaxHearts(numHearts, false)
                break
            end
        end
    until true
end
--- Helper function to get an object representing the player's health. You can use this in
-- combination with the `setPlayerHealth` function to restore the player's health back to a certain
-- configuration at a later time.
-- 
-- This is based on the `REVEL.StoreHealth` function in the Revelations mod.
function ____exports.getPlayerHealth(self, player)
    local character = player:GetPlayerType()
    local soulHeartTypes = {}
    local maxHearts = player:GetMaxHearts()
    local hearts = getPlayerHearts(nil, player)
    local soulHearts = player:GetSoulHearts()
    local boneHearts = player:GetBoneHearts()
    local goldenHearts = player:GetGoldenHearts()
    local eternalHearts = player:GetEternalHearts()
    local rottenHearts = player:GetRottenHearts()
    local brokenHearts = player:GetBrokenHearts()
    local subPlayer = player:GetSubPlayer()
    local soulCharges = player:GetEffectiveSoulCharge()
    local bloodCharges = player:GetEffectiveBloodCharge()
    if character == PlayerType.THE_FORGOTTEN and subPlayer ~= nil then
        maxHearts = boneHearts * 2
        boneHearts = 0
        soulHearts = subPlayer:GetSoulHearts()
    elseif character == PlayerType.THE_SOUL and subPlayer ~= nil then
        maxHearts = subPlayer:GetBoneHearts() * 2
        hearts = subPlayer:GetHearts()
    end
    local extraHearts = math.ceil(soulHearts / 2) + boneHearts
    local currentSoulHeart = 0
    do
        local i = 0
        while i < extraHearts do
            local isBoneHeart = player:IsBoneHeart(i)
            if character == PlayerType.THE_FORGOTTEN and subPlayer ~= nil then
                isBoneHeart = subPlayer:IsBoneHeart(i)
            end
            if isBoneHeart then
                soulHeartTypes[#soulHeartTypes + 1] = HeartSubType.BONE
            else
                local isBlackHeart = player:IsBlackHeart(currentSoulHeart + 1)
                if character == PlayerType.THE_FORGOTTEN and subPlayer ~= nil then
                    isBlackHeart = subPlayer:IsBlackHeart(currentSoulHeart + 1)
                end
                if isBlackHeart then
                    soulHeartTypes[#soulHeartTypes + 1] = HeartSubType.BLACK
                else
                    soulHeartTypes[#soulHeartTypes + 1] = HeartSubType.SOUL
                end
                currentSoulHeart = currentSoulHeart + 2
            end
            i = i + 1
        end
    end
    return {
        maxHearts = maxHearts,
        hearts = hearts,
        eternalHearts = eternalHearts,
        soulHearts = soulHearts,
        boneHearts = boneHearts,
        goldenHearts = goldenHearts,
        rottenHearts = rottenHearts,
        brokenHearts = brokenHearts,
        soulCharges = soulCharges,
        bloodCharges = bloodCharges,
        soulHeartTypes = soulHeartTypes
    }
end
function ____exports.getPlayerHealthType(self, player, healthType)
    repeat
        local ____switch24 = healthType
        local ____cond24 = ____switch24 == HealthType.RED
        if ____cond24 then
            do
                return getPlayerHearts(nil, player)
            end
        end
        ____cond24 = ____cond24 or ____switch24 == HealthType.SOUL
        if ____cond24 then
            do
                return getPlayerSoulHearts(nil, player)
            end
        end
        ____cond24 = ____cond24 or ____switch24 == HealthType.ETERNAL
        if ____cond24 then
            do
                return player:GetEternalHearts()
            end
        end
        ____cond24 = ____cond24 or ____switch24 == HealthType.BLACK
        if ____cond24 then
            do
                return getPlayerBlackHearts(nil, player)
            end
        end
        ____cond24 = ____cond24 or ____switch24 == HealthType.GOLDEN
        if ____cond24 then
            do
                return player:GetGoldenHearts()
            end
        end
        ____cond24 = ____cond24 or ____switch24 == HealthType.BONE
        if ____cond24 then
            do
                return player:GetBoneHearts()
            end
        end
        ____cond24 = ____cond24 or ____switch24 == HealthType.ROTTEN
        if ____cond24 then
            do
                return player:GetRottenHearts()
            end
        end
        ____cond24 = ____cond24 or ____switch24 == HealthType.BROKEN
        if ____cond24 then
            do
                return player:GetBrokenHearts()
            end
        end
        ____cond24 = ____cond24 or ____switch24 == HealthType.MAX_HEARTS
        if ____cond24 then
            do
                return player:GetMaxHearts()
            end
        end
    until true
end
--- Returns a `PlayerHealth` object with all 0s.
function ____exports.newPlayerHealth(self)
    return {
        maxHearts = 0,
        hearts = 0,
        eternalHearts = 0,
        soulHearts = 0,
        boneHearts = 0,
        goldenHearts = 0,
        rottenHearts = 0,
        brokenHearts = 0,
        soulCharges = 0,
        bloodCharges = 0,
        soulHeartTypes = {}
    }
end
function ____exports.playerConvertBlackHeartsToSoulHearts(self, player)
    local playerHealth = ____exports.getPlayerHealth(nil, player)
    ____exports.removeAllPlayerHealth(nil, player)
    playerHealth.soulHeartTypes = __TS__ArrayMap(
        playerHealth.soulHeartTypes,
        function(____, soulHeartType) return soulHeartType == HeartSubType.BLACK and HeartSubType.SOUL or soulHeartType end
    )
    ____exports.setPlayerHealth(nil, player, playerHealth)
end
function ____exports.playerConvertSoulHeartsToBlackHearts(self, player)
    local playerHealth = ____exports.getPlayerHealth(nil, player)
    ____exports.removeAllPlayerHealth(nil, player)
    playerHealth.soulHeartTypes = __TS__ArrayMap(
        playerHealth.soulHeartTypes,
        function(____, soulHeartType) return soulHeartType == HeartSubType.SOUL and HeartSubType.BLACK or soulHeartType end
    )
    ____exports.setPlayerHealth(nil, player, playerHealth)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.charge"] = function(...) 
local ____exports = {}
local getNumChargesToAdd, getNumChargesWithAAAModifier, shouldPlayFullRechargeSound
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ActiveSlot = ____isaac_2Dtypescript_2Ddefinitions.ActiveSlot
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
local SoundEffect = ____isaac_2Dtypescript_2Ddefinitions.SoundEffect
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local sfxManager = ____cachedClasses.sfxManager
local ____collectibles = require("lua_modules.isaacscript-common.functions.collectibles")
local getCollectibleMaxCharges = ____collectibles.getCollectibleMaxCharges
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getPlayers = ____playerIndex.getPlayers
--- Helper function to add a charge to one of a player's active items, emulating what happens when a
-- room is cleared.
-- 
-- This function will take the following things into account:
-- - L rooms and 2x2 rooms granting a double charge
-- - The Battery
-- - AAA Battery
-- 
-- @param player The player to grant the charges to.
-- @param activeSlot The active item slot to grant the charges to.
-- @param ignoreBigRoomDoubleCharge Optional. If set to true, it will treat the current room as a
-- 1x1 room for the purposes of calculating how much charge to
-- grant. Default is false.
function ____exports.addRoomClearChargeToSlot(self, player, activeSlot, ignoreBigRoomDoubleCharge)
    if ignoreBigRoomDoubleCharge == nil then
        ignoreBigRoomDoubleCharge = false
    end
    if not player:NeedsCharge(activeSlot) then
        return
    end
    local hud = game:GetHUD()
    local totalCharge = ____exports.getTotalCharge(nil, player, activeSlot)
    local chargesToAdd = getNumChargesToAdd(nil, player, activeSlot, ignoreBigRoomDoubleCharge)
    local modifiedChargesToAdd = getNumChargesWithAAAModifier(nil, player, activeSlot, chargesToAdd)
    local newCharge = totalCharge + modifiedChargesToAdd
    player:SetActiveCharge(newCharge, activeSlot)
    hud:FlashChargeBar(player, activeSlot)
    ____exports.playChargeSoundEffect(nil, player, activeSlot)
end
function getNumChargesToAdd(self, player, activeSlot, ignoreBigRoomDoubleCharge)
    if ignoreBigRoomDoubleCharge == nil then
        ignoreBigRoomDoubleCharge = false
    end
    local room = game:GetRoom()
    local roomShape = room:GetRoomShape()
    local activeItem = player:GetActiveItem(activeSlot)
    local activeCharge = player:GetActiveCharge(activeSlot)
    local batteryCharge = player:GetBatteryCharge(activeSlot)
    local hasBattery = player:HasCollectible(CollectibleType.BATTERY)
    local maxCharges = getCollectibleMaxCharges(nil, activeItem)
    if not hasBattery and activeCharge == maxCharges then
        return 0
    end
    if hasBattery and batteryCharge == maxCharges then
        return 0
    end
    if not hasBattery and activeCharge + 1 == maxCharges then
        return 1
    end
    if hasBattery and batteryCharge + 1 == maxCharges then
        return 1
    end
    if roomShape >= RoomShape.SHAPE_2x2 and not ignoreBigRoomDoubleCharge then
        return 2
    end
    return 1
end
function getNumChargesWithAAAModifier(self, player, activeSlot, chargesToAdd)
    local activeItem = player:GetActiveItem(activeSlot)
    local activeCharge = player:GetActiveCharge(activeSlot)
    local batteryCharge = player:GetBatteryCharge(activeSlot)
    local hasBattery = player:HasCollectible(CollectibleType.BATTERY)
    local hasAAABattery = player:HasTrinket(TrinketType.AAA_BATTERY)
    local maxCharges = getCollectibleMaxCharges(nil, activeItem)
    if not hasAAABattery then
        return chargesToAdd
    end
    if not hasBattery and activeCharge + chargesToAdd == maxCharges - 1 then
        return maxCharges + 1
    end
    if hasBattery and batteryCharge + chargesToAdd == maxCharges - 1 then
        return maxCharges + 1
    end
    return chargesToAdd
end
--- Helper function to get the combined normal charge and the battery charge for the player's active
-- item. This is useful because you have to add these two values together when setting the active
-- charge.
function ____exports.getTotalCharge(self, player, activeSlot)
    local activeCharge = player:GetActiveCharge(activeSlot)
    local batteryCharge = player:GetBatteryCharge(activeSlot)
    return activeCharge + batteryCharge
end
function ____exports.playChargeSoundEffect(self, player, activeSlot)
    for ____, soundEffect in ipairs({SoundEffect.BATTERY_CHARGE, SoundEffect.BEEP}) do
        sfxManager:Stop(soundEffect)
    end
    local chargeSoundEffect = shouldPlayFullRechargeSound(nil, player, activeSlot) and SoundEffect.BATTERY_CHARGE or SoundEffect.BEEP
    sfxManager:Play(chargeSoundEffect)
end
function shouldPlayFullRechargeSound(self, player, activeSlot)
    local activeItem = player:GetActiveItem(activeSlot)
    local activeCharge = player:GetActiveCharge(activeSlot)
    local batteryCharge = player:GetBatteryCharge(activeSlot)
    local hasBattery = player:HasCollectible(CollectibleType.BATTERY)
    local maxCharges = getCollectibleMaxCharges(nil, activeItem)
    if not hasBattery then
        return not player:NeedsCharge(activeSlot)
    end
    return not player:NeedsCharge(activeSlot) or activeCharge == maxCharges and batteryCharge == 0
end
--- Helper function to add a charge to a player's active item, emulating what happens when a room is
-- cleared.
-- 
-- This function will take the following things into account:
-- - L rooms and 2x2 rooms granting a double charge
-- - The Battery
-- - AAA Battery
-- 
-- @param player The player to grant the charges to.
-- @param ignoreBigRoomDoubleCharge Optional. If set to true, it will treat the current room as a
-- 1x1 room for the purposes of calculating how much charge to
-- grant. Default is false.
function ____exports.addRoomClearCharge(self, player, ignoreBigRoomDoubleCharge)
    if ignoreBigRoomDoubleCharge == nil then
        ignoreBigRoomDoubleCharge = false
    end
    for ____, activeSlot in ipairs({ActiveSlot.PRIMARY, ActiveSlot.SECONDARY, ActiveSlot.POCKET}) do
        ____exports.addRoomClearChargeToSlot(nil, player, activeSlot, ignoreBigRoomDoubleCharge)
    end
end
--- Helper function to add a charge to every player's active item, emulating what happens when a room
-- is cleared.
-- 
-- This function will take the following things into account:
-- - L rooms and 2x2 rooms granting a double charge
-- - The Battery
-- - AAA Battery
-- 
-- @param ignoreBigRoomDoubleCharge Optional. If set to true, it will treat the current room as a
-- 1x1 room for the purposes of calculating how much charge to
-- grant. Default is false.
function ____exports.addRoomClearCharges(self, ignoreBigRoomDoubleCharge)
    if ignoreBigRoomDoubleCharge == nil then
        ignoreBigRoomDoubleCharge = false
    end
    for ____, player in ipairs(getPlayers(nil)) do
        ____exports.addRoomClearCharge(nil, player, ignoreBigRoomDoubleCharge)
    end
end
function ____exports.isActiveSlotDoubleCharged(self, player, activeSlot)
    local collectibleType = player:GetActiveItem(activeSlot)
    local batteryCharge = player:GetBatteryCharge(activeSlot)
    local maxCharges = getCollectibleMaxCharges(nil, collectibleType)
    return batteryCharge >= maxCharges
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.set"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__Iterator = ____lualib.__TS__Iterator
local __TS__New = ____lualib.__TS__New
local __TS__ArrayMap = ____lualib.__TS__ArrayMap
local __TS__Spread = ____lualib.__TS__Spread
local __TS__ArraySort = ____lualib.__TS__ArraySort
local ____exports = {}
local ____array = require("lua_modules.isaacscript-common.functions.array")
local getArrayCombinations = ____array.getArrayCombinations
local getRandomArrayElement = ____array.getRandomArrayElement
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local getRandomSeed = ____rng.getRandomSeed
--- Helper function to get a sorted array based on the contents of a set.
-- 
-- Normally, set values are returned in a random order, so use this function when the ordering of
-- the contents is important.
function ____exports.getSortedSetValues(self, set)
    local values = set:values()
    local array = {__TS__Spread(values)}
    __TS__ArraySort(array)
    return array
end
--- Helper function to add all of the values in one set to another set. The first set passed will be
-- modified in place.
-- 
-- This function is variadic, meaning that you can specify N sets to add to the first set.
function ____exports.addSetsToSet(self, mainSet, ...)
    local setsToAdd = {...}
    for ____, set in ipairs(setsToAdd) do
        for ____, value in __TS__Iterator(set:values()) do
            mainSet:add(value)
        end
    end
end
--- Helper function to create a new set that is the composition of two or more sets.
-- 
-- This function is variadic, meaning that you can specify N sets.
function ____exports.combineSets(self, ...)
    local sets = {...}
    local newSet = __TS__New(Set)
    for ____, set in ipairs(sets) do
        for ____, value in __TS__Iterator(set:values()) do
            newSet:add(value)
        end
    end
    return newSet
end
--- Helper function to copy a set. (You can also use a Set constructor to accomplish this task.)
function ____exports.copySet(self, oldSet)
    local newSet = __TS__New(Set)
    for ____, value in __TS__Iterator(oldSet:values()) do
        newSet:add(value)
    end
    return newSet
end
--- Helper function to delete all of the values in one set from another set. The first set passed
-- will be modified in place.
-- 
-- This function is variadic, meaning that you can specify N sets to remove from the first set.
function ____exports.deleteSetsFromSet(self, mainSet, ...)
    local setsToRemove = {...}
    for ____, set in ipairs(setsToRemove) do
        for ____, value in __TS__Iterator(set:values()) do
            mainSet:delete(value)
        end
    end
end
--- Helper function to get a random element from the provided set.
-- 
-- @param set The set to get an element from.
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
-- @param exceptions Optional. An array of elements to skip over if selected.
function ____exports.getRandomSetElement(self, set, seedOrRNG, exceptions)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if exceptions == nil then
        exceptions = {}
    end
    local array = ____exports.getSortedSetValues(nil, set)
    return getRandomArrayElement(nil, array, seedOrRNG, exceptions)
end
--- Helper function to get all possible combinations of the given set. This includes the combination
-- of an empty set.
-- 
-- For example, if this function is provided a set containing 1, 2, and 3, then it will return an
-- array containing the following sets:
-- 
-- - []
-- - [1]
-- - [2]
-- - [3]
-- - [1, 2]
-- - [1, 3]
-- - [2, 3]
-- - [1, 2, 3]
function ____exports.getSetCombinations(self, set)
    local values = ____exports.getSortedSetValues(nil, set)
    local combinations = getArrayCombinations(nil, values)
    return __TS__ArrayMap(
        combinations,
        function(____, array) return __TS__New(Set, array) end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.trinkets"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local TrinketSlot = ____isaac_2Dtypescript_2Ddefinitions.TrinketSlot
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local itemConfig = ____cachedClasses.itemConfig
local ____constantsFirstLast = require("lua_modules.isaacscript-common.constantsFirstLast")
local FIRST_MODDED_TRINKET_TYPE = ____constantsFirstLast.FIRST_MODDED_TRINKET_TYPE
local FIRST_TRINKET_TYPE = ____constantsFirstLast.FIRST_TRINKET_TYPE
local LAST_TRINKET_TYPE = ____constantsFirstLast.LAST_TRINKET_TYPE
local LAST_VANILLA_TRINKET_TYPE = ____constantsFirstLast.LAST_VANILLA_TRINKET_TYPE
local ____trinketDescriptionMap = require("lua_modules.isaacscript-common.maps.trinketDescriptionMap")
local DEFAULT_TRINKET_DESCRIPTION = ____trinketDescriptionMap.DEFAULT_TRINKET_DESCRIPTION
local TRINKET_DESCRIPTION_MAP = ____trinketDescriptionMap.TRINKET_DESCRIPTION_MAP
local ____trinketNameMap = require("lua_modules.isaacscript-common.maps.trinketNameMap")
local DEFAULT_TRINKET_NAME = ____trinketNameMap.DEFAULT_TRINKET_NAME
local TRINKET_NAME_MAP = ____trinketNameMap.TRINKET_NAME_MAP
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local getEntityID = ____entity.getEntityID
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local hasFlag = ____flag.hasFlag
local ____pickupVariants = require("lua_modules.isaacscript-common.functions.pickupVariants")
local isTrinket = ____pickupVariants.isTrinket
local ____player = require("lua_modules.isaacscript-common.functions.player")
local isCharacter = ____player.isCharacter
local ____sprite = require("lua_modules.isaacscript-common.functions.sprite")
local clearSprite = ____sprite.clearSprite
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local irange = ____utils.irange
--- Add this to a `TrinketType` to get the corresponding golden trinket type.
-- 
-- Corresponds to the vanilla `PillColor.TRINKET_GOLDEN_FLAG` value.
-- 
-- 1 << 15
local GOLDEN_TRINKET_ADJUSTMENT = 32768
local TRINKET_SPRITE_LAYER = 0
--- Helper function to get the corresponding golden trinket type from a normal trinket type.
-- 
-- For example, passing `TrinketType.SWALLOWED_PENNY` would result in 32769, which is the value that
-- corresponds to the golden trinket sub-type for Swallowed Penny.
function ____exports.getGoldenTrinketType(self, trinketType)
    return trinketType + GOLDEN_TRINKET_ADJUSTMENT
end
--- Helper function to get an array that represents every modded trinket type.
-- 
-- Returns an empty array if there are no modded trinket types.
function ____exports.getModdedTrinketTypes(self)
    if LAST_VANILLA_TRINKET_TYPE == LAST_TRINKET_TYPE then
        return {}
    end
    return irange(nil, FIRST_MODDED_TRINKET_TYPE, LAST_TRINKET_TYPE)
end
--- Returns the slot number corresponding to where a trinket can be safely inserted.
-- 
-- For example:
-- 
-- ```ts
-- const player = Isaac.GetPlayer();
-- const trinketSlot = getOpenTrinketSlotNum(player);
-- if (trinketSlot !== undefined) {
--   // They have one or more open trinket slots
--   player.AddTrinket(TrinketType.SWALLOWED_PENNY);
-- }
-- ```
function ____exports.getOpenTrinketSlot(self, player)
    local maxTrinkets = player:GetMaxTrinkets()
    local trinketType1 = player:GetTrinket(TrinketSlot.SLOT_1)
    local trinketType2 = player:GetTrinket(TrinketSlot.SLOT_2)
    if maxTrinkets == 1 then
        return trinketType1 == TrinketType.NULL and 0 or nil
    end
    if maxTrinkets == 2 then
        if trinketType1 == TrinketType.NULL then
            return 0
        end
        return trinketType2 == TrinketType.NULL and 1 or nil
    end
    return error("The player has an unknown number of trinket slots: " .. tostring(maxTrinkets))
end
--- Helper function to get the in-game description for a trinket. Returns "Unknown" if the provided
-- trinket type was not valid.
function ____exports.getTrinketDescription(self, trinketType)
    local trinketDescription = TRINKET_DESCRIPTION_MAP:get(trinketType)
    if trinketDescription ~= nil then
        return trinketDescription
    end
    local itemConfigItem = itemConfig:GetTrinket(trinketType)
    if itemConfigItem ~= nil then
        return itemConfigItem.Description
    end
    return DEFAULT_TRINKET_DESCRIPTION
end
--- Helper function to get the name of a trinket. Returns "Unknown" if the provided trinket type is
-- not valid.
-- 
-- For example:
-- 
-- ```ts
-- const trinketType = TrinketType.SWALLOWED_PENNY;
-- const trinketName = getTrinketName(trinketType); // trinketName is "Swallowed Penny"
-- ```
function ____exports.getTrinketName(self, trinketType)
    local trinketName = TRINKET_NAME_MAP:get(trinketType)
    if trinketName ~= nil then
        return trinketName
    end
    local itemConfigItem = itemConfig:GetTrinket(trinketType)
    if itemConfigItem ~= nil then
        return itemConfigItem.Name
    end
    return DEFAULT_TRINKET_NAME
end
--- Helper function to get an array that contains every trinket type.
function ____exports.getTrinketTypes(self)
    return irange(nil, FIRST_TRINKET_TYPE, LAST_TRINKET_TYPE)
end
--- Helper function to get an array that represents every vanilla trinket type.
function ____exports.getVanillaTrinketTypes(self)
    return irange(nil, FIRST_TRINKET_TYPE, LAST_VANILLA_TRINKET_TYPE)
end
--- Returns whether or not the player can hold an additional trinket, beyond what they are currently
-- carrying. This takes into account items that modify the max number of trinkets, like Mom's Purse.
-- 
-- If the player is the Tainted Soul, this always returns false, since that character cannot pick up
-- items. (Only Tainted Forgotten can pick up items.)
function ____exports.hasOpenTrinketSlot(self, player)
    if isCharacter(nil, player, PlayerType.THE_SOUL_B) then
        return false
    end
    local openTrinketSlot = ____exports.getOpenTrinketSlot(nil, player)
    return openTrinketSlot ~= nil
end
function ____exports.isGoldenTrinket(self, trinketType)
    return trinketType > GOLDEN_TRINKET_ADJUSTMENT
end
--- Helper function to change the sprite of a trinket entity.
-- 
-- For more information about removing the trinket sprite, see the documentation for the
-- "clearSprite" helper function.
-- 
-- @param trinket The trinket whose sprite you want to modify.
-- @param pngPath Equal to either the spritesheet path to load (e.g.
-- "gfx/items/trinkets/trinket_001_swallowedpenny.png") or undefined. If undefined,
-- the sprite will be removed, making it appear like the collectible has already been
-- taken by the player.
function ____exports.setTrinketSprite(self, trinket, pngPath)
    if not isTrinket(nil, trinket) then
        local entityID = getEntityID(nil, trinket)
        error("The \"setTrinketSprite\" function was given a non-trinket: " .. entityID)
    end
    local sprite = trinket:GetSprite()
    if pngPath == nil then
        clearSprite(nil, sprite, TRINKET_SPRITE_LAYER)
    else
        sprite:ReplaceSpritesheet(TRINKET_SPRITE_LAYER, pngPath)
        sprite:LoadGraphics()
    end
end
function ____exports.trinketHasCacheFlag(self, trinketType, cacheFlag)
    local itemConfigItem = itemConfig:GetTrinket(trinketType)
    if itemConfigItem == nil then
        return false
    end
    return hasFlag(nil, itemConfigItem.CacheFlags, cacheFlag)
end
return ____exports
 end,
["lua_modules.isaacscript-common.maps.trinketDescriptionMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
____exports.DEFAULT_TRINKET_DESCRIPTION = "Unknown"
____exports.TRINKET_DESCRIPTION_MAP = __TS__New(Map, {
    {1, "Gulp!"},
    {2, "It feels lucky?"},
    {3, "Trickle charge"},
    {4, "It's broken"},
    {5, "Challenge up"},
    {6, "It kinda works"},
    {7, "Faith up"},
    {8, "I remember these"},
    {9, "Wub wub!"},
    {10, "Wiggle waggle!"},
    {11, "Woop woop!"},
    {12, "Blub blub!"},
    {13, "YES!"},
    {14, "Your feet feel stronger"},
    {15, "There's something inside it"},
    {16, "???"},
    {17, "Evil up"},
    {18, "Faith up"},
    {19, "Master of lockpicking"},
    {20, "Wish granted"},
    {21, "???"},
    {22, "Evil up"},
    {23, "???"},
    {24, "Wealth of gas"},
    {25, "Uh-oh!"},
    {26, "Zip zoop!"},
    {27, "Wooosh!"},
    {28, "Eternal life?"},
    {29, "It stinks"},
    {30, "Poison shots"},
    {31, "Piercing shots"},
    {32, "Touch fuzzy, get dizzy"},
    {33, "Fetal protection"},
    {34, "It calls out to its brothers"},
    {35, "DMG up"},
    {36, "It feels lucky?"},
    {37, "Speed up"},
    {38, "It emanates purity "},
    {39, "Yay, cancer!"},
    {40, "Your rage grows"},
    {41, "Tastes like burning"},
    {42, "Luck up!"},
    {43, "Cursed?"},
    {44, "Don't swallow it"},
    {45, "Luck of the draw"},
    {46, "Consume thy enemy"},
    {48, "It glows with power"},
    {49, "Wealth of health"},
    {50, "Wealth of chaos"},
    {51, "Wealth of answers"},
    {52, "Wealth of wealth"},
    {53, "Well, that's not coming off"},
    {54, "Dead friend"},
    {55, "Faith's reward"},
    {56, "Payment received "},
    {57, "Imaginary friend"},
    {58, "Your rage grows"},
    {59, "May you see your destination"},
    {60, "Revenge from beyond"},
    {61, "The left-hand path reaps dark rewards"},
    {62, "It shines for its brothers"},
    {63, "Fuse cutter"},
    {64, "Bleep bloop blop"},
    {65, "Floooooooooop!"},
    {66, "Pft"},
    {67, "You feel cursed... kinda."},
    {68, "It pulls"},
    {69, "You feel faded"},
    {70, "Itchy, tasty..."},
    {71, "Creepy bombs"},
    {72, "Lil charge"},
    {73, "Pop! Pop!"},
    {74, "The ground below feels hollow..."},
    {75, "Effect not found?"},
    {76, "It's double down time!"},
    {77, "Bounce back!"},
    {78, "Extended stat effect time!"},
    {79, "I'm stuck in a loop..."},
    {80, "With darkness comes power"},
    {81, "Blind to damage"},
    {82, "Feel lucky?"},
    {83, "Stores are open"},
    {84, "Feels greedy"},
    {85, "Karma up"},
    {86, "The poop is moving..."},
    {87, "You feel her love"},
    {88, "Never again!"},
    {89, "Keep your friends close..."},
    {90, "Fartoom!"},
    {91, "Eww"},
    {92, "Stat booster"},
    {93, "You stink"},
    {94, "It also stinks!"},
    {95, "It looks dead"},
    {96, "Foop foop!"},
    {97, "Sick..."},
    {98, "Seems magic..."},
    {99, "Boing!"},
    {100, "It needs power"},
    {101, "I think it's broken"},
    {102, "Double moon"},
    {103, "="},
    {104, "Make a wish"},
    {105, "I wonder what it is"},
    {106, "Uncorked"},
    {107, "Drain me"},
    {108, "That's a hard nut to crack!"},
    {109, "Stuck!"},
    {110, "Feels lucky..."},
    {111, "Drips with blood..."},
    {112, "..."},
    {113, "I bring War"},
    {114, "I bring Pestilence"},
    {115, "I bring Famine"},
    {116, "I bring Death"},
    {117, "I bring Conquest"},
    {118, "They are growing..."},
    {119, "Regen!"},
    {120, "Danger charge"},
    {121, "My faith protects me"},
    {122, "Can't hold it!"},
    {123, "Angelic spoils"},
    {124, "Hold the door"},
    {125, "Charged friends"},
    {126, "Wealth of flies"},
    {127, "Feed them magic!"},
    {128, "It looks brittle"},
    {129, "Don't chew on it"},
    {130, "It's leaking"},
    {131, "Wealth of purity"},
    {132, "Mystery medicine"},
    {133, "Faster explosions"},
    {134, "Mega farts"},
    {135, "Watch the world burn"},
    {136, "Bombs are key"},
    {137, "Forget me not..."},
    {138, "t's broken9Reroll your dest       "},
    {139, "It feels lucky"},
    {140, "It feels empty"},
    {141, "Sing for your friends"},
    {142, "My faith protects me"},
    {143, "Voltage starving"},
    {144, "Ding!"},
    {145, "Luck way up. Don't lose it!"},
    {146, "His special customer"},
    {147, "Wealth of power"},
    {148, "Gather round"},
    {149, "Push in case of emergency"},
    {150, "Look between the rooms"},
    {151, "No more spikes"},
    {152, "Seek the stars"},
    {153, "A piece of her love"},
    {154, "Bonus roll"},
    {155, "Walk the path of the saint"},
    {156, "HP up"},
    {157, "Death awaits"},
    {158, "A hole in your pocket"},
    {159, "Less is more"},
    {160, "Free goodies!"},
    {161, "Walk the path of the wicked"},
    {162, "Unleash your inner demon"},
    {163, "Oops!"},
    {164, "Twice the bang!"},
    {165, "Don't want!"},
    {166, "???"},
    {167, "Friends from beyond"},
    {168, "A brittle blessing"},
    {169, "Looks familiar..."},
    {170, "Call to the other side"},
    {171, "Money talks"},
    {172, "Wealth of misery"},
    {173, "Give it to me"},
    {174, "6"},
    {175, "What could it open?"},
    {176, "Mini friend"},
    {177, "You feel braver"},
    {178, "Bang!"},
    {179, "Controllable buddies!"},
    {180, "Finally!"},
    {181, "Fun extras"},
    {182, "Virtue's reward"},
    {183, "I'm seeing double..."},
    {184, "Give them a home"},
    {185, "Infested"},
    {186, "Attack buddy"},
    {187, "Double vision?"},
    {188, "Stay frosty"},
    {189, "Revel in death"}
})
return ____exports
 end,
["lua_modules.isaacscript-common.maps.trinketNameMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
____exports.DEFAULT_TRINKET_NAME = "Unknown"
____exports.TRINKET_NAME_MAP = __TS__New(Map, {
    {1, "Swallowed Penny"},
    {2, "Petrified Poop"},
    {3, "AAA Battery"},
    {4, "Broken Remote"},
    {5, "Purple Heart"},
    {6, "Broken Magnet"},
    {7, "Rosary Bead"},
    {8, "Cartridge"},
    {9, "Pulse Worm"},
    {10, "Wiggle Worm"},
    {11, "Ring Worm"},
    {12, "Flat Worm"},
    {13, "Store Credit"},
    {14, "Callus"},
    {15, "Lucky Rock"},
    {16, "Mom's Toenail"},
    {17, "Black Lipstick"},
    {18, "Bible Tract"},
    {19, "Paper Clip"},
    {20, "Monkey Paw"},
    {21, "Mysterious Paper"},
    {22, "Daemon's Tail"},
    {23, "Missing Poster"},
    {24, "Butt Penny"},
    {25, "Mysterious Candy"},
    {26, "Hook Worm"},
    {27, "Whip Worm"},
    {28, "Broken Ankh"},
    {29, "Fish Head"},
    {30, "Pinky Eye"},
    {31, "Push Pin"},
    {32, "Liberty Cap"},
    {33, "Umbilical Cord"},
    {34, "Child's Heart"},
    {35, "Curved Horn"},
    {36, "Rusted Key"},
    {37, "Goat Hoof"},
    {38, "Mom's Pearl"},
    {39, "Cancer"},
    {40, "Red Patch"},
    {41, "Match Stick"},
    {42, "Lucky Toe"},
    {43, "Cursed Skull"},
    {44, "Safety Cap"},
    {45, "Ace of Spades"},
    {46, "Isaac's Fork"},
    {48, "A Missing Page"},
    {49, "Bloody Penny"},
    {50, "Burnt Penny"},
    {51, "Flat Penny"},
    {52, "Counterfeit Penny"},
    {53, "Tick"},
    {54, "Isaac's Head"},
    {55, "Maggy's Faith"},
    {56, "Judas' Tongue"},
    {57, "???'s Soul"},
    {58, "Samson's Lock"},
    {59, "Cain's Eye"},
    {60, "Eve's Bird Foot"},
    {61, "The Left Hand"},
    {62, "Shiny Rock"},
    {63, "Safety Scissors"},
    {64, "Rainbow Worm"},
    {65, "Tape Worm"},
    {66, "Lazy Worm"},
    {67, "Cracked Dice"},
    {68, "Super Magnet"},
    {69, "Faded Polaroid"},
    {70, "Louse"},
    {71, "Bob's Bladder"},
    {72, "Watch Battery"},
    {73, "Blasting Cap"},
    {74, "Stud Finder"},
    {75, "Error"},
    {76, "Poker Chip"},
    {77, "Blister"},
    {78, "Second Hand"},
    {79, "Endless Nameless"},
    {80, "Black Feather"},
    {81, "Blind Rage"},
    {82, "Golden Horse Shoe"},
    {83, "Store Key"},
    {84, "Rib of Greed"},
    {85, "Karma"},
    {86, "Lil Larva"},
    {87, "Mom's Locket"},
    {88, "NO!"},
    {89, "Child Leash"},
    {90, "Brown Cap"},
    {91, "Meconium"},
    {92, "Cracked Crown"},
    {93, "Used Diaper"},
    {94, "Fish Tail"},
    {95, "Black Tooth"},
    {96, "Ouroboros Worm"},
    {97, "Tonsil"},
    {98, "Nose Goblin"},
    {99, "Super Ball"},
    {100, "Vibrant Bulb"},
    {101, "Dim Bulb"},
    {102, "Fragmented Card"},
    {103, "Equality!"},
    {104, "Wish Bone"},
    {105, "Bag Lunch"},
    {106, "Lost Cork"},
    {107, "Crow Heart"},
    {108, "Walnut"},
    {109, "Duct Tape"},
    {110, "Silver Dollar"},
    {111, "Bloody Crown"},
    {112, "Pay To Win"},
    {113, "Locust of War"},
    {114, "Locust of Pestilence"},
    {115, "Locust of Famine"},
    {116, "Locust of Death"},
    {117, "Locust of Conquest"},
    {118, "Bat Wing"},
    {119, "Stem Cell"},
    {120, "Hairpin"},
    {121, "Wooden Cross"},
    {122, "Butter!"},
    {123, "Filigree Feather"},
    {124, "Door Stop"},
    {125, "Extension Cord"},
    {126, "Rotten Penny"},
    {127, "Baby-Bender"},
    {128, "Finger Bone"},
    {129, "Jawbreaker"},
    {130, "Chewed Pen"},
    {131, "Blessed Penny"},
    {132, "Broken Syringe"},
    {133, "Short Fuse"},
    {134, "Gigante Bean"},
    {135, "A Lighter"},
    {136, "Broken Padlock"},
    {137, "Myosotis"},
    {138, " 'M"},
    {139, "Teardrop Charm"},
    {140, "Apple of Sodom"},
    {141, "Forgotten Lullaby"},
    {142, "Beth's Faith"},
    {143, "Old Capacitor"},
    {144, "Brain Worm"},
    {145, "Perfection"},
    {146, "Devil's Crown"},
    {147, "Charged Penny"},
    {148, "Friendship Necklace"},
    {149, "Panic Button"},
    {150, "Blue Key"},
    {151, "Flat File"},
    {152, "Telescope Lens"},
    {153, "Mom's Lock"},
    {154, "Dice Bag"},
    {155, "Holy Crown"},
    {156, "Mother's Kiss"},
    {157, "Torn Card"},
    {158, "Torn Pocket"},
    {159, "Gilded Key"},
    {160, "Lucky Sack"},
    {161, "Wicked Crown"},
    {162, "Azazel's Stump"},
    {163, "Dingle Berry"},
    {164, "Ring Cap"},
    {165, "Nuh Uh!"},
    {166, "Modeling Clay"},
    {167, "Polished Bone"},
    {168, "Hollow Heart"},
    {169, "Kid's Drawing"},
    {170, "Crystal Key"},
    {171, "Keeper's Bargain"},
    {172, "Cursed Penny"},
    {173, "Your Soul"},
    {174, "Number Magnet"},
    {175, "Strange Key"},
    {176, "Lil Clot"},
    {177, "Temporary Tattoo"},
    {178, "Swallowed M80"},
    {179, "RC Remote"},
    {180, "Found Soul"},
    {181, "Expansion Pack"},
    {182, "Beth's Essence"},
    {183, "The Twins"},
    {184, "Adoption Papers"},
    {185, "Cricket Leg"},
    {186, "Apollyon's Best Friend"},
    {187, "Broken Glasses"},
    {188, "Ice Cube"},
    {189, "Sigil of Baphomet"}
})
return ____exports
 end,
["lua_modules.isaacscript-common.functions.serialization"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__TypeOf = ____lualib.__TS__TypeOf
local __TS__ObjectEntries = ____lualib.__TS__ObjectEntries
local __TS__ObjectValues = ____lualib.__TS__ObjectValues
local __TS__ArraySome = ____lualib.__TS__ArraySome
local ____exports = {}
local getSerializedTableType
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____isaacAPIClassTypeToBrand = require("lua_modules.isaacscript-common.objects.isaacAPIClassTypeToBrand")
local ISAAC_API_CLASS_TYPE_TO_BRAND = ____isaacAPIClassTypeToBrand.ISAAC_API_CLASS_TYPE_TO_BRAND
local ____isaacAPIClassTypeToCopyFunction = require("lua_modules.isaacscript-common.objects.isaacAPIClassTypeToCopyFunction")
local ISAAC_API_CLASS_TYPE_TO_COPY_FUNCTION = ____isaacAPIClassTypeToCopyFunction.ISAAC_API_CLASS_TYPE_TO_COPY_FUNCTION
local ____serializedIsaacAPIClassTypeToIdentityFunction = require("lua_modules.isaacscript-common.objects.serializedIsaacAPIClassTypeToIdentityFunction")
local SERIALIZED_ISAAC_API_CLASS_TYPE_TO_IDENTITY_FUNCTION = ____serializedIsaacAPIClassTypeToIdentityFunction.SERIALIZED_ISAAC_API_CLASS_TYPE_TO_IDENTITY_FUNCTION
local ____isaacAPIClass = require("lua_modules.isaacscript-common.functions.isaacAPIClass")
local getIsaacAPIClassName = ____isaacAPIClass.getIsaacAPIClassName
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isTable = ____types.isTable
local isUserdata = ____types.isUserdata
function getSerializedTableType(self, serializedIsaacAPIClass)
    for ____, ____value in ipairs(__TS__ObjectEntries(ISAAC_API_CLASS_TYPE_TO_BRAND)) do
        local copyableIsaacAPIClassType = ____value[1]
        local serializationBrand = ____value[2]
        if serializedIsaacAPIClass[serializationBrand] ~= nil then
            return copyableIsaacAPIClassType
        end
    end
    return nil
end
function ____exports.copyIsaacAPIClass(self, isaacAPIClass, serializationType)
    if not isUserdata(nil, isaacAPIClass) then
        error("Failed to copy an Isaac API class since the provided object was of type: " .. __TS__TypeOf(isaacAPIClass))
    end
    local isaacAPIClassType = getIsaacAPIClassName(nil, isaacAPIClass)
    if isaacAPIClassType == nil then
        error("Failed to copy an Isaac API class since it does not have a class type.")
    end
    local copyableIsaacAPIClassType = isaacAPIClassType
    local copyFunction = ISAAC_API_CLASS_TYPE_TO_COPY_FUNCTION[copyableIsaacAPIClassType]
    if copyFunction == nil then
        error(("Failed to copy Isaac API class \"" .. copyableIsaacAPIClassType) .. "\" since there is not a defined copy function for this class type.")
    end
    return copyFunction(nil, isaacAPIClass, serializationType)
end
--- Deserialization is a special case, so we make a dedicated function for this.
-- 
-- There is no need for a corresponding "serializeIsaacAPIClass" function because the
-- "copyIsaacAPIClass" function can handle all serialization types.
function ____exports.deserializeIsaacAPIClass(self, serializedIsaacAPIClass)
    if not isTable(nil, serializedIsaacAPIClass) then
        error("Failed to deserialize an Isaac API class since the provided object was of type: " .. __TS__TypeOf(serializedIsaacAPIClass))
    end
    local copyableIsaacAPIClassType = getSerializedTableType(nil, serializedIsaacAPIClass)
    if copyableIsaacAPIClassType == nil then
        error("Failed to deserialize an API class since a valid class type brand was not found.")
    end
    local copyFunction = ISAAC_API_CLASS_TYPE_TO_COPY_FUNCTION[copyableIsaacAPIClassType]
    return copyFunction(nil, serializedIsaacAPIClass, SerializationType.DESERIALIZE)
end
function ____exports.isSerializedIsaacAPIClass(self, object)
    local identityFunctions = __TS__ObjectValues(SERIALIZED_ISAAC_API_CLASS_TYPE_TO_IDENTITY_FUNCTION)
    return __TS__ArraySome(
        identityFunctions,
        function(____, identityFunction) return identityFunction(nil, object) end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.isaacAPIClassTypeToBrand"] = function(...) 
local ____exports = {}
local ____CopyableIsaacAPIClassType = require("lua_modules.isaacscript-common.enums.private.CopyableIsaacAPIClassType")
local CopyableIsaacAPIClassType = ____CopyableIsaacAPIClassType.CopyableIsaacAPIClassType
local ____SerializationBrand = require("lua_modules.isaacscript-common.enums.private.SerializationBrand")
local SerializationBrand = ____SerializationBrand.SerializationBrand
____exports.ISAAC_API_CLASS_TYPE_TO_BRAND = {[CopyableIsaacAPIClassType.COLOR] = SerializationBrand.COLOR, [CopyableIsaacAPIClassType.K_COLOR] = SerializationBrand.K_COLOR, [CopyableIsaacAPIClassType.RNG] = SerializationBrand.RNG, [CopyableIsaacAPIClassType.VECTOR] = SerializationBrand.VECTOR}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.isaacAPIClassTypeToCopyFunction"] = function(...) 
local ____exports = {}
local ____CopyableIsaacAPIClassType = require("lua_modules.isaacscript-common.enums.private.CopyableIsaacAPIClassType")
local CopyableIsaacAPIClassType = ____CopyableIsaacAPIClassType.CopyableIsaacAPIClassType
local ____color = require("lua_modules.isaacscript-common.functions.color")
local copyColor = ____color.copyColor
local ____kColor = require("lua_modules.isaacscript-common.functions.kColor")
local copyKColor = ____kColor.copyKColor
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local copyRNG = ____rng.copyRNG
local ____vector = require("lua_modules.isaacscript-common.functions.vector")
local copyVector = ____vector.copyVector
____exports.ISAAC_API_CLASS_TYPE_TO_COPY_FUNCTION = {[CopyableIsaacAPIClassType.COLOR] = copyColor, [CopyableIsaacAPIClassType.K_COLOR] = copyKColor, [CopyableIsaacAPIClassType.RNG] = copyRNG, [CopyableIsaacAPIClassType.VECTOR] = copyVector}
return ____exports
 end,
["lua_modules.isaacscript-common.functions.color"] = function(...) 
local ____exports = {}
local OBJECT_NAME
local ____SerializationBrand = require("lua_modules.isaacscript-common.enums.private.SerializationBrand")
local SerializationBrand = ____SerializationBrand.SerializationBrand
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____isaacAPIClass = require("lua_modules.isaacscript-common.functions.isaacAPIClass")
local isaacAPIClassEquals = ____isaacAPIClass.isaacAPIClassEquals
local isIsaacAPIClassOfType = ____isaacAPIClass.isIsaacAPIClassOfType
local ____table = require("lua_modules.isaacscript-common.functions.table")
local copyValuesToTable = ____table.copyValuesToTable
local getNumbersFromTable = ____table.getNumbersFromTable
local tableHasKeys = ____table.tableHasKeys
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isTable = ____types.isTable
--- Helper function to check if something is an instantiated Color object.
function ____exports.isColor(self, object)
    return isIsaacAPIClassOfType(nil, object, OBJECT_NAME)
end
local KEYS = {
    "R",
    "G",
    "B",
    "A",
    "RO",
    "GO",
    "BO"
}
OBJECT_NAME = "Color"
function ____exports.colorEquals(self, color1, color2)
    return isaacAPIClassEquals(nil, color1, color2, KEYS)
end
--- Helper function to copy a `Color` object.
-- 
-- @param color The Color object to copy. In the case of deserialization, this will actually be a
-- Lua table instead of an instantiated Color class.
-- @param serializationType Default is `SerializationType.NONE`.
function ____exports.copyColor(self, color, serializationType)
    if serializationType == nil then
        serializationType = SerializationType.NONE
    end
    repeat
        local ____switch4 = serializationType
        local ____cond4 = ____switch4 == SerializationType.NONE
        if ____cond4 then
            do
                if not ____exports.isColor(nil, color) then
                    error(((("Failed to copy a " .. OBJECT_NAME) .. " object since the provided object was not a userdata ") .. OBJECT_NAME) .. " class.")
                end
                return Color(
                    color.R,
                    color.G,
                    color.B,
                    color.A,
                    color.RO,
                    color.GO,
                    color.BO
                )
            end
        end
        ____cond4 = ____cond4 or ____switch4 == SerializationType.SERIALIZE
        if ____cond4 then
            do
                if not ____exports.isColor(nil, color) then
                    error(((("Failed to serialize a " .. OBJECT_NAME) .. " object since the provided object was not a userdata ") .. OBJECT_NAME) .. " class.")
                end
                local colorTable = {}
                copyValuesToTable(nil, color, KEYS, colorTable)
                colorTable[SerializationBrand.COLOR] = ""
                return colorTable
            end
        end
        ____cond4 = ____cond4 or ____switch4 == SerializationType.DESERIALIZE
        if ____cond4 then
            do
                if not isTable(nil, color) then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object was not a Lua table.")
                end
                local r, g, b, a, ro, go, bo = table.unpack(getNumbersFromTable(
                    nil,
                    color,
                    OBJECT_NAME,
                    table.unpack(KEYS)
                ))
                if r == nil then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object did not have a value for: r")
                end
                if g == nil then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object did not have a value for: g")
                end
                if b == nil then
                    error(("Failed to deserialize a " .. OBJECT_NAME) .. " object since the provided object did not have a value for: b")
                end
                return Color(
                    r,
                    g,
                    b,
                    a,
                    ro,
                    go,
                    bo
                )
            end
        end
    until true
end
--- Returns `Color(1, 1, 1)`.
function ____exports.getDefaultColor(self)
    return Color(1, 1, 1)
end
--- Used to determine is the given table is a serialized `Color` object created by the save data
-- manager and/or the `deepCopy` function.
function ____exports.isSerializedColor(self, object)
    if not isTable(nil, object) then
        return false
    end
    return tableHasKeys(
        nil,
        object,
        table.unpack(KEYS)
    ) and object[SerializationBrand.COLOR] ~= nil
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.serializedIsaacAPIClassTypeToIdentityFunction"] = function(...) 
local ____exports = {}
local ____CopyableIsaacAPIClassType = require("lua_modules.isaacscript-common.enums.private.CopyableIsaacAPIClassType")
local CopyableIsaacAPIClassType = ____CopyableIsaacAPIClassType.CopyableIsaacAPIClassType
local ____color = require("lua_modules.isaacscript-common.functions.color")
local isSerializedColor = ____color.isSerializedColor
local ____kColor = require("lua_modules.isaacscript-common.functions.kColor")
local isSerializedKColor = ____kColor.isSerializedKColor
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local isSerializedRNG = ____rng.isSerializedRNG
local ____vector = require("lua_modules.isaacscript-common.functions.vector")
local isSerializedVector = ____vector.isSerializedVector
____exports.SERIALIZED_ISAAC_API_CLASS_TYPE_TO_IDENTITY_FUNCTION = {[CopyableIsaacAPIClassType.COLOR] = isSerializedColor, [CopyableIsaacAPIClassType.K_COLOR] = isSerializedKColor, [CopyableIsaacAPIClassType.RNG] = isSerializedRNG, [CopyableIsaacAPIClassType.VECTOR] = isSerializedVector}
return ____exports
 end,
["lua_modules.isaacscript-common.features.saveDataManager.main"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local postPlayerInit, preGameExit, postNewLevel, postNewRoomEarly, restoreDefaultsAll, restoreDefaults, clearAndCopyAllElements, RESETTABLE_SAVE_DATA_KEYS, mod, loadedDataOnThisRun
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____SaveDataKey = require("lua_modules.isaacscript-common.enums.private.SaveDataKey")
local SaveDataKey = ____SaveDataKey.SaveDataKey
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____deepCopy = require("lua_modules.isaacscript-common.functions.deepCopy")
local deepCopy = ____deepCopy.deepCopy
local ____log = require("lua_modules.isaacscript-common.functions.log")
local logError = ____log.logError
local ____table = require("lua_modules.isaacscript-common.functions.table")
local clearTable = ____table.clearTable
local iterateTableInOrder = ____table.iterateTableInOrder
local ____constants = require("lua_modules.isaacscript-common.features.saveDataManager.constants")
local SAVE_DATA_MANAGER_DEBUG = ____constants.SAVE_DATA_MANAGER_DEBUG
local SAVE_DATA_MANAGER_FEATURE_NAME = ____constants.SAVE_DATA_MANAGER_FEATURE_NAME
local ____load = require("lua_modules.isaacscript-common.features.saveDataManager.load")
local loadFromDisk = ____load.loadFromDisk
local ____maps = require("lua_modules.isaacscript-common.features.saveDataManager.maps")
local saveDataConditionalFuncMap = ____maps.saveDataConditionalFuncMap
local saveDataDefaultsMap = ____maps.saveDataDefaultsMap
local saveDataMap = ____maps.saveDataMap
local ____save = require("lua_modules.isaacscript-common.features.saveDataManager.save")
local saveToDisk = ____save.saveToDisk
function postPlayerInit(self)
    if mod == nil then
        error(("The mod for the " .. SAVE_DATA_MANAGER_FEATURE_NAME) .. " was not initialized.")
    end
    if loadedDataOnThisRun then
        return
    end
    loadedDataOnThisRun = true
    loadFromDisk(nil, mod, saveDataMap)
    local gameFrameCount = game:GetFrameCount()
    local isContinued = gameFrameCount ~= 0
    if not isContinued then
        restoreDefaultsAll(nil)
    end
end
function preGameExit(self)
    if mod == nil then
        error(("The mod for the " .. SAVE_DATA_MANAGER_FEATURE_NAME) .. " was not initialized.")
    end
    saveToDisk(nil, mod, saveDataMap, saveDataConditionalFuncMap)
    restoreDefaultsAll(nil)
    loadedDataOnThisRun = false
end
function postNewLevel(self)
    restoreDefaults(nil, SaveDataKey.LEVEL)
end
function postNewRoomEarly(self)
    restoreDefaults(nil, SaveDataKey.ROOM)
end
function restoreDefaultsAll(self)
    restoreDefaults(nil, SaveDataKey.RUN)
    restoreDefaults(nil, SaveDataKey.LEVEL)
    restoreDefaults(nil, SaveDataKey.ROOM)
end
function restoreDefaults(self, saveDataKey)
    iterateTableInOrder(
        nil,
        saveDataMap,
        function(____, subscriberName, saveData)
            ____exports.restoreDefaultSaveData(nil, subscriberName, saveData, saveDataKey)
        end,
        SAVE_DATA_MANAGER_DEBUG
    )
end
function ____exports.restoreDefaultSaveData(self, subscriberName, saveData, saveDataKey)
    if not RESETTABLE_SAVE_DATA_KEYS:has(saveDataKey) then
        error("Unknown save data key name of: " .. saveDataKey)
    end
    local childTable = saveData[saveDataKey]
    if childTable == nil then
        return
    end
    local saveDataDefaults = saveDataDefaultsMap[subscriberName]
    if saveDataDefaults == nil then
        logError("Failed to find the default copy of the save data for subscriber: " .. subscriberName)
        return
    end
    local childTableDefaults = saveDataDefaults[saveDataKey]
    if childTableDefaults == nil then
        logError(((("Failed to find the default copy of the child table \"" .. saveDataKey) .. "\" for subscriber \"") .. subscriberName) .. "\". This error usually means that your save data is out of date. You can try purging all of your save data by deleting the following directory: C:\\Program Files (x86)\\Steam\\steamapps\\common\\The Binding of Isaac Rebirth\\data")
        return
    end
    local childTableDefaultsCopy = deepCopy(nil, childTableDefaults, SerializationType.NONE, (subscriberName .. " --> ") .. saveDataKey)
    clearAndCopyAllElements(nil, childTable, childTableDefaultsCopy)
end
function clearAndCopyAllElements(self, oldTable, newTable)
    clearTable(nil, oldTable)
    for key, value in pairs(newTable) do
        oldTable[key] = value
    end
end
RESETTABLE_SAVE_DATA_KEYS = __TS__New(Set, {SaveDataKey.RUN, SaveDataKey.LEVEL, SaveDataKey.ROOM})
mod = nil
loadedDataOnThisRun = false
---
-- @internal
function ____exports.saveDataManagerInit(self, incomingMod)
    mod = incomingMod
    mod:AddCallback(ModCallback.POST_PLAYER_INIT, postPlayerInit)
    mod:AddCallback(ModCallback.PRE_GAME_EXIT, preGameExit)
    mod:AddCallback(ModCallback.POST_NEW_LEVEL, postNewLevel)
    mod:AddCallbackCustom(ModCallbackCustom.POST_NEW_ROOM_EARLY, postNewRoomEarly)
end
---
-- @internal
function ____exports.forceSaveDataManagerSave(self)
    if mod == nil then
        return
    end
    saveToDisk(nil, mod, saveDataMap, saveDataConditionalFuncMap)
end
---
-- @internal
function ____exports.forceSaveDataManagerLoad(self)
    if mod == nil then
        return
    end
    loadFromDisk(nil, mod, saveDataMap)
end
return ____exports
 end,
["lua_modules.isaacscript-common.enums.private.SaveDataKey"] = function(...) 
local ____exports = {}
____exports.SaveDataKey = {}
____exports.SaveDataKey.PERSISTENT = "persistent"
____exports.SaveDataKey.RUN = "run"
____exports.SaveDataKey.LEVEL = "level"
____exports.SaveDataKey.ROOM = "room"
return ____exports
 end,
["lua_modules.isaacscript-common.features.saveDataManager.load"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__StringTrim = ____lualib.__TS__StringTrim
local ____exports = {}
local readSaveDatFile, tryLoadModData, DEFAULT_MOD_DATA
local ____jsonHelpers = require("lua_modules.isaacscript-common.functions.jsonHelpers")
local jsonDecode = ____jsonHelpers.jsonDecode
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
local logError = ____log.logError
local ____table = require("lua_modules.isaacscript-common.functions.table")
local iterateTableInOrder = ____table.iterateTableInOrder
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isString = ____types.isString
local isTable = ____types.isTable
local ____constants = require("lua_modules.isaacscript-common.features.saveDataManager.constants")
local SAVE_DATA_MANAGER_DEBUG = ____constants.SAVE_DATA_MANAGER_DEBUG
local SAVE_DATA_MANAGER_FEATURE_NAME = ____constants.SAVE_DATA_MANAGER_FEATURE_NAME
local ____merge = require("lua_modules.isaacscript-common.features.saveDataManager.merge")
local merge = ____merge.merge
function readSaveDatFile(self, mod)
    local renderFrameCount = Isaac.GetFrameCount()
    local ok, jsonStringOrErrMsg = pcall(tryLoadModData, mod)
    if not ok then
        logError((("Failed to read from the \"save#.dat\" file on render frame " .. tostring(renderFrameCount)) .. ": ") .. jsonStringOrErrMsg)
        return DEFAULT_MOD_DATA
    end
    if jsonStringOrErrMsg == nil then
        return DEFAULT_MOD_DATA
    end
    local jsonStringTrimmed = __TS__StringTrim(jsonStringOrErrMsg)
    if jsonStringTrimmed == "" then
        return DEFAULT_MOD_DATA
    end
    return jsonStringTrimmed
end
function tryLoadModData(mod)
    return mod:LoadData()
end
DEFAULT_MOD_DATA = "{}"
function ____exports.loadFromDisk(self, mod, oldSaveData)
    if not mod:HasData() then
        return
    end
    local jsonString = readSaveDatFile(nil, mod)
    local newSaveData = jsonDecode(nil, jsonString)
    if SAVE_DATA_MANAGER_DEBUG then
        log("Converted data from the \"save#.dat\" to a Lua table.")
    end
    iterateTableInOrder(
        nil,
        newSaveData,
        function(____, key, value)
            if not isString(nil, key) then
                return
            end
            if not isTable(nil, value) then
                return
            end
            local oldSaveDataForSubscriber = oldSaveData[key]
            if oldSaveDataForSubscriber == nil then
                return
            end
            if SAVE_DATA_MANAGER_DEBUG then
                log("Merging in stored data for feature: " .. key)
            end
            merge(nil, oldSaveDataForSubscriber, value, key)
        end,
        SAVE_DATA_MANAGER_DEBUG
    )
    log(("The " .. SAVE_DATA_MANAGER_FEATURE_NAME) .. " loaded data from the \"save#.dat\" file.")
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.jsonHelpers"] = function(...) 
local ____exports = {}
local json = require("json")
local ____log = require("lua_modules.isaacscript-common.functions.log")
local logError = ____log.logError
local function tryDecode(jsonString)
    return json.decode(jsonString)
end
local function tryEncode(luaTable)
    return json.encode(luaTable)
end
--- Converts a JSON string to a Lua table.
-- 
-- In most cases, this function will be used for reading data from a "save#.dat" file. If decoding
-- fails, it will return a blank Lua table instead of throwing an error. (This allows execution to
-- continue in cases where users have no current save data or have manually removed their existing
-- save data.)
function ____exports.jsonDecode(self, jsonString)
    local ok, luaTableOrErrMsg = pcall(tryDecode, jsonString)
    if not ok then
        logError("Failed to convert the JSON string to a Lua table: " .. jsonString)
        return {}
    end
    return luaTableOrErrMsg
end
--- Converts a Lua table to a JSON string.
-- 
-- In most cases, this function will be used for writing data to a "save#.dat" file. If encoding
-- fails, it will throw an error to prevent writing a blank string or corrupted data to a user's
-- "save#.dat" file.
function ____exports.jsonEncode(self, luaTable)
    local ok, jsonStringOrErrMsg = pcall(tryEncode, luaTable)
    if not ok then
        error("Failed to convert the Lua table to JSON: " .. jsonStringOrErrMsg)
    end
    return jsonStringOrErrMsg
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.saveDataManager.merge"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local Set = ____lualib.Set
local ____exports = {}
local mergeArray, mergeTSTLObject, mergeTable
local ____SerializationBrand = require("lua_modules.isaacscript-common.enums.private.SerializationBrand")
local SerializationBrand = ____SerializationBrand.SerializationBrand
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____array = require("lua_modules.isaacscript-common.functions.array")
local isArray = ____array.isArray
local ____deepCopy = require("lua_modules.isaacscript-common.functions.deepCopy")
local deepCopy = ____deepCopy.deepCopy
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
local ____serialization = require("lua_modules.isaacscript-common.functions.serialization")
local deserializeIsaacAPIClass = ____serialization.deserializeIsaacAPIClass
local isSerializedIsaacAPIClass = ____serialization.isSerializedIsaacAPIClass
local ____table = require("lua_modules.isaacscript-common.functions.table")
local clearTable = ____table.clearTable
local iterateTableInOrder = ____table.iterateTableInOrder
local ____tstlClass = require("lua_modules.isaacscript-common.functions.tstlClass")
local isTSTLMap = ____tstlClass.isTSTLMap
local isTSTLSet = ____tstlClass.isTSTLSet
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isTable = ____types.isTable
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local getTraversalDescription = ____utils.getTraversalDescription
local ____constants = require("lua_modules.isaacscript-common.features.saveDataManager.constants")
local SAVE_DATA_MANAGER_DEBUG = ____constants.SAVE_DATA_MANAGER_DEBUG
local ____serializationBrand = require("lua_modules.isaacscript-common.features.saveDataManager.serializationBrand")
local isSerializationBrand = ____serializationBrand.isSerializationBrand
--- `merge` takes the values from a new table and recursively merges them into an old object (while
-- performing appropriate deserialization).
-- 
-- It supports the following object types:
-- 
-- - `LuaTable` / basic TSTL objects
-- - TSTL `Map`
-- - TSTL `Set`
-- - TSTL classes
-- - `DefaultMap`
-- - Isaac `Color` objects
-- - Isaac `KColor` objects
-- - Isaac `RNG` objects
-- - Isaac `Vector` objects
-- 
-- Since it is common for a variable to have a type of `something | null`, we must iterate over the
-- new object and copy over all of the values. (A value of null transpiles to nil, which means the
-- table key does not exist.) The consequence of this is that it can copy over old variables that
-- are no longer used in the code, or copy over old variables of a different type, which can cause
-- run-time errors. In such cases, users will have to manually delete their save data.
function ____exports.merge(self, oldObject, newTable, traversalDescription)
    if SAVE_DATA_MANAGER_DEBUG then
        log("merge is traversing: " .. traversalDescription)
    end
    if not isTable(nil, oldObject) then
        error("The first argument given to the merge function is not a table.")
    end
    if not isTable(nil, newTable) then
        error("The second argument given to the merge function is not a table.")
    end
    if isArray(nil, oldObject) and isArray(nil, newTable) then
        mergeArray(nil, oldObject, newTable)
        return
    end
    if isTSTLMap(nil, oldObject) or isTSTLSet(nil, oldObject) then
        mergeTSTLObject(nil, oldObject, newTable, traversalDescription)
    else
        mergeTable(nil, oldObject, newTable, traversalDescription)
    end
end
function mergeArray(self, oldArray, newArray)
    clearTable(nil, oldArray)
    iterateTableInOrder(
        nil,
        newArray,
        function(____, key, value)
            oldArray[key] = value
        end,
        SAVE_DATA_MANAGER_DEBUG
    )
end
function mergeTSTLObject(self, oldObject, newTable, traversalDescription)
    oldObject:clear()
    local convertStringKeysToNumbers = newTable[SerializationBrand.OBJECT_WITH_NUMBER_KEYS] ~= nil
    iterateTableInOrder(
        nil,
        newTable,
        function(____, key, value)
            if isSerializationBrand(nil, key) then
                return
            end
            local keyToUse = key
            if convertStringKeysToNumbers then
                local numberKey = tonumber(key)
                if numberKey == nil then
                    return
                end
                keyToUse = numberKey
            end
            if isTSTLMap(nil, oldObject) then
                local valueCopy
                if isTable(nil, value) then
                    valueCopy = deepCopy(nil, value, SerializationType.DESERIALIZE, traversalDescription)
                else
                    valueCopy = value
                end
                oldObject:set(keyToUse, valueCopy)
            elseif isTSTLSet(nil, oldObject) then
                oldObject:add(keyToUse)
            end
        end,
        SAVE_DATA_MANAGER_DEBUG
    )
end
function mergeTable(self, oldTable, newTable, traversalDescription)
    iterateTableInOrder(
        nil,
        newTable,
        function(____, key, value)
            if SAVE_DATA_MANAGER_DEBUG then
                local valueToPrint = value == "" and "(empty string)" or tostring(value)
                log((("merge is merging: " .. traversalDescription) .. " --> ") .. valueToPrint)
            end
            if isSerializationBrand(nil, key) then
                return
            end
            if isSerializedIsaacAPIClass(nil, value) then
                if SAVE_DATA_MANAGER_DEBUG then
                    log("merge found a serialized Isaac API class.")
                end
                local deserializedObject = deserializeIsaacAPIClass(nil, value)
                oldTable[key] = deserializedObject
                return
            end
            if isTable(nil, value) then
                local oldValue = oldTable[key]
                if not isTable(nil, oldValue) then
                    oldValue = {}
                    oldTable[key] = oldValue
                end
                traversalDescription = getTraversalDescription(nil, key, traversalDescription)
                ____exports.merge(nil, oldValue, value, traversalDescription)
            else
                oldTable[key] = value
            end
        end,
        SAVE_DATA_MANAGER_DEBUG
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.saveDataManager.maps"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
--- The save data map is indexed by subscriber name. We use Lua tables instead of TypeScriptToLua
-- Maps for the master map so that we can access the variables via the in-game console when
-- debugging. (TSTL Maps don't expose the map keys as normal keys.)
____exports.saveDataMap = {}
____exports.saveDataDefaultsMap = {}
____exports.saveDataConditionalFuncMap = __TS__New(Map)
return ____exports
 end,
["lua_modules.isaacscript-common.features.saveDataManager.save"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__ObjectKeys = ____lualib.__TS__ObjectKeys
local ____exports = {}
local getAllSaveDataToWriteToDisk
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____deepCopy = require("lua_modules.isaacscript-common.functions.deepCopy")
local deepCopy = ____deepCopy.deepCopy
local ____jsonHelpers = require("lua_modules.isaacscript-common.functions.jsonHelpers")
local jsonEncode = ____jsonHelpers.jsonEncode
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
local ____table = require("lua_modules.isaacscript-common.functions.table")
local iterateTableInOrder = ____table.iterateTableInOrder
local ____constants = require("lua_modules.isaacscript-common.features.saveDataManager.constants")
local SAVE_DATA_MANAGER_DEBUG = ____constants.SAVE_DATA_MANAGER_DEBUG
local SAVE_DATA_MANAGER_FEATURE_NAME = ____constants.SAVE_DATA_MANAGER_FEATURE_NAME
function getAllSaveDataToWriteToDisk(self, saveDataMap, saveDataConditionalFuncMap)
    local allSaveData = {}
    iterateTableInOrder(
        nil,
        saveDataMap,
        function(____, subscriberName, saveData)
            local conditionalFunc = saveDataConditionalFuncMap:get(subscriberName)
            if conditionalFunc ~= nil then
                local shouldSave = conditionalFunc(nil)
                if not shouldSave then
                    return
                end
            end
            local saveDataWithoutRoom = {persistent = saveData.persistent, run = saveData.run, level = saveData.level}
            if #__TS__ObjectKeys(saveDataWithoutRoom) == 0 then
                return
            end
            local saveDataCopy = deepCopy(nil, saveDataWithoutRoom, SerializationType.SERIALIZE, subscriberName)
            allSaveData[subscriberName] = saveDataCopy
        end,
        SAVE_DATA_MANAGER_DEBUG
    )
    return allSaveData
end
function ____exports.saveToDisk(self, mod, saveDataMap, saveDataConditionalFuncMap)
    local allSaveData = getAllSaveDataToWriteToDisk(nil, saveDataMap, saveDataConditionalFuncMap)
    local jsonString = jsonEncode(nil, allSaveData)
    mod:SaveData(jsonString)
    log(("The " .. SAVE_DATA_MANAGER_FEATURE_NAME) .. " wrote data to the \"save#.dat\" file.")
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postCustomDoorEnter"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postCustomDoorEnterHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postCustomDoorEnterRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postCustomDoorEnterFire(self, player, effectVariant, doorSlot, direction)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackEffectVariant = ____value[2]
        do
            if callbackEffectVariant ~= nil and callbackEffectVariant ~= effectVariant then
                goto __continue5
            end
            callback(
                nil,
                player,
                effectVariant,
                doorSlot,
                direction
            )
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.reorderedCallbacks"] = function(...) 
local ____exports = {}
local hasSubscriptions, useItemGlowingHourGlass, postGameStartedVanilla, postNewLevelVanilla, postNewRoomVanilla, recordCurrentStage, currentStage, currentStageType, usedGlowingHourGlass, forceNewLevel, forceNewRoom
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____postGameStartedReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGameStartedReordered")
local postGameStartedReorderedFire = ____postGameStartedReordered.postGameStartedReorderedFire
local postGameStartedReorderedHasSubscriptions = ____postGameStartedReordered.postGameStartedReorderedHasSubscriptions
local ____postNewLevelReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postNewLevelReordered")
local postNewLevelReorderedFire = ____postNewLevelReordered.postNewLevelReorderedFire
local postNewLevelReorderedHasSubscriptions = ____postNewLevelReordered.postNewLevelReorderedHasSubscriptions
local ____postNewRoomReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postNewRoomReordered")
local postNewRoomReorderedFire = ____postNewRoomReordered.postNewRoomReorderedFire
local postNewRoomReorderedHasSubscriptions = ____postNewRoomReordered.postNewRoomReorderedHasSubscriptions
function hasSubscriptions(self)
    return postGameStartedReorderedHasSubscriptions(nil) or postNewLevelReorderedHasSubscriptions(nil) or postNewRoomReorderedHasSubscriptions(nil)
end
function useItemGlowingHourGlass(self)
    usedGlowingHourGlass = true
    return nil
end
function postGameStartedVanilla(self, isContinued)
    if not hasSubscriptions(nil) then
        return
    end
    postGameStartedReorderedFire(nil, isContinued)
    recordCurrentStage(nil)
    postNewLevelReorderedFire(nil)
    postNewRoomReorderedFire(nil)
end
function postNewLevelVanilla(self)
    if not hasSubscriptions(nil) then
        return
    end
    local gameFrameCount = game:GetFrameCount()
    if gameFrameCount == 0 and not forceNewLevel then
        return
    end
    forceNewLevel = false
    recordCurrentStage(nil)
    postNewLevelReorderedFire(nil)
    postNewRoomReorderedFire(nil)
end
function postNewRoomVanilla(self)
    if not hasSubscriptions(nil) then
        return
    end
    local gameFrameCount = game:GetFrameCount()
    local level = game:GetLevel()
    local stage = level:GetStage()
    local stageType = level:GetStageType()
    if usedGlowingHourGlass then
        usedGlowingHourGlass = false
        if currentStage ~= stage or currentStageType ~= stageType then
            recordCurrentStage(nil)
            postNewLevelReorderedFire(nil)
            postNewRoomReorderedFire(nil)
            return
        end
    end
    if (gameFrameCount == 0 or currentStage ~= stage or currentStageType ~= stageType) and not forceNewRoom then
        return
    end
    forceNewRoom = false
    postNewRoomReorderedFire(nil)
end
function recordCurrentStage(self)
    local level = game:GetLevel()
    local stage = level:GetStage()
    local stageType = level:GetStageType()
    currentStage = stage
    currentStageType = stageType
end
currentStage = nil
currentStageType = nil
usedGlowingHourGlass = false
forceNewLevel = false
forceNewRoom = false
---
-- @internal
function ____exports.reorderedCallbacksInit(self, mod)
    mod:AddCallback(ModCallback.POST_USE_ITEM, useItemGlowingHourGlass, CollectibleType.GLOWING_HOUR_GLASS)
    mod:AddCallback(ModCallback.POST_GAME_STARTED, postGameStartedVanilla)
    mod:AddCallback(ModCallback.POST_NEW_LEVEL, postNewLevelVanilla)
    mod:AddCallback(ModCallback.POST_NEW_ROOM, postNewRoomVanilla)
end
--- This is a utility function for users of the `ModCallbackCustom.POST_NEW_LEVEL_REORDERED` custom
-- callback.
-- 
-- If some specific cases, mods can change the current level during run initialization on the 0th
-- frame. However, due to how the callback reordering works, the custom PostNewLevel callback will
-- never fire on the 0th frame. To get around this, call this function before changing levels to
-- temporarily force the callback to fire.
function ____exports.forceNewLevelCallback(self)
    forceNewLevel = true
end
--- This is a utility function for users of the `ModCallbackCustom.POST_NEW_ROOM_REORDERED` custom
-- callback.
-- 
-- If some specific cases, mods can change the current room during run initialization on the 0th
-- frame. However, due to how the callback reordering works, the custom PostNewRoom callback will
-- never fire on the 0th frame. To get around this, call this function before changing rooms to
-- temporarily force the callback to fire.
function ____exports.forceNewRoomCallback(self)
    forceNewRoom = true
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postGameStartedReordered"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postGameStartedReorderedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postGameStartedReorderedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postGameStartedReorderedFire(self, isContinued)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil, isContinued)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postNewLevelReordered"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postNewLevelReorderedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postNewLevelReorderedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postNewLevelReorderedFire(self)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postNewRoomReordered"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postNewRoomReorderedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postNewRoomReorderedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postNewRoomReorderedFire(self)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.classes.ModUpgraded"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__Class = ____lualib.__TS__Class
local ____exports = {}
local ____callbackRegisterFunctions = require("lua_modules.isaacscript-common.objects.callbackRegisterFunctions")
local CALLBACK_REGISTER_FUNCTIONS = ____callbackRegisterFunctions.CALLBACK_REGISTER_FUNCTIONS
--- `isaacscript-common` has many custom callbacks that you can use in your mods. Instead of
-- hijacking the vanilla `Mod` object, we provide a `ModUpgraded` object for you to use, which
-- extends the base class and adds a new method of `AddCallbackCustom`.
-- 
-- To upgrade your mod, use the `upgradeMod` helper function.
____exports.ModUpgraded = __TS__Class()
local ModUpgraded = ____exports.ModUpgraded
ModUpgraded.name = "ModUpgraded"
function ModUpgraded.prototype.____constructor(self, mod)
    self.Name = mod.Name
    self.Mod = mod
end
function ModUpgraded.prototype.AddCallback(self, modCallback, ...)
    self.Mod:AddCallback(modCallback, ...)
end
function ModUpgraded.prototype.HasData(self)
    return self.Mod:HasData()
end
function ModUpgraded.prototype.LoadData(self)
    return self.Mod:LoadData()
end
function ModUpgraded.prototype.RemoveCallback(self, modCallback, callback)
    self.Mod:RemoveCallback(modCallback, callback)
end
function ModUpgraded.prototype.RemoveData(self)
    self.Mod:RemoveData()
end
function ModUpgraded.prototype.SaveData(self, data)
    self.Mod:SaveData(data)
end
function ModUpgraded.prototype.AddCallbackCustom(self, modCallbackCustom, ...)
    local callbackRegisterFunction = CALLBACK_REGISTER_FUNCTIONS[modCallbackCustom]
    callbackRegisterFunction(nil, ...)
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.callbackRegisterFunctions"] = function(...) 
local ____exports = {}
local ____postAmbushFinished = require("lua_modules.isaacscript-common.callbacks.subscriptions.postAmbushFinished")
local postAmbushFinishedRegister = ____postAmbushFinished.postAmbushFinishedRegister
local ____postAmbushStarted = require("lua_modules.isaacscript-common.callbacks.subscriptions.postAmbushStarted")
local postAmbushStartedRegister = ____postAmbushStarted.postAmbushStartedRegister
local ____postBombInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postBombInitLate")
local postBombInitLateRegister = ____postBombInitLate.postBombInitLateRegister
local ____postBoneExploded = require("lua_modules.isaacscript-common.callbacks.subscriptions.postBoneExploded")
local postBombExplodedRegister = ____postBoneExploded.postBombExplodedRegister
local ____postBoneSwing = require("lua_modules.isaacscript-common.callbacks.subscriptions.postBoneSwing")
local postBoneSwingRegister = ____postBoneSwing.postBoneSwingRegister
local ____postCollectibleInitFirst = require("lua_modules.isaacscript-common.callbacks.subscriptions.postCollectibleInitFirst")
local postCollectibleInitFirstRegister = ____postCollectibleInitFirst.postCollectibleInitFirstRegister
local ____postCursedTeleport = require("lua_modules.isaacscript-common.callbacks.subscriptions.postCursedTeleport")
local postCursedTeleportRegister = ____postCursedTeleport.postCursedTeleportRegister
local ____postCustomDoorEnter = require("lua_modules.isaacscript-common.callbacks.subscriptions.postCustomDoorEnter")
local postCustomDoorEnterRegister = ____postCustomDoorEnter.postCustomDoorEnterRegister
local ____postCustomRevive = require("lua_modules.isaacscript-common.callbacks.subscriptions.postCustomRevive")
local postCustomReviveRegister = ____postCustomRevive.postCustomReviveRegister
local ____postDiceRoomActivated = require("lua_modules.isaacscript-common.callbacks.subscriptions.postDiceRoomActivated")
local postDiceRoomActivatedRegister = ____postDiceRoomActivated.postDiceRoomActivatedRegister
local ____postDoorRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postDoorRender")
local postDoorRenderRegister = ____postDoorRender.postDoorRenderRegister
local ____postDoorUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postDoorUpdate")
local postDoorUpdateRegister = ____postDoorUpdate.postDoorUpdateRegister
local ____postEffectInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postEffectInitLate")
local postEffectInitLateRegister = ____postEffectInitLate.postEffectInitLateRegister
local ____postEffectStateChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postEffectStateChanged")
local postEffectStateChangedRegister = ____postEffectStateChanged.postEffectStateChangedRegister
local ____postEsauJr = require("lua_modules.isaacscript-common.callbacks.subscriptions.postEsauJr")
local postEsauJrRegister = ____postEsauJr.postEsauJrRegister
local ____postFamiliarInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postFamiliarInitLate")
local postFamiliarInitLateRegister = ____postFamiliarInitLate.postFamiliarInitLateRegister
local ____postFamiliarStateChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postFamiliarStateChanged")
local postFamiliarStateChangedRegister = ____postFamiliarStateChanged.postFamiliarStateChangedRegister
local ____postFirstEsauJr = require("lua_modules.isaacscript-common.callbacks.subscriptions.postFirstEsauJr")
local postFirstEsauJrRegister = ____postFirstEsauJr.postFirstEsauJrRegister
local ____postFirstFlip = require("lua_modules.isaacscript-common.callbacks.subscriptions.postFirstFlip")
local postFirstFlipRegister = ____postFirstFlip.postFirstFlipRegister
local ____postFlip = require("lua_modules.isaacscript-common.callbacks.subscriptions.postFlip")
local postFlipRegister = ____postFlip.postFlipRegister
local ____postGameStartedReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGameStartedReordered")
local postGameStartedReorderedRegister = ____postGameStartedReordered.postGameStartedReorderedRegister
local ____postGreedModeWave = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGreedModeWave")
local postGreedModeWaveRegister = ____postGreedModeWave.postGreedModeWaveRegister
local ____postGridEntityBroken = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityBroken")
local postGridEntityBrokenRegister = ____postGridEntityBroken.postGridEntityBrokenRegister
local ____postGridEntityCollision = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityCollision")
local postGridEntityCollisionRegister = ____postGridEntityCollision.postGridEntityCollisionRegister
local ____postGridEntityInit = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityInit")
local postGridEntityInitRegister = ____postGridEntityInit.postGridEntityInitRegister
local ____postGridEntityRemove = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityRemove")
local postGridEntityRemoveRegister = ____postGridEntityRemove.postGridEntityRemoveRegister
local ____postGridEntityRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityRender")
local postGridEntityRenderRegister = ____postGridEntityRender.postGridEntityRenderRegister
local ____postGridEntityStateChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityStateChanged")
local postGridEntityStateChangedRegister = ____postGridEntityStateChanged.postGridEntityStateChangedRegister
local ____postGridEntityUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityUpdate")
local postGridEntityUpdateRegister = ____postGridEntityUpdate.postGridEntityUpdateRegister
local ____postHolyMantleRemoved = require("lua_modules.isaacscript-common.callbacks.subscriptions.postHolyMantleRemoved")
local postHolyMantleRemovedRegister = ____postHolyMantleRemoved.postHolyMantleRemovedRegister
local ____postItemDischarged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postItemDischarged")
local postItemDischargeRegister = ____postItemDischarged.postItemDischargeRegister
local ____postItemPickup = require("lua_modules.isaacscript-common.callbacks.subscriptions.postItemPickup")
local postItemPickupRegister = ____postItemPickup.postItemPickupRegister
local ____postKnifeInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postKnifeInitLate")
local postKnifeInitLateRegister = ____postKnifeInitLate.postKnifeInitLateRegister
local ____postLaserInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postLaserInitLate")
local postLaserInitLateRegister = ____postLaserInitLate.postLaserInitLateRegister
local ____postNewLevelReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postNewLevelReordered")
local postNewLevelReorderedRegister = ____postNewLevelReordered.postNewLevelReorderedRegister
local ____postNewRoomEarly = require("lua_modules.isaacscript-common.callbacks.subscriptions.postNewRoomEarly")
local postNewRoomEarlyRegister = ____postNewRoomEarly.postNewRoomEarlyRegister
local ____postNewRoomReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postNewRoomReordered")
local postNewRoomReorderedRegister = ____postNewRoomReordered.postNewRoomReorderedRegister
local ____postNPCInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postNPCInitLate")
local postNPCInitLateRegister = ____postNPCInitLate.postNPCInitLateRegister
local ____postNPCStateChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postNPCStateChanged")
local postNPCStateChangedRegister = ____postNPCStateChanged.postNPCStateChangedRegister
local ____postPEffectUpdateReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPEffectUpdateReordered")
local postPEffectUpdateReorderedRegister = ____postPEffectUpdateReordered.postPEffectUpdateReorderedRegister
local ____postPickupCollect = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPickupCollect")
local postPickupCollectRegister = ____postPickupCollect.postPickupCollectRegister
local ____postPickupInitFirst = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPickupInitFirst")
local postPickupInitFirstRegister = ____postPickupInitFirst.postPickupInitFirstRegister
local ____postPickupInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPickupInitLate")
local postPickupInitLateRegister = ____postPickupInitLate.postPickupInitLateRegister
local ____postPickupStateChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPickupStateChanged")
local postPickupStateChangedRegister = ____postPickupStateChanged.postPickupStateChangedRegister
local ____postPitRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPitRender")
local postPitRenderRegister = ____postPitRender.postPitRenderRegister
local ____postPitUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPitUpdate")
local postPitUpdateRegister = ____postPitUpdate.postPitUpdateRegister
local ____postPlayerChangeHealth = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerChangeHealth")
local postPlayerChangeHealthRegister = ____postPlayerChangeHealth.postPlayerChangeHealthRegister
local ____postPlayerChangeType = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerChangeType")
local postPlayerChangeTypeRegister = ____postPlayerChangeType.postPlayerChangeTypeRegister
local ____postPlayerCollectibleAdded = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerCollectibleAdded")
local postPlayerCollectibleAddedRegister = ____postPlayerCollectibleAdded.postPlayerCollectibleAddedRegister
local ____postPlayerCollectibleRemoved = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerCollectibleRemoved")
local postPlayerCollectibleRemovedRegister = ____postPlayerCollectibleRemoved.postPlayerCollectibleRemovedRegister
local ____postPlayerFatalDamage = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerFatalDamage")
local postPlayerFatalDamageRegister = ____postPlayerFatalDamage.postPlayerFatalDamageRegister
local ____postPlayerInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerInitLate")
local postPlayerInitLateRegister = ____postPlayerInitLate.postPlayerInitLateRegister
local ____postPlayerInitReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerInitReordered")
local postPlayerInitReorderedRegister = ____postPlayerInitReordered.postPlayerInitReorderedRegister
local ____postPlayerRenderReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerRenderReordered")
local postPlayerRenderReorderedRegister = ____postPlayerRenderReordered.postPlayerRenderReorderedRegister
local ____postPlayerUpdateReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerUpdateReordered")
local postPlayerUpdateReorderedRegister = ____postPlayerUpdateReordered.postPlayerUpdateReorderedRegister
local ____postPoopRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPoopRender")
local postPoopRenderRegister = ____postPoopRender.postPoopRenderRegister
local ____postPoopUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPoopUpdate")
local postPoopUpdateRegister = ____postPoopUpdate.postPoopUpdateRegister
local ____postPressurePlateRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPressurePlateRender")
local postPressurePlateRenderRegister = ____postPressurePlateRender.postPressurePlateRenderRegister
local ____postPressurePlateUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPressurePlateUpdate")
local postPressurePlateUpdateRegister = ____postPressurePlateUpdate.postPressurePlateUpdateRegister
local ____postProjectileInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postProjectileInitLate")
local postProjectileInitLateRegister = ____postProjectileInitLate.postProjectileInitLateRegister
local ____postPurchase = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPurchase")
local postPurchaseRegister = ____postPurchase.postPurchaseRegister
local ____postRockRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postRockRender")
local postRockRenderRegister = ____postRockRender.postRockRenderRegister
local ____postRockUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postRockUpdate")
local postRockUpdateRegister = ____postRockUpdate.postRockUpdateRegister
local ____postRoomClearChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postRoomClearChanged")
local postRoomClearChangedRegister = ____postRoomClearChanged.postRoomClearChangedRegister
local ____postSacrifice = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSacrifice")
local postSacrificeRegister = ____postSacrifice.postSacrificeRegister
local ____postSlotAnimationChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSlotAnimationChanged")
local postSlotAnimationChangedRegister = ____postSlotAnimationChanged.postSlotAnimationChangedRegister
local ____postSlotDestroyed = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSlotDestroyed")
local postSlotDestroyedRegister = ____postSlotDestroyed.postSlotDestroyedRegister
local ____postSlotInit = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSlotInit")
local postSlotInitRegister = ____postSlotInit.postSlotInitRegister
local ____postSlotRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSlotRender")
local postSlotRenderRegister = ____postSlotRender.postSlotRenderRegister
local ____postSlotUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSlotUpdate")
local postSlotUpdateRegister = ____postSlotUpdate.postSlotUpdateRegister
local ____postSpikesRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSpikesRender")
local postSpikesRenderRegister = ____postSpikesRender.postSpikesRenderRegister
local ____postSpikesUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSpikesUpdate")
local postSpikesUpdateRegister = ____postSpikesUpdate.postSpikesUpdateRegister
local ____postTearInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTearInitLate")
local postTearInitLateRegister = ____postTearInitLate.postTearInitLateRegister
local ____postTearInitVeryLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTearInitVeryLate")
local postTearInitVeryLateRegister = ____postTearInitVeryLate.postTearInitVeryLateRegister
local ____postTNTRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTNTRender")
local postTNTRenderRegister = ____postTNTRender.postTNTRenderRegister
local ____postTNTUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTNTUpdate")
local postTNTUpdateRegister = ____postTNTUpdate.postTNTUpdateRegister
local ____postTransformation = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTransformation")
local postTransformationRegister = ____postTransformation.postTransformationRegister
local ____postTrinketBreak = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTrinketBreak")
local postTrinketBreakRegister = ____postTrinketBreak.postTrinketBreakRegister
local ____preBerserkDeath = require("lua_modules.isaacscript-common.callbacks.subscriptions.preBerserkDeath")
local preBerserkDeathRegister = ____preBerserkDeath.preBerserkDeathRegister
local ____preCustomRevive = require("lua_modules.isaacscript-common.callbacks.subscriptions.preCustomRevive")
local preCustomReviveRegister = ____preCustomRevive.preCustomReviveRegister
local ____preItemPickup = require("lua_modules.isaacscript-common.callbacks.subscriptions.preItemPickup")
local preItemPickupRegister = ____preItemPickup.preItemPickupRegister
local ____preNewLevel = require("lua_modules.isaacscript-common.callbacks.subscriptions.preNewLevel")
local preNewLevelRegister = ____preNewLevel.preNewLevelRegister
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
____exports.CALLBACK_REGISTER_FUNCTIONS = {
    [ModCallbackCustom.POST_AMBUSH_FINISHED] = postAmbushFinishedRegister,
    [ModCallbackCustom.POST_AMBUSH_STARTED] = postAmbushStartedRegister,
    [ModCallbackCustom.POST_BOMB_EXPLODED] = postBombExplodedRegister,
    [ModCallbackCustom.POST_BOMB_INIT_LATE] = postBombInitLateRegister,
    [ModCallbackCustom.POST_BONE_SWING] = postBoneSwingRegister,
    [ModCallbackCustom.POST_COLLECTIBLE_INIT_FIRST] = postCollectibleInitFirstRegister,
    [ModCallbackCustom.POST_CURSED_TELEPORT] = postCursedTeleportRegister,
    [ModCallbackCustom.POST_CUSTOM_DOOR_ENTER] = postCustomDoorEnterRegister,
    [ModCallbackCustom.POST_CUSTOM_REVIVE] = postCustomReviveRegister,
    [ModCallbackCustom.POST_DICE_ROOM_ACTIVATED] = postDiceRoomActivatedRegister,
    [ModCallbackCustom.POST_DOOR_RENDER] = postDoorRenderRegister,
    [ModCallbackCustom.POST_DOOR_UPDATE] = postDoorUpdateRegister,
    [ModCallbackCustom.POST_EFFECT_INIT_LATE] = postEffectInitLateRegister,
    [ModCallbackCustom.POST_EFFECT_STATE_CHANGED] = postEffectStateChangedRegister,
    [ModCallbackCustom.POST_ESAU_JR] = postEsauJrRegister,
    [ModCallbackCustom.POST_FAMILIAR_INIT_LATE] = postFamiliarInitLateRegister,
    [ModCallbackCustom.POST_FAMILIAR_STATE_CHANGED] = postFamiliarStateChangedRegister,
    [ModCallbackCustom.POST_FIRST_ESAU_JR] = postFirstEsauJrRegister,
    [ModCallbackCustom.POST_FIRST_FLIP] = postFirstFlipRegister,
    [ModCallbackCustom.POST_FLIP] = postFlipRegister,
    [ModCallbackCustom.POST_GAME_STARTED_REORDERED] = postGameStartedReorderedRegister,
    [ModCallbackCustom.POST_GREED_MODE_WAVE] = postGreedModeWaveRegister,
    [ModCallbackCustom.POST_GRID_ENTITY_BROKEN] = postGridEntityBrokenRegister,
    [ModCallbackCustom.POST_GRID_ENTITY_COLLISION] = postGridEntityCollisionRegister,
    [ModCallbackCustom.POST_GRID_ENTITY_INIT] = postGridEntityInitRegister,
    [ModCallbackCustom.POST_GRID_ENTITY_REMOVE] = postGridEntityRemoveRegister,
    [ModCallbackCustom.POST_GRID_ENTITY_RENDER] = postGridEntityRenderRegister,
    [ModCallbackCustom.POST_GRID_ENTITY_STATE_CHANGED] = postGridEntityStateChangedRegister,
    [ModCallbackCustom.POST_GRID_ENTITY_UPDATE] = postGridEntityUpdateRegister,
    [ModCallbackCustom.POST_HOLY_MANTLE_REMOVED] = postHolyMantleRemovedRegister,
    [ModCallbackCustom.POST_ITEM_DISCHARGE] = postItemDischargeRegister,
    [ModCallbackCustom.POST_ITEM_PICKUP] = postItemPickupRegister,
    [ModCallbackCustom.POST_KNIFE_INIT_LATE] = postKnifeInitLateRegister,
    [ModCallbackCustom.POST_LASER_INIT_LATE] = postLaserInitLateRegister,
    [ModCallbackCustom.POST_NEW_LEVEL_REORDERED] = postNewLevelReorderedRegister,
    [ModCallbackCustom.POST_NEW_ROOM_EARLY] = postNewRoomEarlyRegister,
    [ModCallbackCustom.POST_NEW_ROOM_REORDERED] = postNewRoomReorderedRegister,
    [ModCallbackCustom.POST_NPC_INIT_LATE] = postNPCInitLateRegister,
    [ModCallbackCustom.POST_NPC_STATE_CHANGED] = postNPCStateChangedRegister,
    [ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED] = postPEffectUpdateReorderedRegister,
    [ModCallbackCustom.POST_PICKUP_COLLECT] = postPickupCollectRegister,
    [ModCallbackCustom.POST_PICKUP_INIT_FIRST] = postPickupInitFirstRegister,
    [ModCallbackCustom.POST_PICKUP_INIT_LATE] = postPickupInitLateRegister,
    [ModCallbackCustom.POST_PICKUP_STATE_CHANGED] = postPickupStateChangedRegister,
    [ModCallbackCustom.POST_PIT_RENDER] = postPitRenderRegister,
    [ModCallbackCustom.POST_PIT_UPDATE] = postPitUpdateRegister,
    [ModCallbackCustom.POST_PLAYER_CHANGE_HEALTH] = postPlayerChangeHealthRegister,
    [ModCallbackCustom.POST_PLAYER_CHANGE_TYPE] = postPlayerChangeTypeRegister,
    [ModCallbackCustom.POST_PLAYER_COLLECTIBLE_ADDED] = postPlayerCollectibleAddedRegister,
    [ModCallbackCustom.POST_PLAYER_COLLECTIBLE_REMOVED] = postPlayerCollectibleRemovedRegister,
    [ModCallbackCustom.POST_PLAYER_FATAL_DAMAGE] = postPlayerFatalDamageRegister,
    [ModCallbackCustom.POST_PLAYER_INIT_LATE] = postPlayerInitLateRegister,
    [ModCallbackCustom.POST_PLAYER_INIT_REORDERED] = postPlayerInitReorderedRegister,
    [ModCallbackCustom.POST_PLAYER_RENDER_REORDERED] = postPlayerRenderReorderedRegister,
    [ModCallbackCustom.POST_PLAYER_UPDATE_REORDERED] = postPlayerUpdateReorderedRegister,
    [ModCallbackCustom.POST_POOP_RENDER] = postPoopRenderRegister,
    [ModCallbackCustom.POST_POOP_UPDATE] = postPoopUpdateRegister,
    [ModCallbackCustom.POST_PRESSURE_PLATE_RENDER] = postPressurePlateRenderRegister,
    [ModCallbackCustom.POST_PRESSURE_PLATE_UPDATE] = postPressurePlateUpdateRegister,
    [ModCallbackCustom.POST_PROJECTILE_INIT_LATE] = postProjectileInitLateRegister,
    [ModCallbackCustom.POST_PURCHASE] = postPurchaseRegister,
    [ModCallbackCustom.POST_ROCK_RENDER] = postRockRenderRegister,
    [ModCallbackCustom.POST_ROCK_UPDATE] = postRockUpdateRegister,
    [ModCallbackCustom.POST_ROOM_CLEAR_CHANGED] = postRoomClearChangedRegister,
    [ModCallbackCustom.POST_SACRIFICE] = postSacrificeRegister,
    [ModCallbackCustom.POST_SLOT_ANIMATION_CHANGED] = postSlotAnimationChangedRegister,
    [ModCallbackCustom.POST_SLOT_DESTROYED] = postSlotDestroyedRegister,
    [ModCallbackCustom.POST_SLOT_INIT] = postSlotInitRegister,
    [ModCallbackCustom.POST_SLOT_RENDER] = postSlotRenderRegister,
    [ModCallbackCustom.POST_SLOT_UPDATE] = postSlotUpdateRegister,
    [ModCallbackCustom.POST_SPIKES_RENDER] = postSpikesRenderRegister,
    [ModCallbackCustom.POST_SPIKES_UPDATE] = postSpikesUpdateRegister,
    [ModCallbackCustom.POST_TEAR_INIT_LATE] = postTearInitLateRegister,
    [ModCallbackCustom.POST_TEAR_INIT_VERY_LATE] = postTearInitVeryLateRegister,
    [ModCallbackCustom.POST_TNT_RENDER] = postTNTRenderRegister,
    [ModCallbackCustom.POST_TNT_UPDATE] = postTNTUpdateRegister,
    [ModCallbackCustom.POST_TRANSFORMATION] = postTransformationRegister,
    [ModCallbackCustom.POST_TRINKET_BREAK] = postTrinketBreakRegister,
    [ModCallbackCustom.PRE_BERSERK_DEATH] = preBerserkDeathRegister,
    [ModCallbackCustom.PRE_CUSTOM_REVIVE] = preCustomReviveRegister,
    [ModCallbackCustom.PRE_ITEM_PICKUP] = preItemPickupRegister,
    [ModCallbackCustom.PRE_NEW_LEVEL] = preNewLevelRegister
}
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postAmbushFinished"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postAmbushFinishedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postAmbushFinishedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postAmbushFinishedFire(self, ambushType)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackAmbushType = ____value[2]
        do
            if callbackAmbushType ~= nil and callbackAmbushType ~= ambushType then
                goto __continue5
            end
            callback(nil, ambushType)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postAmbushStarted"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postAmbushStartedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postAmbushStartedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postAmbushStartedFire(self, ambushType)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackAmbushType = ____value[2]
        do
            if callbackAmbushType ~= nil and callbackAmbushType ~= ambushType then
                goto __continue5
            end
            callback(nil, ambushType)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postBombInitLate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postBombInitLateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postBombInitLateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postBombInitLateFire(self, bomb)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local bombVariant = ____value[2]
        do
            if bombVariant ~= nil and bombVariant ~= bomb.Variant then
                goto __continue5
            end
            callback(nil, bomb)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postBoneExploded"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postBombExplodedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postBombExplodedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postBombExplodedFire(self, bomb)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local bombVariant = ____value[2]
        do
            if bombVariant ~= nil and bombVariant ~= bomb.Variant then
                goto __continue5
            end
            callback(nil, bomb)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postBoneSwing"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postBoneSwingHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postBoneSwingRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postBoneSwingFire(self, boneClub)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil, boneClub)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postCollectibleInitFirst"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postCollectibleInitFirstHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postCollectibleInitFirstRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postCollectibleInitFirstFire(self, collectible)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local collectibleType = ____value[2]
        do
            if collectibleType ~= nil and collectibleType ~= collectible.SubType then
                goto __continue5
            end
            callback(nil, collectible)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postCursedTeleport"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postCursedTeleportHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postCursedTeleportRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postCursedTeleportFire(self, player)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil, player)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postCustomRevive"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postCustomReviveHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postCustomReviveRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postCustomReviveFire(self, player, revivalType)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackRevivalType = ____value[2]
        do
            if callbackRevivalType ~= nil and callbackRevivalType ~= revivalType then
                goto __continue5
            end
            callback(nil, player, revivalType)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postDiceRoomActivated"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postDiceRoomActivatedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postDiceRoomActivatedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postDiceRoomActivatedFire(self, player, diceFloorSubType)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackDiceFloorSubType = ____value[2]
        do
            if callbackDiceFloorSubType ~= nil and callbackDiceFloorSubType ~= diceFloorSubType then
                goto __continue5
            end
            callback(nil, player, diceFloorSubType)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postDoorRender"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postDoorRenderHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postDoorRenderRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postDoorRenderFire(self, door)
    local gridEntityVariant = door:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, door)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postDoorUpdate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postDoorUpdateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postDoorUpdateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postDoorUpdateFire(self, door)
    local gridEntityVariant = door:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, door)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postEffectInitLate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postEffectInitLateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postEffectInitLateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postEffectInitLateFire(self, effect)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local effectVariant = ____value[2]
        do
            if effectVariant ~= nil and effectVariant ~= effect.Variant then
                goto __continue5
            end
            callback(nil, effect)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postEffectStateChanged"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postEffectStateChangedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postEffectStateChangedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postEffectStateChangedFire(self, effect, previousState, currentState)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local effectVariant = ____value[2]
        do
            if effectVariant ~= nil and effectVariant ~= effect.Variant then
                goto __continue5
            end
            callback(nil, effect, previousState, currentState)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postEsauJr"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postEsauJrHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postEsauJrRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postEsauJrFire(self, player)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil, player)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postFamiliarInitLate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postFamiliarInitLateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postFamiliarInitLateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postFamiliarInitLateFire(self, familiar)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local familiarVariant = ____value[2]
        do
            if familiarVariant ~= nil and familiarVariant ~= familiar.Variant then
                goto __continue5
            end
            callback(nil, familiar)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postFamiliarStateChanged"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postFamiliarStateChangedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postFamiliarStateChangedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postFamiliarStateChangedFire(self, familiar, previousState, currentState)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local familiarVariant = ____value[2]
        do
            if familiarVariant ~= nil and familiarVariant ~= familiar.Variant then
                goto __continue5
            end
            callback(nil, familiar, previousState, currentState)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postFirstEsauJr"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postFirstEsauJrHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postFirstEsauJrRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postFirstEsauJrFire(self, player)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil, player)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postFirstFlip"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postFirstFlipHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postFirstFlipRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postFirstFlipFire(self, player)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil, player)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postFlip"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postFlipHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postFlipRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postFlipFire(self, player)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil, player)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postGreedModeWave"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postGreedModeWaveHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postGreedModeWaveRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postGreedModeWaveFire(self, oldWave, newWave)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil, oldWave, newWave)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityBroken"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postGridEntityBrokenHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postGridEntityBrokenRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postGridEntityBrokenFire(self, gridEntity)
    local gridEntityType = gridEntity:GetType()
    local gridEntityVariant = gridEntity:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityType = ____value[2]
        local callbackGridEntityVariant = ____value[3]
        do
            if callbackGridEntityType ~= nil and callbackGridEntityType ~= gridEntityType then
                goto __continue5
            end
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, gridEntity)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityCollision"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postGridEntityCollisionHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postGridEntityCollisionRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postGridEntityCollisionFire(self, gridEntity, entity)
    local gridEntityType = gridEntity:GetType()
    local gridEntityVariant = gridEntity:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityType = ____value[2]
        local callbackGridEntityVariant = ____value[3]
        do
            if callbackGridEntityType ~= nil and callbackGridEntityType ~= gridEntityType then
                goto __continue5
            end
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, gridEntity, entity)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityInit"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postGridEntityInitHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postGridEntityInitRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postGridEntityInitFire(self, gridEntity)
    local gridEntityType = gridEntity:GetType()
    local gridEntityVariant = gridEntity:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityType = ____value[2]
        local callbackGridEntityVariant = ____value[3]
        do
            if callbackGridEntityType ~= nil and callbackGridEntityType ~= gridEntityType then
                goto __continue5
            end
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, gridEntity)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityRemove"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postGridEntityRemoveHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postGridEntityRemoveRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postGridEntityRemoveFire(self, gridIndex, gridEntityType, gridEntityVariant)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityType = ____value[2]
        local callbackGridEntityVariant = ____value[3]
        do
            if callbackGridEntityType ~= nil and callbackGridEntityType ~= gridEntityType then
                goto __continue5
            end
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, gridIndex, gridEntityType)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityRender"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postGridEntityRenderHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postGridEntityRenderRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postGridEntityRenderFire(self, gridEntity)
    local gridEntityType = gridEntity:GetType()
    local gridEntityVariant = gridEntity:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityType = ____value[2]
        local callbackGridEntityVariant = ____value[3]
        do
            if callbackGridEntityType ~= nil and callbackGridEntityType ~= gridEntityType then
                goto __continue5
            end
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, gridEntity)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityStateChanged"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postGridEntityStateChangedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postGridEntityStateChangedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postGridEntityStateChangedFire(self, gridEntity, oldState, newState)
    local gridEntityType = gridEntity:GetType()
    local gridEntityVariant = gridEntity:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityType = ____value[2]
        local callbackGridEntityVariant = ____value[3]
        do
            if callbackGridEntityType ~= nil and callbackGridEntityType ~= gridEntityType then
                goto __continue5
            end
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, gridEntity, oldState, newState)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityUpdate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postGridEntityUpdateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postGridEntityUpdateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postGridEntityUpdateFire(self, gridEntity)
    local gridEntityType = gridEntity:GetType()
    local gridEntityVariant = gridEntity:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityType = ____value[2]
        local callbackGridEntityVariant = ____value[3]
        do
            if callbackGridEntityType ~= nil and callbackGridEntityType ~= gridEntityType then
                goto __continue5
            end
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, gridEntity)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postHolyMantleRemoved"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postHolyMantleRemovedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postHolyMantleRemovedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postHolyMantleRemovedFire(self, player, oldNumHolyMantles, newNumHolyMantles)
    local character = player:GetPlayerType()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackVariant = ____value[2]
        local callbackCharacter = ____value[3]
        do
            if callbackVariant ~= nil and callbackVariant ~= player.Variant then
                goto __continue5
            end
            if callbackCharacter ~= nil and callbackCharacter ~= character then
                goto __continue5
            end
            callback(nil, player, oldNumHolyMantles, newNumHolyMantles)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postItemDischarged"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postItemDischargeHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postItemDischargeRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postItemDischargeFire(self, player, collectibleType, activeSlot)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackCollectibleType = ____value[2]
        do
            if callbackCollectibleType ~= nil and callbackCollectibleType ~= collectibleType then
                goto __continue5
            end
            callback(nil, player, collectibleType, activeSlot)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postItemPickup"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postItemPickupHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postItemPickupRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postItemPickupFire(self, player, pickingUpItem)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local itemType = ____value[2]
        local subType = ____value[3]
        do
            if itemType ~= nil and itemType ~= pickingUpItem.itemType then
                goto __continue5
            end
            if subType ~= nil and subType ~= pickingUpItem.subType then
                goto __continue5
            end
            callback(nil, player, pickingUpItem)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postKnifeInitLate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postKnifeInitLateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postKnifeInitLateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postKnifeInitLateFire(self, knife)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local knifeVariant = ____value[2]
        do
            if knifeVariant ~= nil and knifeVariant ~= knife.Variant then
                goto __continue5
            end
            callback(nil, knife)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postLaserInitLate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postLaserInitLateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postLaserInitLateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postLaserInitLateFire(self, laser)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local laserVariant = ____value[2]
        do
            if laserVariant ~= nil and laserVariant ~= laser.Variant then
                goto __continue5
            end
            callback(nil, laser)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postNewRoomEarly"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postNewRoomEarlyHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postNewRoomEarlyRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postNewRoomEarlyFire(self)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postNPCInitLate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postNPCInitLateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postNPCInitLateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postNPCInitLateFire(self, npc)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local entityType = ____value[2]
        do
            if entityType ~= nil and entityType ~= npc.Type then
                goto __continue5
            end
            callback(nil, npc)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postNPCStateChanged"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postNPCStateChangedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postNPCStateChangedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postNPCStateChangedFire(self, npc, previousState, currentState)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local entityType = ____value[2]
        local variant = ____value[3]
        do
            if entityType ~= nil and entityType ~= npc.Type then
                goto __continue5
            end
            if variant ~= nil and variant ~= npc.Variant then
                goto __continue5
            end
            callback(nil, npc, previousState, currentState)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPEffectUpdateReordered"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPEffectUpdateReorderedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPEffectUpdateReorderedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPEffectUpdateReorderedFire(self, player)
    local character = player:GetPlayerType()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackVariant = ____value[2]
        local callbackCharacter = ____value[3]
        do
            if callbackVariant ~= nil and callbackVariant ~= player.Variant then
                goto __continue5
            end
            if callbackCharacter ~= nil and callbackCharacter ~= character then
                goto __continue5
            end
            callback(nil, player)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPickupCollect"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPickupCollectHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPickupCollectRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPickupCollectFire(self, pickup, player)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local pickupVariant = ____value[2]
        do
            if pickupVariant ~= nil and pickupVariant ~= pickup.Variant then
                goto __continue5
            end
            callback(nil, pickup, player)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPickupInitFirst"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPickupInitFirstHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPickupInitFirstRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPickupInitFirstFire(self, pickup)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local pickupVariant = ____value[2]
        do
            if pickupVariant ~= nil and pickupVariant ~= pickup.Variant then
                goto __continue5
            end
            callback(nil, pickup)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPickupInitLate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPickupInitLateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPickupInitLateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPickupInitLateFire(self, pickup)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local pickupVariant = ____value[2]
        do
            if pickupVariant ~= nil and pickupVariant ~= pickup.Variant then
                goto __continue5
            end
            callback(nil, pickup)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPickupStateChanged"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPickupStateChangedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPickupStateChangedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPickupStateChangedFire(self, pickup, previousState, currentState)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local pickupVariant = ____value[2]
        do
            if pickupVariant ~= nil and pickupVariant ~= pickup.Variant then
                goto __continue5
            end
            callback(nil, pickup, previousState, currentState)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPitRender"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPitRenderHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPitRenderRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPitRenderFire(self, pit)
    local gridEntityVariant = pit:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, pit)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPitUpdate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPitUpdateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPitUpdateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPitUpdateFire(self, pit)
    local gridEntityVariant = pit:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, pit)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerChangeHealth"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPlayerChangeHealthHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPlayerChangeHealthRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPlayerChangeHealthFire(self, player, healthType, difference)
    local character = player:GetPlayerType()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local playerVariant = ____value[2]
        local callbackCharacter = ____value[3]
        do
            if playerVariant ~= nil and playerVariant ~= player.Variant then
                goto __continue5
            end
            if callbackCharacter ~= nil and callbackCharacter ~= character then
                goto __continue5
            end
            callback(nil, player, healthType, difference)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerChangeType"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPlayerChangeTypeHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPlayerChangeTypeRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPlayerChangeTypeFire(self, player, oldCharacter, newCharacter)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local playerVariant = ____value[2]
        do
            if playerVariant ~= nil and playerVariant ~= player.Variant then
                goto __continue5
            end
            callback(nil, player, oldCharacter, newCharacter)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerCollectibleAdded"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPlayerCollectibleAddedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPlayerCollectibleAddedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPlayerCollectibleAddedFire(self, player, collectibleType)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackCollectibleType = ____value[2]
        do
            if callbackCollectibleType ~= nil and callbackCollectibleType ~= collectibleType then
                goto __continue5
            end
            callback(nil, player, collectibleType)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerCollectibleRemoved"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPlayerCollectibleRemovedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPlayerCollectibleRemovedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPlayerCollectibleRemovedFire(self, player, collectibleType)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackCollectibleType = ____value[2]
        do
            if callbackCollectibleType ~= nil and callbackCollectibleType ~= collectibleType then
                goto __continue5
            end
            callback(nil, player, collectibleType)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerFatalDamage"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPlayerFatalDamageHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPlayerFatalDamageRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPlayerFatalDamageFire(self, player, damageAmount, damageFlags, damageSource, damageCountdownFrames)
    local character = player:GetPlayerType()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local playerVariant = ____value[2]
        local callbackCharacter = ____value[3]
        do
            if playerVariant ~= nil and playerVariant ~= player.Variant then
                goto __continue5
            end
            if callbackCharacter ~= nil and callbackCharacter ~= character then
                goto __continue5
            end
            local shouldSustainDeath = callback(
                nil,
                player,
                damageAmount,
                damageFlags,
                damageSource,
                damageCountdownFrames
            )
            if shouldSustainDeath ~= nil then
                return shouldSustainDeath
            end
        end
        ::__continue5::
    end
    return nil
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerInitLate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPlayerInitLateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPlayerInitLateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPlayerInitLateFire(self, player)
    local character = player:GetPlayerType()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local playerVariant = ____value[2]
        local callbackCharacter = ____value[3]
        do
            if playerVariant ~= nil and playerVariant ~= player.Variant then
                goto __continue5
            end
            if callbackCharacter ~= nil and callbackCharacter ~= character then
                goto __continue5
            end
            callback(nil, player)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerInitReordered"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPlayerInitReorderedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPlayerInitReorderedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPlayerInitReorderedFire(self, player)
    local character = player:GetPlayerType()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local playerVariant = ____value[2]
        local callbackCharacter = ____value[3]
        do
            if playerVariant ~= nil and playerVariant ~= player.Variant then
                goto __continue5
            end
            if callbackCharacter ~= nil and callbackCharacter ~= character then
                goto __continue5
            end
            callback(nil, player)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerRenderReordered"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPlayerRenderReorderedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPlayerRenderReorderedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPlayerRenderReorderedFire(self, player)
    local character = player:GetPlayerType()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local playerVariant = ____value[2]
        local callbackCharacter = ____value[3]
        do
            if playerVariant ~= nil and playerVariant ~= player.Variant then
                goto __continue5
            end
            if callbackCharacter ~= nil and callbackCharacter ~= character then
                goto __continue5
            end
            callback(nil, player)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerUpdateReordered"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPlayerUpdateReorderedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPlayerUpdateReorderedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPlayerUpdateReorderedFire(self, player)
    local character = player:GetPlayerType()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local playerVariant = ____value[2]
        local callbackCharacter = ____value[3]
        do
            if playerVariant ~= nil and playerVariant ~= player.Variant then
                goto __continue5
            end
            if callbackCharacter ~= nil and callbackCharacter ~= character then
                goto __continue5
            end
            callback(nil, player)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPoopRender"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPoopRenderHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPoopRenderRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPoopRenderFire(self, poop)
    local gridEntityVariant = poop:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, poop)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPoopUpdate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPoopUpdateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPoopUpdateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPoopUpdateFire(self, poop)
    local gridEntityVariant = poop:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, poop)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPressurePlateRender"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPressurePlateRenderHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPressurePlateRenderRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPressurePlateRenderFire(self, pressurePlate)
    local gridEntityVariant = pressurePlate:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, pressurePlate)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPressurePlateUpdate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPressurePlateUpdateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPressurePlateUpdateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPressurePlateUpdateFire(self, pressurePlate)
    local gridEntityVariant = pressurePlate:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, pressurePlate)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postProjectileInitLate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postProjectileInitLateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postProjectileInitLateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postProjectileInitLateFire(self, projectile)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local projectileVariant = ____value[2]
        do
            if projectileVariant ~= nil and projectileVariant ~= projectile.Variant then
                goto __continue5
            end
            callback(nil, projectile)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postPurchase"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postPurchaseHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postPurchaseRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postPurchaseFire(self, player, pickup)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil, player, pickup)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postRockRender"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postRockRenderHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postRockRenderRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postRockRenderFire(self, rock)
    local gridEntityVariant = rock:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, rock)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postRockUpdate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postRockUpdateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postRockUpdateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postRockUpdateFire(self, rock)
    local gridEntityVariant = rock:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, rock)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postRoomClearChanged"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postRoomClearChangedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postRoomClearChangedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postRoomClearChangedFire(self, roomClear)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackRoomClear = ____value[2]
        do
            if callbackRoomClear ~= nil and callbackRoomClear ~= roomClear then
                goto __continue5
            end
            callback(nil, roomClear)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postSacrifice"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postSacrificeHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postSacrificeRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postSacrificeFire(self, player, numSacrifices)
    local character = player:GetPlayerType()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local playerVariant = ____value[2]
        local callbackCharacter = ____value[3]
        do
            if playerVariant ~= nil and playerVariant ~= player.Variant then
                goto __continue5
            end
            if callbackCharacter ~= nil and callbackCharacter ~= character then
                goto __continue5
            end
            callback(nil, player, numSacrifices)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postSlotAnimationChanged"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postSlotAnimationChangedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postSlotAnimationChangedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postSlotAnimationChangedFire(self, slot, previousAnimation, currentAnimation)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local slotVariant = ____value[2]
        do
            if slotVariant ~= nil and slotVariant ~= slot.Variant then
                goto __continue5
            end
            callback(nil, slot, previousAnimation, currentAnimation)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postSlotDestroyed"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postSlotDestroyedHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postSlotDestroyedRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postSlotDestroyedFire(self, slot, slotDestructionType)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackSlotVariant = ____value[2]
        local callbackSlotDestructionType = ____value[3]
        do
            if callbackSlotVariant ~= nil and callbackSlotVariant ~= slot.Variant then
                goto __continue5
            end
            if callbackSlotDestructionType ~= nil and callbackSlotDestructionType ~= slotDestructionType then
                goto __continue5
            end
            callback(nil, slot, slotDestructionType)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postSlotInit"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postSlotInitHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postSlotInitRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postSlotInitFire(self, slot)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local slotVariant = ____value[2]
        do
            if slotVariant ~= nil and slotVariant ~= slot.Variant then
                goto __continue5
            end
            callback(nil, slot)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postSlotRender"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postSlotRenderHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postSlotRenderRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postSlotRenderFire(self, slot)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local slotVariant = ____value[2]
        do
            if slotVariant ~= nil and slotVariant ~= slot.Variant then
                goto __continue5
            end
            callback(nil, slot)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postSlotUpdate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postSlotUpdateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postSlotUpdateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postSlotUpdateFire(self, slot)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local slotVariant = ____value[2]
        do
            if slotVariant ~= nil and slotVariant ~= slot.Variant then
                goto __continue5
            end
            callback(nil, slot)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postSpikesRender"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postSpikesRenderHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postSpikesRenderRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postSpikesRenderFire(self, spikes)
    local gridEntityVariant = spikes:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, spikes)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postSpikesUpdate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postSpikesUpdateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postSpikesUpdateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postSpikesUpdateFire(self, spikes)
    local gridEntityVariant = spikes:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, spikes)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postTearInitLate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postTearInitLateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postTearInitLateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postTearInitLateFire(self, tear)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local tearVariant = ____value[2]
        do
            if tearVariant ~= nil and tearVariant ~= tear.Variant then
                goto __continue5
            end
            callback(nil, tear)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postTearInitVeryLate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postTearInitVeryLateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postTearInitVeryLateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postTearInitVeryLateFire(self, tear)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local tearVariant = ____value[2]
        do
            if tearVariant ~= nil and tearVariant ~= tear.Variant then
                goto __continue5
            end
            callback(nil, tear)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postTNTRender"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postTNTRenderHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postTNTRenderRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postTNTRenderFire(self, tnt)
    local gridEntityVariant = tnt:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, tnt)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postTNTUpdate"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postTNTUpdateHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postTNTUpdateRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postTNTUpdateFire(self, tnt)
    local gridEntityVariant = tnt:GetVariant()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackGridEntityVariant = ____value[2]
        do
            if callbackGridEntityVariant ~= nil and callbackGridEntityVariant ~= gridEntityVariant then
                goto __continue5
            end
            callback(nil, tnt)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postTransformation"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postTransformationHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postTransformationRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postTransformationFire(self, player, playerForm, hasForm)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackPlayerForm = ____value[2]
        do
            if callbackPlayerForm ~= nil and callbackPlayerForm ~= playerForm then
                goto __continue5
            end
            callback(nil, player, playerForm, hasForm)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.postTrinketBreak"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.postTrinketBreakHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.postTrinketBreakRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.postTrinketBreakFire(self, player, trinketType)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local callbackTrinketType = ____value[2]
        do
            if callbackTrinketType ~= nil and callbackTrinketType ~= trinketType then
                goto __continue5
            end
            callback(nil, player, trinketType)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.preBerserkDeath"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.preBerserkDeathHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.preBerserkDeathRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.preBerserkDeathFire(self, player)
    local character = player:GetPlayerType()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local playerVariant = ____value[2]
        local callbackCharacter = ____value[3]
        do
            if playerVariant ~= nil and playerVariant ~= player.Variant then
                goto __continue5
            end
            if callbackCharacter ~= nil and callbackCharacter ~= character then
                goto __continue5
            end
            callback(nil, player)
        end
        ::__continue5::
    end
    return nil
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.preCustomRevive"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.preCustomReviveHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.preCustomReviveRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.preCustomReviveFire(self, player)
    local character = player:GetPlayerType()
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local playerVariant = ____value[2]
        local callbackCharacter = ____value[3]
        do
            if playerVariant ~= nil and playerVariant ~= player.Variant then
                goto __continue5
            end
            if callbackCharacter ~= nil and callbackCharacter ~= character then
                goto __continue5
            end
            local revivalType = callback(nil, player)
            if revivalType ~= nil then
                return revivalType
            end
        end
        ::__continue5::
    end
    return nil
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.preItemPickup"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.preItemPickupHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.preItemPickupRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.preItemPickupFire(self, player, pickingUpItem)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        local itemType = ____value[2]
        local subType = ____value[3]
        do
            if itemType ~= nil and itemType ~= pickingUpItem.itemType then
                goto __continue5
            end
            if subType ~= nil and subType ~= pickingUpItem.subType then
                goto __continue5
            end
            callback(nil, player, pickingUpItem)
        end
        ::__continue5::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.subscriptions.preNewLevel"] = function(...) 
local ____exports = {}
local subscriptions = {}
---
-- @internal
function ____exports.preNewLevelHasSubscriptions(self)
    return #subscriptions > 0
end
---
-- @internal
function ____exports.preNewLevelRegister(self, ...)
    local args = {...}
    subscriptions[#subscriptions + 1] = args
end
---
-- @internal
function ____exports.preNewLevelFire(self, player)
    for ____, ____value in ipairs(subscriptions) do
        local callback = ____value[1]
        callback(nil, player)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.enums.PocketItemType"] = function(...) 
local ____exports = {}
____exports.PocketItemType = {}
____exports.PocketItemType.EMPTY = 0
____exports.PocketItemType[____exports.PocketItemType.EMPTY] = "EMPTY"
____exports.PocketItemType.CARD = 1
____exports.PocketItemType[____exports.PocketItemType.CARD] = "CARD"
____exports.PocketItemType.PILL = 2
____exports.PocketItemType[____exports.PocketItemType.PILL] = "PILL"
____exports.PocketItemType.ACTIVE_ITEM = 3
____exports.PocketItemType[____exports.PocketItemType.ACTIVE_ITEM] = "ACTIVE_ITEM"
____exports.PocketItemType.DICE_BAG_DICE = 4
____exports.PocketItemType[____exports.PocketItemType.DICE_BAG_DICE] = "DICE_BAG_DICE"
____exports.PocketItemType.UNDETERMINABLE = 5
____exports.PocketItemType[____exports.PocketItemType.UNDETERMINABLE] = "UNDETERMINABLE"
return ____exports
 end,
["lua_modules.isaacscript-common.features.characterHealthConversion"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local postPEffectUpdate, convertRedHeartContainers, removeRedHearts, prePickupCollisionHeart, characterHealthReplacementMap
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local HeartSubType = ____isaac_2Dtypescript_2Ddefinitions.HeartSubType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____pickups = require("lua_modules.isaacscript-common.functions.pickups")
local isRedHeart = ____pickups.isRedHeart
function postPEffectUpdate(self, player)
    local character = player:GetPlayerType()
    local conversionHeartSubType = characterHealthReplacementMap:get(character)
    if conversionHeartSubType == nil then
        return
    end
    convertRedHeartContainers(nil, player, conversionHeartSubType)
    removeRedHearts(nil, player)
end
function convertRedHeartContainers(self, player, heartSubType)
    local maxHearts = player:GetMaxHearts()
    if maxHearts == 0 then
        return
    end
    player:AddMaxHearts(maxHearts * -1, false)
    repeat
        local ____switch7 = heartSubType
        local ____cond7 = ____switch7 == HeartSubType.SOUL
        if ____cond7 then
            do
                player:AddSoulHearts(maxHearts)
                break
            end
        end
        ____cond7 = ____cond7 or ____switch7 == HeartSubType.BLACK
        if ____cond7 then
            do
                player:AddBlackHearts(maxHearts)
                break
            end
        end
    until true
end
function removeRedHearts(self, player)
    local hearts = player:GetHearts()
    if hearts > 0 then
        player:AddHearts(hearts * -1)
    end
end
function prePickupCollisionHeart(self, pickup, collider)
    if not isRedHeart(nil, pickup) then
        return nil
    end
    local player = collider:ToPlayer()
    if player == nil then
        return nil
    end
    local character = player:GetPlayerType()
    local conversionHeartSubType = characterHealthReplacementMap:get(character)
    if conversionHeartSubType == nil then
        return nil
    end
    return false
end
local FEATURE_NAME = "characterHealthConversion"
characterHealthReplacementMap = __TS__New(Map)
---
-- @internal
function ____exports.characterHealthConversionInit(self, mod)
    mod:AddCallback(ModCallback.POST_PEFFECT_UPDATE, postPEffectUpdate)
    mod:AddCallback(ModCallback.PRE_PICKUP_COLLISION, prePickupCollisionHeart, PickupVariant.HEART)
end
--- Helper function to make a character that has the same health mechanic as Blue Baby (red heart
-- containers --> soul hearts) or Dark Judas (red heart containers --> black hearts).
-- 
-- Call this function once at the beginning of your mod to declare the health conversion type.
function ____exports.registerCharacterHealthConversion(self, playerType, conversionHeartSubType)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    if characterHealthReplacementMap:has(playerType) then
        error(("Failed to register a character of type " .. tostring(playerType)) .. " because there is already an existing registered character with that type.")
    end
    characterHealthReplacementMap:set(playerType, conversionHeartSubType)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.pickups"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local ____constants = require("lua_modules.isaacscript-common.constants")
local VectorZero = ____constants.VectorZero
local ____coinSubTypeToValue = require("lua_modules.isaacscript-common.objects.coinSubTypeToValue")
local COIN_SUBTYPE_TO_VALUE = ____coinSubTypeToValue.COIN_SUBTYPE_TO_VALUE
local DEFAULT_COIN_VALUE = ____coinSubTypeToValue.DEFAULT_COIN_VALUE
local ____chestPickupVariantsSet = require("lua_modules.isaacscript-common.sets.chestPickupVariantsSet")
local CHEST_PICKUP_VARIANTS = ____chestPickupVariantsSet.CHEST_PICKUP_VARIANTS
local ____redHeartSubTypesSet = require("lua_modules.isaacscript-common.sets.redHeartSubTypesSet")
local RED_HEART_SUB_TYPES_SET = ____redHeartSubTypesSet.RED_HEART_SUB_TYPES_SET
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local getPickups = ____entitySpecific.getPickups
local removeAllPickups = ____entitySpecific.removeAllPickups
local spawnPickup = ____entitySpecific.spawnPickup
local ____pickupVariants = require("lua_modules.isaacscript-common.functions.pickupVariants")
local isHeart = ____pickupVariants.isHeart
--- Helper function to get all of the battery entities in the room.
function ____exports.getBatteries(self, matchingSubType)
    if matchingSubType == nil then
        matchingSubType = -1
    end
    return getPickups(nil, PickupVariant.LIL_BATTERY, matchingSubType)
end
--- Helper function to get all of the card entities in the room.
function ____exports.getCards(self, matchingSubType)
    if matchingSubType == nil then
        matchingSubType = -1
    end
    return getPickups(nil, PickupVariant.TAROT_CARD, matchingSubType)
end
--- Helper function to get the corresponding coin amount from a `CoinSubType`. Returns 1 for modded
-- sub-types.
function ____exports.getCoinValue(self, coinSubType)
    local value = COIN_SUBTYPE_TO_VALUE[coinSubType]
    return value == nil and DEFAULT_COIN_VALUE or value
end
--- Helper function to get all of the coin pickup entities in the room.
function ____exports.getCoins(self, matchingSubType)
    if matchingSubType == nil then
        matchingSubType = -1
    end
    return getPickups(nil, PickupVariant.COIN, matchingSubType)
end
--- Helper function to get all of the collectible entities in the room.
function ____exports.getCollectibles(self, matchingSubType)
    if matchingSubType == nil then
        matchingSubType = -1
    end
    return getPickups(nil, PickupVariant.COLLECTIBLE, matchingSubType)
end
--- Helper function to get all of the heart pickup entities in the room.
function ____exports.getHearts(self, matchingSubType)
    if matchingSubType == nil then
        matchingSubType = -1
    end
    return getPickups(nil, PickupVariant.HEART, matchingSubType)
end
--- Helper function to get all of the key pickup entities in the room.
function ____exports.getKeys(self, matchingSubType)
    if matchingSubType == nil then
        matchingSubType = -1
    end
    return getPickups(nil, PickupVariant.KEY, matchingSubType)
end
--- Helper function to get all of the pill entities in the room.
function ____exports.getPills(self, matchingSubType)
    if matchingSubType == nil then
        matchingSubType = -1
    end
    return getPickups(nil, PickupVariant.PILL, matchingSubType)
end
--- Helper function to get all of the red heart pickup entities in the room.
function ____exports.getRedHearts(self)
    local hearts = ____exports.getHearts(nil)
    return __TS__ArrayFilter(
        hearts,
        function(____, heart) return RED_HEART_SUB_TYPES_SET:has(heart.SubType) end
    )
end
--- Helper function to get all of the sack (i.e. grab bag) entities in the room.
function ____exports.getSacks(self, matchingSubType)
    if matchingSubType == nil then
        matchingSubType = -1
    end
    return getPickups(nil, PickupVariant.SACK, matchingSubType)
end
--- Helper function to get all of the trinket entities in the room.
function ____exports.getTrinkets(self, matchingSubType)
    if matchingSubType == nil then
        matchingSubType = -1
    end
    return getPickups(nil, PickupVariant.TRINKET, matchingSubType)
end
function ____exports.isChest(self, pickup)
    return CHEST_PICKUP_VARIANTS:has(pickup.Variant)
end
function ____exports.isRedHeart(self, pickup)
    return isHeart(nil, pickup) and RED_HEART_SUB_TYPES_SET:has(pickup.SubType)
end
--- Helper function to remove all of the batteries in the room.
-- 
-- @param batterySubType Optional. If specified, will only remove cards that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of cards.
-- @returns True if one or more cards were removed, false otherwise.
function ____exports.removeAllBatteries(self, batterySubType, cap)
    return removeAllPickups(nil, PickupVariant.LIL_BATTERY, batterySubType, cap)
end
--- Helper function to remove all of the cards in the room.
-- 
-- @param card Optional. If specified, will only remove cards that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of cards.
-- @returns True if one or more cards were removed, false otherwise.
function ____exports.removeAllCards(self, card, cap)
    return removeAllPickups(nil, PickupVariant.TAROT_CARD, card, cap)
end
--- Helper function to remove all of the coins in the room.
-- 
-- @param coinSubType Optional. If specified, will only remove coins that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of coins.
-- @returns True if one or more coins were removed, false otherwise.
function ____exports.removeAllCoins(self, coinSubType, cap)
    return removeAllPickups(nil, PickupVariant.COIN, coinSubType, cap)
end
--- Helper function to remove all of the collectibles in the room.
-- 
-- @param collectibleType Optional. If specified, will only remove collectibles that match this
-- collectible type.
-- @param cap Optional. If specified, will only remove the given amount of collectibles.
-- @returns True if one or more collectibles were removed, false otherwise.
function ____exports.removeAllCollectibles(self, collectibleType, cap)
    return removeAllPickups(nil, PickupVariant.COLLECTIBLE, collectibleType, cap)
end
--- Helper function to remove all of the hearts in the room.
-- 
-- @param heartSubType Optional. If specified, will only remove hearts that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of hearts.
-- @returns True if one or more hearts were removed, false otherwise.
function ____exports.removeAllHearts(self, heartSubType, cap)
    return removeAllPickups(nil, PickupVariant.HEART, heartSubType, cap)
end
--- Helper function to remove all of the keys in the room.
-- 
-- @param keySubType Optional. If specified, will only remove keys that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of keys.
-- @returns True if one or more keys were removed, false otherwise.
function ____exports.removeAllKeys(self, keySubType, cap)
    return removeAllPickups(nil, PickupVariant.KEY, keySubType, cap)
end
--- Helper function to remove all of the pills in the room.
-- 
-- @param pillColor Optional. If specified, will only remove pills that match this color.
-- @param cap Optional. If specified, will only remove the given amount of pills.
-- @returns True if one or more pills were removed, false otherwise.
function ____exports.removeAllPills(self, pillColor, cap)
    return removeAllPickups(nil, PickupVariant.PILL, pillColor, cap)
end
--- Helper function to remove all of the sacks (i.e. grab bags) in the room.
-- 
-- @param sackSubType Optional. If specified, will only remove sacks that match this sub-type.
-- @param cap Optional. If specified, will only remove the given amount of trinkets.
-- @returns True if one or more trinkets were removed, false otherwise.
function ____exports.removeAllSacks(self, sackSubType, cap)
    return removeAllPickups(nil, PickupVariant.TRINKET, sackSubType, cap)
end
--- Helper function to remove all of the trinkets in the room.
-- 
-- @param trinketType Optional. If specified, will only remove trinkets that match this trinket
-- type.
-- @param cap Optional. If specified, will only remove the given amount of trinkets.
-- @returns True if one or more trinkets were removed, false otherwise.
function ____exports.removeAllTrinkets(self, trinketType, cap)
    return removeAllPickups(nil, PickupVariant.TRINKET, trinketType, cap)
end
--- Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.LIL_BATTERY` (90).
function ____exports.spawnBattery(self, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    return spawnPickup(
        nil,
        PickupVariant.LIL_BATTERY,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
function ____exports.spawnBatteryWithSeed(self, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnBattery(
        nil,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.TAROT_CARD` (300).
function ____exports.spawnCard(self, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    return spawnPickup(
        nil,
        PickupVariant.TAROT_CARD,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
function ____exports.spawnCardWithSeed(self, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnCard(
        nil,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.COIN` (20).
function ____exports.spawnCoin(self, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    return spawnPickup(
        nil,
        PickupVariant.COIN,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
function ____exports.spawnCoinWithSeed(self, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnCoin(
        nil,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.HEART` (10).
function ____exports.spawnHeart(self, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    return spawnPickup(
        nil,
        PickupVariant.HEART,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
function ____exports.spawnHeartWithSeed(self, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnHeart(
        nil,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.KEY` (30).
function ____exports.spawnKey(self, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    return spawnPickup(
        nil,
        PickupVariant.KEY,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
function ____exports.spawnKeyWithSeed(self, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnKey(
        nil,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.PILL` (70).
function ____exports.spawnPill(self, pillColor, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    return spawnPickup(
        nil,
        PickupVariant.PILL,
        pillColor,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
function ____exports.spawnPillWithSeed(self, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnPill(
        nil,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.SACK` (69).
function ____exports.spawnSack(self, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    return spawnPickup(
        nil,
        PickupVariant.SACK,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
function ____exports.spawnSackWithSeed(self, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnSack(
        nil,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
--- Helper function to spawn a `EntityType.PICKUP` (5) with variant `PickupVariant.TRINKET` (350).
function ____exports.spawnTrinket(self, subType, position, velocity, spawner, seedOrRNG)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    return spawnPickup(
        nil,
        PickupVariant.TRINKET,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
function ____exports.spawnTrinketWithSeed(self, subType, position, seedOrRNG, velocity, spawner)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    return ____exports.spawnTrinket(
        nil,
        subType,
        position,
        velocity,
        spawner,
        seedOrRNG
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.coinSubTypeToValue"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CoinSubType = ____isaac_2Dtypescript_2Ddefinitions.CoinSubType
____exports.DEFAULT_COIN_VALUE = 1
____exports.COIN_SUBTYPE_TO_VALUE = {
    [CoinSubType.NULL] = 0,
    [CoinSubType.PENNY] = 1,
    [CoinSubType.NICKEL] = 5,
    [CoinSubType.DIME] = 10,
    [CoinSubType.DOUBLE_PACK] = 2,
    [CoinSubType.LUCKY_PENNY] = 1,
    [CoinSubType.STICKY_NICKEL] = 5,
    [CoinSubType.GOLDEN] = 1
}
return ____exports
 end,
["lua_modules.isaacscript-common.sets.chestPickupVariantsSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
____exports.CHEST_PICKUP_VARIANTS = __TS__New(Set, {
    PickupVariant.CHEST,
    PickupVariant.BOMB_CHEST,
    PickupVariant.SPIKED_CHEST,
    PickupVariant.ETERNAL_CHEST,
    PickupVariant.MIMIC_CHEST,
    PickupVariant.OLD_CHEST,
    PickupVariant.WOODEN_CHEST,
    PickupVariant.MEGA_CHEST,
    PickupVariant.HAUNTED_CHEST,
    PickupVariant.LOCKED_CHEST,
    PickupVariant.RED_CHEST,
    PickupVariant.MOMS_CHEST
})
return ____exports
 end,
["lua_modules.isaacscript-common.sets.redHeartSubTypesSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local HeartSubType = ____isaac_2Dtypescript_2Ddefinitions.HeartSubType
____exports.RED_HEART_SUB_TYPES_SET = __TS__New(Set, {HeartSubType.FULL, HeartSubType.HALF, HeartSubType.DOUBLE_PACK})
return ____exports
 end,
["lua_modules.isaacscript-common.features.characterStats"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local evaluateCache, charactersStatMap
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____cacheFlag = require("lua_modules.isaacscript-common.functions.cacheFlag")
local getDefaultPlayerStat = ____cacheFlag.getDefaultPlayerStat
local ____player = require("lua_modules.isaacscript-common.functions.player")
local addStat = ____player.addStat
function evaluateCache(self, player, cacheFlag)
    local character = player:GetPlayerType()
    local statMap = charactersStatMap:get(character)
    if statMap == nil then
        return
    end
    local stat = statMap:get(cacheFlag)
    local defaultStat = getDefaultPlayerStat(nil, cacheFlag)
    if stat == nil or defaultStat == nil then
        return
    end
    local delta = stat - defaultStat
    addStat(nil, player, cacheFlag, delta)
end
local FEATURE_NAME = "characterStats"
charactersStatMap = __TS__New(Map)
---
-- @internal
function ____exports.characterStatsInit(self, mod)
    mod:AddCallback(ModCallback.EVALUATE_CACHE, evaluateCache)
end
--- Helper function to manage the stats for a vanilla or custom character. Call this function once at
-- the beginning of your mod to declare the starting stats.
-- 
-- You must provide this function with a map of CacheFlag to the default stat amount. For example,
-- the default amount of damage is 3.5. To make a custom character start with 4.5 damage:
-- 
-- ```ts
-- const fooDefaultStats = new Map<CacheFlag, number>([
--   [CacheFlag.DAMAGE, 4.5],
-- ])
-- registerCharacterStats(PlayerTypeCustom.FOO, fooDefaultStats);
-- ```
-- 
-- Note that the format for the `CacheFlag.FIRE_DELAY` value should be in the tears stat format, not
-- the `MaxFireDelay` format.
function ____exports.registerCharacterStats(self, playerType, statMap)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    charactersStatMap:set(playerType, statMap)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.cacheFlag"] = function(...) 
local ____exports = {}
local ____defaultPlayerStatMap = require("lua_modules.isaacscript-common.maps.defaultPlayerStatMap")
local DEFAULT_PLAYER_STAT_MAP = ____defaultPlayerStatMap.DEFAULT_PLAYER_STAT_MAP
--- Returns the starting stat that Isaac (the default character) starts with. For example, if you
-- pass this function `CacheFlag.DAMAGE`, it will return 3.5.
-- 
-- Note that the default fire delay is represented in the tear stat, not the `MaxFireDelay` value.
function ____exports.getDefaultPlayerStat(self, cacheFlag)
    return DEFAULT_PLAYER_STAT_MAP:get(cacheFlag)
end
return ____exports
 end,
["lua_modules.isaacscript-common.maps.defaultPlayerStatMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CacheFlag = ____isaac_2Dtypescript_2Ddefinitions.CacheFlag
local ____tears = require("lua_modules.isaacscript-common.functions.tears")
local getTearsStat = ____tears.getTearsStat
local DEFAULT_MAX_FIRE_DELAY = 10
--- The default fire delay is represented in the tear stat, not the `MaxFireDelay` value.
____exports.DEFAULT_PLAYER_STAT_MAP = __TS__New(
    Map,
    {
        {CacheFlag.DAMAGE, 3.5},
        {
            CacheFlag.FIRE_DELAY,
            getTearsStat(nil, DEFAULT_MAX_FIRE_DELAY)
        },
        {CacheFlag.SHOT_SPEED, 1},
        {CacheFlag.RANGE, 6.5},
        {CacheFlag.SPEED, 1},
        {CacheFlag.LUCK, 0}
    }
)
return ____exports
 end,
["lua_modules.isaacscript-common.features.collectibleItemPoolType"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local postPickupInitCollectible, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local getEntityID = ____entity.getEntityID
local ____pickupVariants = require("lua_modules.isaacscript-common.functions.pickupVariants")
local isCollectible = ____pickupVariants.isCollectible
local ____rooms = require("lua_modules.isaacscript-common.functions.rooms")
local getRoomItemPoolType = ____rooms.getRoomItemPoolType
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function postPickupInitCollectible(self, pickup)
    local itemPool = game:GetItemPool()
    local ptrHash = GetPtrHash(pickup)
    local lastItemPoolType = itemPool:GetLastPool()
    v.run.collectibleItemPoolTypeMap:set(ptrHash, lastItemPoolType)
end
local FEATURE_NAME = "collectibleItemPoolType"
v = {run = {collectibleItemPoolTypeMap = __TS__New(Map)}}
---
-- @internal
function ____exports.collectibleItemPoolTypeInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallback(ModCallback.POST_PICKUP_INIT, postPickupInitCollectible, PickupVariant.COLLECTIBLE)
end
--- Helper function to get the item pool type that a given collectible came from. Since there is no
-- native method in the API to get this, we listen in the PreGetCollectible callback for item pool
-- types, and then assume that the next spawned collectible will match.
function ____exports.getCollectibleItemPoolType(self, collectible)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    if not isCollectible(nil, collectible) then
        local entityID = getEntityID(nil, collectible)
        error("The \"getCollectibleItemPoolType\" function was given a non-collectible: " .. entityID)
    end
    local ptrHash = GetPtrHash(collectible)
    local itemPoolType = v.run.collectibleItemPoolTypeMap:get(ptrHash)
    return itemPoolType == nil and getRoomItemPoolType(nil) or itemPoolType
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.debugDisplay.exports"] = function(...) 
local ____exports = {}
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local printEnabled = ____utils.printEnabled
local ____v = require("lua_modules.isaacscript-common.features.debugDisplay.v")
local v = ____v.default
local debugDisplayTextCallbacks = ____v.debugDisplayTextCallbacks
--- After using the "playerDisplay" console command, text will be drawn on each player for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setPlayerDisplay(self, textCallback)
    debugDisplayTextCallbacks.player = textCallback
end
--- After using the "tearDisplay" console command, text will be drawn on each tear for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setTearDisplay(self, textCallback)
    debugDisplayTextCallbacks.tear = textCallback
end
--- After using the "familiarDisplay" console command, text will be drawn on each familiar for
-- debugging purposes. Use this function to specify a callback function that will returns the string
-- that should be drawn.
function ____exports.setFamiliarDisplay(self, textCallback)
    debugDisplayTextCallbacks.familiar = textCallback
end
--- After using the "bombDisplay" console command, text will be drawn on each bomb for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setBombDisplay(self, textCallback)
    debugDisplayTextCallbacks.bomb = textCallback
end
--- After using the "pickupDisplay" console command, text will be drawn on each pickup for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setPickupDisplay(self, textCallback)
    debugDisplayTextCallbacks.pickup = textCallback
end
--- After using the "slotDisplay" console command, text will be drawn on each slot for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setSlotDisplay(self, textCallback)
    debugDisplayTextCallbacks.slot = textCallback
end
--- After using the "laserDisplay" console command, text will be drawn on each laser for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setLaserDisplay(self, textCallback)
    debugDisplayTextCallbacks.laser = textCallback
end
--- After using the "knifeDisplay" console command, text will be drawn on each knife for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setKnifeDisplay(self, textCallback)
    debugDisplayTextCallbacks.knife = textCallback
end
--- After using the "projectileDisplay" console command, text will be drawn on each projectile for
-- debugging purposes. Use this function to specify a callback function that will returns the string
-- that should be drawn.
function ____exports.setProjectileDisplay(self, textCallback)
    debugDisplayTextCallbacks.projectile = textCallback
end
--- After using the "effectDisplay" console command, text will be drawn on each effect for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setEffectDisplay(self, textCallback)
    debugDisplayTextCallbacks.effect = textCallback
end
--- After using the "npcDisplay" console command, text will be drawn on each NPC for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setNPCDisplay(self, textCallback)
    debugDisplayTextCallbacks.npc = textCallback
end
--- After using the "rockDisplay" console command, text will be drawn on each rock for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setRockDisplay(self, textCallback)
    debugDisplayTextCallbacks.rock = textCallback
end
--- After using the "pitDisplay" console command, text will be drawn on each pit for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setPitDisplay(self, textCallback)
    debugDisplayTextCallbacks.pit = textCallback
end
--- After using the "spikesDisplay" console command, text will be drawn on each spikes for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setSpikesDisplay(self, textCallback)
    debugDisplayTextCallbacks.spikes = textCallback
end
--- After using the "tntDisplay" console command, text will be drawn on each TNT for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setTNTDisplay(self, textCallback)
    debugDisplayTextCallbacks.tnt = textCallback
end
--- After using the "poopDisplay" console command, text will be drawn on each poop for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setPoopDisplay(self, textCallback)
    debugDisplayTextCallbacks.poop = textCallback
end
--- After using the "poopDisplay" console command, text will be drawn on each poop for debugging
-- purposes. Use this function to specify a callback function that will returns the string that
-- should be drawn.
function ____exports.setDoorDisplay(self, textCallback)
    debugDisplayTextCallbacks.door = textCallback
end
--- After using the "pressurePlateDisplay" console command, text will be drawn on each pressure plate
-- for debugging purposes. Use this function to specify a callback function that will returns the
-- string that should be drawn.
function ____exports.setPressurePlateDisplay(self, textCallback)
    debugDisplayTextCallbacks.pressurePlate = textCallback
end
--- Toggles the debug display for players. This is the function that runs when you use the
-- "playerDisplay" custom console command.
function ____exports.togglePlayerDisplay(self)
    v.run.player = not v.run.player
    printEnabled(nil, v.run.player, "player display")
end
--- Toggles the debug display for tears. This is the function that runs when you use the
-- "tearDisplay" custom console command.
function ____exports.toggleTearDisplay(self)
    v.run.tear = not v.run.tear
    printEnabled(nil, v.run.tear, "tear display")
end
--- Toggles the debug display for familiars. This is the function that runs when you use the
-- "familiarDisplay" custom console command.
function ____exports.toggleFamiliarDisplay(self)
    v.run.familiar = not v.run.familiar
    printEnabled(nil, v.run.familiar, "familiar display")
end
--- Toggles the debug display for bombs. This is the function that runs when you use the
-- "bombDisplay" custom console command.
function ____exports.toggleBombDisplay(self)
    v.run.bomb = not v.run.bomb
    printEnabled(nil, v.run.bomb, "bomb display")
end
--- Toggles the debug display for pickups. This is the function that runs when you use the
-- "pickupDisplay" custom console command.
function ____exports.togglePickupDisplay(self)
    v.run.pickup = not v.run.pickup
    printEnabled(nil, v.run.pickup, "pickup display")
end
--- Toggles the debug display for slots. This is the function that runs when you use the
-- "slotDisplay" custom console command.
function ____exports.toggleSlotDisplay(self)
    v.run.slot = not v.run.slot
    printEnabled(nil, v.run.slot, "slot display")
end
--- Toggles the debug display for lasers. This is the function that runs when you use the
-- "laserDisplay" custom console command.
function ____exports.toggleLaserDisplay(self)
    v.run.laser = not v.run.laser
    printEnabled(nil, v.run.laser, "laser display")
end
--- Toggles the debug display for knives. This is the function that runs when you use the
-- "knifeDisplay" custom console command.
function ____exports.toggleKnifeDisplay(self)
    v.run.knife = not v.run.knife
    printEnabled(nil, v.run.knife, "knife display")
end
--- Toggles the debug display for projectiles. This is the function that runs when you use the
-- "projectileDisplay" custom console command.
function ____exports.toggleProjectileDisplay(self)
    v.run.projectile = not v.run.projectile
    printEnabled(nil, v.run.projectile, "projectile display")
end
--- Toggles the debug display for effects. This is the function that runs when you use the
-- "effectDisplay" custom console command.
function ____exports.toggleEffectDisplay(self)
    v.run.effect = not v.run.effect
    printEnabled(nil, v.run.effect, "effect display")
end
--- Toggles the debug display for NPCs. This is the function that runs when you use the "npcDisplay"
-- custom console command.
function ____exports.toggleNPCDisplay(self)
    v.run.npc = not v.run.npc
    printEnabled(nil, v.run.npc, "NPC display")
end
--- Toggles the debug display for rocks. This is the function that runs when you use the
-- "rockDisplay" custom console command.
function ____exports.toggleRockDisplay(self)
    v.run.rock = not v.run.rock
    printEnabled(nil, v.run.rock, "rock display")
end
--- Toggles the debug display for pits. This is the function that runs when you use the "pitDisplay"
-- custom console command.
function ____exports.togglePitDisplay(self)
    v.run.pit = not v.run.pit
    printEnabled(nil, v.run.pit, "pit display")
end
--- Toggles the debug display for spikes. This is the function that runs when you use the
-- "spikesDisplay" custom console command.
function ____exports.toggleSpikesDisplay(self)
    v.run.spikes = not v.run.spikes
    printEnabled(nil, v.run.spikes, "spikes display")
end
--- Toggles the debug display for TNT. This is the function that runs when you use the "tntDisplay"
-- custom console command.
function ____exports.toggleTNTDisplay(self)
    v.run.tnt = not v.run.tnt
    printEnabled(nil, v.run.tnt, "TNT display")
end
--- Toggles the debug display for poop. This is the function that runs when you use the "poopDisplay"
-- custom console command.
function ____exports.togglePoopDisplay(self)
    v.run.poop = not v.run.poop
    printEnabled(nil, v.run.poop, "poop display")
end
--- Toggles the debug display for doors. This is the function that runs when you use the
-- "doorDisplay" custom console command.
function ____exports.toggleDoorDisplay(self)
    v.run.door = not v.run.door
    printEnabled(nil, v.run.door, "door display")
end
--- Toggles the debug display for pressure plates. This is the function that runs when you use the
-- "pressurePlateDisplay" custom console command.
function ____exports.togglePressurePlateDisplay(self)
    v.run.pressurePlate = not v.run.pressurePlate
    printEnabled(nil, v.run.pressurePlate, "pressure plate display")
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.debugDisplay.v"] = function(...) 
local ____exports = {}
local defaultEntityDisplayCallback, defaultGridEntityDisplayCallback
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local getEntityID = ____entity.getEntityID
local ____gridEntity = require("lua_modules.isaacscript-common.functions.gridEntity")
local getGridEntityID = ____gridEntity.getGridEntityID
function defaultEntityDisplayCallback(self, entity)
    return getEntityID(nil, entity)
end
function defaultGridEntityDisplayCallback(self, gridEntity)
    return getGridEntityID(nil, gridEntity)
end
local v = {run = {
    player = false,
    tear = false,
    familiar = false,
    bomb = false,
    pickup = false,
    slot = false,
    laser = false,
    knife = false,
    projectile = false,
    effect = false,
    npc = false,
    rock = false,
    pit = false,
    spikes = false,
    tnt = false,
    poop = false,
    door = false,
    pressurePlate = false
}}
____exports.default = v
____exports.debugDisplayTextCallbacks = {
    player = defaultEntityDisplayCallback,
    tear = defaultEntityDisplayCallback,
    familiar = defaultEntityDisplayCallback,
    bomb = defaultEntityDisplayCallback,
    pickup = defaultEntityDisplayCallback,
    slot = defaultEntityDisplayCallback,
    laser = defaultEntityDisplayCallback,
    knife = defaultEntityDisplayCallback,
    projectile = defaultEntityDisplayCallback,
    effect = defaultEntityDisplayCallback,
    npc = defaultEntityDisplayCallback,
    rock = defaultGridEntityDisplayCallback,
    pit = defaultGridEntityDisplayCallback,
    spikes = defaultGridEntityDisplayCallback,
    tnt = defaultGridEntityDisplayCallback,
    poop = defaultGridEntityDisplayCallback,
    door = defaultGridEntityDisplayCallback,
    pressurePlate = defaultGridEntityDisplayCallback
}
return ____exports
 end,
["lua_modules.isaacscript-common.features.deployJSONRoom"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local Map = ____lualib.Map
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local preUseItemWeNeedToGoDeeper, postNewRoomReordered, setDecorationsInvisible, respawnPersistentEntities, removeSpecificNPCs, fillRoomWithDecorations, spawnAllEntities, spawnGridEntityForJSONRoom, spawnNormalEntityForJSONRoom, storePersistentEntity, fixPitGraphics, getPitMap, getPitFrame, FEATURE_NAME, NPC_TYPES_TO_NOT_REMOVE, PERSISTENT_ENTITY_TYPES, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local EffectVariant = ____isaac_2Dtypescript_2Ddefinitions.EffectVariant
local EntityCollisionClass = ____isaac_2Dtypescript_2Ddefinitions.EntityCollisionClass
local EntityFlag = ____isaac_2Dtypescript_2Ddefinitions.EntityFlag
local EntityGridCollisionClass = ____isaac_2Dtypescript_2Ddefinitions.EntityGridCollisionClass
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local GridEntityType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local PitfallVariant = ____isaac_2Dtypescript_2Ddefinitions.PitfallVariant
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____array = require("lua_modules.isaacscript-common.functions.array")
local emptyArray = ____array.emptyArray
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local removeAllMatchingEntities = ____entity.removeAllMatchingEntities
local spawn = ____entity.spawn
local spawnWithSeed = ____entity.spawnWithSeed
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local getNPCs = ____entitySpecific.getNPCs
local removeAllBombs = ____entitySpecific.removeAllBombs
local removeAllPickups = ____entitySpecific.removeAllPickups
local ____gridEntity = require("lua_modules.isaacscript-common.functions.gridEntity")
local convertXMLGridEntityType = ____gridEntity.convertXMLGridEntityType
local getAllGridIndexes = ____gridEntity.getAllGridIndexes
local getGridEntities = ____gridEntity.getGridEntities
local removeAllGridExcept = ____gridEntity.removeAllGridExcept
local removeGrid = ____gridEntity.removeGrid
local setGridEntityInvisible = ____gridEntity.setGridEntityInvisible
local spawnGridWithVariant = ____gridEntity.spawnGridWithVariant
local ____jsonRoom = require("lua_modules.isaacscript-common.functions.jsonRoom")
local getRandomJSONRoom = ____jsonRoom.getRandomJSONRoom
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local getRandomSeed = ____rng.getRandomSeed
local isRNG = ____rng.isRNG
local newRNG = ____rng.newRNG
local ____roomData = require("lua_modules.isaacscript-common.functions.roomData")
local getRoomListIndex = ____roomData.getRoomListIndex
local ____roomGrid = require("lua_modules.isaacscript-common.functions.roomGrid")
local gridCoordinatesToWorldPosition = ____roomGrid.gridCoordinatesToWorldPosition
local ____rooms = require("lua_modules.isaacscript-common.functions.rooms")
local setRoomCleared = ____rooms.setRoomCleared
local setRoomUncleared = ____rooms.setRoomUncleared
local ____spawnCollectible = require("lua_modules.isaacscript-common.functions.spawnCollectible")
local spawnCollectible = ____spawnCollectible.spawnCollectible
local ____runInNFrames = require("lua_modules.isaacscript-common.features.runInNFrames")
local runNextGameFrame = ____runInNFrames.runNextGameFrame
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function preUseItemWeNeedToGoDeeper(self, _collectibleType, _rng, player)
    if v.room.manuallyUsingShovel then
        return nil
    end
    local roomListIndex = getRoomListIndex(nil)
    if not v.level.deployedRoomListIndexes:has(roomListIndex) then
        return nil
    end
    local decorations = getGridEntities(nil, GridEntityType.DECORATION)
    for ____, decoration in ipairs(decorations) do
        removeGrid(nil, decoration, false)
    end
    local playerPtr = EntityPtr(player)
    runNextGameFrame(
        nil,
        function()
            local futureEntity = playerPtr.Ref
            if futureEntity == nil then
                return
            end
            local futurePlayer = futureEntity:ToPlayer()
            if futurePlayer == nil then
                return
            end
            v.room.manuallyUsingShovel = true
            futurePlayer:UseActiveItem(CollectibleType.WE_NEED_TO_GO_DEEPER)
            v.room.manuallyUsingShovel = false
            local decorationGridIndexes = v.level.roomToDecorationGridIndexesMap:getAndSetDefault(roomListIndex)
            emptyArray(nil, decorationGridIndexes)
            fillRoomWithDecorations(nil)
        end
    )
    return true
end
function postNewRoomReordered(self)
    local roomListIndex = getRoomListIndex(nil)
    if not v.level.deployedRoomListIndexes:has(roomListIndex) then
        return
    end
    setDecorationsInvisible(nil)
    respawnPersistentEntities(nil)
end
function setDecorationsInvisible(self)
    local room = game:GetRoom()
    local roomListIndex = getRoomListIndex(nil)
    local decorationGridIndexes = v.level.roomToDecorationGridIndexesMap:getAndSetDefault(roomListIndex)
    for ____, gridIndex in ipairs(decorationGridIndexes) do
        local gridEntity = room:GetGridEntity(gridIndex)
        if gridEntity ~= nil then
            local gridEntityType = gridEntity:GetType()
            if gridEntityType == GridEntityType.DECORATION then
                setGridEntityInvisible(nil, gridEntity)
            end
        end
    end
end
function respawnPersistentEntities(self)
    local room = game:GetRoom()
    local roomListIndex = getRoomListIndex(nil)
    local persistentEntities = v.level.roomToPersistentEntitiesMap:getAndSetDefault(roomListIndex)
    for ____, persistentEntity in ipairs(persistentEntities) do
        local position = room:GetGridPosition(persistentEntity.gridIndex)
        spawn(
            nil,
            persistentEntity.entityType,
            persistentEntity.variant,
            persistentEntity.subType,
            position
        )
    end
end
--- Helper function to remove all naturally spawning entities and grid entities from a room. Notably,
-- this will not remove players (1), tears (2), familiars (3), lasers (7), knives (8), projectiles
-- (9), blacklisted NPCs such as Dark Esau, charmed NPCs, friendly NPCs, persistent NPCs, most
-- effects (1000), doors, and walls.
-- 
-- @param fillWithDecorations Optional. Set to true to fill every grid tile with an invisible
-- decoration, which prevents vanilla entities in the room from
-- respawning the next time that the player enters. Default is false.
function ____exports.emptyRoom(self, fillWithDecorations)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    local roomListIndex = getRoomListIndex(nil)
    v.level.deployedRoomListIndexes:add(roomListIndex)
    removeAllBombs(nil)
    removeAllPickups(nil)
    removeAllMatchingEntities(nil, EntityType.SLOT)
    removeSpecificNPCs(nil)
    removeAllMatchingEntities(nil, EntityType.EFFECT, EffectVariant.DEVIL)
    removeAllMatchingEntities(nil, EntityType.EFFECT, EffectVariant.ANGEL)
    removeAllGridExcept(nil, GridEntityType.WALL, GridEntityType.DOOR)
    setRoomCleared(nil)
    if fillWithDecorations then
        fillRoomWithDecorations(nil)
    end
end
function removeSpecificNPCs(self)
    local room = game:GetRoom()
    for ____, npc in ipairs(getNPCs(nil)) do
        do
            if NPC_TYPES_TO_NOT_REMOVE:has(npc.Type) then
                goto __continue33
            end
            if npc:HasEntityFlags(EntityFlag.CHARM) or npc:HasEntityFlags(EntityFlag.FRIENDLY) or npc:HasEntityFlags(EntityFlag.PERSISTENT) then
                goto __continue33
            end
            npc:ClearEntityFlags(EntityFlag.APPEAR)
            npc:Remove()
            if npc.Type == EntityType.FIREPLACE then
                local gridIndex = room:GetGridIndex(npc.Position)
                room:SetGridPath(gridIndex, 0)
            end
        end
        ::__continue33::
    end
end
function fillRoomWithDecorations(self)
    local room = game:GetRoom()
    local roomListIndex = getRoomListIndex(nil)
    local decorationGridIndexes = v.level.roomToDecorationGridIndexesMap:getAndSetDefault(roomListIndex)
    for ____, gridIndex in ipairs(getAllGridIndexes(nil)) do
        do
            local existingGridEntity = room:GetGridEntity(gridIndex)
            if existingGridEntity ~= nil then
                goto __continue39
            end
            local position = room:GetGridPosition(gridIndex)
            local decoration = Isaac.GridSpawn(GridEntityType.DECORATION, 0, position)
            if decoration ~= nil then
                setGridEntityInvisible(nil, decoration)
            end
            decorationGridIndexes[#decorationGridIndexes + 1] = gridIndex
        end
        ::__continue39::
    end
end
function spawnAllEntities(self, jsonRoom, rng, verbose)
    if verbose == nil then
        verbose = false
    end
    local shouldUnclearRoom = false
    for ____, jsonSpawn in ipairs(jsonRoom.spawn) do
        local xString = jsonSpawn["$"].x
        local x = tonumber(xString)
        if x == nil then
            error("Failed to convert the following x coordinate to a number (for a spawn): " .. xString)
        end
        local yString = jsonSpawn["$"].y
        local y = tonumber(yString)
        if y == nil then
            error("Failed to convert the following y coordinate to a number (for a spawn): " .. yString)
        end
        if #jsonSpawn.entity > 1 then
            error("Stacked entities are not implemented for JSON rooms.")
        end
        local firstXMLEntity = jsonSpawn.entity[1]
        if firstXMLEntity == nil then
            error("Failed to get the first JSON entity from an \"entity\" array.")
        end
        local entityTypeString = firstXMLEntity["$"].type
        local entityType = tonumber(entityTypeString)
        if entityType == nil then
            error("Failed to convert the entity type to a number: " .. entityTypeString)
        end
        local variantString = firstXMLEntity["$"].variant
        local variant = tonumber(variantString)
        if variant == nil then
            error("Failed to convert the entity variant to a number: " .. tostring(variant))
        end
        local subTypeString = firstXMLEntity["$"].subtype
        local subType = tonumber(subTypeString)
        if subType == nil then
            error("Failed to convert the entity sub-type to a number: " .. tostring(subType))
        end
        if entityType >= 1000 then
            if verbose then
                log(((((((("Spawning grid entity " .. tostring(entityType)) .. ".") .. tostring(variant)) .. " at: (") .. tostring(x)) .. ", ") .. tostring(y)) .. ")")
            end
            spawnGridEntityForJSONRoom(
                nil,
                entityType,
                variant,
                x,
                y
            )
        else
            if verbose then
                log(((((((((("Spawning normal entity " .. tostring(entityType)) .. ".") .. tostring(variant)) .. ".") .. tostring(subType)) .. " at: (") .. tostring(x)) .. ", ") .. tostring(y)) .. ")")
            end
            local entity = spawnNormalEntityForJSONRoom(
                nil,
                entityType,
                variant,
                subType,
                x,
                y,
                rng
            )
            local npc = entity:ToNPC()
            if npc ~= nil and npc.CanShutDoors then
                shouldUnclearRoom = true
            end
        end
    end
    if shouldUnclearRoom then
        if verbose then
            log("Setting the room to be uncleared since there were one or more battle NPCs spawned.")
        end
        setRoomUncleared(nil)
    elseif verbose then
        log("Leaving the room cleared since there were no battle NPCs spawned.")
    end
end
function spawnGridEntityForJSONRoom(self, gridEntityXMLType, gridEntityXMLVariant, x, y)
    local room = game:GetRoom()
    local gridEntityTuple = convertXMLGridEntityType(nil, gridEntityXMLType, gridEntityXMLVariant)
    if gridEntityTuple == nil then
        return nil
    end
    local gridEntityType, variant = table.unpack(gridEntityTuple)
    local position = gridCoordinatesToWorldPosition(nil, x, y)
    local gridIndex = room:GetGridIndex(position)
    local gridEntity = spawnGridWithVariant(nil, gridEntityType, variant, gridIndex)
    if gridEntity == nil then
        return gridEntity
    end
    if gridEntityType == GridEntityType.POOP then
        local sprite = gridEntity:GetSprite()
        sprite:Play("State1", true)
        sprite:SetLastFrame()
    end
    return gridEntity
end
function spawnNormalEntityForJSONRoom(self, entityType, variant, subType, x, y, rng)
    local room = game:GetRoom()
    local roomType = room:GetType()
    local position = gridCoordinatesToWorldPosition(nil, x, y)
    local seed = rng:Next()
    local entity
    if entityType == EntityType.PICKUP and variant == PickupVariant.COLLECTIBLE then
        local options = roomType == RoomType.ANGEL
        entity = spawnCollectible(
            nil,
            subType,
            position,
            seed,
            options
        )
    else
        entity = spawnWithSeed(
            nil,
            entityType,
            variant,
            subType,
            position,
            seed
        )
    end
    if entityType == EntityType.PITFALL and variant == PitfallVariant.PITFALL then
        entity.EntityCollisionClass = EntityCollisionClass.ENEMIES
        entity.GridCollisionClass = EntityGridCollisionClass.WALLS
    end
    storePersistentEntity(nil, entity)
    return entity
end
function storePersistentEntity(self, entity)
    if not PERSISTENT_ENTITY_TYPES:has(entity.Type) then
        return
    end
    local room = game:GetRoom()
    local gridIndex = room:GetGridIndex(entity.Position)
    local roomListIndex = getRoomListIndex(nil)
    local persistentEntity = {gridIndex = gridIndex, entityType = entity.Type, variant = entity.Variant, subType = entity.SubType}
    local persistentEntities = v.level.roomToPersistentEntitiesMap:getAndSetDefault(roomListIndex)
    persistentEntities[#persistentEntities + 1] = persistentEntity
end
function fixPitGraphics(self)
    local room = game:GetRoom()
    local gridWidth = room:GetGridWidth()
    local pitMap = getPitMap(nil)
    for ____, ____value in __TS__Iterator(pitMap:entries()) do
        local gridIndex = ____value[1]
        local gridEntity = ____value[2]
        local gridIndexLeft = gridIndex - 1
        local L = pitMap:has(gridIndexLeft)
        local gridIndexRight = gridIndex + 1
        local R = pitMap:has(gridIndexRight)
        local gridIndexUp = gridIndex - gridWidth
        local U = pitMap:has(gridIndexUp)
        local gridIndexDown = gridIndex + gridWidth
        local D = pitMap:has(gridIndexDown)
        local gridIndexUpLeft = gridIndex - gridWidth - 1
        local UL = pitMap:has(gridIndexUpLeft)
        local gridIndexUpRight = gridIndex - gridWidth + 1
        local UR = pitMap:has(gridIndexUpRight)
        local gridIndexDownLeft = gridIndex + gridWidth - 1
        local DL = pitMap:has(gridIndexDownLeft)
        local gridIndexDownRight = gridIndex + gridWidth + 1
        local DR = pitMap:has(gridIndexDownRight)
        local pitFrame = getPitFrame(
            nil,
            L,
            R,
            U,
            D,
            UL,
            UR,
            DL,
            DR
        )
        local sprite = gridEntity:GetSprite()
        sprite:SetFrame(pitFrame)
    end
end
function getPitMap(self)
    local pitMap = __TS__New(Map)
    for ____, gridEntity in ipairs(getGridEntities(nil, GridEntityType.PIT)) do
        local gridIndex = gridEntity:GetGridIndex()
        pitMap:set(gridIndex, gridEntity)
    end
    return pitMap
end
function getPitFrame(self, L, R, U, D, UL, UR, DL, DR)
    local F = 0
    if L then
        F = F | 1
    end
    if U then
        F = F | 2
    end
    if R then
        F = F | 4
    end
    if D then
        F = F | 8
    end
    if U and L and not UL and not R and not D then
        F = 17
    end
    if U and R and not UR and not L and not D then
        F = 18
    end
    if L and D and not DL and not U and not R then
        F = 19
    end
    if R and D and not DR and not L and not U then
        F = 20
    end
    if L and U and R and D and not UL then
        F = 21
    end
    if L and U and R and D and not UR then
        F = 22
    end
    if U and R and D and not L and not UR then
        F = 25
    end
    if L and U and D and not R and not UL then
        F = 26
    end
    if L and U and R and D and not DL and not DR then
        F = 24
    end
    if L and U and R and D and not UR and not UL then
        F = 23
    end
    if L and U and R and UL and not UR and not D then
        F = 27
    end
    if L and U and R and UR and not UL and not D then
        F = 28
    end
    if L and U and R and not D and not UR and not UL then
        F = 29
    end
    if L and R and D and DL and not U and not DR then
        F = 30
    end
    if L and R and D and DR and not U and not DL then
        F = 31
    end
    if L and R and D and not U and not DL and not DR then
        F = 32
    end
    return F
end
FEATURE_NAME = "deployJSONRoom"
NPC_TYPES_TO_NOT_REMOVE = __TS__New(Set, {EntityType.DARK_ESAU})
PERSISTENT_ENTITY_TYPES = __TS__New(Set, {EntityType.WALL_HUGGER})
v = {
    level = {
        deployedRoomListIndexes = __TS__New(Set),
        roomToPersistentEntitiesMap = __TS__New(
            DefaultMap,
            function() return {} end
        ),
        roomToDecorationGridIndexesMap = __TS__New(
            DefaultMap,
            function() return {} end
        )
    },
    room = {manuallyUsingShovel = false}
}
---
-- @internal
function ____exports.deployJSONRoomInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallback(ModCallback.PRE_USE_ITEM, preUseItemWeNeedToGoDeeper, CollectibleType.WE_NEED_TO_GO_DEEPER)
    mod:AddCallbackCustom(ModCallbackCustom.POST_NEW_ROOM_REORDERED, postNewRoomReordered)
end
--- Helper function to deconstruct a vanilla room and set up a custom room in its place.
-- Specifically, this will clear the current room of all entities and grid entities, and then spawn
-- all of the entries and grid entities in the provided JSON room.
-- 
-- This function is meant to be used in the PostNewRoom callback.
-- 
-- For example:
-- 
-- ```ts
-- 
-- import customRooms from "./customRooms";
-- 
-- const firstJSONRoom = customRooms.rooms.room[0];
-- deployJSONRoom(firstJSONRoom);
-- ```
-- 
-- @param jsonRoom The JSON room to deploy. *
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
-- @param verbose Optional. If specified, will write entries to the "log.txt" file that describe
-- what the function is doing. Default is false.
function ____exports.deployJSONRoom(self, jsonRoom, seedOrRNG, verbose)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if verbose == nil then
        verbose = false
    end
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    local rng = isRNG(nil, seedOrRNG) and seedOrRNG or newRNG(nil, seedOrRNG)
    if verbose then
        log("Starting to empty the room of entities and grid entities.")
    end
    ____exports.emptyRoom(nil, false)
    if verbose then
        log("Finished emptying the room of entities and grid entities.")
    end
    if verbose then
        log("Starting to spawn all of the new entities and grid entities.")
    end
    spawnAllEntities(nil, jsonRoom, rng, verbose)
    if verbose then
        log("Finished spawning all of the new entities and grid entities.")
    end
    fixPitGraphics(nil)
    fillRoomWithDecorations(nil)
end
--- Helper function to deconstruct a vanilla room and set up a custom room in its place.
-- Specifically, this will clear the current room of all entities and grid entities, and then spawn
-- all of the entries and grid entities in one of the provided JSON rooms.
-- 
-- This function is meant to be used in the PostNewRoom callback.
-- 
-- Note that this function does not simply choose a random element in the provided array; it will
-- properly account for each room weight using the algorithm from:
-- https://stackoverflow.com/questions/1761626/weighted-random-numbers
-- 
-- For example:
-- 
-- ```ts
-- import customRooms from "./customRooms";
-- 
-- const jsonRooms = customRooms.rooms.room;
-- deployRandomJSONRoom(jsonRooms);
-- ```
-- 
-- @param jsonRooms An array of JSON rooms to randomly select from. In practice, this will be
-- something like.
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
-- @param verbose Optional. If specified, will write entries to the "log.txt" file that describe
-- what the function is doing. Default is false.
function ____exports.deployRandomJSONRoom(self, jsonRooms, seedOrRNG, verbose)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if verbose == nil then
        verbose = false
    end
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    local rng = isRNG(nil, seedOrRNG) and seedOrRNG or newRNG(nil, seedOrRNG)
    local randomJSONRoom = getRandomJSONRoom(nil, jsonRooms, rng, verbose)
    if verbose then
        log((((((("Randomly chose JSON room " .. randomJSONRoom["$"].type) .. ".") .. randomJSONRoom["$"].variant) .. ".") .. randomJSONRoom["$"].subtype) .. " with name: ") .. randomJSONRoom["$"].name)
    end
    return ____exports.deployJSONRoom(nil, randomJSONRoom, rng, verbose)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.jsonRoom"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local __TS__ArrayMap = ____lualib.__TS__ArrayMap
local ____exports = {}
local getTotalWeightOfJSONRooms, getJSONRoomWithChosenWeight
local ____array = require("lua_modules.isaacscript-common.functions.array")
local sumArray = ____array.sumArray
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
local ____random = require("lua_modules.isaacscript-common.functions.random")
local getRandomFloat = ____random.getRandomFloat
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local getRandomSeed = ____rng.getRandomSeed
function getTotalWeightOfJSONRooms(self, jsonRooms)
    local weights = __TS__ArrayMap(
        jsonRooms,
        function(____, jsonRoom)
            local roomWeightString = jsonRoom["$"].weight
            local roomWeight = tonumber(roomWeightString)
            if roomWeight == nil then
                error(("Failed to parse the weight of a JSON room: " .. roomWeightString) .. ".")
            end
            return roomWeight
        end
    )
    return sumArray(nil, weights)
end
function getJSONRoomWithChosenWeight(self, jsonRooms, chosenWeight)
    for ____, jsonRoom in ipairs(jsonRooms) do
        local roomWeightString = jsonRoom["$"].weight
        local roomWeight = tonumber(roomWeightString)
        if roomWeight == nil then
            error("Failed to parse the weight of a JSON room: " .. roomWeightString)
        end
        if chosenWeight < roomWeight then
            return jsonRoom
        end
        chosenWeight = chosenWeight - roomWeight
    end
    return error("Failed to get a JSON room with chosen weight: " .. tostring(chosenWeight))
end
function ____exports.getJSONRoomOfVariant(self, jsonRooms, variant)
    local jsonRoomsOfVariant = __TS__ArrayFilter(
        jsonRooms,
        function(____, jsonRoom)
            local roomVariantString = jsonRoom["$"].variant
            local roomVariant = tonumber(roomVariantString)
            return roomVariant == variant
        end
    )
    if #jsonRoomsOfVariant == 0 then
        return nil
    end
    if #jsonRoomsOfVariant == 1 then
        return jsonRoomsOfVariant[1]
    end
    return error(((("Found " .. tostring(#jsonRoomsOfVariant)) .. " JSON rooms with a variant of ") .. tostring(variant)) .. ", when there should only be 1.")
end
function ____exports.getJSONRoomsOfSubType(self, jsonRooms, subType)
    return __TS__ArrayFilter(
        jsonRooms,
        function(____, jsonRoom)
            local roomSubTypeString = jsonRoom["$"].subtype
            local roomSubType = tonumber(roomSubTypeString)
            return roomSubType == subType
        end
    )
end
--- Helper function to get a random JSON room from an array of JSON rooms.
-- 
-- Note that this function does not simply choose a random element in the provided array; it will
-- properly account for each room weight using the algorithm from:
-- https://stackoverflow.com/questions/1761626/weighted-random-numbers
function ____exports.getRandomJSONRoom(self, jsonRooms, seedOrRNG, verbose)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if verbose == nil then
        verbose = false
    end
    local totalWeight = getTotalWeightOfJSONRooms(nil, jsonRooms)
    if verbose then
        log("Total weight of the JSON rooms provided: " .. tostring(totalWeight))
    end
    local chosenWeight = getRandomFloat(nil, 0, totalWeight, seedOrRNG)
    if verbose then
        log("Randomly chose weight for JSON room: " .. tostring(chosenWeight))
    end
    return getJSONRoomWithChosenWeight(nil, jsonRooms, chosenWeight)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.roomGrid"] = function(...) 
local ____exports = {}
local isValidGridPositionNormal, isValidGridPositionLRoom
local ____LRoomShapeToRectangles = require("lua_modules.isaacscript-common.objects.LRoomShapeToRectangles")
local L_ROOM_SHAPE_TO_RECTANGLES = ____LRoomShapeToRectangles.L_ROOM_SHAPE_TO_RECTANGLES
local ____math = require("lua_modules.isaacscript-common.functions.math")
local inRectangle = ____math.inRectangle
local ____roomShape = require("lua_modules.isaacscript-common.functions.roomShape")
local getRoomShapeBottomRightPosition = ____roomShape.getRoomShapeBottomRightPosition
local getRoomShapeTopLeftPosition = ____roomShape.getRoomShapeTopLeftPosition
local getRoomShapeWidth = ____roomShape.getRoomShapeWidth
local isLRoom = ____roomShape.isLRoom
--- Helper function to convert a grid position `Vector` to a world position `Vector`.
-- 
-- For example, the coordinates of (0, 0) are equal to `Vector(80, 160)`.
function ____exports.gridPositionToWorldPosition(self, gridPosition)
    local x = (gridPosition.X + 2) * 40
    local y = (gridPosition.Y + 4) * 40
    return Vector(x, y)
end
function isValidGridPositionNormal(self, gridPosition, roomShape)
    local topLeft = getRoomShapeTopLeftPosition(nil, roomShape)
    local bottomRight = getRoomShapeBottomRightPosition(nil, roomShape)
    return inRectangle(nil, gridPosition, topLeft, bottomRight)
end
function isValidGridPositionLRoom(self, gridPosition, roomShape)
    local rectangles = L_ROOM_SHAPE_TO_RECTANGLES[roomShape]
    if rectangles == nil then
        return false
    end
    local verticalTopLeft, verticalBottomRight, horizontalTopLeft, horizontalBottomRight = table.unpack(rectangles)
    return inRectangle(nil, gridPosition, verticalTopLeft, verticalBottomRight) or inRectangle(nil, gridPosition, horizontalTopLeft, horizontalBottomRight)
end
--- Helper function to convert grid coordinates to a world position `Vector`.
-- 
-- For example, the coordinates of (0, 0) are equal to `Vector(80, 160)`.
function ____exports.gridCoordinatesToWorldPosition(self, x, y)
    local gridPosition = Vector(x, y)
    return ____exports.gridPositionToWorldPosition(nil, gridPosition)
end
--- Helper function to convert a grid index to a grid position.
-- 
-- For example, in a 1x1 room, grid index 0 is equal to "Vector(-1, -1) and grid index 16 is equal
-- to "Vector(0, 0)".
function ____exports.gridIndexToGridPosition(self, gridIndex, roomShape)
    local gridWidth = getRoomShapeWidth(nil, roomShape)
    local x = gridIndex % gridWidth - 1
    local y = math.floor(gridIndex / gridWidth) - 1
    return Vector(x, y)
end
--- Test if a grid position is actually in the given `RoomShape`.
-- 
-- In this context, the grid position of the top-left wall is "Vector(-1, -1)".
function ____exports.isValidGridPosition(self, gridPosition, roomShape)
    local ____isLRoom_result_0
    if isLRoom(nil, roomShape) then
        ____isLRoom_result_0 = isValidGridPositionLRoom(nil, gridPosition, roomShape)
    else
        ____isLRoom_result_0 = isValidGridPositionNormal(nil, gridPosition, roomShape)
    end
    return ____isLRoom_result_0
end
--- Helper function to convert a world position `Vector` to a grid position `Vector`.
-- 
-- In this context, the grid position of the top-left wall is "Vector(-1, -1)".
function ____exports.worldPositionToGridPosition(self, worldPos)
    local x = math.floor(worldPos.X / 40 - 2 + 0.5)
    local y = math.floor(worldPos.Y / 40 - 4 + 0.5)
    return Vector(x, y)
end
--- Helper function to convert a world position `Vector` to a grid position `Vector`.
-- 
-- In this context, the grid position of the top-left wall is "Vector(-1, -1)".
-- 
-- This is similar to the `worldPositionToGridPosition` function, but the values are not rounded.
function ____exports.worldPositionToGridPositionFast(self, worldPos)
    local x = worldPos.X / 40 - 2
    local y = worldPos.Y / 40 - 4
    return Vector(x, y)
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.LRoomShapeToRectangles"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomShape = ____isaac_2Dtypescript_2Ddefinitions.RoomShape
local ____constants = require("lua_modules.isaacscript-common.constants")
local VectorZero = ____constants.VectorZero
local TWO_BY_TWO_BOTTOM_RIGHT = Vector(25, 13)
--- "Vector(0, 0)" corresponds to the top left tile of a room, not including the walls. (The top-left
-- wall would be at "Vector(-1, -1)".)
____exports.L_ROOM_SHAPE_TO_RECTANGLES = {
    [RoomShape.LTL] = {
        Vector(13, 0),
        Vector(25, 13),
        Vector(0, 7),
        TWO_BY_TWO_BOTTOM_RIGHT
    },
    [RoomShape.LTR] = {
        VectorZero,
        Vector(12, 13),
        Vector(0, 7),
        TWO_BY_TWO_BOTTOM_RIGHT
    },
    [RoomShape.LBL] = {
        VectorZero,
        Vector(25, 6),
        Vector(13, 0),
        TWO_BY_TWO_BOTTOM_RIGHT
    },
    [RoomShape.LBR] = {
        VectorZero,
        Vector(25, 6),
        VectorZero,
        Vector(12, 13)
    }
}
return ____exports
 end,
["lua_modules.isaacscript-common.functions.spawnCollectible"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local ____constants = require("lua_modules.isaacscript-common.constants")
local VectorZero = ____constants.VectorZero
local ____preventCollectibleRotation = require("lua_modules.isaacscript-common.features.preventCollectibleRotation")
local preventCollectibleRotation = ____preventCollectibleRotation.preventCollectibleRotation
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local areFeaturesInitialized = ____featuresInitialized.areFeaturesInitialized
local ____collectibles = require("lua_modules.isaacscript-common.functions.collectibles")
local setCollectibleEmpty = ____collectibles.setCollectibleEmpty
local ____collectibleTag = require("lua_modules.isaacscript-common.functions.collectibleTag")
local isQuestCollectible = ____collectibleTag.isQuestCollectible
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local spawnPickupWithSeed = ____entitySpecific.spawnPickupWithSeed
local ____player = require("lua_modules.isaacscript-common.functions.player")
local anyPlayerIs = ____player.anyPlayerIs
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local getRandomSeed = ____rng.getRandomSeed
local isRNG = ____rng.isRNG
--- Helper function to spawn a collectible. Use this instead of the `Game.Spawn` method because it
-- handles the cases of Tainted Keeper collectibles costing coins and preventing quest items from
-- being rotated by Tainted Isaac's rotation mechanic. (Rotation prevention will only occur in
-- upgraded mods.)
-- 
-- @param collectibleType The collectible type to spawn.
-- @param position The position to spawn the collectible at.
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
-- @param options Optional. Set to true to make the collectible a "There's Options" style
-- collectible. Default is false.
-- @param forceFreeItem Optional. Set to true to disable the logic that gives the item a price for
-- Tainted Keeper. Default is false.
-- @param spawner Optional.
function ____exports.spawnCollectible(self, collectibleType, position, seedOrRNG, options, forceFreeItem, spawner)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if options == nil then
        options = false
    end
    if forceFreeItem == nil then
        forceFreeItem = false
    end
    local seed = isRNG(nil, seedOrRNG) and seedOrRNG:Next() or seedOrRNG
    local collectible = spawnPickupWithSeed(
        nil,
        PickupVariant.COLLECTIBLE,
        collectibleType,
        position,
        seed,
        VectorZero,
        spawner
    )
    if options then
        collectible.OptionsPickupIndex = 1
    end
    if anyPlayerIs(nil, PlayerType.KEEPER_B) and not isQuestCollectible(nil, collectibleType) and not forceFreeItem then
        collectible.ShopItemId = -1
        collectible.Price = 15
    end
    if isQuestCollectible(nil, collectibleType) and areFeaturesInitialized(nil) then
        preventCollectibleRotation(nil, collectible, collectibleType)
    end
    return collectible
end
--- Helper function to spawn an empty collectible. Doing this is tricky since spawning a collectible
-- with `CollectibleType.NULL` will result in spawning a collectible with a random type from the
-- current room's item pool.
-- 
-- Instead, this function arbitrarily spawns a collectible with `CollectibleType.SAD_ONION`, and
-- then converts it to an empty pedestal afterward.
-- 
-- @param position The position to spawn the empty collectible at.
-- @param seedOrRNG The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
function ____exports.spawnEmptyCollectible(self, position, seedOrRNG)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    local collectible = ____exports.spawnCollectible(
        nil,
        CollectibleType.SAD_ONION,
        position,
        seedOrRNG,
        false,
        true
    )
    setCollectibleEmpty(nil, collectible)
    return collectible
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.preventCollectibleRotation"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local useCardSoulOfIsaac, postPickupUpdateCollectible, getMapIndex, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Card = ____isaac_2Dtypescript_2Ddefinitions.Card
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____collectibles = require("lua_modules.isaacscript-common.functions.collectibles")
local setCollectibleSubType = ____collectibles.setCollectibleSubType
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local getEntityID = ____entity.getEntityID
local ____pickupVariants = require("lua_modules.isaacscript-common.functions.pickupVariants")
local isCollectible = ____pickupVariants.isCollectible
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function useCardSoulOfIsaac(self)
    v.room.trackedCollectibles:clear()
end
function postPickupUpdateCollectible(self, pickup)
    local collectible = pickup
    if collectible.SubType == CollectibleType.NULL then
        return
    end
    local index = getMapIndex(nil, collectible)
    local trackedCollectibleType = v.room.trackedCollectibles:get(index)
    if trackedCollectibleType ~= nil and collectible.SubType ~= trackedCollectibleType then
        setCollectibleSubType(nil, collectible, trackedCollectibleType)
    end
end
function getMapIndex(self, collectible)
    local room = game:GetRoom()
    local gridIndex = room:GetGridIndex(collectible.Position)
    return (tostring(gridIndex) .. ",") .. tostring(collectible.InitSeed)
end
local FEATURE_NAME = "preventCollectibleRotation"
v = {room = {trackedCollectibles = __TS__New(Map)}}
---
-- @internal
function ____exports.preventCollectibleRotationInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallback(ModCallback.POST_USE_CARD, useCardSoulOfIsaac, Card.SOUL_ISAAC)
    mod:AddCallback(ModCallback.POST_PICKUP_UPDATE, postPickupUpdateCollectible, PickupVariant.COLLECTIBLE)
end
--- Helper function to prevent a collectible from being affected by Tainted Isaac's rotation
-- mechanic. (This mechanic also happens from Glitched Crown and Binge Eater.) This is useful
-- because quest items that are manually spawned by mods will be automatically be affected by this
-- mechanic.
-- 
-- It is required to pass the intended collectible type to this function since it is possible for
-- collectibles to rotate on the first frame that they are spawned.
function ____exports.preventCollectibleRotation(self, collectible, collectibleType)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    if not isCollectible(nil, collectible) then
        local entityID = getEntityID(nil, collectible)
        error("The \"preventCollectibleRotate\" function was given a non-collectible: " .. entityID)
    end
    local index = getMapIndex(nil, collectible)
    v.room.trackedCollectibles:set(index, collectibleType)
    postPickupUpdateCollectible(nil, collectible)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.collectibleTag"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local Set = ____lualib.Set
local __TS__Spread = ____lualib.__TS__Spread
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ItemConfigTag = ____isaac_2Dtypescript_2Ddefinitions.ItemConfigTag
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local itemConfig = ____cachedClasses.itemConfig
local ____collectibleSet = require("lua_modules.isaacscript-common.functions.collectibleSet")
local getCollectibleArray = ____collectibleSet.getCollectibleArray
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local getFlagName = ____flag.getFlagName
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getPlayerCollectibleCount = ____player.getPlayerCollectibleCount
local ____set = require("lua_modules.isaacscript-common.functions.set")
local copySet = ____set.copySet
function ____exports.collectibleHasTag(self, collectibleType, tag)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem == nil then
        return false
    end
    return itemConfigItem:HasTags(tag)
end
local TAG_TO_COLLECTIBLE_TYPES_MAP = __TS__New(Map)
local function initTagMap(self)
    for ____, itemConfigTag in ipairs(getEnumValues(nil, ItemConfigTag)) do
        TAG_TO_COLLECTIBLE_TYPES_MAP:set(
            itemConfigTag,
            __TS__New(Set)
        )
    end
    for ____, collectibleType in ipairs(getCollectibleArray(nil)) do
        for ____, itemConfigTag in ipairs(getEnumValues(nil, ItemConfigTag)) do
            do
                if not ____exports.collectibleHasTag(nil, collectibleType, itemConfigTag) then
                    goto __continue6
                end
                local collectibleTypesSet = TAG_TO_COLLECTIBLE_TYPES_MAP:get(itemConfigTag)
                if collectibleTypesSet == nil then
                    local flagName = getFlagName(nil, itemConfigTag, ItemConfigTag)
                    error("Failed to get the collectible types for item tag: " .. tostring(flagName))
                end
                collectibleTypesSet:add(collectibleType)
            end
            ::__continue6::
        end
    end
end
--- Helper function to get all of the collectible types in the game that have a certain tag.
-- 
-- For example, to get all of the collectible types that count as offensive for the purposes of
-- Tainted Lost:
-- 
-- ```ts
-- const offensiveCollectibleTypes = getCollectibleTypesWithTag(ItemConfigTag.OFFENSIVE);
-- ```
function ____exports.getCollectibleTypesWithTag(self, itemConfigTag)
    if TAG_TO_COLLECTIBLE_TYPES_MAP.size == 0 then
        initTagMap(nil)
    end
    local collectibleTypes = TAG_TO_COLLECTIBLE_TYPES_MAP:get(itemConfigTag)
    if collectibleTypes == nil then
        error(("The item config tag of " .. tostring(itemConfigTag)) .. " is not a valid value of the ItemConfigTag enum.")
    end
    return copySet(nil, collectibleTypes)
end
--- Returns the number of items that a player has towards a particular transformation.
function ____exports.getPlayerNumCollectiblesWithTag(self, player, itemConfigTag)
    local collectibleTypesSet = ____exports.getCollectibleTypesWithTag(nil, itemConfigTag)
    return getPlayerCollectibleCount(
        nil,
        player,
        __TS__Spread(collectibleTypesSet:values())
    )
end
function ____exports.isQuestCollectible(self, collectibleType)
    return ____exports.collectibleHasTag(nil, collectibleType, ItemConfigTag.QUEST)
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.runInNFrames"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
local ____exports = {}
local postUpdate, postRender, checkExecuteQueuedFunctions, checkExecuteIntervalFunctions, getFunctionsThatShouldFireOnThisFrame, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____array = require("lua_modules.isaacscript-common.functions.array")
local arrayRemoveIndexInPlace = ____array.arrayRemoveIndexInPlace
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function postUpdate(self)
    local gameFrameCount = game:GetFrameCount()
    checkExecuteQueuedFunctions(nil, gameFrameCount, v.run.queuedGameFunctionTuples)
    checkExecuteIntervalFunctions(nil, gameFrameCount, v.run.intervalGameFunctionTuples)
end
function postRender(self)
    local renderFrameCount = Isaac.GetFrameCount()
    checkExecuteQueuedFunctions(nil, renderFrameCount, v.run.queuedRenderFunctionTuples)
    checkExecuteIntervalFunctions(nil, renderFrameCount, v.run.intervalRenderFunctionTuples)
end
function checkExecuteQueuedFunctions(self, frameCount, functionTuples)
    local firingFunctions = getFunctionsThatShouldFireOnThisFrame(nil, frameCount, functionTuples)
    for ____, ____value in ipairs(firingFunctions) do
        local i = ____value[1]
        local func = ____value[2]
        func(nil)
        arrayRemoveIndexInPlace(nil, functionTuples, i)
    end
end
function checkExecuteIntervalFunctions(self, frameCount, functionTuples)
    local firingFunctions = getFunctionsThatShouldFireOnThisFrame(nil, frameCount, functionTuples)
    for ____, ____value in ipairs(firingFunctions) do
        local i = ____value[1]
        local func = ____value[2]
        local numIntervalFrames = ____value[3]
        local returnValue = func(nil)
        arrayRemoveIndexInPlace(nil, functionTuples, i)
        if numIntervalFrames ~= nil and returnValue ~= false then
            local nextFireFrame = frameCount + numIntervalFrames
            local tuple = {nextFireFrame, func, numIntervalFrames}
            functionTuples[#functionTuples + 1] = tuple
        end
    end
end
function getFunctionsThatShouldFireOnThisFrame(self, frameCount, functionTuples)
    local firingFunctionTuples = {}
    __TS__ArrayForEach(
        functionTuples,
        function(____, functionTuple, i)
            local frameCountToFire, func, numIntervalFrames = table.unpack(functionTuple)
            if frameCount >= frameCountToFire then
                local firingFunctionTuple = {i, func, numIntervalFrames}
                firingFunctionTuples[#firingFunctionTuples + 1] = firingFunctionTuple
            end
        end
    )
    return firingFunctionTuples
end
local FEATURE_NAME = "runInNFrames"
v = {run = {queuedGameFunctionTuples = {}, queuedRenderFunctionTuples = {}, intervalGameFunctionTuples = {}, intervalRenderFunctionTuples = {}}}
---
-- @internal
function ____exports.runInNFramesInit(self, mod)
    saveDataManager(
        nil,
        FEATURE_NAME,
        v,
        function() return false end
    )
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
--- Supply a function to run N game frames from now in the `POST_UPDATE` callback.
-- 
-- For a usage example, see the documentation for the `runNextGameFrame`, which is used in a similar
-- way.
-- 
-- Note that this function will not handle saving and quitting. If a player saving and quitting
-- before the deferred function fires would cause a bug in your mod, then you should handle deferred
-- functions manually using serializable data.
function ____exports.runInNGameFrames(self, func, gameFrames)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    local gameFrameCount = game:GetFrameCount()
    local functionFireFrame = gameFrameCount + gameFrames
    local tuple = {functionFireFrame, func}
    local ____v_run_queuedGameFunctionTuples_0 = v.run.queuedGameFunctionTuples
    ____v_run_queuedGameFunctionTuples_0[#____v_run_queuedGameFunctionTuples_0 + 1] = tuple
end
--- Supply a function to run N render frames from now in the `POST_RENDER` callback.
-- 
-- For a usage example, see the documentation for the `runNextGameFrame`, which is used in a similar
-- way.
-- 
-- Note that this function will not handle saving and quitting. If a player saving and quitting
-- before the deferred function fires would cause a bug in your mod, then you should handle deferred
-- functions manually using serializable data.
function ____exports.runInNRenderFrames(self, func, renderFrames)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    local renderFrameCount = Isaac.GetFrameCount()
    local functionFireFrame = renderFrameCount + renderFrames
    local tuple = {functionFireFrame, func}
    local ____v_run_queuedRenderFunctionTuples_1 = v.run.queuedRenderFunctionTuples
    ____v_run_queuedRenderFunctionTuples_1[#____v_run_queuedRenderFunctionTuples_1 + 1] = tuple
end
--- Supply a function to run on the next `POST_UPDATE` callback.
-- 
-- For example:
-- 
-- ```ts
-- const NUM_EXPLODER_EXPLOSIONS = 5;
-- 
-- function useItemExploder(player: EntityPlayer) {
--   playSound("exploderBegin");
--   explode(player, NUM_EXPLODER_EXPLOSIONS);
-- }
-- 
-- function explode(player: EntityPlayer, numFramesLeft: int) {
--   Isaac.Explode(player, undefined, 1);
--   numFramesLeft -= 1;
--   if (numFramesLeft === 0) {
--     runNextFrame(() => {
--       explode(player, numFramesLeft);
--     });
--   }
-- }
-- ```
-- 
-- Note that this function will not handle saving and quitting. If a player saving and quitting
-- before the deferred function fires would cause a bug in your mod, then you should handle deferred
-- functions manually using serializable data.
function ____exports.runNextGameFrame(self, func)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    ____exports.runInNGameFrames(nil, func, 1)
end
--- Supply a function to run on the next `POST_RENDER` callback.
-- 
-- For a usage example, see the documentation for the `runNextGameFrame`, which is used in a similar
-- way.
-- 
-- Note that this function will not handle saving and quitting.
function ____exports.runNextRenderFrame(self, func)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    ____exports.runInNRenderFrames(nil, func, 1)
end
--- Supply a function to be repeatedly run on an interval of N game frames in the `POST_UPDATE`
-- callback. The function will continue to be fired until `false` is returned from the function.
-- 
-- This is similar to the `setInterval` vanilla JavaScript function, except there is no
-- corresponding `clearInterval` function. (Instead, the return value from the supplied function is
-- used to stop the interval.)
-- 
-- Note that this function will not handle saving and quitting. You must manually restart any
-- intervals if the player saves and quits in the middle of a run.
-- 
-- @param func The function to repeatedly run on an interval.
-- @param gameFrames The amount of game frames to wait between each run.
-- @param runImmediately Whether or not to execute the function right now before waiting for the
-- interval.
function ____exports.setIntervalGameFrames(self, func, gameFrames, runImmediately)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    local gameFrameCount = game:GetFrameCount()
    local functionFireFrame = gameFrameCount + gameFrames
    local tuple = {functionFireFrame, func, gameFrames}
    local ____v_run_intervalGameFunctionTuples_2 = v.run.intervalGameFunctionTuples
    ____v_run_intervalGameFunctionTuples_2[#____v_run_intervalGameFunctionTuples_2 + 1] = tuple
    if runImmediately then
        func(nil)
    end
end
--- Supply a function to be repeatedly run on an interval of N render frames in the `POST_RENDER`
-- callback. The function will continue to be fired until `false` is returned from the function.
-- 
-- This is similar to the `setInterval` vanilla JavaScript function, except there is no
-- corresponding `clearInterval` function. (Instead, the return value from the supplied function is
-- used to stop the interval.)
-- 
-- Note that this function will not handle saving and quitting. You must manually restart any
-- intervals if the player saves and quits in the middle of a run.
-- 
-- @param func The function to repeatedly run on an interval.
-- @param renderFrames The amount of game frames to wait between each run.
-- @param runImmediately Whether or not to execute the function right now before waiting for the
-- interval.
function ____exports.setIntervalRenderFrames(self, func, renderFrames, runImmediately)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    local renderFrameCount = Isaac.GetFrameCount()
    local functionFireFrame = renderFrameCount + renderFrames
    local tuple = {functionFireFrame, func, renderFrames}
    local ____v_run_intervalGameFunctionTuples_3 = v.run.intervalGameFunctionTuples
    ____v_run_intervalGameFunctionTuples_3[#____v_run_intervalGameFunctionTuples_3 + 1] = tuple
    if runImmediately then
        func(nil)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.disableAllSound"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local postRender, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local musicManager = ____cachedClasses.musicManager
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____sound = require("lua_modules.isaacscript-common.functions.sound")
local stopAllSoundEffects = ____sound.stopAllSoundEffects
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function postRender(self)
    if v.run.disableSoundSet.size == 0 then
        return
    end
    stopAllSoundEffects(nil)
end
local FEATURE_NAME = "disableAllSound"
local musicWasEnabled = false
v = {run = {disableSoundSet = __TS__New(Set)}}
---
-- @internal
function ____exports.disableAllSoundInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
--- Helper function to stop muting all sound effects and music.
-- 
-- Use this function to set things back to normal after having used `disableAllSounds`.
-- 
-- @param key The name of the mod feature that is requesting the enable/disable. This is needed so
-- that multiple mod features can work in tandem.
function ____exports.enableAllSound(self, key)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    if not v.run.disableSoundSet:has(key) then
        return
    end
    v.run.disableSoundSet:delete(key)
    if v.run.disableSoundSet.size == 0 and musicWasEnabled then
        musicManager:Enable()
    end
    stopAllSoundEffects(nil)
end
--- Helper function to disable all sound effects and music (by constantly musting them).
-- 
-- Use the `enableAllSounds` helper function to set things back to normal.
-- 
-- @param key The name of the mod feature that is requesting the enable/disable. This is needed so
-- that multiple mod features can work in tandem.
function ____exports.disableAllSound(self, key)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    if v.run.disableSoundSet.size == 0 then
        musicWasEnabled = musicManager:IsEnabled()
    end
    v.run.disableSoundSet:add(key)
    stopAllSoundEffects(nil)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.sound"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local SoundEffect = ____isaac_2Dtypescript_2Ddefinitions.SoundEffect
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local sfxManager = ____cachedClasses.sfxManager
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
function ____exports.stopAllSoundEffects(self)
    for ____, soundEffect in ipairs(getEnumValues(nil, SoundEffect)) do
        sfxManager:Stop(soundEffect)
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.disableInputs"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local __TS__Iterator = ____lualib.__TS__Iterator
local Set = ____lualib.Set
local ____exports = {}
local isActionPressed, isActionTriggered, getActionValue, getReturnValue, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local InputHook = ____isaac_2Dtypescript_2Ddefinitions.InputHook
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____input = require("lua_modules.isaacscript-common.functions.input")
local getMoveActions = ____input.getMoveActions
local getShootActions = ____input.getShootActions
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function isActionPressed(self, _entity, _inputHook, buttonAction)
    return getReturnValue(nil, buttonAction, true)
end
function isActionTriggered(self, _entity, _inputHook, buttonAction)
    return getReturnValue(nil, buttonAction, true)
end
function getActionValue(self, _entity, _inputHook, buttonAction)
    return getReturnValue(nil, buttonAction, false)
end
function getReturnValue(self, buttonAction, booleanCallback)
    local ____booleanCallback_0
    if booleanCallback then
        ____booleanCallback_0 = false
    else
        ____booleanCallback_0 = 0
    end
    local disableValue = ____booleanCallback_0
    for ____, whitelist in __TS__Iterator(v.run.disableInputsWithWhitelistMap:values()) do
        if not whitelist:has(buttonAction) then
            return disableValue
        end
    end
    for ____, blacklist in __TS__Iterator(v.run.enableInputsWithBlacklistMap:values()) do
        if blacklist:has(buttonAction) then
            return disableValue
        end
    end
    return nil
end
local FEATURE_NAME = "disableInputs"
v = {run = {
    disableInputsWithWhitelistMap = __TS__New(Map),
    enableInputsWithBlacklistMap = __TS__New(Map)
}}
---
-- @internal
function ____exports.disableInputsInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallback(ModCallback.INPUT_ACTION, isActionPressed, InputHook.IS_ACTION_PRESSED)
    mod:AddCallback(ModCallback.INPUT_ACTION, isActionTriggered, InputHook.IS_ACTION_TRIGGERED)
    mod:AddCallback(ModCallback.INPUT_ACTION, getActionValue, InputHook.GET_ACTION_VALUE)
end
--- Helper function to enable all inputs. Use this function to set things back to normal after having
-- used one of the other helper functions to disable inputs.
-- 
-- @param key The name of the mod feature that is requesting the enable/disable. This is needed so
-- that multiple mod features can work in tandem.
function ____exports.enableAllInputs(self, key)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    v.run.disableInputsWithWhitelistMap:delete(key)
    v.run.enableInputsWithBlacklistMap:delete(key)
end
--- Helper function to disable all inputs. This is useful because `EntityPlayer.ControlsEnabled` can
-- be changed by the game under certain conditions.
-- 
-- Use the `enableAllInputs` helper function to set things back to normal.
-- 
-- @param key The name of the mod feature that is requesting the enable/disable. This is needed so
-- that multiple mod features can work in tandem.
function ____exports.disableAllInputs(self, key)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    v.run.disableInputsWithWhitelistMap:set(
        key,
        __TS__New(Set)
    )
    v.run.enableInputsWithBlacklistMap:delete(key)
end
--- Helper function to enable all inputs besides the ones provided. This is useful because
-- `EntityPlayer.ControlsEnabled` can be changed by the game under certain conditions.
-- 
-- Use the `enableAllInputs` helper function to set things back to normal.
-- 
-- @param key The name of the mod feature that is requesting the enable/disable. This is needed so
-- that multiple mod features can work in tandem.
-- @param blacklist A set of ButtonActions to disallow.
function ____exports.enableAllInputsExceptFor(self, key, blacklist)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    v.run.disableInputsWithWhitelistMap:delete(key)
    v.run.enableInputsWithBlacklistMap:set(key, blacklist)
end
--- Helper function to disable all inputs besides the ones provided. This is useful because
-- `EntityPlayer.ControlsEnabled` can be changed by the game under certain conditions.
-- 
-- Use the `enableAllInputs` helper function to set things back to normal.
-- 
-- @param key The name of the mod feature that is requesting the enable/disable. This is needed so
-- that multiple mod features can work in tandem.
-- @param whitelist A set of ButtonActions to allow.
function ____exports.disableAllInputsExceptFor(self, key, whitelist)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    v.run.disableInputsWithWhitelistMap:set(key, whitelist)
    v.run.enableInputsWithBlacklistMap:delete(key)
end
--- Helper function to disable only the inputs used for moving the character (or moving the cursor in
-- the UI). This is useful because `EntityPlayer.ControlsEnabled` can be changed by the game under
-- certain conditions.
-- 
-- Use the `enableAllInputs` helper function to set things back to normal.
-- 
-- @param key The name of the mod feature that is requesting the enable/disable. This is needed so
-- that multiple mod features can work in tandem.
function ____exports.disableMovementInputs(self, key)
    local moveActions = getMoveActions(nil)
    ____exports.enableAllInputsExceptFor(nil, key, moveActions)
end
--- Helper function to disable only the inputs used for shooting tears. This is useful because
-- `EntityPlayer.ControlsEnabled` can be changed by the game under certain conditions.
-- 
-- Use the `enableAllInputs` helper function to set things back to normal.
-- 
-- @param key The name of the mod feature that is requesting the enable/disable. This is needed so
-- that multiple mod features can work in tandem.
function ____exports.disableShootingInputs(self, key)
    local shootActions = getShootActions(nil)
    ____exports.enableAllInputsExceptFor(nil, key, shootActions)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.input"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArraySome = ____lualib.__TS__ArraySome
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ButtonAction = ____isaac_2Dtypescript_2Ddefinitions.ButtonAction
local Controller = ____isaac_2Dtypescript_2Ddefinitions.Controller
local ControllerIndex = ____isaac_2Dtypescript_2Ddefinitions.ControllerIndex
local Keyboard = ____isaac_2Dtypescript_2Ddefinitions.Keyboard
local ____constants = require("lua_modules.isaacscript-common.constants")
local MAX_NUM_INPUTS = ____constants.MAX_NUM_INPUTS
local ____set = require("lua_modules.isaacscript-common.functions.set")
local copySet = ____set.copySet
local ____string = require("lua_modules.isaacscript-common.functions.string")
local trimPrefix = ____string.trimPrefix
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local erange = ____utils.erange
local MODIFIER_KEYS = {
    Keyboard.LEFT_SHIFT,
    Keyboard.LEFT_CONTROL,
    Keyboard.LEFT_ALT,
    Keyboard.LEFT_SUPER,
    Keyboard.RIGHT_SHIFT,
    Keyboard.RIGHT_CONTROL,
    Keyboard.RIGHT_ALT,
    Keyboard.RIGHT_SUPER
}
local MOVEMENT_ACTIONS = {ButtonAction.LEFT, ButtonAction.RIGHT, ButtonAction.UP, ButtonAction.DOWN}
local MOVEMENT_ACTIONS_SET = __TS__New(Set, MOVEMENT_ACTIONS)
local SHOOTING_ACTIONS = {ButtonAction.SHOOT_LEFT, ButtonAction.SHOOT_RIGHT, ButtonAction.SHOOT_UP, ButtonAction.SHOOT_DOWN}
local SHOOTING_ACTIONS_SET = __TS__New(Set, SHOOTING_ACTIONS)
--- Helper function to get the enum name for the specified `Controller` value.
function ____exports.controllerToString(self, controller)
    local key = Controller[controller]
    if key == nil then
        return "unknown"
    end
    return trimPrefix(nil, key, "BUTTON_")
end
function ____exports.getMoveActions(self)
    return copySet(nil, MOVEMENT_ACTIONS_SET)
end
function ____exports.getShootActions(self)
    return copySet(nil, SHOOTING_ACTIONS_SET)
end
--- Iterates over all inputs to determine if a particular button is pressed (i.e. held down).
function ____exports.isActionPressedOnAnyInput(self, buttonAction)
    local validInputs = erange(nil, MAX_NUM_INPUTS)
    return __TS__ArraySome(
        validInputs,
        function(____, input) return Input.IsActionPressed(buttonAction, input) end
    )
end
--- Iterates over all inputs to determine if a particular button is triggered (i.e. held down and
-- then released).
function ____exports.isActionTriggeredOnAnyInput(self, buttonAction)
    local validInputs = erange(nil, MAX_NUM_INPUTS)
    return __TS__ArraySome(
        validInputs,
        function(____, input) return Input.IsActionTriggered(buttonAction, input) end
    )
end
--- Helper function to see if a particular keyboard key is being pressed down by the player.
-- 
-- This function is variadic, meaning you can pass as many keyboard values as you want to check for.
-- This function will return true if any of the values are pressed.
function ____exports.isKeyboardPressed(self, ...)
    local keys = {...}
    return __TS__ArraySome(
        keys,
        function(____, key) return Input.IsButtonPressed(key, ControllerIndex.KEYBOARD) end
    )
end
--- Helper function to check if one or more modifier keys are being pressed down on the keyboard.
-- 
-- A modifier key is defined as shift, control, alt, or Windows.
function ____exports.isModifierKeyPressed(self)
    return ____exports.isKeyboardPressed(
        nil,
        table.unpack(MODIFIER_KEYS)
    )
end
function ____exports.isMoveAction(self, buttonAction)
    return MOVEMENT_ACTIONS_SET:has(buttonAction)
end
function ____exports.isMoveActionPressedOnAnyInput(self)
    return __TS__ArraySome(
        MOVEMENT_ACTIONS,
        function(____, moveAction) return ____exports.isActionPressedOnAnyInput(nil, moveAction) end
    )
end
function ____exports.isMoveActionTriggeredOnAnyInput(self)
    return __TS__ArraySome(
        MOVEMENT_ACTIONS,
        function(____, moveAction) return ____exports.isActionTriggeredOnAnyInput(nil, moveAction) end
    )
end
function ____exports.isShootAction(self, buttonAction)
    return SHOOTING_ACTIONS_SET:has(buttonAction)
end
function ____exports.isShootActionPressedOnAnyInput(self)
    return __TS__ArraySome(
        SHOOTING_ACTIONS,
        function(____, shootAction) return ____exports.isActionPressedOnAnyInput(nil, shootAction) end
    )
end
function ____exports.isShootActionTriggeredOnAnyInput(self)
    return __TS__ArraySome(
        SHOOTING_ACTIONS,
        function(____, shootAction) return ____exports.isActionTriggeredOnAnyInput(nil, shootAction) end
    )
end
function ____exports.keyboardToString(self, keyboard)
    return Keyboard[keyboard] or "unknown"
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.string"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__StringReplaceAll = ____lualib.__TS__StringReplaceAll
local __TS__StringStartsWith = ____lualib.__TS__StringStartsWith
local __TS__StringSlice = ____lualib.__TS__StringSlice
local __TS__StringEndsWith = ____lualib.__TS__StringEndsWith
local ____exports = {}
function ____exports.capitalizeFirstLetter(self, ____string)
    local firstCharacter = string.sub(____string, 1, 1)
    local capitalizedFirstLetter = string.upper(firstCharacter)
    local restOfString = string.sub(____string, 2)
    return capitalizedFirstLetter .. restOfString
end
function ____exports.removeAllCharacters(self, ____string, character)
    return __TS__StringReplaceAll(____string, character, "")
end
--- Helper function to remove one or more substrings from a string, if they exist. Returns the
-- modified string.
-- 
-- This function is variadic, meaning that you can pass as many substrings as you want to remove.
function ____exports.removeSubstring(self, ____string, ...)
    local substrings = {...}
    for ____, substring in ipairs(substrings) do
        ____string = __TS__StringReplaceAll(____string, substring, "")
    end
    return ____string
end
--- Helper function to trim a prefix from a string, if it exists. Returns the trimmed string.
function ____exports.trimPrefix(self, ____string, prefix)
    if not __TS__StringStartsWith(____string, prefix) then
        return ____string
    end
    return __TS__StringSlice(____string, #prefix)
end
--- Helper function to trim a suffix from a string, if it exists. Returns the trimmed string.
function ____exports.trimSuffix(self, ____string, prefix)
    if not __TS__StringEndsWith(____string, prefix) then
        return ____string
    end
    local endCharacter = #____string - #prefix
    return __TS__StringSlice(____string, 0, endCharacter)
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.extraConsoleCommands.exports"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local ____exports = {}
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local isVanillaConsoleCommand = ____utils.isVanillaConsoleCommand
local ____init = require("lua_modules.isaacscript-common.features.extraConsoleCommands.init")
local extraConsoleCommandsInit = ____init.extraConsoleCommandsInit
local ____v = require("lua_modules.isaacscript-common.features.extraConsoleCommands.v")
local extraConsoleCommandsFunctionMap = ____v.extraConsoleCommandsFunctionMap
local isExtraConsoleCommandsInitialized = ____v.isExtraConsoleCommandsInitialized
--- Enables extra console commands which are useful for debugging. See [the
-- docs](https://isaacscript.github.io/isaacscript-common/features/extraConsoleCommands_listCommands)
-- for the specific commands that are added.
function ____exports.enableExtraConsoleCommands(self, mod)
    if isExtraConsoleCommandsInitialized(nil) then
        error("The extra console commands are already initialized.")
    end
    extraConsoleCommandsInit(nil, mod)
end
--- Helper function to add a custom console command.
-- 
-- The standard library comes with many existing console commands that are useful for debugging, but
-- you can also add your own commands that are useful for your particular mod. It's easier to add
-- commands to the existing command system than to add logic manually to the ExecuteCmd callback.
-- 
-- Before using this function, you must first invoke `enableExtraConsoleCommands`.
function ____exports.addConsoleCommand(self, commandName, commandFunction)
    if not isExtraConsoleCommandsInitialized(nil) then
        error("The \"extraConsoleCommands\" feature is not initialized. Before adding extra console commands, you must first enable the feature by invoking the \"enableExtraConsoleCommands\" function.")
    end
    if isVanillaConsoleCommand(nil, commandName) then
        error(("Failed to add a new console command of \"" .. commandName) .. "\" because that name already belongs to a vanilla command. You must pick a non-colliding name.")
    end
    if extraConsoleCommandsFunctionMap:has(commandName) then
        error(("Failed to add a new console command of \"" .. commandName) .. "\" because there is already an existing custom command by that name. If you want to overwrite a command from the standard library, you can use the \"removeExtraConsoleCommand\" function.")
    end
    extraConsoleCommandsFunctionMap:set(commandName, commandFunction)
end
--- Helper function to remove a custom console command.
-- 
-- The standard library comes with many existing console commands that are useful for debugging. If
-- you want to disable one of them, use this function.
-- 
-- Before using this function, you must first invoke `enableExtraConsoleCommands`.
function ____exports.removeConsoleCommand(self, commandName)
    if not isExtraConsoleCommandsInitialized(nil) then
        error("The \"extraConsoleCommands\" feature is not initialized. Before removing console commands, you must first enable the feature by invoking the \"enableExtraConsoleCommands\" function.")
    end
    if not extraConsoleCommandsFunctionMap:has(commandName) then
        error(("Failed to remove the console command of \"" .. commandName) .. "\", since it does not already exist in the map.")
    end
    extraConsoleCommandsFunctionMap:delete(commandName)
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.extraConsoleCommands.init"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local ____exports = {}
local initMap, initCallbacks, postUpdate, evaluateCacheFireDelay, evaluateCacheSpeed, entityTakeDmgPlayer, postCurseEval, executeCmd, postFireTear
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CacheFlag = ____isaac_2Dtypescript_2Ddefinitions.CacheFlag
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local LevelCurse = ____isaac_2Dtypescript_2Ddefinitions.LevelCurse
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local TearVariant = ____isaac_2Dtypescript_2Ddefinitions.TearVariant
local ____constants = require("lua_modules.isaacscript-common.constants")
local MAX_SPEED_STAT = ____constants.MAX_SPEED_STAT
local ____map = require("lua_modules.isaacscript-common.functions.map")
local getMapPartialMatch = ____map.getMapPartialMatch
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local printConsole = ____utils.printConsole
local ____debugDisplay = require("lua_modules.isaacscript-common.features.debugDisplay.debugDisplay")
local debugDisplayInit = ____debugDisplay.debugDisplayInit
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local commandsDisplay = require("lua_modules.isaacscript-common.features.extraConsoleCommands.commandsDisplay")
local commands = require("lua_modules.isaacscript-common.features.extraConsoleCommands.listCommands")
local ____v = require("lua_modules.isaacscript-common.features.extraConsoleCommands.v")
local v = ____v.default
local extraConsoleCommandsFunctionMap = ____v.extraConsoleCommandsFunctionMap
function initMap(self)
    extraConsoleCommandsFunctionMap:set("1hp", commands.oneHP)
    extraConsoleCommandsFunctionMap:set("addCharges", commands.addCharges)
    extraConsoleCommandsFunctionMap:set("angel", commands.angel)
    extraConsoleCommandsFunctionMap:set("ascent", commands.ascent)
    extraConsoleCommandsFunctionMap:set("bedroom", commands.bedroom)
    extraConsoleCommandsFunctionMap:set("bh", commands.bh)
    extraConsoleCommandsFunctionMap:set("blackhearts", commands.blackHearts)
    extraConsoleCommandsFunctionMap:set("blackMarket", commands.blackMarket)
    extraConsoleCommandsFunctionMap:set("bloodCharges", commands.bloodCharges)
    extraConsoleCommandsFunctionMap:set("bm", commands.bm)
    extraConsoleCommandsFunctionMap:set("bomb", commands.bomb)
    extraConsoleCommandsFunctionMap:set("bombDisplay", commandsDisplay.bombDisplay)
    extraConsoleCommandsFunctionMap:set("bombsDisplay", commandsDisplay.bombsDisplay)
    extraConsoleCommandsFunctionMap:set("bombs", commands.bombs)
    extraConsoleCommandsFunctionMap:set("boneHearts", commands.boneHearts)
    extraConsoleCommandsFunctionMap:set("boss", commands.boss)
    extraConsoleCommandsFunctionMap:set("bossRush", commands.bossRush)
    extraConsoleCommandsFunctionMap:set("brokenHearts", commands.brokenHearts)
    extraConsoleCommandsFunctionMap:set("card", commands.card)
    extraConsoleCommandsFunctionMap:set("cards", commands.cards)
    extraConsoleCommandsFunctionMap:set("cc", commands.cc)
    extraConsoleCommandsFunctionMap:set("chaosCardTears", commands.chaosCardTears)
    extraConsoleCommandsFunctionMap:set("character", commands.characterCommand)
    extraConsoleCommandsFunctionMap:set("charge", commands.charge)
    extraConsoleCommandsFunctionMap:set("cleanBedroom", commands.cleanBedroom)
    extraConsoleCommandsFunctionMap:set("coin", commands.coin)
    extraConsoleCommandsFunctionMap:set("coins", commands.coins)
    extraConsoleCommandsFunctionMap:set("crawlSpace", commands.crawlSpace)
    extraConsoleCommandsFunctionMap:set("d20", commands.d20)
    extraConsoleCommandsFunctionMap:set("d6", commands.d6)
    extraConsoleCommandsFunctionMap:set("damage", commands.damage)
    extraConsoleCommandsFunctionMap:set("dd", commands.dd)
    extraConsoleCommandsFunctionMap:set("devil", commands.devil)
    extraConsoleCommandsFunctionMap:set("dirtyBedroom", commands.dirtyBedroom)
    extraConsoleCommandsFunctionMap:set("disableCurses", commands.disableCurses)
    extraConsoleCommandsFunctionMap:set("doorDisplay", commandsDisplay.doorDisplay)
    extraConsoleCommandsFunctionMap:set("doorsDisplay", commandsDisplay.doorsDisplay)
    extraConsoleCommandsFunctionMap:set("down", commands.down)
    extraConsoleCommandsFunctionMap:set("dungeon", commands.dungeon)
    extraConsoleCommandsFunctionMap:set("effectDisplay", commandsDisplay.effectDisplay)
    extraConsoleCommandsFunctionMap:set("effects", commands.effects)
    extraConsoleCommandsFunctionMap:set("effectsDisplay", commandsDisplay.effectsDisplay)
    extraConsoleCommandsFunctionMap:set("eh", commands.eh)
    extraConsoleCommandsFunctionMap:set("error", commands.error)
    extraConsoleCommandsFunctionMap:set("eternalHearts", commands.eternalHearts)
    extraConsoleCommandsFunctionMap:set("familiarDisplay", commandsDisplay.familiarDisplay)
    extraConsoleCommandsFunctionMap:set("familiarsDisplay", commandsDisplay.familiarsDisplay)
    extraConsoleCommandsFunctionMap:set("fool", commands.fool)
    extraConsoleCommandsFunctionMap:set("getPosition", commands.getPosition)
    extraConsoleCommandsFunctionMap:set("gigaBomb", commands.gigaBomb)
    extraConsoleCommandsFunctionMap:set("goldBomb", commands.goldBomb)
    extraConsoleCommandsFunctionMap:set("goldHearts", commands.goldHearts)
    extraConsoleCommandsFunctionMap:set("goldKey", commands.goldKey)
    extraConsoleCommandsFunctionMap:set("goldenBomb", commands.goldenBomb)
    extraConsoleCommandsFunctionMap:set("goldenHearts", commands.goldenHearts)
    extraConsoleCommandsFunctionMap:set("goldenKey", commands.goldenKey)
    extraConsoleCommandsFunctionMap:set("grid", commands.grid)
    extraConsoleCommandsFunctionMap:set("grid2", commands.grid2)
    extraConsoleCommandsFunctionMap:set("gridEntities", commands.gridEntities)
    extraConsoleCommandsFunctionMap:set("h", commands.h)
    extraConsoleCommandsFunctionMap:set("hearts", commands.hearts)
    extraConsoleCommandsFunctionMap:set("hitboxes", commands.hitboxes)
    extraConsoleCommandsFunctionMap:set("iAmError", commands.iAmError)
    extraConsoleCommandsFunctionMap:set("key", commands.key)
    extraConsoleCommandsFunctionMap:set("keys", commands.keys)
    extraConsoleCommandsFunctionMap:set("knifeDisplay", commandsDisplay.knifeDisplay)
    extraConsoleCommandsFunctionMap:set("knivesDisplay", commandsDisplay.knivesDisplay)
    extraConsoleCommandsFunctionMap:set("laserDisplay", commandsDisplay.laserDisplay)
    extraConsoleCommandsFunctionMap:set("lasersDisplay", commandsDisplay.lasersDisplay)
    extraConsoleCommandsFunctionMap:set("left", commands.left)
    extraConsoleCommandsFunctionMap:set("library", commands.library)
    extraConsoleCommandsFunctionMap:set("list", commands.list)
    extraConsoleCommandsFunctionMap:set("listAll", commands.listAll)
    extraConsoleCommandsFunctionMap:set("listGrid", commands.listGrid)
    extraConsoleCommandsFunctionMap:set("listGridAll", commands.listGridAll)
    extraConsoleCommandsFunctionMap:set("lowHP", commands.lowHP)
    extraConsoleCommandsFunctionMap:set("luck", commands.luck)
    extraConsoleCommandsFunctionMap:set("mana", commands.mana)
    extraConsoleCommandsFunctionMap:set("map", commands.map)
    extraConsoleCommandsFunctionMap:set("maxHearts", commands.maxHearts)
    extraConsoleCommandsFunctionMap:set("mh", commands.mh)
    extraConsoleCommandsFunctionMap:set("miniboss", commands.miniboss)
    extraConsoleCommandsFunctionMap:set("noCurses", commands.noCurses)
    extraConsoleCommandsFunctionMap:set("npcDisplay", commandsDisplay.npcDisplay)
    extraConsoleCommandsFunctionMap:set("npcsDisplay", commandsDisplay.npcsDisplay)
    extraConsoleCommandsFunctionMap:set("pickupDisplay", commandsDisplay.pickupDisplay)
    extraConsoleCommandsFunctionMap:set("pickupsDisplay", commandsDisplay.pickupsDisplay)
    extraConsoleCommandsFunctionMap:set("pill", commands.pill)
    extraConsoleCommandsFunctionMap:set("pills", commands.pills)
    extraConsoleCommandsFunctionMap:set("pitDisplay", commandsDisplay.pitDisplay)
    extraConsoleCommandsFunctionMap:set("pitsDisplay", commandsDisplay.pitsDisplay)
    extraConsoleCommandsFunctionMap:set("planetarium", commands.planetarium)
    extraConsoleCommandsFunctionMap:set("playerDisplay", commandsDisplay.playerDisplay)
    extraConsoleCommandsFunctionMap:set("playersDisplay", commandsDisplay.playersDisplay)
    extraConsoleCommandsFunctionMap:set("playSound", commands.playSound)
    extraConsoleCommandsFunctionMap:set("pocket", commands.pocket)
    extraConsoleCommandsFunctionMap:set("poopDisplay", commandsDisplay.poopDisplay)
    extraConsoleCommandsFunctionMap:set("poopMana", commands.poopMana)
    extraConsoleCommandsFunctionMap:set("poopsDisplay", commandsDisplay.poopsDisplay)
    extraConsoleCommandsFunctionMap:set("position", commands.positionCommand)
    extraConsoleCommandsFunctionMap:set("pressurePlateDisplay", commandsDisplay.pressurePlateDisplay)
    extraConsoleCommandsFunctionMap:set("pressurePlatesDisplay", commandsDisplay.pressurePlatesDisplay)
    extraConsoleCommandsFunctionMap:set("projectileDisplay", commandsDisplay.projectileDisplay)
    extraConsoleCommandsFunctionMap:set("projectilesDisplay", commandsDisplay.projectilesDisplay)
    extraConsoleCommandsFunctionMap:set("redHearts", commands.redHearts)
    extraConsoleCommandsFunctionMap:set("rh", commands.rh)
    extraConsoleCommandsFunctionMap:set("right", commands.right)
    extraConsoleCommandsFunctionMap:set("rockDisplay", commandsDisplay.rockDisplay)
    extraConsoleCommandsFunctionMap:set("rocksDisplay", commandsDisplay.rocksDisplay)
    extraConsoleCommandsFunctionMap:set("room", commands.roomCommand)
    extraConsoleCommandsFunctionMap:set("rottenHearts", commands.rottenHearts)
    extraConsoleCommandsFunctionMap:set("s", commands.s)
    extraConsoleCommandsFunctionMap:set("sacrifice", commands.sacrifice)
    extraConsoleCommandsFunctionMap:set("secret", commands.secret)
    extraConsoleCommandsFunctionMap:set("seedStick", commands.seedStick)
    extraConsoleCommandsFunctionMap:set("seeds", commands.seedsCommand)
    extraConsoleCommandsFunctionMap:set("setCharges", commands.setCharges)
    extraConsoleCommandsFunctionMap:set("setPosition", commands.setPosition)
    extraConsoleCommandsFunctionMap:set("sh", commands.sh)
    extraConsoleCommandsFunctionMap:set("shop", commands.shop)
    extraConsoleCommandsFunctionMap:set("slotDisplay", commandsDisplay.slotDisplay)
    extraConsoleCommandsFunctionMap:set("slotsDisplay", commandsDisplay.slotsDisplay)
    extraConsoleCommandsFunctionMap:set("smelt", commands.smelt)
    extraConsoleCommandsFunctionMap:set("soulCharges", commands.soulCharges)
    extraConsoleCommandsFunctionMap:set("soulHearts", commands.soulHearts)
    extraConsoleCommandsFunctionMap:set("sound", commands.sound)
    extraConsoleCommandsFunctionMap:set("sounds", commands.sounds)
    extraConsoleCommandsFunctionMap:set("spam", commands.spam)
    extraConsoleCommandsFunctionMap:set("spawnGoldenTrinket", commands.spawnGoldenTrinket)
    extraConsoleCommandsFunctionMap:set("speed", commands.speed)
    extraConsoleCommandsFunctionMap:set("spikeDisplay", commandsDisplay.spikeDisplay)
    extraConsoleCommandsFunctionMap:set("spikesDisplay", commandsDisplay.spikesDisplay)
    extraConsoleCommandsFunctionMap:set("supersecret", commands.superSecret)
    extraConsoleCommandsFunctionMap:set("startingRoom", commands.startingRoom)
    extraConsoleCommandsFunctionMap:set("tearDisplay", commandsDisplay.tearDisplay)
    extraConsoleCommandsFunctionMap:set("tears", commands.tears)
    extraConsoleCommandsFunctionMap:set("tearsDisplay", commandsDisplay.tearsDisplay)
    extraConsoleCommandsFunctionMap:set("tntDisplay", commandsDisplay.tntDisplay)
    extraConsoleCommandsFunctionMap:set("tntsDisplay", commandsDisplay.tntsDisplay)
    extraConsoleCommandsFunctionMap:set("trapdoor", commands.trapdoorCommand)
    extraConsoleCommandsFunctionMap:set("treasure", commands.treasure)
    extraConsoleCommandsFunctionMap:set("ultraSecret", commands.ultraSecret)
    extraConsoleCommandsFunctionMap:set("up", commands.up)
    extraConsoleCommandsFunctionMap:set("warp", commands.warp)
end
function initCallbacks(self, mod)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
    mod:AddCallback(ModCallback.EVALUATE_CACHE, evaluateCacheFireDelay, CacheFlag.FIRE_DELAY)
    mod:AddCallback(ModCallback.EVALUATE_CACHE, evaluateCacheSpeed, CacheFlag.SPEED)
    mod:AddCallback(ModCallback.ENTITY_TAKE_DMG, entityTakeDmgPlayer, EntityType.PLAYER)
    mod:AddCallback(ModCallback.POST_CURSE_EVAL, postCurseEval)
    mod:AddCallback(ModCallback.EXECUTE_CMD, executeCmd)
    mod:AddCallback(ModCallback.POST_FIRE_TEAR, postFireTear)
end
function postUpdate(self)
    if v.run.spamBloodRights then
        local player = Isaac.GetPlayer()
        player:UseActiveItem(CollectibleType.BLOOD_RIGHTS)
    end
end
function evaluateCacheFireDelay(self, player)
    if v.run.maxTears then
        player.FireDelay = 1
    end
end
function evaluateCacheSpeed(self, player)
    if v.run.maxSpeed then
        player.MoveSpeed = MAX_SPEED_STAT
    end
end
function entityTakeDmgPlayer(self)
    if v.run.spamBloodRights then
        return false
    end
    return nil
end
function postCurseEval(self, curses)
    return v.persistent.disableCurses and LevelCurse.NONE or curses
end
function executeCmd(self, command, params)
    local resultTuple = getMapPartialMatch(nil, command, extraConsoleCommandsFunctionMap)
    if resultTuple == nil then
        printConsole(nil, "That is an invalid console command.")
        return
    end
    local commandName, commandFunction = table.unpack(resultTuple)
    printConsole(nil, "Command: " .. commandName)
    commandFunction(nil, params)
end
function postFireTear(self, tear)
    if v.run.chaosCardTears then
        tear:ChangeVariant(TearVariant.CHAOS_CARD)
    end
    if v.run.maxDamage then
        tear.CollisionDamage = tear.CollisionDamage * 1000
        tear:ChangeVariant(TearVariant.TOOTH)
    end
end
function ____exports.extraConsoleCommandsInit(self, mod)
    saveDataManager(
        nil,
        "extraConsoleCommands",
        v,
        function() return false end
    )
    initMap(nil)
    initCallbacks(nil, mod)
    debugDisplayInit(nil, mod)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.map"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local __TS__Iterator = ____lualib.__TS__Iterator
local __TS__Spread = ____lualib.__TS__Spread
local __TS__ArraySort = ____lualib.__TS__ArraySort
local __TS__StringReplaceAll = ____lualib.__TS__StringReplaceAll
local __TS__StringStartsWith = ____lualib.__TS__StringStartsWith
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local ____exports = {}
--- Helper function to copy a map. (You can also use a Map constructor to accomplish this task.)
function ____exports.copyMap(self, oldMap)
    local newMap = __TS__New(Map)
    for ____, ____value in __TS__Iterator(oldMap:entries()) do
        local key = ____value[1]
        local value = ____value[2]
        newMap:set(key, value)
    end
    return newMap
end
--- Helper function to get the closest value from a map based on partial search text. For the
-- purposes of this function, both search text and map keys are converted to lowercase before
-- attempting to find a match.
-- 
-- For example:
-- 
-- ```ts
-- const map = new <string, number>Map([
--   ["foo", 123],
--   ["bar", 456],
-- ]);
-- const searchText = "f";
-- const match = getMapPartialMatch(map, searchText); // match is now equal to 123
-- 
-- @returns If a match was found, returns a tuple of the map key and value. If a match was not
-- found, returns undefined.
-- ```
function ____exports.getMapPartialMatch(self, searchText, map)
    local keys = {__TS__Spread(map:keys())}
    __TS__ArraySort(keys)
    searchText = string.lower(searchText)
    searchText = __TS__StringReplaceAll(searchText, " ", "")
    local matchingKeys = __TS__ArrayFilter(
        keys,
        function(____, key) return __TS__StringStartsWith(
            string.lower(key),
            searchText
        ) end
    )
    __TS__ArraySort(matchingKeys)
    local matchingKey = matchingKeys[1]
    if matchingKey == nil then
        return nil
    end
    local value = map:get(matchingKey)
    if value == nil then
        return nil
    end
    return {matchingKey, value}
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.debugDisplay.debugDisplay"] = function(...) 
local ____exports = {}
local renderTextOnEntity, postFamiliarRender, postNPCRender, postPlayerRender, postPickupRender, postTearRender, postProjectileRender, postLaserRender, postKnifeRender, postEffectRender, postBombRender, postSlotRender, postRockRender, postPitRender, postSpikesRender, postTNTRender, postPoopRender, postDoorRender, postPressurePlateRender
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local isReflectionRender = ____utils.isReflectionRender
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____v = require("lua_modules.isaacscript-common.features.debugDisplay.v")
local v = ____v.default
local debugDisplayTextCallbacks = ____v.debugDisplayTextCallbacks
function renderTextOnEntity(self, entity, text)
    if isReflectionRender(nil) then
        return
    end
    local position = Isaac.WorldToScreen(entity.Position)
    Isaac.RenderText(
        text,
        position.X,
        position.Y,
        1,
        1,
        1,
        1
    )
end
function postFamiliarRender(self, familiar)
    if not v.run.familiar then
        return
    end
    local text = debugDisplayTextCallbacks:familiar(familiar)
    renderTextOnEntity(nil, familiar, text)
end
function postNPCRender(self, npc)
    if not v.run.npc then
        return
    end
    local text = debugDisplayTextCallbacks:npc(npc)
    renderTextOnEntity(nil, npc, text)
end
function postPlayerRender(self, player)
    if not v.run.player then
        return
    end
    local text = debugDisplayTextCallbacks:player(player)
    renderTextOnEntity(nil, player, text)
end
function postPickupRender(self, pickup)
    if not v.run.pickup then
        return
    end
    local text = debugDisplayTextCallbacks:pickup(pickup)
    renderTextOnEntity(nil, pickup, text)
end
function postTearRender(self, tear)
    if not v.run.tear then
        return
    end
    local text = debugDisplayTextCallbacks:tear(tear)
    renderTextOnEntity(nil, tear, text)
end
function postProjectileRender(self, projectile)
    if not v.run.projectile then
        return
    end
    local text = debugDisplayTextCallbacks:projectile(projectile)
    renderTextOnEntity(nil, projectile, text)
end
function postLaserRender(self, laser)
    if not v.run.laser then
        return
    end
    local text = debugDisplayTextCallbacks:laser(laser)
    renderTextOnEntity(nil, laser, text)
end
function postKnifeRender(self, knife)
    if not v.run.knife then
        return
    end
    local text = debugDisplayTextCallbacks:knife(knife)
    renderTextOnEntity(nil, knife, text)
end
function postEffectRender(self, effect)
    if not v.run.effect then
        return
    end
    local text = debugDisplayTextCallbacks:effect(effect)
    renderTextOnEntity(nil, effect, text)
end
function postBombRender(self, bomb)
    if not v.run.bomb then
        return
    end
    local text = debugDisplayTextCallbacks:bomb(bomb)
    renderTextOnEntity(nil, bomb, text)
end
function postSlotRender(self, slot)
    if not v.run.slot then
        return
    end
    local text = debugDisplayTextCallbacks:slot(slot)
    renderTextOnEntity(nil, slot, text)
end
function postRockRender(self, rock)
    if not v.run.rock then
        return
    end
    local text = debugDisplayTextCallbacks:rock(rock)
    renderTextOnEntity(nil, rock, text)
end
function postPitRender(self, pit)
    if not v.run.pit then
        return
    end
    local text = debugDisplayTextCallbacks:pit(pit)
    renderTextOnEntity(nil, pit, text)
end
function postSpikesRender(self, spikes)
    if not v.run.spikes then
        return
    end
    local text = debugDisplayTextCallbacks:spikes(spikes)
    renderTextOnEntity(nil, spikes, text)
end
function postTNTRender(self, tnt)
    if not v.run.tnt then
        return
    end
    local text = debugDisplayTextCallbacks:tnt(tnt)
    renderTextOnEntity(nil, tnt, text)
end
function postPoopRender(self, poop)
    if not v.run.poop then
        return
    end
    local text = debugDisplayTextCallbacks:poop(poop)
    renderTextOnEntity(nil, poop, text)
end
function postDoorRender(self, door)
    if not v.run.door then
        return
    end
    local text = debugDisplayTextCallbacks:door(door)
    renderTextOnEntity(nil, door, text)
end
function postPressurePlateRender(self, pressurePlate)
    if not v.run.pressurePlate then
        return
    end
    local text = debugDisplayTextCallbacks:pressurePlate(pressurePlate)
    renderTextOnEntity(nil, pressurePlate, text)
end
--- The debug display feature is only initialized when the extra console commands feature is
-- initialized.
function ____exports.debugDisplayInit(self, mod)
    saveDataManager(
        nil,
        "debugDisplay",
        v,
        function() return false end
    )
    mod:AddCallback(ModCallback.POST_FAMILIAR_RENDER, postFamiliarRender)
    mod:AddCallback(ModCallback.POST_NPC_RENDER, postNPCRender)
    mod:AddCallback(ModCallback.POST_PLAYER_RENDER, postPlayerRender)
    mod:AddCallback(ModCallback.POST_PICKUP_RENDER, postPickupRender)
    mod:AddCallback(ModCallback.POST_TEAR_RENDER, postTearRender)
    mod:AddCallback(ModCallback.POST_PROJECTILE_RENDER, postProjectileRender)
    mod:AddCallback(ModCallback.POST_LASER_RENDER, postLaserRender)
    mod:AddCallback(ModCallback.POST_KNIFE_RENDER, postKnifeRender)
    mod:AddCallback(ModCallback.POST_EFFECT_RENDER, postEffectRender)
    mod:AddCallback(ModCallback.POST_BOMB_RENDER, postBombRender)
    mod:AddCallbackCustom(ModCallbackCustom.POST_SLOT_RENDER, postSlotRender)
    mod:AddCallbackCustom(ModCallbackCustom.POST_ROCK_RENDER, postRockRender)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PIT_RENDER, postPitRender)
    mod:AddCallbackCustom(ModCallbackCustom.POST_SPIKES_RENDER, postSpikesRender)
    mod:AddCallbackCustom(ModCallbackCustom.POST_TNT_RENDER, postTNTRender)
    mod:AddCallbackCustom(ModCallbackCustom.POST_POOP_RENDER, postPoopRender)
    mod:AddCallbackCustom(ModCallbackCustom.POST_DOOR_RENDER, postDoorRender)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PRESSURE_PLATE_RENDER, postPressurePlateRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.extraConsoleCommands.commandsDisplay"] = function(...) 
local ____exports = {}
local ____exports = require("lua_modules.isaacscript-common.features.debugDisplay.exports")
local toggleBombDisplay = ____exports.toggleBombDisplay
local toggleDoorDisplay = ____exports.toggleDoorDisplay
local toggleEffectDisplay = ____exports.toggleEffectDisplay
local toggleFamiliarDisplay = ____exports.toggleFamiliarDisplay
local toggleKnifeDisplay = ____exports.toggleKnifeDisplay
local toggleLaserDisplay = ____exports.toggleLaserDisplay
local toggleNPCDisplay = ____exports.toggleNPCDisplay
local togglePickupDisplay = ____exports.togglePickupDisplay
local togglePitDisplay = ____exports.togglePitDisplay
local togglePlayerDisplay = ____exports.togglePlayerDisplay
local togglePoopDisplay = ____exports.togglePoopDisplay
local togglePressurePlateDisplay = ____exports.togglePressurePlateDisplay
local toggleProjectileDisplay = ____exports.toggleProjectileDisplay
local toggleRockDisplay = ____exports.toggleRockDisplay
local toggleSlotDisplay = ____exports.toggleSlotDisplay
local toggleSpikesDisplay = ____exports.toggleSpikesDisplay
local toggleTearDisplay = ____exports.toggleTearDisplay
local toggleTNTDisplay = ____exports.toggleTNTDisplay
--- Toggles custom text to appear next to every spikes. Useful for debugging.
-- 
-- By default, the grid entity ID will be displayed. Use the `setSpikesDisplay` helper function to
-- assign the text that you want to appear.
function ____exports.spikesDisplay(self)
    toggleSpikesDisplay(nil)
end
--- Toggles custom text to appear next to every bomb. Useful for debugging.
-- 
-- By default, the entity ID will be displayed. Use the `setBombDisplay` helper function to assign
-- the text that you want to appear.
function ____exports.bombDisplay(self)
    toggleBombDisplay(nil)
end
--- Alias for the "bombDisplay" command.
function ____exports.bombsDisplay(self)
    ____exports.bombDisplay(nil)
end
--- Toggles custom text to appear next to every door. Useful for debugging.
-- 
-- By default, the grid entity ID will be displayed. Use the `setDoorDisplay` helper function to
-- assign the text that you want to appear.
function ____exports.doorDisplay(self)
    toggleDoorDisplay(nil)
end
--- Alias for the "doorDisplay" command.
function ____exports.doorsDisplay(self)
    ____exports.doorDisplay(nil)
end
--- Toggles custom text to appear next to every effect. Useful for debugging.
-- 
-- By default, the entity ID will be displayed. Use the `setEffectDisplay` helper function to assign
-- the text that you want to appear.
function ____exports.effectDisplay(self)
    toggleEffectDisplay(nil)
end
--- Alias for the "effectDisplay" command.
function ____exports.effectsDisplay(self)
    ____exports.effectDisplay(nil)
end
--- Toggles custom text to appear next to every familiar. Useful for debugging.
-- 
-- By default, the entity ID will be displayed. Use the `setFamiliarDisplay` helper function to
-- assign the text that you want to appear.
function ____exports.familiarDisplay(self)
    toggleFamiliarDisplay(nil)
end
--- Alias for the "familiarDisplay" command.
function ____exports.familiarsDisplay(self)
    ____exports.familiarDisplay(nil)
end
--- Toggles custom text to appear next to every knife. Useful for debugging.
-- 
-- By default, the entity ID will be displayed. Use the `setKnifeDisplay` helper function to assign
-- the text that you want to appear.
function ____exports.knifeDisplay(self)
    toggleKnifeDisplay(nil)
end
--- Alias for the "knifeDisplay" command.
function ____exports.knivesDisplay(self)
    ____exports.knifeDisplay(nil)
end
--- Toggles custom text to appear next to every laser. Useful for debugging.
-- 
-- By default, the entity ID will be displayed. Use the `setLaserDisplay` helper function to assign
-- the text that you want to appear.
function ____exports.laserDisplay(self)
    toggleLaserDisplay(nil)
end
--- Alias for the "laserDisplay" command.
function ____exports.lasersDisplay(self)
    ____exports.laserDisplay(nil)
end
--- Toggles custom text to appear next to every NPC. Useful for debugging.
-- 
-- By default, the entity ID will be displayed. Use the `setNPCDisplay` helper function to assign
-- the text that you want to appear.
function ____exports.npcDisplay(self)
    toggleNPCDisplay(nil)
end
--- Alias for the "npcDisplay" command.
function ____exports.npcsDisplay(self)
    ____exports.npcDisplay(nil)
end
--- Toggles custom text to appear next to every pickup. Useful for debugging.
-- 
-- By default, the entity ID will be displayed. Use the `setPickupDisplay` helper function to assign
-- the text that you want to appear.
function ____exports.pickupDisplay(self)
    togglePickupDisplay(nil)
end
--- Alias for the "pickupDisplay" command.
function ____exports.pickupsDisplay(self)
    ____exports.pickupDisplay(nil)
end
--- Toggles custom text to appear next to every pit. Useful for debugging.
-- 
-- By default, the grid entity ID will be displayed. Use the `setPitDisplay` helper function to
-- assign the text that you want to appear.
function ____exports.pitDisplay(self)
    togglePitDisplay(nil)
end
--- Alias for the "pitDisplay" command.
function ____exports.pitsDisplay(self)
    ____exports.pitDisplay(nil)
end
--- Toggles custom text to appear next to every player. Useful for debugging.
-- 
-- By default, the entity ID will be displayed. Use the `setPlayerDisplay` helper function to assign
-- the text that you want to appear.
function ____exports.playerDisplay(self)
    togglePlayerDisplay(nil)
end
--- Alias for the "playerDisplay" command.
function ____exports.playersDisplay(self)
    ____exports.playerDisplay(nil)
end
--- Toggles custom text to appear next to every poop. Useful for debugging.
-- 
-- By default, the grid entity ID will be displayed. Use the `setPoopDisplay` helper function to
-- assign the text that you want to appear.
function ____exports.poopDisplay(self)
    togglePoopDisplay(nil)
end
--- Alias for the "poopDisplay" command.
function ____exports.poopsDisplay(self)
    ____exports.poopDisplay(nil)
end
--- Toggles custom text to appear next to every pressure plate. Useful for debugging.
-- 
-- By default, the grid entity ID will be displayed. Use the `setPressurePlateDisplay` helper
-- function to assign the text that you want to appear.
function ____exports.pressurePlateDisplay(self)
    togglePressurePlateDisplay(nil)
end
--- Alias for the "pressurePlateDisplay" command.
function ____exports.pressurePlatesDisplay(self)
    ____exports.pressurePlateDisplay(nil)
end
--- Toggles custom text to appear next to every projectile. Useful for debugging.
-- 
-- By default, the entity ID will be displayed. Use the `setProjectileDisplay` helper function to
-- assign the text that you want to appear.
function ____exports.projectileDisplay(self)
    toggleProjectileDisplay(nil)
end
--- Alias for the "projectileDisplay" command.
function ____exports.projectilesDisplay(self)
    ____exports.projectileDisplay(nil)
end
--- Toggles custom text to appear next to every rock. Useful for debugging.
-- 
-- By default, the grid entity ID will be displayed. Use the `setRockDisplay` helper function to
-- assign the text that you want to appear.
function ____exports.rockDisplay(self)
    toggleRockDisplay(nil)
end
--- Alias for the "rockDisplay" command.
function ____exports.rocksDisplay(self)
    ____exports.rockDisplay(nil)
end
--- Toggles custom text to appear next to every slot. Useful for debugging.
-- 
-- By default, the entity ID will be displayed. Use the `setSlotDisplay` helper function to assign
-- the text that you want to appear.
function ____exports.slotDisplay(self)
    toggleSlotDisplay(nil)
end
--- Alias for the "slotDisplay" command.
function ____exports.slotsDisplay(self)
    ____exports.slotDisplay(nil)
end
--- Alias for the "spikesDisplay" command.
function ____exports.spikeDisplay(self)
    ____exports.spikesDisplay(nil)
end
--- Toggles custom text to appear next to every tear. Useful for debugging.
-- 
-- By default, the entity ID will be displayed. Use the `setTearDisplay` helper function to assign
-- the text that you want to appear.
function ____exports.tearDisplay(self)
    toggleTearDisplay(nil)
end
--- Alias for the "tearDisplay" command.
function ____exports.tearsDisplay(self)
    ____exports.tearDisplay(nil)
end
--- Toggles custom text to appear next to every TNT. Useful for debugging.
-- 
-- By default, the grid entity ID will be displayed. Use the `setTNTDisplay` helper function to
-- assign the text that you want to appear.
function ____exports.tntDisplay(self)
    toggleTNTDisplay(nil)
end
--- Alias for the "tntDisplay" command.
function ____exports.tntsDisplay(self)
    ____exports.tntDisplay(nil)
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.extraConsoleCommands.listCommands"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__StringSplit = ____lualib.__TS__StringSplit
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local __TS__StringSlice = ____lualib.__TS__StringSlice
local __TS__ArrayIncludes = ____lualib.__TS__ArrayIncludes
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ActiveSlot = ____isaac_2Dtypescript_2Ddefinitions.ActiveSlot
local CacheFlag = ____isaac_2Dtypescript_2Ddefinitions.CacheFlag
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local Direction = ____isaac_2Dtypescript_2Ddefinitions.Direction
local DisplayFlag = ____isaac_2Dtypescript_2Ddefinitions.DisplayFlag
local GameStateFlag = ____isaac_2Dtypescript_2Ddefinitions.GameStateFlag
local GridEntityType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityType
local GridRoom = ____isaac_2Dtypescript_2Ddefinitions.GridRoom
local PillColor = ____isaac_2Dtypescript_2Ddefinitions.PillColor
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local sfxManager = ____cachedClasses.sfxManager
local ____constants = require("lua_modules.isaacscript-common.constants")
local FIRST_ROOM_TYPE = ____constants.FIRST_ROOM_TYPE
local FIRST_STAGE = ____constants.FIRST_STAGE
local LAST_ROOM_TYPE = ____constants.LAST_ROOM_TYPE
local LAST_STAGE = ____constants.LAST_STAGE
local MAX_LEVEL_GRID_INDEX = ____constants.MAX_LEVEL_GRID_INDEX
local ____constantsFirstLast = require("lua_modules.isaacscript-common.constantsFirstLast")
local FIRST_CARD = ____constantsFirstLast.FIRST_CARD
local FIRST_CHARACTER = ____constantsFirstLast.FIRST_CHARACTER
local FIRST_PILL_EFFECT = ____constantsFirstLast.FIRST_PILL_EFFECT
local LAST_CARD = ____constantsFirstLast.LAST_CARD
local LAST_PILL_EFFECT = ____constantsFirstLast.LAST_PILL_EFFECT
local LAST_VANILLA_CHARACTER = ____constantsFirstLast.LAST_VANILLA_CHARACTER
local ____HealthType = require("lua_modules.isaacscript-common.enums.HealthType")
local HealthType = ____HealthType.HealthType
local ____cards = require("lua_modules.isaacscript-common.functions.cards")
local getCardName = ____cards.getCardName
local ____character = require("lua_modules.isaacscript-common.functions.character")
local getCharacterName = ____character.getCharacterName
local ____collectibles = require("lua_modules.isaacscript-common.functions.collectibles")
local isValidCollectibleType = ____collectibles.isValidCollectibleType
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local getNPCs = ____entitySpecific.getNPCs
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local addFlag = ____flag.addFlag
local ____gridEntity = require("lua_modules.isaacscript-common.functions.gridEntity")
local spawnGrid = ____gridEntity.spawnGrid
local ____log = require("lua_modules.isaacscript-common.functions.log")
local logEffects = ____log.logEffects
local logRoom = ____log.logRoom
local logSeedEffects = ____log.logSeedEffects
local logSounds = ____log.logSounds
local ____map = require("lua_modules.isaacscript-common.functions.map")
local getMapPartialMatch = ____map.getMapPartialMatch
local ____pickups = require("lua_modules.isaacscript-common.functions.pickups")
local spawnCard = ____pickups.spawnCard
local spawnPill = ____pickups.spawnPill
local spawnTrinket = ____pickups.spawnTrinket
local ____pills = require("lua_modules.isaacscript-common.functions.pills")
local getPillEffectName = ____pills.getPillEffectName
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getPlayerName = ____player.getPlayerName
local useActiveItemTemp = ____player.useActiveItemTemp
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getPlayers = ____playerIndex.getPlayers
local ____roomGrid = require("lua_modules.isaacscript-common.functions.roomGrid")
local gridCoordinatesToWorldPosition = ____roomGrid.gridCoordinatesToWorldPosition
local ____rooms = require("lua_modules.isaacscript-common.functions.rooms")
local changeRoom = ____rooms.changeRoom
local getRoomGridIndexesForType = ____rooms.getRoomGridIndexesForType
local ____run = require("lua_modules.isaacscript-common.functions.run")
local restart = ____run.restart
local ____trinkets = require("lua_modules.isaacscript-common.functions.trinkets")
local getGoldenTrinketType = ____trinkets.getGoldenTrinketType
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local irange = ____utils.irange
local printConsole = ____utils.printConsole
local printEnabled = ____utils.printEnabled
local ____cardMap = require("lua_modules.isaacscript-common.maps.cardMap")
local CARD_MAP = ____cardMap.CARD_MAP
local ____characterMap = require("lua_modules.isaacscript-common.maps.characterMap")
local CHARACTER_MAP = ____characterMap.CHARACTER_MAP
local ____pillEffectMap = require("lua_modules.isaacscript-common.maps.pillEffectMap")
local PILL_EFFECT_MAP = ____pillEffectMap.PILL_EFFECT_MAP
local ____roomTypeMap = require("lua_modules.isaacscript-common.maps.roomTypeMap")
local ROOM_TYPE_MAP = ____roomTypeMap.ROOM_TYPE_MAP
local ____commandsSubroutines = require("lua_modules.isaacscript-common.features.extraConsoleCommands.commandsSubroutines")
local addHeart = ____commandsSubroutines.addHeart
local devilAngel = ____commandsSubroutines.devilAngel
local listEntities = ____commandsSubroutines.listEntities
local listGridEntities = ____commandsSubroutines.listGridEntities
local movePlayer = ____commandsSubroutines.movePlayer
local spawnTrapdoorOrCrawlSpace = ____commandsSubroutines.spawnTrapdoorOrCrawlSpace
local warpToRoomType = ____commandsSubroutines.warpToRoomType
local ____v = require("lua_modules.isaacscript-common.features.extraConsoleCommands.v")
local v = ____v.default
--- Gives a half black heart. Provide a number to give a custom amount of hearts. (You can use
-- negative numbers to remove hearts.)
function ____exports.blackHearts(self, params)
    addHeart(nil, params, HealthType.BLACK)
end
--- Toggles Chaos Card tears. Useful for killing enemies very fast without using "debug 10".
function ____exports.chaosCardTears(self)
    v.run.chaosCardTears = not v.run.chaosCardTears
    printEnabled(nil, v.run.chaosCardTears, "Chaos Card tears")
end
--- Warps to the Devil Room for the floor. If the Angel Room has already been visited or initialized,
-- this will uninitialize it and make an Devil Room instead.
function ____exports.devil(self)
    devilAngel(nil, true)
end
--- Gives an eternal heart. Provide a number to give a custom amount of hearts. (You can use negative
-- numbers to remove hearts.)
function ____exports.eternalHearts(self, params)
    addHeart(nil, params, HealthType.ETERNAL)
end
--- Gives the player a golden bomb.
function ____exports.goldenBomb(self)
    local player = Isaac.GetPlayer()
    player:AddGoldenBomb()
end
--- Gives a golden heart. Provide a number to give a custom amount of hearts. (You can use negative
-- numbers to remove hearts.)
function ____exports.goldenHearts(self, params)
    addHeart(nil, params, HealthType.GOLDEN)
end
--- Gives the player a golden key.
function ____exports.goldenKey(self)
    local player = Isaac.GetPlayer()
    player:AddGoldenKey()
end
--- Gives a half red heart. Provide a number to give a custom amount of hearts. (You can use negative
-- numbers to remove hearts.)
function ____exports.hearts(self, params)
    addHeart(nil, params, HealthType.RED)
end
--- Warps to the I AM ERROR room for the floor.
function ____exports.iAmError(self)
    changeRoom(nil, GridRoom.ERROR)
end
--- Sets every NPC in the room to 1 HP.
function ____exports.oneHP(self)
    for ____, npc in ipairs(getNPCs(nil)) do
        npc.HitPoints = 1
    end
    printConsole(nil, "Set every NPC to 1 HP.")
end
--- Gives a poop mana charge. This only affects Tainted Blue Baby. Provide a number to give a custom
-- amount of charges. (You can use negative numbers to remove charges.)
function ____exports.poopMana(self, params)
    local charges = 1
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of mana to add.")
            return
        end
        charges = num
    end
    local player = Isaac.GetPlayer()
    player:AddPoopMana(charges)
end
--- Gives a half soul heart. Provide a number to give a custom amount of hearts. (You can use
-- negative numbers to remove hearts.)
function ____exports.soulHearts(self, params)
    addHeart(nil, params, HealthType.SOUL)
end
--- Play the supplied sound effect.
-- 
-- For example:
-- - sound 1 - Plays the 1-Up sound effect.
function ____exports.sound(self, params)
    local soundEffect = tonumber(params)
    if soundEffect == nil then
        printConsole(nil, "That is an invalid sound effect ID.")
        return
    end
    sfxManager:Play(soundEffect)
end
--- Warps to the starting room of the floor.
function ____exports.startingRoom(self)
    local level = game:GetLevel()
    local startingRoomIndex = level:GetStartingRoomIndex()
    changeRoom(nil, startingRoomIndex)
end
--- Adds a single charge to the player's specified active item. You must provide the active slot
-- number. Provide a second number to give a custom amount of charges. (You can use negative numbers
-- to remove charge.)
function ____exports.addCharges(self, params)
    if params == "" then
        printConsole(nil, "You must specify a slot number. (Use 0 for the primary slot, 1 for the Schoolbag slot, 2 for the pocket item slot, and 3 for the Dice Bag slot.)")
        return
    end
    local args = __TS__StringSplit(params, " ")
    if #args ~= 1 and #args ~= 2 then
        printConsole(nil, "That is an invalid amount of arguments.")
        return
    end
    local activeSlotString, chargeString = table.unpack(args)
    local activeSlot = tonumber(activeSlotString)
    if activeSlot == nil then
        printConsole(
            nil,
            "The provided slot number is invalid: " .. tostring(activeSlotString)
        )
        return
    end
    if activeSlot < ActiveSlot.PRIMARY or activeSlot > ActiveSlot.POCKET_SINGLE_USE then
        printConsole(
            nil,
            "The provided slot number is invalid: " .. tostring(activeSlot)
        )
        return
    end
    local chargeNum = 1
    if chargeString ~= nil then
        local chargeNumAttempt = tonumber(chargeString)
        if chargeNumAttempt == nil then
            printConsole(nil, "The provided charge amount is invalid: " .. chargeString)
            return
        end
        chargeNum = chargeNumAttempt
    end
    local player = Isaac.GetPlayer()
    local currentCharge = player:GetActiveCharge(activeSlot)
    local newCharge = currentCharge + chargeNum
    player:SetActiveCharge(newCharge, activeSlot)
end
--- Warps to the Angel Room for the floor. If the Devil Room has already been visited or initialized,
-- this will uninitialize it and make an Angel Room instead.
function ____exports.angel(self)
    devilAngel(nil, false)
end
--- Activates the flags for the Ascent (i.e. Backwards Path).
function ____exports.ascent(self)
    game:SetStateFlag(GameStateFlag.BACKWARDS_PATH_INIT, true)
    game:SetStateFlag(GameStateFlag.BACKWARDS_PATH, true)
    printConsole(nil, "Set Ascent flags.")
end
--- Warps to the first Clean Bedroom or Dirty Bedroom on the floor.
function ____exports.bedroom(self)
    local cleanBedroomGridIndexes = getRoomGridIndexesForType(nil, RoomType.CLEAN_BEDROOM)
    if #cleanBedroomGridIndexes > 0 then
        warpToRoomType(nil, RoomType.CLEAN_BEDROOM)
        return
    end
    local dirtyBedroomGridIndexes = getRoomGridIndexesForType(nil, RoomType.DIRTY_BEDROOM)
    if #dirtyBedroomGridIndexes > 0 then
        warpToRoomType(nil, RoomType.DIRTY_BEDROOM)
        return
    end
    printConsole(nil, "There are no Clean Bedrooms or Dirty Bedrooms on this floor.")
end
--- Alias for the "blackhearts" command.
function ____exports.bh(self, params)
    ____exports.blackHearts(nil, params)
end
--- Warps to the Black Market for the floor.
function ____exports.blackMarket(self)
    changeRoom(nil, GridRoom.BLACK_MARKET)
end
--- Gives a blood charge. This only affects Bethany. Provide a number to give a custom amount of
-- charges. (You can use negative numbers to remove charges.)
function ____exports.bloodCharges(self, params)
    local charges = 1
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of charges to add.")
            return
        end
        charges = num
    end
    local player = Isaac.GetPlayer()
    player:AddBloodCharge(charges)
end
--- Alias for the "blackMarket" command.
function ____exports.bm(self)
    ____exports.blackMarket(nil)
end
--- Gives a bomb. Provide a number to give a custom amount of bombs. (You can use negative numbers to
-- remove bombs.)
function ____exports.bomb(self, params)
    local numBombs = 1
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of bombs to add.")
            return
        end
        numBombs = num
    end
    local player = Isaac.GetPlayer()
    player:AddBombs(numBombs)
end
--- Gives 99 bombs. Provide a number to give a custom amount of bombs. (You can use negative numbers
-- to remove bombs.)
function ____exports.bombs(self, params)
    local numBombs = 99
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of bombs to add.")
            return
        end
        numBombs = num
    end
    local player = Isaac.GetPlayer()
    player:AddBombs(numBombs)
end
--- Gives a bone heart. Provide a number to give a custom amount of hearts. (You can use negative
-- numbers to remove hearts.)
function ____exports.boneHearts(self, params)
    addHeart(nil, params, HealthType.BONE)
end
--- Warps to the first Boss Room on the floor.
function ____exports.boss(self)
    warpToRoomType(nil, RoomType.BOSS)
end
--- Warps to the Boss Rush for the floor.
function ____exports.bossRush(self)
    changeRoom(nil, GridRoom.BOSS_RUSH)
end
--- Gives a broken heart. Provide a number to give a custom amount of hearts. (You can use negative
-- numbers to remove hearts.)
function ____exports.brokenHearts(self, params)
    addHeart(nil, params, HealthType.BROKEN)
end
--- Gives the specified card. Accepts either the card sub-type or the partial name of the card.
-- 
-- For example:
-- - card 5 - Gives The Emperor.
-- - card spa - Gives 2 of Spades.
function ____exports.card(self, params)
    if params == "" then
        printConsole(nil, "You must specify a card name or number.")
        return
    end
    local cardNum
    local num = tonumber(params)
    if num == nil then
        local match = getMapPartialMatch(nil, params, CARD_MAP)
        if match == nil then
            printConsole(nil, "Unknown card: " .. params)
            return
        end
        cardNum = match[2]
    else
        if num < FIRST_CARD or num > LAST_CARD then
            printConsole(
                nil,
                "Invalid card sub-type: " .. tostring(num)
            )
            return
        end
        cardNum = num
    end
    local cardName = getCardName(nil, cardNum)
    Isaac.ExecuteCommand("g k" .. tostring(cardNum))
    printConsole(
        nil,
        ((("Gave card: " .. cardName) .. " (") .. tostring(cardNum)) .. ")"
    )
end
--- Spawns every card on the ground, starting at the top-left-most tile.
function ____exports.cards(self)
    local cardType = 1
    do
        local y = 0
        while y <= 6 do
            do
                local x = 0
                while x <= 12 do
                    if cardType == LAST_CARD then
                        return
                    end
                    local position = gridCoordinatesToWorldPosition(nil, x, y)
                    spawnCard(nil, cardType, position)
                    cardType = cardType + 1
                    x = x + 1
                end
            end
            y = y + 1
        end
    end
end
--- Alias for the "chaosCardTears" command.
function ____exports.cc(self)
    ____exports.chaosCardTears(nil)
end
--- Restart as the specified character. Accepts either the character sub-type or the partial name of
-- the character.
-- 
-- For example:
-- - character 2 - Restarts as Cain.
-- - character ta - Restarts as Tainted Azazel.
function ____exports.characterCommand(self, params)
    if params == "" then
        printConsole(nil, "You must specify a character name or number.")
        return
    end
    local character
    local num = tonumber(params)
    if num == nil then
        local match = getMapPartialMatch(nil, params, CHARACTER_MAP)
        if match == nil then
            printConsole(nil, "Unknown character: " .. params)
            return
        end
        character = match[2]
    else
        if num < FIRST_CHARACTER or num > LAST_VANILLA_CHARACTER then
            printConsole(
                nil,
                "Invalid player sub-type: " .. tostring(num)
            )
            return
        end
        character = num
    end
    local characterName = getCharacterName(nil, character)
    restart(nil, character)
    printConsole(
        nil,
        ((("Restarting as character: " .. characterName) .. " (") .. tostring(character)) .. ")"
    )
end
--- Alias for the "addCharges" command.
function ____exports.charge(self, params)
    ____exports.addCharges(nil, params)
end
--- Warps to the first Clean Bedroom on the floor.
function ____exports.cleanBedroom(self)
    warpToRoomType(nil, RoomType.CLEAN_BEDROOM)
end
--- Gives a coin. Provide a number to give a custom amount of coins. (You can use negative numbers to
-- remove coins.)
function ____exports.coin(self, params)
    local numCoins = 1
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of coins to add.")
            return
        end
        numCoins = num
    end
    local player = Isaac.GetPlayer()
    player:AddCoins(numCoins)
end
--- Gives 999 coins. Provide a number to give a custom amount of coins. (You can use negative numbers
-- to remove coins.)
function ____exports.coins(self, params)
    local numCoins = 999
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of coins to add.")
            return
        end
        numCoins = num
    end
    local player = Isaac.GetPlayer()
    player:AddCoins(numCoins)
end
--- Creates a crawl space next to the player.
function ____exports.crawlSpace(self)
    spawnTrapdoorOrCrawlSpace(nil, false)
end
--- Uses the D20.
function ____exports.d20(self)
    local player = Isaac.GetPlayer()
    useActiveItemTemp(nil, player, CollectibleType.D20)
end
--- Uses the D6.
function ____exports.d6(self)
    local player = Isaac.GetPlayer()
    useActiveItemTemp(nil, player, CollectibleType.D6)
end
--- Toggles extremely high-damage tears.
function ____exports.damage(self)
    v.run.maxDamage = not v.run.maxDamage
    printEnabled(nil, v.run.maxDamage, "debug damage")
end
--- Alias for the "devil" command.
function ____exports.dd(self)
    ____exports.devil(nil)
end
--- Warps to the first Dirty Bedroom on the floor.
function ____exports.dirtyBedroom(self)
    warpToRoomType(nil, RoomType.DIRTY_BEDROOM)
end
--- Toggles whether or not curses can appear.
function ____exports.disableCurses(self)
    v.persistent.disableCurses = not v.persistent.disableCurses
    printEnabled(nil, not v.persistent.disableCurses, "curses")
end
--- Moves the player 0.5 units down. Provide a number to move a custom amount of units.
function ____exports.down(self, params)
    movePlayer(nil, params, Direction.DOWN)
end
--- Warps to the Dungeon (i.e. crawl space) for the floor.
function ____exports.dungeon(self)
    changeRoom(nil, GridRoom.DUNGEON)
end
--- Logs the player's current temporary effects to the "log.txt" file.
function ____exports.effects(self)
    local player = Isaac.GetPlayer()
    logEffects(player)
    printConsole(nil, "Logged the player's effects to the \"log.txt\" file.")
end
--- Alias for the "eternalHearts" command.
function ____exports.eh(self, params)
    ____exports.eternalHearts(nil, params)
end
--- Alias for the "iAmError" command.
function ____exports.error(self)
    ____exports.iAmError(nil)
end
--- Alias for the "startingRoom" command.
function ____exports.fool(self)
    ____exports.startingRoom(nil)
end
--- Prints the current position of all players.
function ____exports.getPosition(self)
    for ____, player in ipairs(getPlayers(nil)) do
        local playerName = getPlayerName(nil, player)
        printConsole(
            nil,
            ((((("Player position for " .. playerName) .. ": (") .. tostring(player.Position.X)) .. ", ") .. tostring(player.Position.Y)) .. ")"
        )
    end
end
--- Gives a Giga Bomb. Provide a number to give a custom amount of Giga Bombs. (You can use negative
-- numbers to remove bombs.)
function ____exports.gigaBomb(self, params)
    local numBombs = 1
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of Giga Bombs to add.")
            return
        end
        numBombs = num
    end
    local player = Isaac.GetPlayer()
    player:AddGigaBombs(numBombs)
end
--- Alias for the "goldenBomb" command.
function ____exports.goldBomb(self)
    ____exports.goldenBomb(nil)
end
--- Alias for the "goldenHearts" command.
function ____exports.goldHearts(self, params)
    ____exports.goldenHearts(nil, params)
end
--- Alias for the "goldenKey" command.
function ____exports.goldKey(self)
    ____exports.goldenKey(nil)
end
--- Alias for the "debug 2" command.
function ____exports.grid(self)
    Isaac.ExecuteCommand("debug 2")
end
--- Alias for the "debug 11" command.
function ____exports.grid2(self)
    Isaac.ExecuteCommand("debug 11")
end
--- Spawns every grid entity, starting at the top-left-most tile.
function ____exports.gridEntities(self)
    local gridEntityTypes = getEnumValues(nil, GridEntityType)
    local gridEntityTypeIndex = -1
    do
        local y = 0
        while y <= 6 do
            do
                local x = 0
                while x <= 12 do
                    gridEntityTypeIndex = gridEntityTypeIndex + 1
                    local gridEntityType = gridEntityTypes[gridEntityTypeIndex + 1]
                    if gridEntityType == nil then
                        return
                    end
                    local position = gridCoordinatesToWorldPosition(nil, x, y)
                    spawnGrid(nil, gridEntityType, position)
                    x = x + 1
                end
            end
            y = y + 1
        end
    end
end
--- Alias for the "hearts" command.
function ____exports.h(self, params)
    ____exports.hearts(nil, params)
end
--- Alias for the "debug 6" command.
function ____exports.hitboxes(self)
    Isaac.ExecuteCommand("debug 6")
end
--- Gives a key. Provide a number to give a custom amount of key. (You can use negative numbers to
-- remove keys.)
function ____exports.key(self, params)
    local numKeys = 1
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of keys to add.")
            return
        end
        numKeys = num
    end
    local player = Isaac.GetPlayer()
    player:AddKeys(numKeys)
end
--- Gives 99 keys. Provide a number to give a custom amount of coins. (You can use negative numbers
-- to remove keys.)
function ____exports.keys(self, params)
    local numKeys = 99
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of keys to add.")
            return
        end
        numKeys = num
    end
    local player = Isaac.GetPlayer()
    player:AddKeys(numKeys)
end
--- Moves the player 0.5 units left. Provide a number to move a custom amount of units.
function ____exports.left(self, params)
    movePlayer(nil, params, Direction.LEFT)
end
--- Warps to the first Library on the floor.
function ____exports.library(self)
    warpToRoomType(nil, RoomType.LIBRARY)
end
--- Logs the entities in the room to the "log.txt" file. Provide a number to only log that specific
-- `EntityType`.
-- 
-- By default, this command will exclude background effects. If that is not desired, use the
-- "listAll" command instead.
function ____exports.list(self, params)
    listEntities(nil, params, false)
end
--- Logs the entities in the room to the "log.txt" file. Provide a number to only log that specific
-- `EntityType`.
function ____exports.listAll(self, params)
    listEntities(nil, params, true)
end
--- Logs the grid entities in the room to the "log.txt" file. Provide a number to only log that
-- specific `GridEntityType`.
-- 
-- By default, this command will exclude walls. If that is not desired, use the "listGridAll"
-- command instead.
function ____exports.listGrid(self, params)
    listGridEntities(nil, params, false)
end
--- Logs the grid entities in the room to the "log.txt" file. Provide a number to only log that
-- specific `GridEntityType`.
function ____exports.listGridAll(self, params)
    listGridEntities(nil, params, true)
end
--- Alias for the "1hp" command.
function ____exports.lowHP(self)
    ____exports.oneHP(nil)
end
--- Alias for "debug 9".
function ____exports.luck(self)
    Isaac.ExecuteCommand("debug 9")
end
--- Alias for the "poopMana" command.
function ____exports.mana(self, params)
    ____exports.poopMana(nil, params)
end
--- Completely reveals the entire map, including the Ultra Secret Room.
function ____exports.map(self)
    local level = game:GetLevel()
    local displayFlags = addFlag(nil, DisplayFlag.VISIBLE, DisplayFlag.SHADOW, DisplayFlag.SHOW_ICON)
    for ____, roomGridIndex in ipairs(irange(nil, MAX_LEVEL_GRID_INDEX)) do
        local roomDesc = level:GetRoomByIdx(roomGridIndex)
        roomDesc.DisplayFlags = displayFlags
    end
    level:UpdateVisibility()
end
--- Gives a heart container. Provide a number to give a custom amount of heart containers. (You can
-- use negative numbers to remove heart containers.)
function ____exports.maxHearts(self, params)
    addHeart(nil, params, HealthType.MAX_HEARTS)
end
--- Alias for the "maxHearts" command.
function ____exports.mh(self, params)
    ____exports.maxHearts(nil, params)
end
--- Warps to the first Miniboss Room on the floor.
function ____exports.miniboss(self)
    warpToRoomType(nil, RoomType.MINI_BOSS)
end
--- Alias for the "disableCurses" command.
function ____exports.noCurses(self)
    ____exports.disableCurses(nil)
end
--- Gives a pill with the specified pill effect. Accepts either the effect ID or the partial name of
-- the effect.
-- 
-- For example:
-- 
-- - `pill 5` - Gives a "Full Health" pill.
-- - `pill suns` - Gives a "Feels like I'm walking on sunshine" pill.
function ____exports.pill(self, params)
    if params == "" then
        printConsole(nil, "You must specify a pill name or number.")
        return
    end
    local pillEffect
    local num = tonumber(params)
    if num == nil then
        local match = getMapPartialMatch(nil, params, PILL_EFFECT_MAP)
        if match == nil then
            printConsole(nil, "Unknown pill effect: " .. params)
            return
        end
        pillEffect = match[2]
    else
        if num < FIRST_PILL_EFFECT or num > LAST_PILL_EFFECT then
            printConsole(
                nil,
                "Invalid pill effect ID: " .. tostring(num)
            )
            return
        end
        pillEffect = num
    end
    local pillEffectName = getPillEffectName(nil, pillEffect)
    Isaac.ExecuteCommand("g p" .. tostring(pillEffect))
    printConsole(
        nil,
        ((("Gave pill: " .. pillEffectName) .. " (") .. tostring(pillEffect)) .. ")"
    )
end
--- Spawns every pill on the ground, starting at the top-left-most tile.
function ____exports.pills(self)
    local pillColors = __TS__ArrayFilter(
        getEnumValues(nil, PillColor),
        function(____, pillColor) return pillColor ~= PillColor.NULL end
    )
    local pillColorIndex = -1
    do
        local y = 0
        while y <= 6 do
            do
                local x = 0
                while x <= 12 do
                    pillColorIndex = pillColorIndex + 1
                    local pillColor = pillColors[pillColorIndex + 1]
                    if pillColor == nil then
                        return
                    end
                    local position = gridCoordinatesToWorldPosition(nil, x, y)
                    spawnPill(nil, pillColor, position)
                    x = x + 1
                end
            end
            y = y + 1
        end
    end
end
--- Warps to the first Planetarium on the floor.
function ____exports.planetarium(self)
    warpToRoomType(nil, RoomType.PLANETARIUM)
end
--- Alias for the "sound" command.
function ____exports.playSound(self, params)
    ____exports.sound(nil, params)
end
--- Sets the player's pocket item to the specified collectible type.
function ____exports.pocket(self, params)
    if params == "" then
        printConsole(nil, "You must supply a collectible type to put as the pocket item.")
        return
    end
    local collectibleType = tonumber(params)
    if collectibleType == nil then
        printConsole(nil, "That is an invalid collectible type.")
        return
    end
    if not isValidCollectibleType(nil, collectibleType) then
        printConsole(nil, "That is an invalid collectible type.")
        return
    end
    local player = Isaac.GetPlayer()
    player:SetPocketActiveItem(collectibleType, ActiveSlot.POCKET)
end
--- Alias for the "getPosition" command.
function ____exports.positionCommand(self)
    ____exports.getPosition(nil)
end
--- Alias for the "hearts" command.
function ____exports.redHearts(self, params)
    ____exports.hearts(nil, params)
end
--- Alias for the "redHearts" command.
function ____exports.rh(self, params)
    ____exports.redHearts(nil, params)
end
--- Moves the player 0.5 units right. Provide a number to move a custom amount of units.
function ____exports.right(self, params)
    movePlayer(nil, params, Direction.RIGHT)
end
--- Logs information about the room to the "log.txt" file.
function ____exports.roomCommand(self)
    logRoom()
    printConsole(nil, "Logged room information to the \"log.txt\" file.")
end
--- Gives a rotten heart. Provide a number to give a custom amount of hearts. (You can use negative
-- numbers to remove hearts.)
function ____exports.rottenHearts(self, params)
    addHeart(nil, params, HealthType.ROTTEN)
end
--- Alias for the "stage" command.
-- 
-- For example:
-- - s 3 - Warps to Caves 1.
-- - s 1c - Warps to Downpour 1.
function ____exports.s(self, params)
    if params == "" then
        printConsole(nil, "You must specify a stage number.")
        return
    end
    local finalCharacter = string.sub(params, -1)
    local stageString
    local stageTypeLetter
    if finalCharacter == "a" or finalCharacter == "b" or finalCharacter == "c" or finalCharacter == "d" then
        stageString = __TS__StringSlice(params, 0, #params - 1)
        stageTypeLetter = finalCharacter
    else
        stageString = params
        stageTypeLetter = ""
    end
    local stage = tonumber(stageString)
    if stage == nil then
        printConsole(
            nil,
            "That is an invalid stage number: " .. tostring(stage)
        )
        return
    end
    if stage < FIRST_STAGE or stage > LAST_STAGE then
        printConsole(
            nil,
            ((("Invalid stage number; must be between " .. tostring(FIRST_STAGE)) .. " and ") .. tostring(LAST_STAGE)) .. "."
        )
        return
    end
    Isaac.ExecuteCommand(("stage " .. tostring(stage)) .. stageTypeLetter)
end
--- Warps to the first Sacrifice Room on the floor.
function ____exports.sacrifice(self)
    warpToRoomType(nil, RoomType.SACRIFICE)
end
--- Warps to the first Secret Room on the floor.
function ____exports.secret(self)
    warpToRoomType(nil, RoomType.SECRET)
end
--- Changes to a seeded run, using the seed of the current run.
function ____exports.seedStick(self)
    local seeds = game:GetSeeds()
    local startSeedString = seeds:GetStartSeedString()
    Isaac.ExecuteCommand("seed " .. startSeedString)
end
--- Logs all of the current run's seed effects to the "log.txt" file.
function ____exports.seedsCommand(self)
    logSeedEffects()
    printConsole(nil, "Logged the seed effects to the \"log.txt\" file.")
end
--- Sets a charge to the player's specified active item. You must provide the active slot number and
-- the number of charges to set.
function ____exports.setCharges(self, params)
    if params == "" then
        printConsole(nil, "You must specify a slot number and a charge amount. (Use 0 for the primary slot, 1 for the Schoolbag slot, 2 for the pocket item slot, and 3 for the Dice Bag slot.)")
        return
    end
    local args = __TS__StringSplit(params, " ")
    if #args == 1 then
        printConsole(nil, "You must specify the amount of charge to set.")
        return
    end
    if #args ~= 2 then
        printConsole(nil, "That is an invalid amount of arguments.")
        return
    end
    local activeSlotString, chargeString = table.unpack(args)
    local activeSlot = tonumber(activeSlotString)
    if activeSlot == nil then
        printConsole(
            nil,
            "The provided slot number is invalid: " .. tostring(activeSlotString)
        )
        return
    end
    local activeSlots = getEnumValues(nil, ActiveSlot)
    if not __TS__ArrayIncludes(activeSlots, activeSlot) then
        printConsole(
            nil,
            "The provided slot number is invalid: " .. tostring(activeSlot)
        )
        return
    end
    local chargeNum = tonumber(chargeString)
    if chargeNum == nil then
        printConsole(
            nil,
            "The provided charge amount is invalid: " .. tostring(chargeString)
        )
        return
    end
    if chargeNum < 0 then
        printConsole(
            nil,
            "The provided charge amount is invalid: " .. tostring(chargeNum)
        )
        return
    end
    local player = Isaac.GetPlayer()
    player:SetActiveCharge(chargeNum, activeSlot)
end
--- Moves the first player to the specified position.
-- 
-- For example:
-- - setPosition 100 50
function ____exports.setPosition(self, params)
    if params == "" then
        printConsole(nil, "You must specify a position. (e.g. \"setPosition 100 50\")")
        return
    end
    local args = __TS__StringSplit(params, " ")
    if #args ~= 2 then
        printConsole(nil, "You must specify a position. (e.g. \"setPosition 100 50\")")
        return
    end
    local xString, yString = table.unpack(args)
    local x = tonumber(xString)
    if x == nil then
        printConsole(
            nil,
            "That is an invalid x value: " .. tostring(xString)
        )
        return
    end
    local y = tonumber(yString)
    if y == nil then
        printConsole(
            nil,
            "That is an invalid y value: " .. tostring(yString)
        )
        return
    end
    local player = Isaac.GetPlayer()
    local position = Vector(x, y)
    player.Position = position
end
--- Alias for the "soulHearts" command.
function ____exports.sh(self, params)
    ____exports.soulHearts(nil, params)
end
--- Warps to the first shop on the floor.
function ____exports.shop(self)
    warpToRoomType(nil, RoomType.SHOP)
end
--- Uses the Smelter to smelt the current player's trinket.
function ____exports.smelt(self)
    local player = Isaac.GetPlayer()
    useActiveItemTemp(nil, player, CollectibleType.SMELTER)
end
--- Gives a soul charge. This only affects Tainted Bethany. Provide a number to give a custom amount
-- of charges. (You can use negative numbers to remove charges.)
function ____exports.soulCharges(self, params)
    local charges = 1
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of charges to add.")
            return
        end
        charges = num
    end
    local player = Isaac.GetPlayer()
    player:AddSoulCharge(charges)
end
--- Logs all of the currently playing sound effects to the "log.txt" file.
function ____exports.sounds(self)
    logSounds()
    printConsole(nil, "Logged the currently playing sound effects to the \"log.txt\" file.")
end
--- Toggles spamming Blood Rights on every frame. Useful for killing enemies very fast without using
-- "debug 10".
function ____exports.spam(self)
    v.run.spamBloodRights = not v.run.spamBloodRights
    printEnabled(nil, v.run.maxSpeed, "spamming Blood Rights")
end
--- Spawns a golden version of the specified trinket type.
function ____exports.spawnGoldenTrinket(self, params)
    if params == "" then
        printConsole(nil, "You must specify the number corresponding to the trinket type.")
        return
    end
    local trinketType = tonumber(params)
    if trinketType == nil then
        printConsole(nil, "That is an invalid trinket type: " .. params)
        return
    end
    local goldenTrinketType = getGoldenTrinketType(nil, trinketType)
    local room = game:GetRoom()
    local centerPos = room:GetCenterPos()
    spawnTrinket(nil, goldenTrinketType, centerPos)
end
--- Toggles maximum movement speed and flight.
function ____exports.speed(self)
    local player = Isaac.GetPlayer()
    v.run.maxSpeed = not v.run.maxSpeed
    if v.run.maxSpeed and not player.CanFly then
        local numEternalHearts = player:GetEternalHearts()
        if numEternalHearts == 0 then
            player:AddCollectible(CollectibleType.FATE)
            player:AddEternalHearts(-1)
        else
            player:AddEternalHearts(-1)
            player:AddCollectible(CollectibleType.FATE)
        end
    end
    player:AddCacheFlags(CacheFlag.SPEED)
    player:EvaluateItems()
    printEnabled(nil, v.run.maxSpeed, "max speed")
end
--- Warps to the first Super Secret Room on the floor.
function ____exports.superSecret(self)
    warpToRoomType(nil, RoomType.SUPER_SECRET)
end
--- Toggles extremely high tears stat (e.g. fire rate), equivalent of that to soy milk.
function ____exports.tears(self)
    v.run.maxTears = not v.run.maxTears
    local player = Isaac.GetPlayer()
    player:AddCacheFlags(CacheFlag.FIRE_DELAY)
    player:EvaluateItems()
    printEnabled(nil, v.run.maxDamage, "debug tear-rate")
end
--- Creates a trapdoor next to the player.
function ____exports.trapdoorCommand(self)
    spawnTrapdoorOrCrawlSpace(nil, true)
end
--- Warps to the first Treasure Room on the floor.
function ____exports.treasure(self)
    warpToRoomType(nil, RoomType.TREASURE)
end
--- Warps to the first Ultra Secret Room on the floor.
function ____exports.ultraSecret(self)
    warpToRoomType(nil, RoomType.ULTRA_SECRET)
end
--- Moves the player 0.5 units up. Provide a number to move a custom amount of units.
function ____exports.up(self, params)
    movePlayer(nil, params, Direction.UP)
end
--- Warps to the specified room type. Accepts either the room type number or the partial name of the
-- room type.
-- 
-- For example:
-- - warp 5 - Warps to the first Boss Room on the floor, if any.
-- - warp tr - Warps to the first Treasure Room on the floor, if any.
function ____exports.warp(self, params)
    if params == "" then
        printConsole(nil, "You must specify a room type name or number.")
        return
    end
    local roomType
    local num = tonumber(params)
    if num == nil then
        local match = getMapPartialMatch(nil, params, ROOM_TYPE_MAP)
        if match == nil then
            printConsole(nil, "Unknown room type: " .. params)
            return
        end
        roomType = match[2]
    else
        if num < FIRST_ROOM_TYPE or num > LAST_ROOM_TYPE then
            printConsole(
                nil,
                "Invalid room type: " .. tostring(num)
            )
            return
        end
        roomType = num
    end
    warpToRoomType(nil, roomType)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.cards"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local Set = ____lualib.Set
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local initCardObjects, CARD_TYPE_TO_CARDS_MAP, CARD_SET
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Card = ____isaac_2Dtypescript_2Ddefinitions.Card
local ItemConfigCardType = ____isaac_2Dtypescript_2Ddefinitions.ItemConfigCardType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local itemConfig = ____cachedClasses.itemConfig
local ____constantsFirstLast = require("lua_modules.isaacscript-common.constantsFirstLast")
local FIRST_CARD = ____constantsFirstLast.FIRST_CARD
local FIRST_MODDED_CARD = ____constantsFirstLast.FIRST_MODDED_CARD
local LAST_CARD = ____constantsFirstLast.LAST_CARD
local MAX_VANILLA_CARD = ____constantsFirstLast.MAX_VANILLA_CARD
local ____cardDescriptions = require("lua_modules.isaacscript-common.objects.cardDescriptions")
local CARD_DESCRIPTIONS = ____cardDescriptions.CARD_DESCRIPTIONS
local DEFAULT_CARD_DESCRIPTION = ____cardDescriptions.DEFAULT_CARD_DESCRIPTION
local ____cardNames = require("lua_modules.isaacscript-common.objects.cardNames")
local CARD_NAMES = ____cardNames.CARD_NAMES
local DEFAULT_CARD_NAME = ____cardNames.DEFAULT_CARD_NAME
local ____cardTypes = require("lua_modules.isaacscript-common.objects.cardTypes")
local CARD_TYPES = ____cardTypes.CARD_TYPES
local DEFAULT_CARD_TYPE = ____cardTypes.DEFAULT_CARD_TYPE
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local getRandomSeed = ____rng.getRandomSeed
local ____set = require("lua_modules.isaacscript-common.functions.set")
local addSetsToSet = ____set.addSetsToSet
local getRandomSetElement = ____set.getRandomSetElement
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local irange = ____utils.irange
function initCardObjects(self)
    for ____, cardType in ipairs(getEnumValues(nil, ItemConfigCardType)) do
        CARD_TYPE_TO_CARDS_MAP:set(
            cardType,
            __TS__New(Set)
        )
    end
    for ____, card in ipairs(____exports.getAllCards(nil)) do
        local cardType = ____exports.getCardType(nil, card)
        local cardTypeSet = CARD_TYPE_TO_CARDS_MAP:get(cardType)
        if cardTypeSet == nil then
            error("Failed to get the card set for card type: " .. tostring(cardType))
        end
        cardTypeSet:add(card)
    end
    local cards = ____exports.getCardsOfType(
        nil,
        ItemConfigCardType.TAROT,
        ItemConfigCardType.SUIT,
        ItemConfigCardType.SPECIAL,
        ItemConfigCardType.TAROT_REVERSE
    )
    addSetsToSet(nil, CARD_SET, cards)
end
--- Helper function to get an array with every valid card sub-type. This includes modded cards.
function ____exports.getAllCards(self)
    return irange(nil, FIRST_CARD, LAST_CARD)
end
function ____exports.getCardType(self, card)
    local cardType = CARD_TYPES[card]
    return cardType == nil and DEFAULT_CARD_TYPE or cardType
end
--- Helper function to get a set of cards matching the type. Also see the `CardType` enum.
-- 
-- This function is variadic, meaning that you can you can specify N card types to get a set
-- containing cards that match any of the specified types.
function ____exports.getCardsOfType(self, ...)
    local cardTypes = {...}
    if CARD_TYPE_TO_CARDS_MAP.size == 0 then
        initCardObjects(nil)
    end
    local matchingCards = __TS__New(Set)
    for ____, cardType in ipairs(cardTypes) do
        local cardSet = CARD_TYPE_TO_CARDS_MAP:get(cardType)
        if cardSet == nil then
            error("Failed to get the cards for type: " .. tostring(cardType))
        end
        for ____, card in __TS__Iterator(cardSet:values()) do
            matchingCards:add(card)
        end
    end
    return matchingCards
end
CARD_TYPE_TO_CARDS_MAP = __TS__New(Map)
CARD_SET = __TS__New(Set)
--- Helper function to get a card description from a Card enum value.
-- 
-- For example:
-- 
-- ```ts
-- const card = Card.FOOL;
-- const cardDescription = getCardDescription(card); // cardDescription is "Where journey begins"
-- ```
function ____exports.getCardDescription(self, card)
    local cardDescription = CARD_DESCRIPTIONS[card]
    if cardDescription ~= nil then
        return cardDescription
    end
    local itemConfigCard = itemConfig:GetCard(card)
    if itemConfigCard ~= nil then
        return itemConfigCard.Description
    end
    return DEFAULT_CARD_DESCRIPTION
end
--- Helper function to get a card name from a Card.
-- 
-- For example:
-- 
-- ```ts
-- const card = Card.FOOL;
-- const cardName = getCardName(card); // cardName is "0 - The Fool"
-- ```
function ____exports.getCardName(self, card)
    local cardName = CARD_NAMES[card]
    if cardName ~= nil then
        return cardName
    end
    local itemConfigCard = itemConfig:GetCard(card)
    if itemConfigCard ~= nil then
        return itemConfigCard.Name
    end
    return DEFAULT_CARD_NAME
end
--- Helper function to get an array with every modded card sub-type.
-- 
-- Returns an empty array if there are no modded cards.
function ____exports.getModdedCards(self)
    if MAX_VANILLA_CARD == LAST_CARD then
        return {}
    end
    return irange(nil, FIRST_MODDED_CARD, LAST_CARD)
end
--- Has an equal chance of returning any card (e.g. Fool, Reverse Fool, Wild Card, etc.).
-- 
-- This will not return:
-- - any runes
-- - any objects like Dice Shard
-- - any modded cards (since there is not a way to distinguish between modded cards and modded
--   runes/objects)
-- 
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
-- @param exceptions Optional. An array of cards to not select.
function ____exports.getRandomCard(self, seedOrRNG, exceptions)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if exceptions == nil then
        exceptions = {}
    end
    return getRandomSetElement(nil, CARD_SET, seedOrRNG, exceptions)
end
---
-- @param cardType The card type that represents the pool of cards to select from.
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
-- @param exceptions Optional. An array of cards to not select.
function ____exports.getRandomCardOfType(self, cardType, seedOrRNG, exceptions)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if exceptions == nil then
        exceptions = {}
    end
    local cardSet = ____exports.getCardsOfType(nil, cardType)
    return getRandomSetElement(nil, cardSet, seedOrRNG, exceptions)
end
--- Has an equal chance of returning any rune (e.g. Rune of Hagalaz, Blank Rune, Black Rune, Soul of
-- Isaac, etc.). This will never return a Rune Shard.
-- 
-- @param seedOrRNG Optional. The `Seed` or `RNG` object to use. If an `RNG` object is provided, the
-- `RNG.Next` method will be called. Default is `getRandomSeed()`.
-- @param exceptions Optional. An array of runes to not select.
function ____exports.getRandomRune(self, seedOrRNG, exceptions)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if exceptions == nil then
        exceptions = {}
    end
    local runesSet = ____exports.getCardsOfType(nil, ItemConfigCardType.RUNE)
    runesSet:delete(Card.RUNE_SHARD)
    return getRandomSetElement(nil, runesSet, seedOrRNG, exceptions)
end
--- Helper function to get an array with every valid vanilla card sub-type.
function ____exports.getVanillaCards(self)
    return irange(nil, FIRST_CARD, MAX_VANILLA_CARD)
end
--- Returns true for cards that have the following card type:
-- - CardType.TAROT
-- - CardType.SUIT
-- - CardType.SPECIAL
-- - CardType.TAROT_REVERSE
function ____exports.isCard(self, card)
    return CARD_SET:has(card)
end
--- Returns whether or not the given card matches the specified card type.
function ____exports.isCardType(self, card, cardType)
    return cardType == ____exports.getCardType(nil, card)
end
--- Returns true for cards that have `CardType.MODDED`.
function ____exports.isModdedCard(self, card)
    return ____exports.isCardType(nil, card, ItemConfigCardType.MODDED)
end
--- Returns true for cards that have `CardType.SPECIAL_OBJECT`.
function ____exports.isPocketItemObject(self, card)
    return ____exports.isCardType(nil, card, ItemConfigCardType.SPECIAL_OBJECT)
end
--- Returns true for cards that have `CardType.TAROT_REVERSE`.
function ____exports.isReverseTarotCard(self, card)
    return ____exports.isCardType(nil, card, ItemConfigCardType.TAROT_REVERSE)
end
--- Returns true for cards that have `CardType.RUNE`.
function ____exports.isRune(self, card)
    return ____exports.isCardType(nil, card, ItemConfigCardType.RUNE)
end
--- Returns true for cards that have `CardType.SPECIAL`.
function ____exports.isSpecialCard(self, card)
    return ____exports.isCardType(nil, card, ItemConfigCardType.SPECIAL)
end
--- Returns true for cards that have `CardType.SUIT`.
function ____exports.isSuitCard(self, card)
    return ____exports.isCardType(nil, card, ItemConfigCardType.SUIT)
end
--- Returns true for cards that have `CardType.TAROT`.
function ____exports.isTarotCard(self, card)
    return ____exports.isCardType(nil, card, ItemConfigCardType.TAROT)
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.cardDescriptions"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Card = ____isaac_2Dtypescript_2Ddefinitions.Card
____exports.DEFAULT_CARD_DESCRIPTION = "Unknown"
____exports.CARD_DESCRIPTIONS = {
    [Card.NULL] = ____exports.DEFAULT_CARD_DESCRIPTION,
    [Card.FOOL] = "Where journey begins",
    [Card.MAGICIAN] = "May you never miss your goal",
    [Card.HIGH_PRIESTESS] = "Mother is watching you",
    [Card.EMPRESS] = "May your rage bring power",
    [Card.EMPEROR] = "Challenge me!",
    [Card.HIEROPHANT] = "Two prayers for the lost",
    [Card.LOVERS] = "May you prosper and be in good health",
    [Card.CHARIOT] = "May nothing stand before you",
    [Card.JUSTICE] = "May your future become balanced",
    [Card.HERMIT] = "May you see what life has to offer",
    [Card.WHEEL_OF_FORTUNE] = "Spin the wheel of destiny",
    [Card.STRENGTH] = "May your power bring rage",
    [Card.HANGED_MAN] = "May you find enlightenment ",
    [Card.DEATH] = "Lay waste to all that oppose you ",
    [Card.TEMPERANCE] = "May you be pure in heart",
    [Card.DEVIL] = "Revel in the power of darkness",
    [Card.TOWER] = "Destruction brings creation",
    [Card.STARS] = "May you find what you desire ",
    [Card.MOON] = "May you find all you have lost",
    [Card.SUN] = "May the light heal and enlighten you",
    [Card.JUDGEMENT] = "Judge lest ye be judged",
    [Card.WORLD] = "Open your eyes and see",
    [Card.CLUBS_2] = "Item multiplier",
    [Card.DIAMONDS_2] = "Item multiplier",
    [Card.SPADES_2] = "Item multiplier",
    [Card.HEARTS_2] = "Item multiplier",
    [Card.ACE_OF_CLUBS] = "Convert all",
    [Card.ACE_OF_DIAMONDS] = "Convert all",
    [Card.ACE_OF_SPADES] = "Convert all",
    [Card.ACE_OF_HEARTS] = "Convert all",
    [Card.JOKER] = "???",
    [Card.RUNE_HAGALAZ] = "Destruction",
    [Card.RUNE_JERA] = "Abundance",
    [Card.RUNE_EHWAZ] = "Passage",
    [Card.RUNE_DAGAZ] = "Purity",
    [Card.RUNE_ANSUZ] = "Vision",
    [Card.RUNE_PERTHRO] = "Change",
    [Card.RUNE_BERKANO] = "Companionship",
    [Card.RUNE_ALGIZ] = "Resistance",
    [Card.RUNE_BLANK] = "???",
    [Card.RUNE_BLACK] = "Void",
    [Card.CHAOS] = "???",
    [Card.CREDIT] = "Charge it!",
    [Card.RULES] = "???",
    [Card.AGAINST_HUMANITY] = "Something stinks...",
    [Card.SUICIDE_KING] = "A true ending?",
    [Card.GET_OUT_OF_JAIL_FREE] = "Open Sesame",
    [Card.QUESTION_MARK] = "Double active",
    [Card.DICE_SHARD] = "D6 + D20",
    [Card.EMERGENCY_CONTACT] = "Help from above",
    [Card.HOLY] = "You feel protected",
    [Card.HUGE_GROWTH] = "Become immense!",
    [Card.ANCIENT_RECALL] = "Draw 3 cards",
    [Card.ERA_WALK] = "Savor the moment",
    [Card.RUNE_SHARD] = "It still glows faintly",
    [Card.REVERSE_FOOL] = "Let go and move on",
    [Card.REVERSE_MAGICIAN] = "May no harm come to you",
    [Card.REVERSE_HIGH_PRIESTESS] = "Run",
    [Card.REVERSE_EMPRESS] = "May your love bring protection",
    [Card.REVERSE_EMPEROR] = "May you find a worthy opponent",
    [Card.REVERSE_HIEROPHANT] = "Two prayers for the forgotten",
    [Card.REVERSE_LOVERS] = "May your heart shatter into pieces",
    [Card.REVERSE_CHARIOT] = "May nothing walk past you",
    [Card.REVERSE_JUSTICE] = "May your sins come back to torment you",
    [Card.REVERSE_HERMIT] = "May you see the value of all things in life",
    [Card.REVERSE_WHEEL_OF_FORTUNE] = "Throw the dice of fate",
    [Card.REVERSE_STRENGTH] = "May you break their resolve",
    [Card.REVERSE_HANGED_MAN] = "May your greed know no bounds",
    [Card.REVERSE_DEATH] = "May life spring forth from the fallen",
    [Card.REVERSE_TEMPERANCE] = "May your hunger be satiated",
    [Card.REVERSE_DEVIL] = "Bask in the light of your mercy",
    [Card.REVERSE_TOWER] = "Creation brings destruction",
    [Card.REVERSE_STARS] = "May your loss bring fortune",
    [Card.REVERSE_MOON] = "May you remember lost memories",
    [Card.REVERSE_SUN] = "May the darkness swallow all around you",
    [Card.REVERSE_JUDGEMENT] = "May you redeem those found wanting",
    [Card.REVERSE_WORLD] = "Step into the abyss",
    [Card.CRACKED_KEY] = "???",
    [Card.QUEEN_OF_HEARTS] = "<3",
    [Card.WILD] = "Again",
    [Card.SOUL_ISAAC] = "Reroll... or not",
    [Card.SOUL_MAGDALENE] = "Give me your love!",
    [Card.SOUL_CAIN] = "Opens the unopenable",
    [Card.SOUL_JUDAS] = "Right behind you",
    [Card.SOUL_BLUE_BABY] = "Chemical warfare",
    [Card.SOUL_EVE] = "Your very own murder",
    [Card.SOUL_SAMSON] = "Slay a thousand",
    [Card.SOUL_AZAZEL] = "Demon rage!",
    [Card.SOUL_LAZARUS] = "Life after death",
    [Card.SOUL_EDEN] = "Embrace chaos",
    [Card.SOUL_LOST] = "Leave your body behind",
    [Card.SOUL_LILITH] = "Motherhood",
    [Card.SOUL_KEEPER] = "$$$",
    [Card.SOUL_APOLLYON] = "Bringer of calamity",
    [Card.SOUL_FORGOTTEN] = "Skeletal protector",
    [Card.SOUL_BETHANY] = "Friends from beyond",
    [Card.SOUL_JACOB] = "Bound by blood"
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.cardNames"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Card = ____isaac_2Dtypescript_2Ddefinitions.Card
____exports.DEFAULT_CARD_NAME = "Unknown"
____exports.CARD_NAMES = {
    [Card.NULL] = ____exports.DEFAULT_CARD_NAME,
    [Card.FOOL] = "0 - The Fool",
    [Card.MAGICIAN] = "I - The Magician",
    [Card.HIGH_PRIESTESS] = "II - The High Priestess",
    [Card.EMPRESS] = "III - The Empress",
    [Card.EMPEROR] = "IV - The Emperor",
    [Card.HIEROPHANT] = "V - The Hierophant",
    [Card.LOVERS] = "VI - The Lovers",
    [Card.CHARIOT] = "VII - The Chariot",
    [Card.JUSTICE] = "VIII - Justice",
    [Card.HERMIT] = "IX - The Hermit",
    [Card.WHEEL_OF_FORTUNE] = "X - Wheel of Fortune",
    [Card.STRENGTH] = "XI - Strength",
    [Card.HANGED_MAN] = "XII - The Hanged Man",
    [Card.DEATH] = "XIII - Death",
    [Card.TEMPERANCE] = "XIV - Temperance",
    [Card.DEVIL] = "XV - The Devil",
    [Card.TOWER] = "XVI - The Tower",
    [Card.STARS] = "XVII - The Stars",
    [Card.MOON] = "XVIII - The Moon",
    [Card.SUN] = "XIX - The Sun",
    [Card.JUDGEMENT] = "XX - Judgement",
    [Card.WORLD] = "XXI - The World",
    [Card.CLUBS_2] = "2 of Clubs",
    [Card.DIAMONDS_2] = "2 of Diamonds",
    [Card.SPADES_2] = "2 of Spades",
    [Card.HEARTS_2] = "2 of Hearts",
    [Card.ACE_OF_CLUBS] = "Ace of Clubs",
    [Card.ACE_OF_DIAMONDS] = "Ace of Diamonds",
    [Card.ACE_OF_SPADES] = "Ace of Spades",
    [Card.ACE_OF_HEARTS] = "Ace of Hearts",
    [Card.JOKER] = "Joker",
    [Card.RUNE_HAGALAZ] = "Hagalaz",
    [Card.RUNE_JERA] = "Jera",
    [Card.RUNE_EHWAZ] = "Ehwaz",
    [Card.RUNE_DAGAZ] = "Dagaz",
    [Card.RUNE_ANSUZ] = "Ansuz",
    [Card.RUNE_PERTHRO] = "Perthro",
    [Card.RUNE_BERKANO] = "Berkano",
    [Card.RUNE_ALGIZ] = "Algiz",
    [Card.RUNE_BLANK] = "Blank Rune",
    [Card.RUNE_BLACK] = "Black Rune",
    [Card.CHAOS] = "Chaos Card",
    [Card.CREDIT] = "Credit Card",
    [Card.RULES] = "Rules Card",
    [Card.AGAINST_HUMANITY] = "A Card Against Humanity",
    [Card.SUICIDE_KING] = "Suicide King",
    [Card.GET_OUT_OF_JAIL_FREE] = "Get Out Of Jail Free Card",
    [Card.QUESTION_MARK] = "? Card",
    [Card.DICE_SHARD] = "Dice Shard",
    [Card.EMERGENCY_CONTACT] = "Emergency Contact",
    [Card.HOLY] = "Holy Card",
    [Card.HUGE_GROWTH] = "Huge Growth",
    [Card.ANCIENT_RECALL] = "Ancient Recall",
    [Card.ERA_WALK] = "Era Walk",
    [Card.RUNE_SHARD] = "Rune Shard",
    [Card.REVERSE_FOOL] = "0 - The Fool?",
    [Card.REVERSE_MAGICIAN] = "I - The Magician?",
    [Card.REVERSE_HIGH_PRIESTESS] = "II - The High Priestess?",
    [Card.REVERSE_EMPRESS] = "III - The Empress?",
    [Card.REVERSE_EMPEROR] = "IV - The Emperor?",
    [Card.REVERSE_HIEROPHANT] = "V - The Hierophant?",
    [Card.REVERSE_LOVERS] = "VI - The Lovers?",
    [Card.REVERSE_CHARIOT] = "VII - The Chariot?",
    [Card.REVERSE_JUSTICE] = "VIII - Justice?",
    [Card.REVERSE_HERMIT] = "IX - The Hermit?",
    [Card.REVERSE_WHEEL_OF_FORTUNE] = "X - Wheel of Fortune?",
    [Card.REVERSE_STRENGTH] = "XI - Strength?",
    [Card.REVERSE_HANGED_MAN] = "XII - The Hanged Man?",
    [Card.REVERSE_DEATH] = "XIII - Death?",
    [Card.REVERSE_TEMPERANCE] = "XIV - Temperance?",
    [Card.REVERSE_DEVIL] = "XV - The Devil?",
    [Card.REVERSE_TOWER] = "XVI - The Tower?",
    [Card.REVERSE_STARS] = "XVII - The Stars?",
    [Card.REVERSE_MOON] = "XVIII - The Moon?",
    [Card.REVERSE_SUN] = "XIX - The Sun?",
    [Card.REVERSE_JUDGEMENT] = "XX - Judgement?",
    [Card.REVERSE_WORLD] = "XXI - The World?",
    [Card.CRACKED_KEY] = "Cracked Key",
    [Card.QUEEN_OF_HEARTS] = "Queen of Hearts",
    [Card.WILD] = "Wild Card",
    [Card.SOUL_ISAAC] = "Soul of Isaac",
    [Card.SOUL_MAGDALENE] = "Soul of Magdalene",
    [Card.SOUL_CAIN] = "Soul of Cain",
    [Card.SOUL_JUDAS] = "Soul of Judas",
    [Card.SOUL_BLUE_BABY] = "Soul of ???",
    [Card.SOUL_EVE] = "Soul of Eve",
    [Card.SOUL_SAMSON] = "Soul of Samson",
    [Card.SOUL_AZAZEL] = "Soul of Azazel",
    [Card.SOUL_LAZARUS] = "Soul of Lazarus",
    [Card.SOUL_EDEN] = "Soul of Eden",
    [Card.SOUL_LOST] = "Soul of the Lost",
    [Card.SOUL_LILITH] = "Soul of Lilith",
    [Card.SOUL_KEEPER] = "Soul of the Keeper",
    [Card.SOUL_APOLLYON] = "Soul of Apollyon",
    [Card.SOUL_FORGOTTEN] = "Soul of the Forgotten",
    [Card.SOUL_BETHANY] = "Soul of Bethany",
    [Card.SOUL_JACOB] = "Soul of Jacob and Esau"
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.cardTypes"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Card = ____isaac_2Dtypescript_2Ddefinitions.Card
local ItemConfigCardType = ____isaac_2Dtypescript_2Ddefinitions.ItemConfigCardType
____exports.DEFAULT_CARD_TYPE = ItemConfigCardType.MODDED
____exports.CARD_TYPES = {
    [Card.NULL] = ItemConfigCardType.NULL,
    [Card.FOOL] = ItemConfigCardType.TAROT,
    [Card.MAGICIAN] = ItemConfigCardType.TAROT,
    [Card.HIGH_PRIESTESS] = ItemConfigCardType.TAROT,
    [Card.EMPRESS] = ItemConfigCardType.TAROT,
    [Card.EMPEROR] = ItemConfigCardType.TAROT,
    [Card.HIEROPHANT] = ItemConfigCardType.TAROT,
    [Card.LOVERS] = ItemConfigCardType.TAROT,
    [Card.CHARIOT] = ItemConfigCardType.TAROT,
    [Card.JUSTICE] = ItemConfigCardType.TAROT,
    [Card.HERMIT] = ItemConfigCardType.TAROT,
    [Card.WHEEL_OF_FORTUNE] = ItemConfigCardType.TAROT,
    [Card.STRENGTH] = ItemConfigCardType.TAROT,
    [Card.HANGED_MAN] = ItemConfigCardType.TAROT,
    [Card.DEATH] = ItemConfigCardType.TAROT,
    [Card.TEMPERANCE] = ItemConfigCardType.TAROT,
    [Card.DEVIL] = ItemConfigCardType.TAROT,
    [Card.TOWER] = ItemConfigCardType.TAROT,
    [Card.STARS] = ItemConfigCardType.TAROT,
    [Card.MOON] = ItemConfigCardType.TAROT,
    [Card.SUN] = ItemConfigCardType.TAROT,
    [Card.JUDGEMENT] = ItemConfigCardType.TAROT,
    [Card.WORLD] = ItemConfigCardType.TAROT,
    [Card.CLUBS_2] = ItemConfigCardType.SUIT,
    [Card.DIAMONDS_2] = ItemConfigCardType.SUIT,
    [Card.SPADES_2] = ItemConfigCardType.SUIT,
    [Card.HEARTS_2] = ItemConfigCardType.SUIT,
    [Card.ACE_OF_CLUBS] = ItemConfigCardType.SUIT,
    [Card.ACE_OF_DIAMONDS] = ItemConfigCardType.SUIT,
    [Card.ACE_OF_SPADES] = ItemConfigCardType.SUIT,
    [Card.ACE_OF_HEARTS] = ItemConfigCardType.SUIT,
    [Card.JOKER] = ItemConfigCardType.SUIT,
    [Card.RUNE_HAGALAZ] = ItemConfigCardType.RUNE,
    [Card.RUNE_JERA] = ItemConfigCardType.RUNE,
    [Card.RUNE_EHWAZ] = ItemConfigCardType.RUNE,
    [Card.RUNE_DAGAZ] = ItemConfigCardType.RUNE,
    [Card.RUNE_ANSUZ] = ItemConfigCardType.RUNE,
    [Card.RUNE_PERTHRO] = ItemConfigCardType.RUNE,
    [Card.RUNE_BERKANO] = ItemConfigCardType.RUNE,
    [Card.RUNE_ALGIZ] = ItemConfigCardType.RUNE,
    [Card.RUNE_BLANK] = ItemConfigCardType.RUNE,
    [Card.RUNE_BLACK] = ItemConfigCardType.RUNE,
    [Card.CHAOS] = ItemConfigCardType.SPECIAL,
    [Card.CREDIT] = ItemConfigCardType.SPECIAL,
    [Card.RULES] = ItemConfigCardType.SPECIAL,
    [Card.AGAINST_HUMANITY] = ItemConfigCardType.SPECIAL,
    [Card.SUICIDE_KING] = ItemConfigCardType.SPECIAL,
    [Card.GET_OUT_OF_JAIL_FREE] = ItemConfigCardType.SPECIAL,
    [Card.QUESTION_MARK] = ItemConfigCardType.SPECIAL,
    [Card.DICE_SHARD] = ItemConfigCardType.SPECIAL_OBJECT,
    [Card.EMERGENCY_CONTACT] = ItemConfigCardType.SPECIAL_OBJECT,
    [Card.HOLY] = ItemConfigCardType.SPECIAL,
    [Card.HUGE_GROWTH] = ItemConfigCardType.SPECIAL,
    [Card.ANCIENT_RECALL] = ItemConfigCardType.SPECIAL,
    [Card.ERA_WALK] = ItemConfigCardType.SPECIAL,
    [Card.RUNE_SHARD] = ItemConfigCardType.RUNE,
    [Card.REVERSE_FOOL] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_MAGICIAN] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_HIGH_PRIESTESS] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_EMPRESS] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_EMPEROR] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_HIEROPHANT] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_LOVERS] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_CHARIOT] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_JUSTICE] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_HERMIT] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_WHEEL_OF_FORTUNE] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_STRENGTH] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_HANGED_MAN] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_DEATH] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_TEMPERANCE] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_DEVIL] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_TOWER] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_STARS] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_MOON] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_SUN] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_JUDGEMENT] = ItemConfigCardType.TAROT_REVERSE,
    [Card.REVERSE_WORLD] = ItemConfigCardType.TAROT_REVERSE,
    [Card.CRACKED_KEY] = ItemConfigCardType.SPECIAL_OBJECT,
    [Card.QUEEN_OF_HEARTS] = ItemConfigCardType.SUIT,
    [Card.WILD] = ItemConfigCardType.SPECIAL,
    [Card.SOUL_ISAAC] = ItemConfigCardType.RUNE,
    [Card.SOUL_MAGDALENE] = ItemConfigCardType.RUNE,
    [Card.SOUL_CAIN] = ItemConfigCardType.RUNE,
    [Card.SOUL_JUDAS] = ItemConfigCardType.RUNE,
    [Card.SOUL_BLUE_BABY] = ItemConfigCardType.RUNE,
    [Card.SOUL_EVE] = ItemConfigCardType.RUNE,
    [Card.SOUL_SAMSON] = ItemConfigCardType.RUNE,
    [Card.SOUL_AZAZEL] = ItemConfigCardType.RUNE,
    [Card.SOUL_LAZARUS] = ItemConfigCardType.RUNE,
    [Card.SOUL_EDEN] = ItemConfigCardType.RUNE,
    [Card.SOUL_LOST] = ItemConfigCardType.RUNE,
    [Card.SOUL_LILITH] = ItemConfigCardType.RUNE,
    [Card.SOUL_KEEPER] = ItemConfigCardType.RUNE,
    [Card.SOUL_APOLLYON] = ItemConfigCardType.RUNE,
    [Card.SOUL_FORGOTTEN] = ItemConfigCardType.RUNE,
    [Card.SOUL_BETHANY] = ItemConfigCardType.RUNE,
    [Card.SOUL_JACOB] = ItemConfigCardType.RUNE
}
return ____exports
 end,
["lua_modules.isaacscript-common.functions.pills"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArraySlice = ____lualib.__TS__ArraySlice
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PillColor = ____isaac_2Dtypescript_2Ddefinitions.PillColor
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local itemConfig = ____cachedClasses.itemConfig
local ____constantsFirstLast = require("lua_modules.isaacscript-common.constantsFirstLast")
local FIRST_HORSE_PILL_COLOR = ____constantsFirstLast.FIRST_HORSE_PILL_COLOR
local FIRST_MODDED_PILL_EFFECT = ____constantsFirstLast.FIRST_MODDED_PILL_EFFECT
local FIRST_PILL_COLOR = ____constantsFirstLast.FIRST_PILL_COLOR
local FIRST_PILL_EFFECT = ____constantsFirstLast.FIRST_PILL_EFFECT
local LAST_HORSE_PILL_COLOR = ____constantsFirstLast.LAST_HORSE_PILL_COLOR
local LAST_NORMAL_PILL_COLOR = ____constantsFirstLast.LAST_NORMAL_PILL_COLOR
local LAST_PILL_EFFECT = ____constantsFirstLast.LAST_PILL_EFFECT
local LAST_VANILLA_PILL_EFFECT = ____constantsFirstLast.LAST_VANILLA_PILL_EFFECT
local ____falsePHDPillConversions = require("lua_modules.isaacscript-common.maps.falsePHDPillConversions")
local FALSE_PHD_PILL_CONVERSIONS = ____falsePHDPillConversions.FALSE_PHD_PILL_CONVERSIONS
local ____PHDPillConversions = require("lua_modules.isaacscript-common.maps.PHDPillConversions")
local PHD_PILL_CONVERSIONS = ____PHDPillConversions.PHD_PILL_CONVERSIONS
local ____pillEffectClasses = require("lua_modules.isaacscript-common.objects.pillEffectClasses")
local DEFAULT_PILL_EFFECT_CLASS = ____pillEffectClasses.DEFAULT_PILL_EFFECT_CLASS
local PILL_EFFECT_CLASSES = ____pillEffectClasses.PILL_EFFECT_CLASSES
local ____pillEffectNames = require("lua_modules.isaacscript-common.objects.pillEffectNames")
local DEFAULT_PILL_EFFECT_NAME = ____pillEffectNames.DEFAULT_PILL_EFFECT_NAME
local PILL_EFFECT_NAMES = ____pillEffectNames.PILL_EFFECT_NAMES
local ____pillEffectTypes = require("lua_modules.isaacscript-common.objects.pillEffectTypes")
local DEFAULT_PILL_EFFECT_TYPE = ____pillEffectTypes.DEFAULT_PILL_EFFECT_TYPE
local PILL_EFFECT_TYPES = ____pillEffectTypes.PILL_EFFECT_TYPES
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local irange = ____utils.irange
--- Add this to a `PillColor` to get the corresponding giant pill color.
-- 
-- Corresponds to the vanilla `PillColor.GIANT_FLAG` value.
-- 
-- 1 << 11
local HORSE_PILL_ADJUSTMENT = 2048
--- Helper function to get an array with every non-null pill color. This includes all gold colors and
-- all horse colors.
function ____exports.getAllPillColors(self)
    local pillColors = getEnumValues(nil, PillColor)
    __TS__ArraySlice(pillColors)
    return pillColors
end
--- Helper function to get an array with every valid pill effect. This includes modded pill effects.
function ____exports.getAllPillEffects(self)
    return irange(nil, FIRST_PILL_EFFECT, LAST_PILL_EFFECT)
end
--- Helper function to get the associated pill effect after False PHD is acquired. If a pill effect
-- is not altered by False PHD, then the same pill effect will be returned.
function ____exports.getFalsePHDPillEffect(self, pillEffect)
    local convertedPillEffect = FALSE_PHD_PILL_CONVERSIONS:get(pillEffect)
    return convertedPillEffect == nil and pillEffect or convertedPillEffect
end
--- Helper function to get the corresponding horse pill color from a normal pill color.
-- 
-- For example, passing `PillColor.BLUE_BLUE` would result in 2049, which is the value that
-- corresponds to the horse pill color for blue/blue.
function ____exports.getHorsePillColor(self, pillColor)
    return pillColor + HORSE_PILL_ADJUSTMENT
end
--- Helper function to get an array with every non-gold horse pill color.
function ____exports.getHorsePillColors(self)
    return irange(nil, FIRST_HORSE_PILL_COLOR, LAST_HORSE_PILL_COLOR)
end
--- Helper function to get an array with every modded pill effect.
-- 
-- Returns an empty array if there are no modded pill effects.
function ____exports.getModdedPillEffects(self)
    if LAST_VANILLA_PILL_EFFECT == LAST_PILL_EFFECT then
        return {}
    end
    return irange(nil, FIRST_MODDED_PILL_EFFECT, LAST_PILL_EFFECT)
end
--- Helper function to get the corresponding normal pill color from a horse pill color.
-- 
-- For example, passing 2049 would result in `PillColor.BLUE_BLUE`.
-- 
-- If called with a non-horse pill color, this function will return back the same color.
function ____exports.getNormalPillColorFromHorse(self, pillColor)
    local normalPillColor = pillColor - HORSE_PILL_ADJUSTMENT
    return normalPillColor > PillColor.NULL and normalPillColor or pillColor
end
--- Helper function to get an array with every non-gold and non-horse pill color.
function ____exports.getNormalPillColors(self)
    return irange(nil, FIRST_PILL_COLOR, LAST_NORMAL_PILL_COLOR)
end
--- Helper function to get the associated pill effect after PHD is acquired. If a pill effect is not
-- altered by PHD, then the same pill effect will be returned.
function ____exports.getPHDPillEffect(self, pillEffect)
    local convertedPillEffect = PHD_PILL_CONVERSIONS:get(pillEffect)
    return convertedPillEffect == nil and pillEffect or convertedPillEffect
end
--- Helper function to get a pill effect class from a PillEffect enum value. In this context, the
-- class is equal to the numerical prefix in the "class" tag in the "pocketitems.xml" file. Use the
-- `getPillEffectType` helper function to determine whether or not the pill effect is positive,
-- negative, or neutral.
-- 
-- Due to limitations in the API, this function will not work properly for modded pill effects, and
-- will always return `DEFAULT_PILL_EFFECT_CLASS` in those cases.
function ____exports.getPillEffectClass(self, pillEffect)
    local pillEffectClass = PILL_EFFECT_CLASSES[pillEffect]
    return pillEffectClass == nil and DEFAULT_PILL_EFFECT_CLASS or pillEffectClass
end
--- Helper function to get a pill effect name from a PillEffect enum value.
-- 
-- For example:
-- 
-- ```ts
-- const pillEffect = PillEffect.BAD_GAS;
-- const pillEffectName = getPillEffectName(pillEffect); // trinketName is "Bad Gas"
-- ```
function ____exports.getPillEffectName(self, pillEffect)
    local pillEffectName = PILL_EFFECT_NAMES[pillEffect]
    if pillEffectName ~= nil then
        return pillEffectName
    end
    local itemConfigPillEffect = itemConfig:GetPillEffect(pillEffect)
    if itemConfigPillEffect ~= nil then
        return itemConfigPillEffect.Name
    end
    return DEFAULT_PILL_EFFECT_NAME
end
--- Helper function to get a pill effect type from a PillEffect enum value. In this context, the type
-- is equal to positive, negative, or neutral. This is derived from the suffix of the the "class"
-- tag in the "pocketitems.xml" file. Use the `getPillEffectClass` helper function to determine the
-- "power" of the pill.
-- 
-- Due to limitations in the API, this function will not work properly for modded pill effects, and
-- will always return `DEFAULT_PILL_EFFECT_TYPE` in those cases.
function ____exports.getPillEffectType(self, pillEffect)
    local pillEffectClass = PILL_EFFECT_TYPES[pillEffect]
    return pillEffectClass == nil and DEFAULT_PILL_EFFECT_TYPE or pillEffectClass
end
--- Helper function to get an array with every vanilla pill effect.
function ____exports.getVanillaPillEffects(self)
    return irange(nil, FIRST_PILL_EFFECT, LAST_VANILLA_PILL_EFFECT)
end
function ____exports.isHorsePill(self, pillColor)
    return pillColor > HORSE_PILL_ADJUSTMENT
end
return ____exports
 end,
["lua_modules.isaacscript-common.maps.falsePHDPillConversions"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PillEffect = ____isaac_2Dtypescript_2Ddefinitions.PillEffect
____exports.FALSE_PHD_PILL_CONVERSIONS = __TS__New(Map, {
    {PillEffect.BAD_GAS, PillEffect.HEALTH_DOWN},
    {PillEffect.BALLS_OF_STEEL, PillEffect.BAD_TRIP},
    {PillEffect.BOMBS_ARE_KEYS, PillEffect.TEARS_DOWN},
    {PillEffect.EXPLOSIVE_DIARRHEA, PillEffect.RANGE_DOWN},
    {PillEffect.FULL_HEALTH, PillEffect.BAD_TRIP},
    {PillEffect.HEALTH_UP, PillEffect.HEALTH_DOWN},
    {PillEffect.PRETTY_FLY, PillEffect.LUCK_DOWN},
    {PillEffect.RANGE_UP, PillEffect.RANGE_DOWN},
    {PillEffect.SPEED_UP, PillEffect.SPEED_DOWN},
    {PillEffect.TEARS_UP, PillEffect.TEARS_DOWN},
    {PillEffect.LUCK_UP, PillEffect.LUCK_DOWN},
    {PillEffect.TELEPILLS, PillEffect.QUESTION_MARKS},
    {PillEffect.FORTY_EIGHT_HOUR_ENERGY, PillEffect.SPEED_DOWN},
    {PillEffect.HEMATEMESIS, PillEffect.BAD_TRIP},
    {PillEffect.I_CAN_SEE_FOREVER, PillEffect.AMNESIA},
    {PillEffect.PHEROMONES, PillEffect.PARALYSIS},
    {PillEffect.LEMON_PARTY, PillEffect.AMNESIA},
    {PillEffect.PERCS, PillEffect.ADDICTED},
    {PillEffect.ONE_MAKES_YOU_LARGER, PillEffect.RANGE_DOWN},
    {PillEffect.ONE_MAKES_YOU_SMALL, PillEffect.SPEED_DOWN},
    {PillEffect.INFESTED_EXCLAMATION, PillEffect.TEARS_DOWN},
    {PillEffect.INFESTED_QUESTION, PillEffect.LUCK_DOWN},
    {PillEffect.POWER, PillEffect.R_U_A_WIZARD},
    {PillEffect.FRIENDS_TILL_THE_END, PillEffect.HEALTH_DOWN},
    {PillEffect.SOMETHINGS_WRONG, PillEffect.X_LAX},
    {PillEffect.IM_DROWSY, PillEffect.IM_EXCITED},
    {PillEffect.GULP, PillEffect.HORF},
    {PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE, PillEffect.RETRO_VISION},
    {PillEffect.VURP, PillEffect.HORF},
    {PillEffect.SHOT_SPEED_UP, PillEffect.SHOT_SPEED_DOWN}
})
return ____exports
 end,
["lua_modules.isaacscript-common.maps.PHDPillConversions"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PillEffect = ____isaac_2Dtypescript_2Ddefinitions.PillEffect
____exports.PHD_PILL_CONVERSIONS = __TS__New(Map, {
    {PillEffect.BAD_TRIP, PillEffect.BALLS_OF_STEEL},
    {PillEffect.HEALTH_DOWN, PillEffect.HEALTH_UP},
    {PillEffect.RANGE_DOWN, PillEffect.RANGE_UP},
    {PillEffect.SPEED_DOWN, PillEffect.SPEED_UP},
    {PillEffect.TEARS_DOWN, PillEffect.TEARS_UP},
    {PillEffect.LUCK_DOWN, PillEffect.LUCK_UP},
    {PillEffect.PARALYSIS, PillEffect.PHEROMONES},
    {PillEffect.AMNESIA, PillEffect.I_CAN_SEE_FOREVER},
    {PillEffect.R_U_A_WIZARD, PillEffect.POWER},
    {PillEffect.ADDICTED, PillEffect.PERCS},
    {PillEffect.QUESTION_MARKS, PillEffect.TELEPILLS},
    {PillEffect.RETRO_VISION, PillEffect.I_CAN_SEE_FOREVER},
    {PillEffect.X_LAX, PillEffect.SOMETHINGS_WRONG},
    {PillEffect.IM_EXCITED, PillEffect.IM_DROWSY},
    {PillEffect.HORF, PillEffect.GULP},
    {PillEffect.SHOT_SPEED_DOWN, PillEffect.SHOT_SPEED_UP}
})
return ____exports
 end,
["lua_modules.isaacscript-common.objects.pillEffectClasses"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ItemConfigPillEffectClass = ____isaac_2Dtypescript_2Ddefinitions.ItemConfigPillEffectClass
local PillEffect = ____isaac_2Dtypescript_2Ddefinitions.PillEffect
____exports.DEFAULT_PILL_EFFECT_CLASS = ItemConfigPillEffectClass.MODDED
____exports.PILL_EFFECT_CLASSES = {
    [PillEffect.BAD_GAS] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.BAD_TRIP] = ItemConfigPillEffectClass.MEDIUM,
    [PillEffect.BALLS_OF_STEEL] = ItemConfigPillEffectClass.MEDIUM,
    [PillEffect.BOMBS_ARE_KEYS] = ItemConfigPillEffectClass.MEDIUM,
    [PillEffect.EXPLOSIVE_DIARRHEA] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.FULL_HEALTH] = ItemConfigPillEffectClass.MEDIUM,
    [PillEffect.HEALTH_DOWN] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.HEALTH_UP] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.I_FOUND_PILLS] = ItemConfigPillEffectClass.JOKE,
    [PillEffect.PUBERTY] = ItemConfigPillEffectClass.JOKE,
    [PillEffect.PRETTY_FLY] = ItemConfigPillEffectClass.MEDIUM,
    [PillEffect.RANGE_DOWN] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.RANGE_UP] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.SPEED_DOWN] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.SPEED_UP] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.TEARS_DOWN] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.TEARS_UP] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.LUCK_DOWN] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.LUCK_UP] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.TELEPILLS] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.FORTY_EIGHT_HOUR_ENERGY] = ItemConfigPillEffectClass.MEDIUM,
    [PillEffect.HEMATEMESIS] = ItemConfigPillEffectClass.MEDIUM,
    [PillEffect.PARALYSIS] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.I_CAN_SEE_FOREVER] = ItemConfigPillEffectClass.MEDIUM,
    [PillEffect.PHEROMONES] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.AMNESIA] = ItemConfigPillEffectClass.MEDIUM,
    [PillEffect.LEMON_PARTY] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.R_U_A_WIZARD] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.PERCS] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.ADDICTED] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.RELAX] = ItemConfigPillEffectClass.JOKE,
    [PillEffect.QUESTION_MARKS] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.ONE_MAKES_YOU_LARGER] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.ONE_MAKES_YOU_SMALL] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.INFESTED_EXCLAMATION] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.INFESTED_QUESTION] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.POWER] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.RETRO_VISION] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.FRIENDS_TILL_THE_END] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.X_LAX] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.SOMETHINGS_WRONG] = ItemConfigPillEffectClass.JOKE,
    [PillEffect.IM_DROWSY] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.IM_EXCITED] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.GULP] = ItemConfigPillEffectClass.MEDIUM,
    [PillEffect.HORF] = ItemConfigPillEffectClass.JOKE,
    [PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE] = ItemConfigPillEffectClass.MINOR,
    [PillEffect.VURP] = ItemConfigPillEffectClass.MEDIUM,
    [PillEffect.SHOT_SPEED_DOWN] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.SHOT_SPEED_UP] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.EXPERIMENTAL] = ItemConfigPillEffectClass.MAJOR,
    [PillEffect.EXPERIMENTAL] = ItemConfigPillEffectClass.MAJOR
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.pillEffectNames"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PillEffect = ____isaac_2Dtypescript_2Ddefinitions.PillEffect
____exports.DEFAULT_PILL_EFFECT_NAME = "Unknown"
____exports.PILL_EFFECT_NAMES = {
    [PillEffect.BAD_GAS] = "Bad Gas",
    [PillEffect.BAD_TRIP] = "Bad Trip",
    [PillEffect.BALLS_OF_STEEL] = "Balls of Steel",
    [PillEffect.BOMBS_ARE_KEYS] = "Bombs Are Key",
    [PillEffect.EXPLOSIVE_DIARRHEA] = "Explosive Diarrhea",
    [PillEffect.FULL_HEALTH] = "Full Health",
    [PillEffect.HEALTH_DOWN] = "Health Down",
    [PillEffect.HEALTH_UP] = "Health Up",
    [PillEffect.I_FOUND_PILLS] = "I Found Pills",
    [PillEffect.PUBERTY] = "Puberty",
    [PillEffect.PRETTY_FLY] = "Pretty Fly",
    [PillEffect.RANGE_DOWN] = "Range Down",
    [PillEffect.RANGE_UP] = "Range Up",
    [PillEffect.SPEED_DOWN] = "Speed Down",
    [PillEffect.SPEED_UP] = "Speed Up",
    [PillEffect.TEARS_DOWN] = "Tears Down",
    [PillEffect.TEARS_UP] = "Tears Up",
    [PillEffect.LUCK_DOWN] = "Luck Down",
    [PillEffect.LUCK_UP] = "Luck Up",
    [PillEffect.TELEPILLS] = "Telepills",
    [PillEffect.FORTY_EIGHT_HOUR_ENERGY] = "48 Hour Energy",
    [PillEffect.HEMATEMESIS] = "Hematemesis",
    [PillEffect.PARALYSIS] = "Paralysis",
    [PillEffect.I_CAN_SEE_FOREVER] = "I can see forever!",
    [PillEffect.PHEROMONES] = "Pheromones",
    [PillEffect.AMNESIA] = "Amnesia",
    [PillEffect.LEMON_PARTY] = "Lemon Party",
    [PillEffect.R_U_A_WIZARD] = "R U a Wizard?",
    [PillEffect.PERCS] = "Percs!",
    [PillEffect.ADDICTED] = "Addicted!",
    [PillEffect.RELAX] = "Re-Lax",
    [PillEffect.QUESTION_MARKS] = "???",
    [PillEffect.ONE_MAKES_YOU_LARGER] = "One makes you larger",
    [PillEffect.ONE_MAKES_YOU_SMALL] = "One makes you small",
    [PillEffect.INFESTED_EXCLAMATION] = "Infested!",
    [PillEffect.INFESTED_QUESTION] = "Infested?",
    [PillEffect.POWER] = "Power Pill!",
    [PillEffect.RETRO_VISION] = "Retro Vision",
    [PillEffect.FRIENDS_TILL_THE_END] = "Friends Till The End!",
    [PillEffect.X_LAX] = "X-Lax",
    [PillEffect.SOMETHINGS_WRONG] = "Something's wrong...",
    [PillEffect.IM_DROWSY] = "I'm Drowsy...",
    [PillEffect.IM_EXCITED] = "I'm Excited!!!",
    [PillEffect.GULP] = "Gulp!",
    [PillEffect.HORF] = "Horf!",
    [PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE] = "Feels like I'm walking on sunshine!",
    [PillEffect.VURP] = "Vurp!",
    [PillEffect.SHOT_SPEED_DOWN] = "Shot Speed Down",
    [PillEffect.SHOT_SPEED_UP] = "Shot Speed Up",
    [PillEffect.EXPERIMENTAL] = "Experimental Pill"
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.pillEffectTypes"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ItemConfigPillEffectType = ____isaac_2Dtypescript_2Ddefinitions.ItemConfigPillEffectType
local PillEffect = ____isaac_2Dtypescript_2Ddefinitions.PillEffect
____exports.DEFAULT_PILL_EFFECT_TYPE = ItemConfigPillEffectType.MODDED
____exports.PILL_EFFECT_TYPES = {
    [PillEffect.BAD_GAS] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.BAD_TRIP] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.BALLS_OF_STEEL] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.BOMBS_ARE_KEYS] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.EXPLOSIVE_DIARRHEA] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.FULL_HEALTH] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.HEALTH_DOWN] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.HEALTH_UP] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.I_FOUND_PILLS] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.PUBERTY] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.PRETTY_FLY] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.RANGE_DOWN] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.RANGE_UP] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.SPEED_DOWN] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.SPEED_UP] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.TEARS_DOWN] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.TEARS_UP] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.LUCK_DOWN] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.LUCK_UP] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.TELEPILLS] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.FORTY_EIGHT_HOUR_ENERGY] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.HEMATEMESIS] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.PARALYSIS] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.I_CAN_SEE_FOREVER] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.PHEROMONES] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.AMNESIA] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.LEMON_PARTY] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.R_U_A_WIZARD] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.PERCS] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.ADDICTED] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.RELAX] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.QUESTION_MARKS] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.ONE_MAKES_YOU_LARGER] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.ONE_MAKES_YOU_SMALL] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.INFESTED_EXCLAMATION] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.INFESTED_QUESTION] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.POWER] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.RETRO_VISION] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.FRIENDS_TILL_THE_END] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.X_LAX] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.SOMETHINGS_WRONG] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.IM_DROWSY] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.IM_EXCITED] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.GULP] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.HORF] = ItemConfigPillEffectType.NEUTRAL,
    [PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.VURP] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.SHOT_SPEED_DOWN] = ItemConfigPillEffectType.NEGATIVE,
    [PillEffect.SHOT_SPEED_UP] = ItemConfigPillEffectType.POSITIVE,
    [PillEffect.EXPERIMENTAL] = ItemConfigPillEffectType.NEUTRAL
}
return ____exports
 end,
["lua_modules.isaacscript-common.functions.run"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Challenge = ____isaac_2Dtypescript_2Ddefinitions.Challenge
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____constantsFirstLast = require("lua_modules.isaacscript-common.constantsFirstLast")
local FIRST_CHARACTER = ____constantsFirstLast.FIRST_CHARACTER
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
--- Whether or not the player is playing on a set seed (i.e. that they entered in a specific seed by
-- pressing tab on the character selection screen). When the player resets the game on a set seed,
-- the game will not switch to a different seed.
function ____exports.onSetSeed(self)
    local seeds = game:GetSeeds()
    local customRun = seeds:IsCustomRun()
    local challenge = Isaac.GetChallenge()
    return challenge == Challenge.NULL and customRun
end
--- Helper function to restart the run using the console command of "restart". If the player is
-- playing a seeded run, then it will restart the game to the beginning of the seed. Otherwise, it
-- will put the player on a run with an entirely new seed.
-- 
-- You can optionally specify a `PlayerType` to restart the game as that character.
function ____exports.restart(self, character)
    if character == nil then
        log("Restarting.")
        Isaac.ExecuteCommand("restart")
        return
    end
    if character < FIRST_CHARACTER then
        error(("Restarting as a character of " .. tostring(character)) .. " would crash the game.")
    end
    log("Restarting as character: " .. tostring(character))
    Isaac.ExecuteCommand("restart " .. tostring(character))
end
return ____exports
 end,
["lua_modules.isaacscript-common.maps.cardMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Card = ____isaac_2Dtypescript_2Ddefinitions.Card
--- Maps card names to card sub-types.
____exports.CARD_MAP = __TS__New(Map, {
    {"fool", Card.FOOL},
    {"magician", Card.MAGICIAN},
    {"mag", Card.MAGICIAN},
    {"highPriestess", Card.HIGH_PRIESTESS},
    {"priestess", Card.HIGH_PRIESTESS},
    {"priest", Card.HIGH_PRIESTESS},
    {"hp", Card.HIGH_PRIESTESS},
    {"empress", Card.EMPRESS},
    {"emperor", Card.EMPEROR},
    {"emp", Card.EMPEROR},
    {"hierophant", Card.HIEROPHANT},
    {"hi", Card.HIEROPHANT},
    {"lovers", Card.LOVERS},
    {"chariot", Card.CHARIOT},
    {"justice", Card.JUSTICE},
    {"hermit", Card.HERMIT},
    {"wheelOfFortune", Card.WHEEL_OF_FORTUNE},
    {"wheel", Card.WHEEL_OF_FORTUNE},
    {"fortune", Card.WHEEL_OF_FORTUNE},
    {"strength", Card.STRENGTH},
    {"str", Card.STRENGTH},
    {"hangedMan", Card.HANGED_MAN},
    {"hanged", Card.HANGED_MAN},
    {"death", Card.DEATH},
    {"temperance", Card.TEMPERANCE},
    {"devil", Card.DEVIL},
    {"tower", Card.TOWER},
    {"stars", Card.STARS},
    {"moon", Card.MOON},
    {"sun", Card.SUN},
    {"judgement", Card.JUDGEMENT},
    {"judge", Card.JUDGEMENT},
    {"world", Card.WORLD},
    {"2OfClubs", Card.CLUBS_2},
    {"2Clubs", Card.CLUBS_2},
    {"2OfDiamonds", Card.DIAMONDS_2},
    {"2Diamonds", Card.DIAMONDS_2},
    {"2OfSpades", Card.SPADES_2},
    {"2Spades", Card.SPADES_2},
    {"2OfHearts", Card.HEARTS_2},
    {"2Hearts", Card.HEARTS_2},
    {"aceOfClubs", Card.ACE_OF_CLUBS},
    {"aceClubs", Card.ACE_OF_CLUBS},
    {"aceOfDiamonds", Card.ACE_OF_DIAMONDS},
    {"aceDiamonds", Card.ACE_OF_DIAMONDS},
    {"aceOfSpades", Card.ACE_OF_SPADES},
    {"aceSpades", Card.ACE_OF_SPADES},
    {"aceOfHearts", Card.ACE_OF_HEARTS},
    {"aceHearts", Card.ACE_OF_HEARTS},
    {"joker", Card.JOKER},
    {"hagalaz", Card.RUNE_HAGALAZ},
    {"destruction", Card.RUNE_HAGALAZ},
    {"jera", Card.RUNE_JERA},
    {"abundance", Card.RUNE_JERA},
    {"ehwaz", Card.RUNE_EHWAZ},
    {"passage", Card.RUNE_EHWAZ},
    {"dagaz", Card.RUNE_DAGAZ},
    {"purity", Card.RUNE_DAGAZ},
    {"ansuz", Card.RUNE_ANSUZ},
    {"vision", Card.RUNE_ANSUZ},
    {"perthro", Card.RUNE_PERTHRO},
    {"change", Card.RUNE_PERTHRO},
    {"berkano", Card.RUNE_BERKANO},
    {"companionship", Card.RUNE_BERKANO},
    {"algiz", Card.RUNE_ALGIZ},
    {"resistance", Card.RUNE_ALGIZ},
    {"shield", Card.RUNE_ALGIZ},
    {"blank", Card.RUNE_BLANK},
    {"black", Card.RUNE_BLACK},
    {"chaos", Card.CHAOS},
    {"credit", Card.CREDIT},
    {"rules", Card.RULES},
    {"againstHumanity", Card.AGAINST_HUMANITY},
    {"humanity", Card.AGAINST_HUMANITY},
    {"suicideKing", Card.SUICIDE_KING},
    {"suicide", Card.SUICIDE_KING},
    {"getOutOfJailFree", Card.GET_OUT_OF_JAIL_FREE},
    {"jail", Card.GET_OUT_OF_JAIL_FREE},
    {"?", Card.QUESTION_MARK},
    {"diceShard", Card.DICE_SHARD},
    {"shard", Card.DICE_SHARD},
    {"emergencyContact", Card.EMERGENCY_CONTACT},
    {"contact", Card.EMERGENCY_CONTACT},
    {"holy", Card.HOLY},
    {"hugeGrowth", Card.HUGE_GROWTH},
    {"growth", Card.HUGE_GROWTH},
    {"ancientRecall", Card.ANCIENT_RECALL},
    {"recall", Card.ANCIENT_RECALL},
    {"eraWalk", Card.ERA_WALK},
    {"walk", Card.ERA_WALK},
    {"runeShard", Card.RUNE_SHARD},
    {"shard", Card.RUNE_SHARD},
    {"fool?", Card.REVERSE_FOOL},
    {"magician?", Card.REVERSE_MAGICIAN},
    {"magi?", Card.REVERSE_MAGICIAN},
    {"mag?", Card.REVERSE_MAGICIAN},
    {"highPriestess?", Card.REVERSE_HIGH_PRIESTESS},
    {"high?", Card.REVERSE_HIGH_PRIESTESS},
    {"hi?", Card.REVERSE_HIGH_PRIESTESS},
    {"priestess?", Card.REVERSE_HIGH_PRIESTESS},
    {"priest?", Card.REVERSE_HIGH_PRIESTESS},
    {"hp?", Card.REVERSE_HIGH_PRIESTESS},
    {"empress?", Card.REVERSE_EMPRESS},
    {"emperor?", Card.REVERSE_EMPEROR},
    {"emp?", Card.REVERSE_EMPEROR},
    {"hierophant?", Card.REVERSE_HIEROPHANT},
    {"hiero?", Card.REVERSE_HIEROPHANT},
    {"lovers?", Card.REVERSE_LOVERS},
    {"chariot?", Card.REVERSE_CHARIOT},
    {"justice?", Card.REVERSE_JUSTICE},
    {"hermit?", Card.REVERSE_HERMIT},
    {"wheelOfFortune?", Card.REVERSE_WHEEL_OF_FORTUNE},
    {"wheel?", Card.REVERSE_WHEEL_OF_FORTUNE},
    {"fortune?", Card.REVERSE_WHEEL_OF_FORTUNE},
    {"strength?", Card.REVERSE_STRENGTH},
    {"str?", Card.REVERSE_STRENGTH},
    {"hangedMan?", Card.REVERSE_HANGED_MAN},
    {"hanged?", Card.REVERSE_HANGED_MAN},
    {"death?", Card.REVERSE_DEATH},
    {"temperance?", Card.REVERSE_TEMPERANCE},
    {"devil?", Card.REVERSE_DEVIL},
    {"tower?", Card.REVERSE_TOWER},
    {"stars?", Card.REVERSE_STARS},
    {"moon?", Card.REVERSE_MOON},
    {"sun?", Card.REVERSE_SUN},
    {"judgement?", Card.REVERSE_JUDGEMENT},
    {"judge?", Card.REVERSE_JUDGEMENT},
    {"world?", Card.REVERSE_WORLD},
    {"crackedKey", Card.CRACKED_KEY},
    {"key", Card.CRACKED_KEY},
    {"queenOfHearts", Card.QUEEN_OF_HEARTS},
    {"queenHearts", Card.QUEEN_OF_HEARTS},
    {"wildcard", Card.WILD},
    {"soulOfIsaac", Card.SOUL_ISAAC},
    {"soulIsaac", Card.SOUL_ISAAC},
    {"isaac", Card.SOUL_ISAAC},
    {"soulOfMagdalene", Card.SOUL_MAGDALENE},
    {"soulMagdalene", Card.SOUL_MAGDALENE},
    {"magdalene", Card.SOUL_MAGDALENE},
    {"soulOfCain", Card.SOUL_CAIN},
    {"soulCain", Card.SOUL_CAIN},
    {"cain", Card.SOUL_CAIN},
    {"soulOfJudas", Card.SOUL_JUDAS},
    {"soulJudas", Card.SOUL_JUDAS},
    {"judas", Card.SOUL_JUDAS},
    {"soulOf???", Card.SOUL_BLUE_BABY},
    {"soul???", Card.SOUL_BLUE_BABY},
    {"???", Card.SOUL_BLUE_BABY},
    {"soulOfBlueBaby", Card.SOUL_BLUE_BABY},
    {"soulBlueBaby", Card.SOUL_BLUE_BABY},
    {"blueBaby", Card.SOUL_BLUE_BABY},
    {"soulOfEve", Card.SOUL_EVE},
    {"soulEve", Card.SOUL_EVE},
    {"eve", Card.SOUL_EVE},
    {"soulOfSamson", Card.SOUL_SAMSON},
    {"soulSamson", Card.SOUL_SAMSON},
    {"samson", Card.SOUL_SAMSON},
    {"soulOfAzazel", Card.SOUL_AZAZEL},
    {"soulAzazel", Card.SOUL_AZAZEL},
    {"azazel", Card.SOUL_AZAZEL},
    {"soulOfLazarus", Card.SOUL_LAZARUS},
    {"soulLazarus", Card.SOUL_LAZARUS},
    {"lazarus", Card.SOUL_LAZARUS},
    {"soulOfEden", Card.SOUL_EDEN},
    {"soulEden", Card.SOUL_EDEN},
    {"eden", Card.SOUL_EDEN},
    {"soulOfTheLost", Card.SOUL_LOST},
    {"soulTheLost", Card.SOUL_LOST},
    {"theLost", Card.SOUL_LOST},
    {"soulOfLost", Card.SOUL_LOST},
    {"soulLost", Card.SOUL_LOST},
    {"lost", Card.SOUL_LOST},
    {"soulOfLilith", Card.SOUL_LILITH},
    {"soulLilith", Card.SOUL_LILITH},
    {"lilith", Card.SOUL_LILITH},
    {"soulOfTheKeeper", Card.SOUL_KEEPER},
    {"soulTheKeeper", Card.SOUL_KEEPER},
    {"theKeeper", Card.SOUL_KEEPER},
    {"soulOfKeeper", Card.SOUL_KEEPER},
    {"soulKeeper", Card.SOUL_KEEPER},
    {"keeper", Card.SOUL_KEEPER},
    {"soulOfApollyon", Card.SOUL_APOLLYON},
    {"soulApollyon", Card.SOUL_APOLLYON},
    {"apollyon", Card.SOUL_APOLLYON},
    {"soulOfTheForgotten", Card.SOUL_FORGOTTEN},
    {"soulTheForgotten", Card.SOUL_FORGOTTEN},
    {"theForgotten", Card.SOUL_FORGOTTEN},
    {"soulOfForgotten", Card.SOUL_FORGOTTEN},
    {"soulForgotten", Card.SOUL_FORGOTTEN},
    {"forgotten", Card.SOUL_FORGOTTEN},
    {"soulOfBethany", Card.SOUL_BETHANY},
    {"soulBethany", Card.SOUL_BETHANY},
    {"bethany", Card.SOUL_BETHANY},
    {"soulOfJacobAndEsau", Card.SOUL_JACOB},
    {"soulJacobAndEsau", Card.SOUL_JACOB},
    {"jacobAndEsau", Card.SOUL_JACOB},
    {"soulOfJacob&Esau", Card.SOUL_JACOB},
    {"soulJacob&Esau", Card.SOUL_JACOB},
    {"jacob&Esau", Card.SOUL_JACOB},
    {"soulOfJacob", Card.SOUL_JACOB},
    {"soulJacob", Card.SOUL_JACOB},
    {"jacob", Card.SOUL_JACOB}
})
return ____exports
 end,
["lua_modules.isaacscript-common.maps.characterMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
--- Maps character names to character sub-types.
____exports.CHARACTER_MAP = __TS__New(Map, {
    {"isaac", 0},
    {"magdalene", 1},
    {"maggy", 1},
    {"cain", 2},
    {"judas", 3},
    {"blueBaby", 4},
    {"bb", 4},
    {"eve", 5},
    {"samson", 6},
    {"azazel", 7},
    {"lazarus", 8},
    {"laz", 8},
    {"eden", 9},
    {"theLost", 10},
    {"lost", 10},
    {"lazarus2", 11},
    {"laz2", 11},
    {"darkJudas", 12},
    {"dJudas", 12},
    {"blackJudas", 12},
    {"bJudas", 12},
    {"lilith", 13},
    {"keeper", 14},
    {"apollyon", 15},
    {"theForgotten", 16},
    {"forgotten", 16},
    {"theSoul", 17},
    {"soul", 17},
    {"bethany", 18},
    {"jacob", 19},
    {"esau", 20},
    {"taintedIsaac", 21},
    {"tIsaac", 21},
    {"taintedMagdalene", 22},
    {"tMagdalene", 22},
    {"taintedMaggy", 22},
    {"tMaggy", 22},
    {"taintedCain", 23},
    {"tCain", 23},
    {"taintedJudas", 24},
    {"tJudas", 24},
    {"taintedBlueBaby", 25},
    {"tBlueBaby", 25},
    {"tbb", 25},
    {"taintedEve", 26},
    {"tEve", 26},
    {"taintedSamson", 27},
    {"tSamson", 27},
    {"taintedAzazel", 28},
    {"tAzazel", 28},
    {"taintedLazarus", 29},
    {"tLazarus", 29},
    {"taintedLaz", 29},
    {"tLaz", 29},
    {"taintedEden", 30},
    {"tEden", 30},
    {"taintedLost", 31},
    {"tLost", 31},
    {"taintedLilith", 32},
    {"tLilith", 32},
    {"taintedKeeper", 33},
    {"tKeeper", 33},
    {"taintedApollyon", 34},
    {"tApollyon", 34},
    {"taintedForgotten", 34},
    {"tForgotten", 35},
    {"taintedBethany", 36},
    {"tBethany", 36},
    {"taintedJacob", 37},
    {"tJacob", 37},
    {"taintedLazarusDead", 38},
    {"tLazarusDead", 38},
    {"taintedLazDead", 38},
    {"tLazDead", 38},
    {"deadTaintedLazarus", 38},
    {"deadTLazarus", 38},
    {"deadTaintedLaz", 38},
    {"deadTLaz", 38},
    {"taintedJacobGhost", 39},
    {"tJacobGhost", 39},
    {"taintedSoul", 40},
    {"tSoul", 40}
})
return ____exports
 end,
["lua_modules.isaacscript-common.maps.pillEffectMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PillEffect = ____isaac_2Dtypescript_2Ddefinitions.PillEffect
--- Maps pill effect names to the values of the `PillEffect` enum.
____exports.PILL_EFFECT_MAP = __TS__New(Map, {
    {"badGas", PillEffect.BAD_GAS},
    {"gas", PillEffect.BAD_GAS},
    {"badTrip", PillEffect.BAD_TRIP},
    {"trip", PillEffect.BAD_TRIP},
    {"ballsOfSteel", PillEffect.BALLS_OF_STEEL},
    {"ballsSteel", PillEffect.BALLS_OF_STEEL},
    {"steel", PillEffect.BALLS_OF_STEEL},
    {"bombsAreKey", PillEffect.BOMBS_ARE_KEYS},
    {"bombsKey", PillEffect.BOMBS_ARE_KEYS},
    {"key", PillEffect.BOMBS_ARE_KEYS},
    {"explosiveDiarrhea", PillEffect.EXPLOSIVE_DIARRHEA},
    {"diarrhea", PillEffect.EXPLOSIVE_DIARRHEA},
    {"fullHealth", PillEffect.FULL_HEALTH},
    {"healthDown", PillEffect.HEALTH_DOWN},
    {"healthUp", PillEffect.HEALTH_UP},
    {"iFoundPills", PillEffect.I_FOUND_PILLS},
    {"foundPills", PillEffect.I_FOUND_PILLS},
    {"pills", PillEffect.I_FOUND_PILLS},
    {"puberty", PillEffect.PUBERTY},
    {"prettyFly", PillEffect.PRETTY_FLY},
    {"fly", PillEffect.PRETTY_FLY},
    {"rangeDown", PillEffect.RANGE_DOWN},
    {"rangeUp", PillEffect.RANGE_UP},
    {"speedDown", PillEffect.SPEED_DOWN},
    {"speedUp", PillEffect.SPEED_UP},
    {"tearsDown", PillEffect.TEARS_DOWN},
    {"tearsUp", PillEffect.TEARS_UP},
    {"luckDown", PillEffect.LUCK_DOWN},
    {"luckUp", PillEffect.LUCK_UP},
    {"telepills", PillEffect.TELEPILLS},
    {"48HourEnergy", PillEffect.FORTY_EIGHT_HOUR_ENERGY},
    {"energy", PillEffect.FORTY_EIGHT_HOUR_ENERGY},
    {"48", PillEffect.FORTY_EIGHT_HOUR_ENERGY},
    {"hematemesis", PillEffect.HEMATEMESIS},
    {"paralysis", PillEffect.PARALYSIS},
    {"iCanSeeForever!", PillEffect.I_CAN_SEE_FOREVER},
    {"canSee", PillEffect.I_CAN_SEE_FOREVER},
    {"see", PillEffect.I_CAN_SEE_FOREVER},
    {"pheromones", PillEffect.PHEROMONES},
    {"amnesia", PillEffect.AMNESIA},
    {"lemonParty", PillEffect.LEMON_PARTY},
    {"party", PillEffect.LEMON_PARTY},
    {"RUAWizard", PillEffect.R_U_A_WIZARD},
    {"areYouAWizard", PillEffect.R_U_A_WIZARD},
    {"wizard", PillEffect.R_U_A_WIZARD},
    {"percs!", PillEffect.PERCS},
    {"addicted!", PillEffect.ADDICTED},
    {"relax", PillEffect.RELAX},
    {"???", PillEffect.QUESTION_MARKS},
    {"oneMakesYouLarger", PillEffect.ONE_MAKES_YOU_LARGER},
    {"larger", PillEffect.ONE_MAKES_YOU_LARGER},
    {"oneMakesYouSmaller", PillEffect.ONE_MAKES_YOU_SMALL},
    {"smaller", PillEffect.ONE_MAKES_YOU_SMALL},
    {"infested!", PillEffect.INFESTED_EXCLAMATION},
    {"infest!", PillEffect.INFESTED_EXCLAMATION},
    {"inf!", PillEffect.INFESTED_EXCLAMATION},
    {"infested?", PillEffect.INFESTED_QUESTION},
    {"infest?", PillEffect.INFESTED_QUESTION},
    {"inf?", PillEffect.INFESTED_QUESTION},
    {"powerPill", PillEffect.POWER},
    {"retroVision", PillEffect.RETRO_VISION},
    {"vision", PillEffect.RETRO_VISION},
    {"friendsTillTheEnd", PillEffect.FRIENDS_TILL_THE_END},
    {"friendsUntilTheEnd", PillEffect.FRIENDS_TILL_THE_END},
    {"xlax", PillEffect.X_LAX},
    {"somethingsWrong", PillEffect.SOMETHINGS_WRONG},
    {"wrong", PillEffect.SOMETHINGS_WRONG},
    {"imDrowsy", PillEffect.IM_DROWSY},
    {"drowsy", PillEffect.IM_DROWSY},
    {"imExcited!!!", PillEffect.IM_EXCITED},
    {"excited", PillEffect.IM_EXCITED},
    {"gulp!", PillEffect.GULP},
    {"horf!", PillEffect.HORF},
    {"feelsLikeImWalkingOnSunshine!", PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE},
    {"walking", PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE},
    {"sunshine", PillEffect.FEELS_LIKE_IM_WALKING_ON_SUNSHINE},
    {"vurp!", PillEffect.VURP},
    {"shotSpeedDown", PillEffect.SHOT_SPEED_DOWN},
    {"shotSpeedUp", PillEffect.SHOT_SPEED_UP},
    {"experimental", PillEffect.EXPERIMENTAL}
})
return ____exports
 end,
["lua_modules.isaacscript-common.maps.roomTypeMap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
--- Maps room type names to room types.
____exports.ROOM_TYPE_MAP = __TS__New(Map, {
    {"default", RoomType.DEFAULT},
    {"shop", RoomType.SHOP},
    {"error", RoomType.ERROR},
    {"iAmError", RoomType.ERROR},
    {"treasure", RoomType.TREASURE},
    {"boss", RoomType.BOSS},
    {"miniBoss", RoomType.MINI_BOSS},
    {"secret", RoomType.SECRET},
    {"superSecret", RoomType.SUPER_SECRET},
    {"arcade", RoomType.ARCADE},
    {"curse", RoomType.CURSE},
    {"challenge", RoomType.CHALLENGE},
    {"library", RoomType.LIBRARY},
    {"sacrifice", RoomType.SACRIFICE},
    {"devil", RoomType.DEVIL},
    {"angel", RoomType.ANGEL},
    {"dungeon", RoomType.DUNGEON},
    {"crawlSpace", RoomType.DUNGEON},
    {"bossRush", RoomType.BOSS_RUSH},
    {"isaacs", RoomType.CLEAN_BEDROOM},
    {"bedroom", RoomType.CLEAN_BEDROOM},
    {"cleanBedroom", RoomType.CLEAN_BEDROOM},
    {"dirtyBedroom", RoomType.DIRTY_BEDROOM},
    {"barren", RoomType.DIRTY_BEDROOM},
    {"chest", RoomType.CHEST},
    {"dice", RoomType.DICE},
    {"blackMarket", RoomType.BLACK_MARKET},
    {"greedExit", RoomType.GREED_EXIT},
    {"planetarium", RoomType.PLANETARIUM},
    {"teleporter", RoomType.TELEPORTER},
    {"teleporterExit", RoomType.TELEPORTER_EXIT},
    {"secretExit", RoomType.SECRET_EXIT},
    {"blue", RoomType.BLUE},
    {"ultraSecret", RoomType.ULTRA_SECRET}
})
return ____exports
 end,
["lua_modules.isaacscript-common.features.extraConsoleCommands.commandsSubroutines"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local GridEntityType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityType
local GridRoom = ____isaac_2Dtypescript_2Ddefinitions.GridRoom
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____HealthType = require("lua_modules.isaacscript-common.enums.HealthType")
local HealthType = ____HealthType.HealthType
local ____direction = require("lua_modules.isaacscript-common.functions.direction")
local directionToVector = ____direction.directionToVector
local ____gridEntity = require("lua_modules.isaacscript-common.functions.gridEntity")
local spawnGridWithVariant = ____gridEntity.spawnGridWithVariant
local ____log = require("lua_modules.isaacscript-common.functions.log")
local logEntities = ____log.logEntities
local logGridEntities = ____log.logGridEntities
local ____playerHealth = require("lua_modules.isaacscript-common.functions.playerHealth")
local addPlayerHealthType = ____playerHealth.addPlayerHealthType
local ____roomData = require("lua_modules.isaacscript-common.functions.roomData")
local getRoomData = ____roomData.getRoomData
local getRoomDescriptor = ____roomData.getRoomDescriptor
local ____rooms = require("lua_modules.isaacscript-common.functions.rooms")
local changeRoom = ____rooms.changeRoom
local getRoomGridIndexesForType = ____rooms.getRoomGridIndexesForType
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local printConsole = ____utils.printConsole
local ____roomTypeNames = require("lua_modules.isaacscript-common.objects.roomTypeNames")
local DEFAULT_ROOM_TYPE_NAME = ____roomTypeNames.DEFAULT_ROOM_TYPE_NAME
local ROOM_TYPE_NAMES = ____roomTypeNames.ROOM_TYPE_NAMES
local DEFAULT_MOVE_UNITS = 0.5
function ____exports.addHeart(self, params, healthType)
    local numHearts = healthType == HealthType.MAX_HEARTS and 2 or 1
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of hearts to add.")
            return
        end
        numHearts = num
    end
    local player = Isaac.GetPlayer()
    addPlayerHealthType(nil, player, healthType, numHearts)
end
function ____exports.devilAngel(self, useDevil)
    local level = game:GetLevel()
    local devilAngelRoomData = getRoomData(nil, GridRoom.DEVIL)
    if devilAngelRoomData ~= nil then
        local roomType = devilAngelRoomData.Type
        local conflictingType = useDevil and RoomType.ANGEL or RoomType.DEVIL
        if roomType == conflictingType then
            local roomDescriptor = getRoomDescriptor(nil, GridRoom.DEVIL)
            roomDescriptor.Data = nil
        end
    end
    if useDevil then
        level:InitializeDevilAngelRoom(false, true)
    else
        level:InitializeDevilAngelRoom(true, false)
    end
    changeRoom(nil, GridRoom.DEVIL)
end
function ____exports.listEntities(self, params, includeBackgroundEffects)
    local entityTypeFilter
    if params ~= "" then
        entityTypeFilter = tonumber(params)
        if entityTypeFilter == nil then
            printConsole(nil, "That is an invalid entity type to filter by.")
            return
        end
    end
    logEntities(includeBackgroundEffects, entityTypeFilter)
    printConsole(nil, "Logged the entities in the room to the \"log.txt\" file.")
end
function ____exports.listGridEntities(self, params, includeWalls)
    local gridEntityTypeFilter
    if params ~= "" then
        gridEntityTypeFilter = tonumber(params)
        if gridEntityTypeFilter == nil then
            printConsole(nil, "That is an invalid grid entity type to filter by.")
            return
        end
    end
    logGridEntities(includeWalls, gridEntityTypeFilter)
    printConsole(nil, "Logged the grid entities in the room to the \"log.txt\" file.")
end
function ____exports.movePlayer(self, params, direction)
    local amount = DEFAULT_MOVE_UNITS
    if params ~= "" then
        local num = tonumber(params)
        if num == nil then
            printConsole(nil, "That is an invalid amount of units to move.")
            return
        end
        amount = num
    end
    local player = Isaac.GetPlayer()
    local vector = directionToVector(nil, direction)
    local modifiedVector = vector * amount
    player.Position = player.Position + modifiedVector
end
function ____exports.spawnTrapdoorOrCrawlSpace(self, trapdoor)
    local room = game:GetRoom()
    local player = Isaac.GetPlayer()
    local position = room:FindFreeTilePosition(player.Position, 0)
    local gridIndex = room:GetGridIndex(position)
    local gridEntityType = trapdoor and GridEntityType.TRAPDOOR or GridEntityType.CRAWL_SPACE
    spawnGridWithVariant(nil, gridEntityType, 0, gridIndex)
end
function ____exports.warpToRoomType(self, roomType)
    local roomTypeName = ROOM_TYPE_NAMES[roomType]
    if roomTypeName == DEFAULT_ROOM_TYPE_NAME then
        printConsole(
            nil,
            "Invalid room type: " .. tostring(roomType)
        )
    end
    local gridIndexes = getRoomGridIndexesForType(nil, roomType)
    local firstGridIndex = gridIndexes[1]
    if firstGridIndex == nil then
        printConsole(nil, ("There are no " .. roomTypeName) .. "s on this floor.")
        return
    end
    changeRoom(nil, firstGridIndex)
    printConsole(
        nil,
        ((("Warped to room type: " .. roomTypeName) .. " (") .. tostring(roomType)) .. ")"
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.extraConsoleCommands.v"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local v = {persistent = {disableCurses = false}, run = {
    chaosCardTears = false,
    spamBloodRights = false,
    maxDamage = false,
    maxSpeed = false,
    maxTears = false
}}
____exports.default = v
--- The contents of the map are initialized in the "init.ts" file.
____exports.extraConsoleCommandsFunctionMap = __TS__New(Map)
--- Most `isaacscript-common` features are turned on via invoking the `upgradeMod` function. However,
-- this feature is turned on via invoking `enableExtraConsoleCommands`, so we need a separate method
-- to track whether it is initialized.
function ____exports.isExtraConsoleCommandsInitialized(self)
    return ____exports.extraConsoleCommandsFunctionMap.size > 0
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.fadeInRemover"] = function(...) 
local ____exports = {}
local postRender, shouldRemoveFadeIn, FADE_IN_SPEED, enabled, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function postRender(self)
    if not enabled then
        return
    end
    if shouldRemoveFadeIn(nil) then
        v.run.removedFadeIn = true
        game:Fadein(FADE_IN_SPEED)
    end
end
function shouldRemoveFadeIn(self)
    local gameFrameCount = game:GetFrameCount()
    return not v.run.removedFadeIn and gameFrameCount == 0
end
local FEATURE_NAME = "fadeInRemover"
FADE_IN_SPEED = 1
enabled = false
v = {run = {removedFadeIn = false}}
---
-- @internal
function ____exports.fadeInRemoverInit(self, mod)
    saveDataManager(
        nil,
        FEATURE_NAME,
        v,
        function() return false end
    )
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
--- Removes the fade-in that occurs at the beginning of a run. If this behavior is desired, call this
-- function once at the beginning of your mod.
-- 
-- This is useful for debugging, when you are resetting the game often.
-- 
-- You can restore the vanilla behavior with the `restoreFadeIn` function.
function ____exports.removeFadeIn(self)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    enabled = true
end
--- Disables the fade-in remover. Only useful if you have previously called the `removeFadeIn`
-- function.
function ____exports.restoreFadeIn(self)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    enabled = false
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.fastReset"] = function(...) 
local ____exports = {}
local postRender, checkResetInput, enabled
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ButtonAction = ____isaac_2Dtypescript_2Ddefinitions.ButtonAction
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____input = require("lua_modules.isaacscript-common.functions.input")
local isActionTriggeredOnAnyInput = ____input.isActionTriggeredOnAnyInput
local isModifierKeyPressed = ____input.isModifierKeyPressed
local ____run = require("lua_modules.isaacscript-common.functions.run")
local restart = ____run.restart
function postRender(self)
    if not enabled then
        return
    end
    checkResetInput(nil)
end
function checkResetInput(self)
    local isPaused = game:IsPaused()
    if isPaused then
        return
    end
    if AwaitingTextInput then
        return
    end
    if isModifierKeyPressed(nil) then
        return
    end
    if isActionTriggeredOnAnyInput(nil, ButtonAction.RESTART) then
        restart(nil)
    end
end
local FEATURE_NAME = "fastReset"
enabled = false
---
-- @internal
function ____exports.fastResetInit(self, mod)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
--- Enables the fast-reset feature, which allows you to restart the game instantaneously. If this
-- behavior is desired, call this function once at the beginning of your mod.
-- 
-- This is useful for debugging, when you are resetting the game often.
-- 
-- You can disable the fast-reset feature with the `disableFastReset` function.
function ____exports.enableFastReset(self)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    enabled = true
end
--- Disables the fast-reset feature. Only useful if you have previously called the `enableFastReset`
-- function.
function ____exports.disableFastReset(self)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    enabled = false
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.forgottenSwitch"] = function(...) 
local ____exports = {}
local isActionTriggered, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ButtonAction = ____isaac_2Dtypescript_2Ddefinitions.ButtonAction
local InputHook = ____isaac_2Dtypescript_2Ddefinitions.InputHook
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function isActionTriggered(self, _entity, _inputHook, buttonAction)
    if buttonAction == ButtonAction.DROP and v.run.shouldSwitch then
        v.run.shouldSwitch = false
        return true
    end
    return nil
end
local FEATURE_NAME = "forgottenSwitch"
v = {run = {shouldSwitch = false}}
---
-- @internal
function ____exports.forgottenSwitchInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallback(ModCallback.INPUT_ACTION, isActionTriggered, InputHook.IS_ACTION_TRIGGERED)
end
--- When used on The Forgotten, switches to The Soul. When used on The Soul, switches to The
-- Forgotten. This takes 1 game frame to take effect.
function ____exports.forgottenSwitch(self)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    v.run.shouldSwitch = true
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.persistentEntities"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local postEntityRemove, postNewRoomReordered, spawnAndTrack, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EntityFlag = ____isaac_2Dtypescript_2Ddefinitions.EntityFlag
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local spawn = ____entity.spawn
local ____roomData = require("lua_modules.isaacscript-common.functions.roomData")
local getRoomListIndex = ____roomData.getRoomListIndex
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function postEntityRemove(self, entity)
    local ptrHash = GetPtrHash(entity)
    local tuple = v.room.spawnedPersistentEntities:get(ptrHash)
    if tuple == nil then
        return
    end
    local index = tuple[1]
    local level = game:GetLevel()
    local previousRoomGridIndex = level:GetPreviousRoomIndex()
    local previousRoomListIndex = getRoomListIndex(nil, previousRoomGridIndex)
    v.level.persistentEntities:set(index, {
        entityType = entity.Type,
        variant = entity.Variant,
        subType = entity.SubType,
        roomListIndex = previousRoomListIndex,
        position = entity.Position
    })
end
function postNewRoomReordered(self)
    local roomListIndex = getRoomListIndex(nil)
    for ____, ____value in __TS__Iterator(v.level.persistentEntities:entries()) do
        local index = ____value[1]
        local description = ____value[2]
        do
            if roomListIndex ~= description.roomListIndex then
                goto __continue6
            end
            v.level.persistentEntities:delete(index)
            spawnAndTrack(
                nil,
                description.entityType,
                description.variant,
                description.subType,
                description.position,
                index,
                true
            )
        end
        ::__continue6::
    end
end
function spawnAndTrack(self, entityType, variant, subType, position, index, respawning)
    if respawning == nil then
        respawning = false
    end
    local entity = spawn(
        nil,
        entityType,
        variant,
        subType,
        position
    )
    if respawning then
        entity:ClearEntityFlags(EntityFlag.APPEAR)
    end
    local ptrHash = GetPtrHash(entity)
    local tuple = {
        index,
        EntityPtr(entity)
    }
    v.room.spawnedPersistentEntities:set(ptrHash, tuple)
    return entity
end
local FEATURE_NAME = "persistentEntities"
--- Iterates upward as new persistent entities are created.
local persistentEntityIndexCounter = 0
v = {
    level = {persistentEntities = __TS__New(Map)},
    room = {spawnedPersistentEntities = __TS__New(Map)}
}
---
-- @internal
function ____exports.persistentEntitiesInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallback(ModCallback.POST_ENTITY_REMOVE, postEntityRemove)
    mod:AddCallbackCustom(ModCallbackCustom.POST_NEW_ROOM_REORDERED, postNewRoomReordered)
end
--- Helper function to spawn an entity that will have persistence similar to a pickup.
-- 
-- By default, as soon as you leave a room, any spawned entities will be despawned and will not
-- return if the player revisits the room. This means that if you want to have an entity like a
-- pickup, you have to manually respawn it when the player re-enters the room. Use this helper
-- function to avoid having to do any tracking on your own.
-- 
-- Conventionally, the word "persistent" refers to `EntityFlag.FLAG_PERSISTENT`, which is used on
-- e.g. familiars to make them appear in every room. On the other hand, pickups are also persistent,
-- but they are not present in every room, only one specific room. This function spawns entities
-- like pickups, not familiars.
-- 
-- @returns A tuple containing the entity and the persistent entity index. You can use the index
-- with the `removePersistentEntity` function.
function ____exports.spawnPersistentEntity(self, entityType, variant, subType, position)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    persistentEntityIndexCounter = persistentEntityIndexCounter + 1
    local entity = spawnAndTrack(
        nil,
        entityType,
        variant,
        subType,
        position,
        persistentEntityIndexCounter
    )
    return {entity, persistentEntityIndexCounter}
end
--- Helper function to stop an entity spawned with the `spawnPersistentEntity` helper function from
-- respawning.
-- 
-- @param persistentEntityIndex The index that was returned by the `spawnPersistentEntity` function.
-- @param removeEntity Optional. True by default. Set to false if you want to stop an entity from
-- being persistent but you don't want to actually remove the currently-spawned
-- entity from the room.
function ____exports.removePersistentEntity(self, persistentEntityIndex, removeEntity)
    if removeEntity == nil then
        removeEntity = true
    end
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    v.level.persistentEntities:delete(persistentEntityIndex)
    for ____, ____value in __TS__Iterator(v.room.spawnedPersistentEntities:entries()) do
        local ptrHash = ____value[1]
        local tuple = ____value[2]
        do
            local index, entityPtr = table.unpack(tuple)
            if index ~= persistentEntityIndex then
                goto __continue13
            end
            v.room.spawnedPersistentEntities:delete(ptrHash)
            if removeEntity and entityPtr.Ref ~= nil then
                entityPtr.Ref:Remove()
            end
        end
        ::__continue13::
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.playerInventory"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local __TS__Iterator = ____lualib.__TS__Iterator
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local ____exports = {}
local newPlayerInventory, resetInventory, useItemD4, postGameStarted, postCollectibleAdded, postCollectibleRemoved, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____array = require("lua_modules.isaacscript-common.functions.array")
local arrayRemoveInPlace = ____array.arrayRemoveInPlace
local copyArray = ____array.copyArray
local ____collectibles = require("lua_modules.isaacscript-common.functions.collectibles")
local isActiveCollectible = ____collectibles.isActiveCollectible
local ____collectibleSet = require("lua_modules.isaacscript-common.functions.collectibleSet")
local getCollectibleSet = ____collectibleSet.getCollectibleSet
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local defaultMapGetPlayer = ____playerDataStructures.defaultMapGetPlayer
local mapSetPlayer = ____playerDataStructures.mapSetPlayer
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getAllPlayers = ____playerIndex.getAllPlayers
local getPlayerIndex = ____playerIndex.getPlayerIndex
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local ____repeat = ____utils["repeat"]
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function newPlayerInventory(self, player)
    local inventory = {}
    local collectibleSet = getCollectibleSet(nil)
    for ____, collectibleType in __TS__Iterator(collectibleSet:values()) do
        local numCollectibles = player:GetCollectibleNum(collectibleType, true)
        ____repeat(
            nil,
            numCollectibles,
            function()
                inventory[#inventory + 1] = collectibleType
            end
        )
    end
    return inventory
end
function resetInventory(self, player)
    local inventory = newPlayerInventory(nil, player)
    mapSetPlayer(nil, v.run.playersInventory, player, inventory)
end
function useItemD4(self, _collectibleType, _rng, player)
    resetInventory(nil, player)
    return nil
end
function postGameStarted(self)
    for ____, player in ipairs(getAllPlayers(nil)) do
        local playerIndex = getPlayerIndex(nil, player)
        if not v.run.playersInventory:has(playerIndex) then
            resetInventory(nil, player)
        end
    end
end
function postCollectibleAdded(self, player, collectibleType)
    local inventory = defaultMapGetPlayer(nil, v.run.playersInventory, player, player)
    inventory[#inventory + 1] = collectibleType
end
function postCollectibleRemoved(self, player, collectibleType)
    local inventory = defaultMapGetPlayer(nil, v.run.playersInventory, player, player)
    arrayRemoveInPlace(nil, inventory, collectibleType)
end
local FEATURE_NAME = "playerInventory"
v = {run = {playersInventory = __TS__New(
    DefaultMap,
    function(____, player) return newPlayerInventory(nil, player) end
)}}
---
-- @internal
function ____exports.playerInventoryInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallback(ModCallback.POST_USE_ITEM, useItemD4, CollectibleType.D4)
    mod:AddCallback(ModCallback.POST_GAME_STARTED, postGameStarted)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PLAYER_COLLECTIBLE_ADDED, postCollectibleAdded)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PLAYER_COLLECTIBLE_REMOVED, postCollectibleRemoved)
end
--- Helper function to get all of the collectibles that the player has gotten so far on this run, in
-- order.
-- 
-- Note that this does not include active collectibles that have since been dropped for other
-- collectibles.
-- 
-- In the case of inventory initialization or the case where the player rerolls their build in the
-- middle of the run (e.g. with D4), the order of the inventory will not correspond to the order
-- that the items were actually given to the player. In this case, the inventory will be in the
-- order of the lowest `CollectibleType` to the highest.
function ____exports.getPlayerInventory(self, player, includeActiveCollectibles)
    if includeActiveCollectibles == nil then
        includeActiveCollectibles = true
    end
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    local inventory = defaultMapGetPlayer(nil, v.run.playersInventory, player, player)
    local copiedInventory = copyArray(nil, inventory)
    if includeActiveCollectibles then
        return copiedInventory
    end
    return __TS__ArrayFilter(
        copiedInventory,
        function(____, collectibleType) return not isActiveCollectible(nil, collectibleType) end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.playerDataStructures"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local Set = ____lualib.Set
local ____exports = {}
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getPlayerIndex = ____playerIndex.getPlayerIndex
--- Helper function to make using maps with an index of `PlayerIndex` easier. Use this instead of the
-- `Map.set` method if you have a map of this type.
-- 
-- For example:
-- 
-- ```ts
-- const v = {
--   run: {
--     playersSpeedBoost: new Map<PlayerIndex, int>(),
--   },
-- };
-- 
-- function incrementSpeedBoost(player: EntityPlayer) {
--   const oldSpeedBoost = mapGetPlayer(v.run.playersSpeedBoost, player);
--   const newSpeedBoost = oldSpeedBoost + 0.1;
--   mapSetPlayer(v.run.playersSpeedBoost, player);
-- }
-- ```
function ____exports.mapSetPlayer(self, map, player, value)
    local playerIndex = getPlayerIndex(nil, player)
    map:set(playerIndex, value)
end
--- Helper function to make using default maps with an index of `PlayerIndex` easier. Use this
-- instead of the `DefaultMap.getAndSetDefault` method if you have a default map of this type.
-- 
-- For example:
-- 
-- ```ts
-- const v = {
--   run: {
--     playersSpeedBoost: new DefaultMap<PlayerIndex, int>(0),
--   },
-- };
-- 
-- function evaluateCacheSpeed(player: EntityPlayer) {
--   player.MoveSpeed = defaultMapGetPlayer(v.run.playersSpeedBoost, player);
-- }
-- ```
function ____exports.defaultMapGetPlayer(self, map, player, ...)
    local playerIndex = getPlayerIndex(nil, player)
    return map:getAndSetDefault(playerIndex, ...)
end
--- Helper function to make using maps with an index of `PlayerIndex` easier. Use this instead of the
-- `Map.set` method if you have a map of this type.
-- 
-- Since `Map` and `DefaultMap` set values in the same way, this function is simply an alias for the
-- `mapSetPlayer` helper function.
function ____exports.defaultMapSetPlayer(self, map, player, value)
    ____exports.mapSetPlayer(nil, map, player, value)
end
--- Helper function to make using maps with an index of `PlayerIndex` easier. Use this instead of the
-- `Map.get` method if you have a map of this type.
-- 
-- For example:
-- 
-- ```ts
-- const v = {
--   run: {
--     playersSpeedBoost: new Map<PlayerIndex, int>(),
--   },
-- };
-- 
-- function incrementSpeedBoost(player: EntityPlayer) {
--   const oldSpeedBoost = mapGetPlayer(v.run.playersSpeedBoost, player);
--   const newSpeedBoost = oldSpeedBoost + 0.1;
--   mapSetPlayer(v.run.playersSpeedBoost, player);
-- }
-- ```
function ____exports.mapGetPlayer(self, map, player)
    local playerIndex = getPlayerIndex(nil, player)
    return map:get(playerIndex)
end
--- Helper function to make using maps with an index of `PlayerIndex` easier. Use this instead of the
-- `Map.has` method if you have a map of this type.
function ____exports.mapHasPlayer(self, map, player)
    local playerIndex = getPlayerIndex(nil, player)
    return map:has(playerIndex)
end
--- Helper function to make using sets with an type of `PlayerIndex` easier. Use this instead of the
-- `Set.add` method if you have a set of this type.
function ____exports.setAddPlayer(self, set, player)
    local playerIndex = getPlayerIndex(nil, player)
    return set:add(playerIndex)
end
--- Helper function to make using sets with an type of `PlayerIndex` easier. Use this instead of the
-- `Set.delete` method if you have a set of this type.
function ____exports.setDeletePlayer(self, set, player)
    local playerIndex = getPlayerIndex(nil, player)
    return set:delete(playerIndex)
end
--- Helper function to make using sets with an type of `PlayerIndex` easier. Use this instead of the
-- `Set.has` method if you have a set of this type.
function ____exports.setHasPlayer(self, set, player)
    local playerIndex = getPlayerIndex(nil, player)
    return set:has(playerIndex)
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.ponyDetection"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArraySome = ____lualib.__TS__ArraySome
local ____exports = {}
local postPEffectUpdateReordered, FLAGS_WHEN_PONY_IS_ACTIVE, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local EntityFlag = ____isaac_2Dtypescript_2Ddefinitions.EntityFlag
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local hasFlag = ____flag.hasFlag
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local setAddPlayer = ____playerDataStructures.setAddPlayer
local setDeletePlayer = ____playerDataStructures.setDeletePlayer
local setHasPlayer = ____playerDataStructures.setHasPlayer
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getPlayers = ____playerIndex.getPlayers
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function postPEffectUpdateReordered(self, player)
    local effects = player:GetEffects()
    local entityFlags = player:GetEntityFlags()
    local hasPonyCollectibleEffect = effects:HasCollectibleEffect(CollectibleType.PONY) or effects:HasCollectibleEffect(CollectibleType.WHITE_PONY)
    local isPonyActiveOnPreviousFrame = setHasPlayer(nil, v.run.playersIsPonyActive, player)
    local hasPonyFlags = hasFlag(
        nil,
        entityFlags,
        table.unpack(FLAGS_WHEN_PONY_IS_ACTIVE)
    )
    local isPonyActiveNow = hasPonyCollectibleEffect or isPonyActiveOnPreviousFrame and hasPonyFlags
    if isPonyActiveNow then
        setAddPlayer(nil, v.run.playersIsPonyActive, player)
    else
        setDeletePlayer(nil, v.run.playersIsPonyActive, player)
    end
end
local FEATURE_NAME = "ponyDetector"
FLAGS_WHEN_PONY_IS_ACTIVE = {EntityFlag.NO_KNOCKBACK, EntityFlag.NO_PHYSICS_KNOCKBACK, EntityFlag.NO_DAMAGE_BLINK}
v = {run = {playersIsPonyActive = __TS__New(Set)}}
---
-- @internal
function ____exports.ponyDetectionInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED, postPEffectUpdateReordered)
end
--- Helper function to see if the player is under the effects of A Pony or White Pony charge.
-- Detecting this is difficult, as the temporary effect will disappear upon entering a new room.
function ____exports.isPlayerUsingPony(self, player)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    return setHasPlayer(nil, v.run.playersIsPonyActive, player)
end
--- Helper function to see if any player is under the effects of A Pony or White Pony charge.
-- Detecting this is difficult, as the temporary effect will disappear upon entering a new room.
function ____exports.anyPlayerUsingPony(self)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    local players = getPlayers(nil)
    return __TS__ArraySome(
        players,
        function(____, player) return ____exports.isPlayerUsingPony(nil, player) end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.registerHotkey"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local postRender, hotkeyFunctionMap, keyPressedMap
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Keyboard = ____isaac_2Dtypescript_2Ddefinitions.Keyboard
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____input = require("lua_modules.isaacscript-common.functions.input")
local isKeyboardPressed = ____input.isKeyboardPressed
function postRender(self)
    for ____, ____value in __TS__Iterator(hotkeyFunctionMap:entries()) do
        local keyboard = ____value[1]
        local func = ____value[2]
        local isPressed = isKeyboardPressed(nil, keyboard)
        local wasPreviouslyPressed = keyPressedMap:getAndSetDefault(keyboard)
        keyPressedMap:set(keyboard, isPressed)
        if isPressed and not wasPreviouslyPressed then
            func(nil)
        end
    end
end
local FEATURE_NAME = "registerHotkeys"
hotkeyFunctionMap = __TS__New(Map)
keyPressedMap = __TS__New(DefaultMap, false)
---
-- @internal
function ____exports.registerHotkeyInit(self, mod)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
function ____exports.registerHotkey(self, keyboard, func)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    if hotkeyFunctionMap:has(keyboard) then
        error(((("Failed to register a hotkey for key Keyboard." .. tostring(Keyboard[keyboard])) .. " (") .. tostring(keyboard)) .. ") due to a custom hotkey already being defined for that key.")
    end
    hotkeyFunctionMap:set(keyboard, func)
end
function ____exports.unregisterHotkey(self, keyboard)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    if not hotkeyFunctionMap:has(keyboard) then
        error(((("Failed to unregister a hotkey for key Keyboard." .. tostring(Keyboard[keyboard])) .. " (") .. tostring(keyboard)) .. ") due to no function being defined for that key.")
    end
    hotkeyFunctionMap:delete(keyboard)
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.roomClearFrame"] = function(...) 
local ____exports = {}
local postRoomClearChangedTrue, v
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function postRoomClearChangedTrue(self)
    local gameFrameCount = game:GetFrameCount()
    local room = game:GetRoom()
    local roomFrameCount = room:GetFrameCount()
    v.room.roomClearGameFrame = gameFrameCount
    v.room.roomClearRoomFrame = roomFrameCount
end
local FEATURE_NAME = "roomClearFrame"
v = {room = {roomClearGameFrame = nil, roomClearRoomFrame = nil}}
---
-- @internal
function ____exports.roomClearFrameInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallbackCustom(ModCallbackCustom.POST_ROOM_CLEAR_CHANGED, postRoomClearChangedTrue, true)
end
--- Helper function to get the game frame (i.e. `Game.GetFrameCount`) of the last time that this room
-- was cleared. Returns undefined if the room has never been cleared.
function ____exports.getRoomClearGameFrame(self)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    return v.room.roomClearGameFrame
end
--- Helper function to get the room frame (i.e. `Room.GetFrameCount`) of the last time that this room
-- was cleared. Returns undefined if the room has never been cleared.
function ____exports.getRoomClearRoomFrame(self)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    return v.room.roomClearGameFrame
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.sirenHelpers"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayFind = ____lualib.__TS__ArrayFind
local ____exports = {}
local postNPCInitSirenHelper, checkReturnFamiliarToPlayer, blacklistEntryExists, getSirenHelper, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local getEntities = ____entity.getEntities
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function postNPCInitSirenHelper(self, npc)
    checkReturnFamiliarToPlayer(nil, npc)
end
function checkReturnFamiliarToPlayer(self, npc)
    if npc.Target == nil then
        return
    end
    local familiar = npc.Target:ToFamiliar()
    if familiar == nil then
        return
    end
    if blacklistEntryExists(nil, familiar.Variant, familiar.SubType) then
        npc:Remove()
        familiar:AddToFollowers()
    end
end
function blacklistEntryExists(self, incomingFamiliarVariant, incomingFamiliarSubType)
    for ____, ____value in ipairs(v.run.familiarBlacklist) do
        local familiarVariant = ____value[1]
        local familiarSubType = ____value[2]
        if incomingFamiliarVariant == familiarVariant and familiarSubType == incomingFamiliarSubType then
            return true
        end
        if incomingFamiliarVariant == familiarVariant and familiarSubType == nil then
            return true
        end
    end
    return false
end
function getSirenHelper(self, familiar)
    local familiarPtrHash = GetPtrHash(familiar)
    local sirenHelpers = getEntities(nil, EntityType.SIREN_HELPER)
    return __TS__ArrayFind(
        sirenHelpers,
        function(____, sirenHelper) return sirenHelper.Target ~= nil and GetPtrHash(sirenHelper.Target) == familiarPtrHash end
    )
end
local FEATURE_NAME = "sirenHelpers"
v = {run = {familiarBlacklist = {}}}
---
-- @internal
function ____exports.sirenHelpersInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallback(ModCallback.POST_NPC_INIT, postNPCInitSirenHelper, EntityType.SIREN_HELPER)
end
--- Blacklists a familiar from being stolen by The Siren boss. This should be called once at the
-- beginning of every run.
-- 
-- @param familiarVariant The familiar variant to blacklist.
-- @param familiarSubType The sub-type to blacklist. Optional. The default is to blacklist all
-- sub-types of the given variant.
function ____exports.setFamiliarNoSirenSteal(self, familiarVariant, familiarSubType)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    if blacklistEntryExists(nil, familiarVariant, familiarSubType) then
        return
    end
    local ____v_run_familiarBlacklist_0 = v.run.familiarBlacklist
    ____v_run_familiarBlacklist_0[#____v_run_familiarBlacklist_0 + 1] = {familiarVariant, familiarSubType}
end
--- Helper function to check if the Siren boss has stolen a familiar. Some familiars may need to
-- behave differently when under The Siren's control (e.g. if they auto-target enemies).
-- 
-- @param familiar The familiar to be checked.
-- @returns Returns whether the familiar has been stolen by The Siren.
function ____exports.hasSirenStolenFamiliar(self, familiar)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    return getSirenHelper(nil, familiar) ~= nil
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.stageHistory"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArraySome = ____lualib.__TS__ArraySome
local ____exports = {}
local postNewLevelReordered, v
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function postNewLevelReordered(self)
    local level = game:GetLevel()
    local stage = level:GetStage()
    local stageType = level:GetStageType()
    local ____v_run_stageHistory_0 = v.run.stageHistory
    ____v_run_stageHistory_0[#____v_run_stageHistory_0 + 1] = {stage, stageType}
end
local FEATURE_NAME = "stageHistory"
v = {run = {stageHistory = {}}}
---
-- @internal
function ____exports.stageHistoryInit(self, mod)
    saveDataManager(nil, FEATURE_NAME, v)
    mod:AddCallbackCustom(ModCallbackCustom.POST_NEW_LEVEL_REORDERED, postNewLevelReordered)
end
--- Helper function to get all of the stages that a player has visited thus far on this run.
function ____exports.getStageHistory(self)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    return v.run.stageHistory
end
--- Helper function to check if a player has previous visited a particular stage (or stage + stage
-- type combination) on this run.
-- 
-- @param stage The stage to check for.
-- @param stageType Optional. If provided, will check for a specific stage and stage type
-- combination.
function ____exports.hasVisitedStage(self, stage, stageType)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    if stageType == nil then
        return __TS__ArraySome(
            v.run.stageHistory,
            function(____, ____bindingPattern0)
                local previousStage
                previousStage = ____bindingPattern0[1]
                return previousStage == stage
            end
        )
    end
    return __TS__ArraySome(
        v.run.stageHistory,
        function(____, ____bindingPattern0)
            local previousStageType
            local previousStage
            previousStage = ____bindingPattern0[1]
            previousStageType = ____bindingPattern0[2]
            return previousStage == stage and previousStageType == stageType
        end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.features.taintedLazarusPlayers"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local postPlayerInit, checkDequeue, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local errorIfFeaturesNotInitialized = ____featuresInitialized.errorIfFeaturesNotInitialized
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
function postPlayerInit(self, player)
    local entityPtr = EntityPtr(player)
    local character = player:GetPlayerType()
    if character == PlayerType.LAZARUS_B then
        local ____v_run_queuedTaintedLazarus_0 = v.run.queuedTaintedLazarus
        ____v_run_queuedTaintedLazarus_0[#____v_run_queuedTaintedLazarus_0 + 1] = entityPtr
    elseif character == PlayerType.LAZARUS_2_B then
        local ____v_run_queuedDeadTaintedLazarus_1 = v.run.queuedDeadTaintedLazarus
        ____v_run_queuedDeadTaintedLazarus_1[#____v_run_queuedDeadTaintedLazarus_1 + 1] = entityPtr
    else
        return
    end
    checkDequeue(nil)
end
function checkDequeue(self)
    if #v.run.queuedTaintedLazarus == 0 or #v.run.queuedDeadTaintedLazarus == 0 then
        return
    end
    local taintedLazarusPtr = table.remove(v.run.queuedTaintedLazarus, 1)
    local deadTaintedLazarusPtr = table.remove(v.run.queuedDeadTaintedLazarus, 1)
    if taintedLazarusPtr == nil or deadTaintedLazarusPtr == nil then
        return
    end
    local taintedLazarus = taintedLazarusPtr.Ref
    local deadTaintedLazarus = deadTaintedLazarusPtr.Ref
    if taintedLazarus == nil or deadTaintedLazarus == nil then
        return
    end
    local taintedLazarusPtrHash = GetPtrHash(taintedLazarus)
    local deadTaintedLazarusPtrHash = GetPtrHash(deadTaintedLazarus)
    v.run.subPlayerMap:set(taintedLazarusPtrHash, deadTaintedLazarusPtr)
    v.run.subPlayerMap:set(deadTaintedLazarusPtrHash, taintedLazarusPtr)
end
local FEATURE_NAME = "taintedLazarusPlayers"
v = {run = {
    queuedTaintedLazarus = {},
    queuedDeadTaintedLazarus = {},
    subPlayerMap = __TS__New(Map)
}}
---
-- @internal
function ____exports.taintedLazarusPlayersInit(self, mod)
    saveDataManager(
        nil,
        FEATURE_NAME,
        v,
        function() return false end
    )
    mod:AddCallback(ModCallback.POST_PLAYER_INIT, postPlayerInit)
end
--- Helper function to get the other version of Tainted Lazarus.
-- 
-- - On Tainted Lazarus, returns the player object for Dead Tainted Lazarus.
-- - On Dead Tainted Lazarus, returns the player object for Tainted Lazarus.
-- - Returns undefined if player object retrieval failed for any reason.
-- 
-- If you call the `EntityPlayer.Exists` method on the returned object, it will return false.
-- However, you can still call the other methods like you normally would (e.g.
-- `EntityPlayer.AddCollectible`).
function ____exports.getTaintedLazarusSubPlayer(self, player)
    errorIfFeaturesNotInitialized(nil, FEATURE_NAME)
    local ptrHash = GetPtrHash(player)
    local entityPtr = v.run.subPlayerMap:get(ptrHash)
    if entityPtr == nil then
        return nil
    end
    local entity = entityPtr.Ref
    if entity == nil then
        return nil
    end
    return entity:ToPlayer()
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.ambush"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local ____runInNFrames = require("lua_modules.isaacscript-common.features.runInNFrames")
local runNextGameFrame = ____runInNFrames.runNextGameFrame
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local removeEntities = ____entity.removeEntities
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local spawnPickupWithSeed = ____entitySpecific.spawnPickupWithSeed
local ____pickups = require("lua_modules.isaacscript-common.functions.pickups")
local getCoins = ____pickups.getCoins
--- Hard-coding this makes it easier to clean up the pickups afterwards.
local SACK_SEED_THAT_SPAWNS_TWO_COINS = 6
--- Helper function to start a Challenge Room or the Boss Rush.
-- 
-- Specifically, this is performed by spawning a sack on top of the player, waiting a game frame,
-- and then removing the sack and the pickups that the sack dropped.
function ____exports.startAmbush(self)
    local player = Isaac.GetPlayer()
    local sack = spawnPickupWithSeed(
        nil,
        PickupVariant.SACK,
        0,
        player.Position,
        SACK_SEED_THAT_SPAWNS_TWO_COINS
    )
    local sprite = sack:GetSprite()
    sprite:Stop()
    local sackPtr = EntityPtr(sack)
    runNextGameFrame(
        nil,
        function()
            local futureSack = sackPtr.Ref
            if futureSack == nil then
                return
            end
            futureSack:Remove()
            local sackPtrHash = GetPtrHash(futureSack)
            local coins = getCoins(nil)
            local coinsFromSack = __TS__ArrayFilter(
                coins,
                function(____, pickup) return pickup.SpawnerEntity ~= nil and GetPtrHash(pickup.SpawnerEntity) == sackPtrHash end
            )
            removeEntities(nil, coinsFromSack)
        end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.benchmark"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
local ____exports = {}
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
--- Helper function to benchmark the performance of a function.
-- 
-- This function is variadic, which means that you can supply as many as you want to benchmark.
-- 
-- @returns An array containing the average time in milliseconds for each function. (This will also
-- be printed to the log.)
function ____exports.benchmark(self, numTrials, ...)
    local functions = {...}
    log(((("Benchmarking " .. tostring(#functions)) .. " function(s) with ") .. tostring(numTrials)) .. " trials.")
    local averages = {}
    __TS__ArrayForEach(
        functions,
        function(____, func, i)
            local totalTimeMilliseconds = 0
            do
                local j = 0
                while j < numTrials do
                    local startTimeMilliseconds = Isaac.GetTime()
                    func(nil)
                    local endTimeMilliseconds = Isaac.GetTime()
                    local elapsedTimeMilliseconds = endTimeMilliseconds - startTimeMilliseconds
                    totalTimeMilliseconds = totalTimeMilliseconds + elapsedTimeMilliseconds
                    j = j + 1
                end
            end
            local averageTimeMilliseconds = totalTimeMilliseconds / numTrials
            log(((("The average time of the function at index " .. tostring(i)) .. " is: ") .. tostring(averageTimeMilliseconds)) .. " milliseconds")
            averages[#averages + 1] = averageTimeMilliseconds
        end
    )
    return averages
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.bombs"] = function(...) 
local ____exports = {}
--- Helper function to find out how large a bomb explosion is based on the damage inflicted.
function ____exports.getBombRadiusFromDamage(self, damage)
    if damage > 175 then
        return 105
    end
    if damage <= 140 then
        return 75
    end
    return 90
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.boss"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local ____exports = {}
local getNumBossSegments, DEFAULT_BOSS_MULTI_SEGMENTS
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local LokiVariant = ____isaac_2Dtypescript_2Ddefinitions.LokiVariant
local ____constants = require("lua_modules.isaacscript-common.constants")
local VectorZero = ____constants.VectorZero
local ____bossSets = require("lua_modules.isaacscript-common.sets.bossSets")
local ALL_BOSSES_SET = ____bossSets.ALL_BOSSES_SET
local STAGE_TO_COMBINED_BOSS_SET_MAP = ____bossSets.STAGE_TO_COMBINED_BOSS_SET_MAP
local STAGE_TO_STAGE_TYPE_TO_BOSS_SET_MAP = ____bossSets.STAGE_TO_STAGE_TYPE_TO_BOSS_SET_MAP
local ____sinEntityTypesSet = require("lua_modules.isaacscript-common.sets.sinEntityTypesSet")
local SIN_ENTITY_TYPES_SET = ____sinEntityTypesSet.SIN_ENTITY_TYPES_SET
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local getNPCs = ____entitySpecific.getNPCs
local spawnNPC = ____entitySpecific.spawnNPC
local ____npc = require("lua_modules.isaacscript-common.functions.npc")
local getAliveNPCs = ____npc.getAliveNPCs
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local isRNG = ____rng.isRNG
local ____set = require("lua_modules.isaacscript-common.functions.set")
local copySet = ____set.copySet
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local ____repeat = ____utils["repeat"]
function getNumBossSegments(self, entityType, variant, numSegments)
    if numSegments ~= nil then
        return numSegments
    end
    repeat
        local ____switch18 = entityType
        local ____cond18 = ____switch18 == EntityType.CHUB
        if ____cond18 then
            do
                return 3
            end
        end
        ____cond18 = ____cond18 or ____switch18 == EntityType.LOKI
        if ____cond18 then
            do
                return variant == LokiVariant.LOKII and 2 or 1
            end
        end
        ____cond18 = ____cond18 or ____switch18 == EntityType.GURGLING
        if ____cond18 then
            do
                return 2
            end
        end
        do
            do
                return DEFAULT_BOSS_MULTI_SEGMENTS
            end
        end
    until true
end
local BOSSES_THAT_REQUIRE_MULTIPLE_SPAWNS = __TS__New(Set, {
    EntityType.LARRY_JR,
    EntityType.CHUB,
    EntityType.LOKI,
    EntityType.GURGLING,
    EntityType.TURDLET
})
DEFAULT_BOSS_MULTI_SEGMENTS = 4
--- Helper function to get all of the non-dead bosses in the room.
-- 
-- This function will not include bosses on an internal blacklist, such as Death's scythes or Big
-- Horn holes.
function ____exports.getAliveBosses(self, matchingEntityType, matchingVariant, matchingSubType, ignoreFriendly)
    if ignoreFriendly == nil then
        ignoreFriendly = false
    end
    local aliveNPCs = getAliveNPCs(
        nil,
        matchingEntityType,
        matchingVariant,
        matchingSubType,
        ignoreFriendly
    )
    return __TS__ArrayFilter(
        aliveNPCs,
        function(____, aliveNPC) return aliveNPC:IsBoss() end
    )
end
--- Helper function to get the set of every boss in the game.
-- 
-- The set contains strings with the entity type and variant, separated by a period.
-- 
-- Also see the `getBossSet` and `getCombinedBossSet` functions.
function ____exports.getAllBossesSet(self)
    return copySet(nil, ALL_BOSSES_SET)
end
--- Helper function to get the set of vanilla bosses for a particular stage and stage type
-- combination.
-- 
-- The set contains strings with the entity type and variant, separated by a period.
-- 
-- Also see the `getAllBossesSet` and `getCombinedBossSet` functions.
function ____exports.getBossSet(self, stage, stageType)
    local stageTypeMap = STAGE_TO_STAGE_TYPE_TO_BOSS_SET_MAP:get(stage)
    if stageTypeMap == nil then
        return nil
    end
    local bossSet = stageTypeMap:get(stageType)
    if bossSet == nil then
        return nil
    end
    return copySet(nil, bossSet)
end
--- Helper function to get all of the bosses in the room.
function ____exports.getBosses(self, matchingEntityType, matchingVariant, matchingSubType, ignoreFriendly)
    if ignoreFriendly == nil then
        ignoreFriendly = false
    end
    local npcs = getNPCs(
        nil,
        matchingEntityType,
        matchingVariant,
        matchingSubType,
        ignoreFriendly
    )
    return __TS__ArrayFilter(
        npcs,
        function(____, npc) return npc:IsBoss() end
    )
end
--- Helper function to get the set of vanilla bosses for a particular stage across all of the stage
-- types. For example, specifying a stage of 2 will return a set with all of the bosses for
-- Basement, Cellar, Burning Basement, Downpour, and Dross.
-- 
-- The set contains strings with the entity type and variant, separated by a period.
-- 
-- Also see the `getAllBossesSet` and `getBossSet` functions.
function ____exports.getCombinedBossSet(self, stage)
    local bossSet = STAGE_TO_COMBINED_BOSS_SET_MAP:get(stage)
    if bossSet == nil then
        return nil
    end
    return copySet(nil, bossSet)
end
--- Helper function to check if the provided NPC is a Sin miniboss, such as Sloth or Lust.
function ____exports.isSin(self, npc)
    return SIN_ENTITY_TYPES_SET:has(npc.Type)
end
--- Helper function to spawn a boss.
-- 
-- Use this function instead of `spawnNPC` since it handles automatically spawning multiple segments
-- for multi-segment bosses.
-- 
-- By default, this will spawn Chub (and his variants) with 3 segments, Lokii with 2 copies,
-- Gurglings/Turdlings with 2 copies, and other multi-segment bosses with 4 segments. You can
-- customize this via the "numSegments" argument.
function ____exports.spawnBoss(self, entityType, variant, subType, position, velocity, spawner, seedOrRNG, numSegments)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    if seedOrRNG == nil then
        seedOrRNG = nil
    end
    local seed = isRNG(nil, seedOrRNG) and seedOrRNG:Next() or seedOrRNG
    local npc = spawnNPC(
        nil,
        entityType,
        variant,
        subType,
        position,
        velocity,
        spawner,
        seed
    )
    if BOSSES_THAT_REQUIRE_MULTIPLE_SPAWNS:has(entityType) then
        local numBossSegments = getNumBossSegments(nil, entityType, variant, numSegments)
        local remainingSegmentsToSpawn = numBossSegments - 1
        ____repeat(
            nil,
            remainingSegmentsToSpawn,
            function()
                spawnNPC(
                    nil,
                    entityType,
                    variant,
                    subType,
                    position,
                    velocity,
                    spawner,
                    seed
                )
            end
        )
    end
    return npc
end
--- Helper function to spawn a boss with a specific seed.
-- 
-- For more information, see the documentation for the `spawnBoss` function.
function ____exports.spawnBossWithSeed(self, entityType, variant, subType, position, seedOrRNG, velocity, spawner, numSegments)
    if velocity == nil then
        velocity = VectorZero
    end
    if spawner == nil then
        spawner = nil
    end
    local seed = isRNG(nil, seedOrRNG) and seedOrRNG:Next() or seedOrRNG
    return ____exports.spawnBoss(
        nil,
        entityType,
        variant,
        subType,
        position,
        velocity,
        spawner,
        seed,
        numSegments
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.sets.bossSets"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__Spread = ____lualib.__TS__Spread
local __TS__SparseArrayNew = ____lualib.__TS__SparseArrayNew
local __TS__SparseArrayPush = ____lualib.__TS__SparseArrayPush
local __TS__SparseArraySpread = ____lualib.__TS__SparseArraySpread
local Map = ____lualib.Map
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local BigHornVariant = ____isaac_2Dtypescript_2Ddefinitions.BigHornVariant
local ChubVariant = ____isaac_2Dtypescript_2Ddefinitions.ChubVariant
local DaddyLongLegsVariant = ____isaac_2Dtypescript_2Ddefinitions.DaddyLongLegsVariant
local DingleVariant = ____isaac_2Dtypescript_2Ddefinitions.DingleVariant
local DukeVariant = ____isaac_2Dtypescript_2Ddefinitions.DukeVariant
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local FallenVariant = ____isaac_2Dtypescript_2Ddefinitions.FallenVariant
local FistulaVariant = ____isaac_2Dtypescript_2Ddefinitions.FistulaVariant
local GeminiVariant = ____isaac_2Dtypescript_2Ddefinitions.GeminiVariant
local GurglingVariant = ____isaac_2Dtypescript_2Ddefinitions.GurglingVariant
local HauntVariant = ____isaac_2Dtypescript_2Ddefinitions.HauntVariant
local IsaacVariant = ____isaac_2Dtypescript_2Ddefinitions.IsaacVariant
local LambVariant = ____isaac_2Dtypescript_2Ddefinitions.LambVariant
local LarryJrVariant = ____isaac_2Dtypescript_2Ddefinitions.LarryJrVariant
local LittleHornVariant = ____isaac_2Dtypescript_2Ddefinitions.LittleHornVariant
local LokiVariant = ____isaac_2Dtypescript_2Ddefinitions.LokiVariant
local MamaGurdyVariant = ____isaac_2Dtypescript_2Ddefinitions.MamaGurdyVariant
local MomsHeartVariant = ____isaac_2Dtypescript_2Ddefinitions.MomsHeartVariant
local MomVariant = ____isaac_2Dtypescript_2Ddefinitions.MomVariant
local Monstro2Variant = ____isaac_2Dtypescript_2Ddefinitions.Monstro2Variant
local PeepVariant = ____isaac_2Dtypescript_2Ddefinitions.PeepVariant
local PinVariant = ____isaac_2Dtypescript_2Ddefinitions.PinVariant
local PolycephalusVariant = ____isaac_2Dtypescript_2Ddefinitions.PolycephalusVariant
local RagManVariant = ____isaac_2Dtypescript_2Ddefinitions.RagManVariant
local RagMegaVariant = ____isaac_2Dtypescript_2Ddefinitions.RagMegaVariant
local SatanVariant = ____isaac_2Dtypescript_2Ddefinitions.SatanVariant
local StageType = ____isaac_2Dtypescript_2Ddefinitions.StageType
local WarVariant = ____isaac_2Dtypescript_2Ddefinitions.WarVariant
local WidowVariant = ____isaac_2Dtypescript_2Ddefinitions.WidowVariant
--- Contains just the bosses in Basement (not e.g. Burning Basement).
local BASEMENT_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.LARRY_JR) .. ".") .. tostring(LarryJrVariant.LARRY_JR),
        tostring(EntityType.MONSTRO) .. ".0",
        tostring(EntityType.FAMINE) .. ".0",
        (tostring(EntityType.DUKE) .. ".") .. tostring(DukeVariant.DUKE_OF_FLIES),
        (tostring(EntityType.GEMINI) .. ".") .. tostring(GeminiVariant.GEMINI),
        (tostring(EntityType.GEMINI) .. ".") .. tostring(GeminiVariant.STEVEN),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0",
        (tostring(EntityType.GURGLING) .. ".") .. tostring(GurglingVariant.GURGLING_BOSS),
        (tostring(EntityType.GURGLING) .. ".") .. tostring(GurglingVariant.TURDLING),
        (tostring(EntityType.DINGLE) .. ".") .. tostring(DingleVariant.DINGLE),
        (tostring(EntityType.DINGLE) .. ".") .. tostring(DingleVariant.DANGLE),
        (tostring(EntityType.LITTLE_HORN) .. ".") .. tostring(LittleHornVariant.LITTLE_HORN),
        tostring(EntityType.BABY_PLUM) .. ".0"
    }
)
--- Contains just the bosses in Cellar (not e.g. Burning Basement).
local CELLAR_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.PIN) .. ".") .. tostring(PinVariant.PIN),
        tostring(EntityType.FAMINE) .. ".0",
        (tostring(EntityType.DUKE) .. ".") .. tostring(DukeVariant.DUKE_OF_FLIES),
        (tostring(EntityType.GEMINI) .. ".") .. tostring(GeminiVariant.BLIGHTED_OVUM),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0",
        (tostring(EntityType.WIDOW) .. ".") .. tostring(WidowVariant.WIDOW),
        (tostring(EntityType.THE_HAUNT) .. ".") .. tostring(HauntVariant.HAUNT),
        tostring(EntityType.LITTLE_HORN) .. ".0",
        (tostring(EntityType.RAG_MAN) .. ".") .. tostring(RagManVariant.RAG_MAN),
        tostring(EntityType.BABY_PLUM) .. ".0"
    }
)
--- Contains just the bosses in Burning Basement (not e.g. Cellar).
local BURNING_BASEMENT_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.LARRY_JR) .. ".") .. tostring(LarryJrVariant.LARRY_JR),
        tostring(EntityType.MONSTRO) .. ".0",
        tostring(EntityType.FAMINE) .. ".0",
        (tostring(EntityType.DUKE) .. ".") .. tostring(DukeVariant.DUKE_OF_FLIES),
        (tostring(EntityType.GEMINI) .. ".") .. tostring(GeminiVariant.GEMINI),
        (tostring(EntityType.GEMINI) .. ".") .. tostring(GeminiVariant.STEVEN),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0",
        (tostring(EntityType.DINGLE) .. ".") .. tostring(DingleVariant.DINGLE),
        (tostring(EntityType.GURGLING) .. ".") .. tostring(GurglingVariant.GURGLING_BOSS),
        (tostring(EntityType.GURGLING) .. ".") .. tostring(GurglingVariant.TURDLING),
        (tostring(EntityType.DINGLE) .. ".") .. tostring(DingleVariant.DANGLE),
        tostring(EntityType.LITTLE_HORN) .. ".0",
        (tostring(EntityType.RAG_MAN) .. ".") .. tostring(RagManVariant.RAG_MAN),
        tostring(EntityType.BABY_PLUM) .. ".0"
    }
)
--- Contains just the bosses in Downpour (not e.g. Burning Basement).
local DOWNPOUR_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.PIN) .. ".") .. tostring(PinVariant.WORMWOOD),
        tostring(EntityType.LIL_BLUB) .. ".0",
        tostring(EntityType.RAINMAKER) .. ".0",
        tostring(EntityType.MIN_MIN) .. ".0"
    }
)
--- Contains just the bosses in Dross (not e.g. Burning Basement).
local DROSS_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.PIN) .. ".") .. tostring(PinVariant.WORMWOOD),
        tostring(EntityType.LIL_BLUB) .. ".0",
        tostring(EntityType.CLOG) .. ".0",
        tostring(EntityType.COLOSTOMIA) .. ".0",
        tostring(EntityType.TURDLET) .. ".0"
    }
)
local ____Set_1 = Set
local ____array_0 = __TS__SparseArrayNew(__TS__Spread(BASEMENT_BOSSES_SET:values()))
__TS__SparseArrayPush(
    ____array_0,
    __TS__Spread(CELLAR_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_0,
    __TS__Spread(BURNING_BASEMENT_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_0,
    __TS__Spread(DOWNPOUR_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_0,
    __TS__Spread(DROSS_BOSSES_SET:values())
)
--- The set of unique bosses for Basement, Cellar, and so on.
local ALL_BASEMENT_BOSSES_SET = __TS__New(
    ____Set_1,
    {__TS__SparseArraySpread(____array_0)}
)
local BASEMENT_STAGE_TYPE_TO_BOSS_SET_MAP = __TS__New(Map, {
    {StageType.ORIGINAL, BASEMENT_BOSSES_SET},
    {StageType.WRATH_OF_THE_LAMB, CELLAR_BOSSES_SET},
    {StageType.AFTERBIRTH, BURNING_BASEMENT_BOSSES_SET},
    {StageType.REPENTANCE, DOWNPOUR_BOSSES_SET},
    {StageType.REPENTANCE_B, DROSS_BOSSES_SET}
})
--- Contains just the bosses in Caves (not e.g. Flooded Caves).
local CAVES_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.CHUB) .. ".") .. tostring(ChubVariant.CHUB),
        (tostring(EntityType.CHUB) .. ".") .. tostring(ChubVariant.CHAD),
        tostring(EntityType.GURDY) .. ".0",
        tostring(EntityType.PESTILENCE) .. ".0",
        tostring(EntityType.PEEP) .. ".0",
        (tostring(EntityType.FISTULA_BIG) .. ".") .. tostring(FistulaVariant.FISTULA),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0",
        tostring(EntityType.GURDY_JR) .. ".0",
        tostring(EntityType.MEGA_MAW) .. ".0",
        tostring(EntityType.MEGA_FATTY) .. ".0",
        tostring(EntityType.STAIN) .. ".0",
        (tostring(EntityType.RAG_MEGA) .. ".") .. tostring(RagMegaVariant.RAG_MEGA),
        (tostring(EntityType.BIG_HORN) .. ".") .. tostring(BigHornVariant.BIG_HORN),
        tostring(EntityType.BUMBINO) .. ".0"
    }
)
--- Contains just the bosses in Catacombs (not e.g. Flooded Caves).
local CATACOMBS_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.LARRY_JR) .. ".") .. tostring(LarryJrVariant.THE_HOLLOW),
        (tostring(EntityType.CHUB) .. ".") .. tostring(ChubVariant.CARRION_QUEEN),
        (tostring(EntityType.PIN) .. ".") .. tostring(PinVariant.FRAIL),
        tostring(EntityType.PESTILENCE) .. ".0",
        (tostring(EntityType.DUKE) .. ".") .. tostring(DukeVariant.THE_HUSK),
        (tostring(EntityType.PEEP) .. ".") .. tostring(PeepVariant.PEEP),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0",
        tostring(EntityType.GURDY_JR) .. ".0",
        (tostring(EntityType.WIDOW) .. ".") .. tostring(WidowVariant.THE_WRETCHED),
        tostring(EntityType.DARK_ONE) .. ".0",
        (tostring(EntityType.POLYCEPHALUS) .. ".") .. tostring(PolycephalusVariant.POLYCEPHALUS),
        tostring(EntityType.FORSAKEN) .. ".0",
        (tostring(EntityType.RAG_MEGA) .. ".") .. tostring(RagMegaVariant.RAG_MEGA),
        (tostring(EntityType.BIG_HORN) .. ".") .. tostring(BigHornVariant.BIG_HORN),
        tostring(EntityType.BUMBINO) .. ".0"
    }
)
--- Contains just the bosses in Flooded Caves (not e.g. Catacombs).
local FLOODED_CAVES_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.CHUB) .. ".") .. tostring(ChubVariant.CHUB),
        (tostring(EntityType.CHUB) .. ".") .. tostring(ChubVariant.CHAD),
        tostring(EntityType.GURDY) .. ".0",
        (tostring(EntityType.PIN) .. ".") .. tostring(PinVariant.FRAIL),
        tostring(EntityType.PESTILENCE) .. ".0",
        (tostring(EntityType.PEEP) .. ".") .. tostring(PeepVariant.PEEP),
        (tostring(EntityType.FISTULA_BIG) .. ".") .. tostring(FistulaVariant.FISTULA),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0",
        tostring(EntityType.GURDY_JR) .. ".0",
        tostring(EntityType.MEGA_MAW) .. ".0",
        tostring(EntityType.MEGA_FATTY) .. ".0",
        tostring(EntityType.STAIN) .. ".0",
        tostring(EntityType.FORSAKEN) .. ".0",
        (tostring(EntityType.RAG_MEGA) .. ".") .. tostring(RagMegaVariant.RAG_MEGA),
        (tostring(EntityType.BIG_HORN) .. ".") .. tostring(BigHornVariant.BIG_HORN),
        tostring(EntityType.BUMBINO) .. ".0"
    }
)
--- Contains just the bosses in Mines (not e.g. Flooded Caves).
local MINES_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.LARRY_JR) .. ".") .. tostring(LarryJrVariant.TUFF_TWIN),
        tostring(EntityType.REAP_CREEP) .. ".0",
        tostring(EntityType.HORNFEL) .. ".0",
        tostring(EntityType.GIDEON) .. ".0"
    }
)
--- Contains just the bosses in Ashpit (not e.g. Flooded Caves).
local ASHPIT_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.LARRY_JR) .. ".") .. tostring(LarryJrVariant.THE_SHELL),
        (tostring(EntityType.POLYCEPHALUS) .. ".") .. tostring(PolycephalusVariant.THE_PILE),
        tostring(EntityType.GIDEON) .. ".0",
        tostring(EntityType.SINGE) .. ".0",
        tostring(EntityType.CLUTCH) .. ".0"
    }
)
local ____Set_3 = Set
local ____array_2 = __TS__SparseArrayNew(__TS__Spread(CAVES_BOSSES_SET:values()))
__TS__SparseArrayPush(
    ____array_2,
    __TS__Spread(CATACOMBS_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_2,
    __TS__Spread(FLOODED_CAVES_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_2,
    __TS__Spread(MINES_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_2,
    __TS__Spread(ASHPIT_BOSSES_SET:values())
)
--- The set of unique bosses for Caves, Catacombs, and so on.
local ALL_CAVES_BOSSES_SET = __TS__New(
    ____Set_3,
    {__TS__SparseArraySpread(____array_2)}
)
local CAVES_STAGE_TYPE_TO_BOSS_SET_MAP = __TS__New(Map, {
    {StageType.ORIGINAL, CAVES_BOSSES_SET},
    {StageType.WRATH_OF_THE_LAMB, CATACOMBS_BOSSES_SET},
    {StageType.AFTERBIRTH, FLOODED_CAVES_BOSSES_SET},
    {StageType.REPENTANCE, MINES_BOSSES_SET},
    {StageType.REPENTANCE_B, ASHPIT_BOSSES_SET}
})
--- Contains just the bosses in Depths (not e.g. Dank Depths).
local DEPTHS_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.MONSTRO_2) .. ".") .. tostring(Monstro2Variant.MONSTRO_2),
        (tostring(EntityType.MONSTRO_2) .. ".") .. tostring(Monstro2Variant.GISH),
        (tostring(EntityType.MOM) .. ".") .. tostring(MomVariant.MOM),
        (tostring(EntityType.WAR) .. ".") .. tostring(WarVariant.WAR),
        (tostring(EntityType.LOKI) .. ".") .. tostring(LokiVariant.LOKI),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0",
        tostring(EntityType.GATE) .. ".0",
        tostring(EntityType.CAGE) .. ".0",
        tostring(EntityType.BROWNIE) .. ".0",
        tostring(EntityType.SISTERS_VIS) .. ".0",
        tostring(EntityType.REAP_CREEP) .. ".0"
    }
)
--- Contains just the bosses in Necropolis (not e.g. Dank Depths).
local NECROPOLIS_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.MOM) .. ".") .. tostring(MomVariant.MOM),
        (tostring(EntityType.WAR) .. ".") .. tostring(WarVariant.WAR),
        (tostring(EntityType.PEEP) .. ".") .. tostring(PeepVariant.BLOAT),
        (tostring(EntityType.LOKI) .. ".") .. tostring(LokiVariant.LOKI),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0",
        tostring(EntityType.MASK_OF_INFAMY) .. ".0",
        tostring(EntityType.ADVERSARY) .. ".0",
        (tostring(EntityType.POLYCEPHALUS) .. ".") .. tostring(PolycephalusVariant.THE_PILE),
        tostring(EntityType.BROWNIE) .. ".0",
        tostring(EntityType.SISTERS_VIS) .. ".0"
    }
)
--- Contains just the bosses in Dank Depths (not e.g. Necropolis).
local DANK_DEPTHS_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.MONSTRO_2) .. ".") .. tostring(Monstro2Variant.MONSTRO_2),
        (tostring(EntityType.MONSTRO_2) .. ".") .. tostring(Monstro2Variant.GISH),
        (tostring(EntityType.MOM) .. ".") .. tostring(MomVariant.MOM),
        (tostring(EntityType.WAR) .. ".") .. tostring(WarVariant.WAR),
        (tostring(EntityType.LOKI) .. ".") .. tostring(LokiVariant.LOKI),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0",
        tostring(EntityType.GATE) .. ".0",
        tostring(EntityType.CAGE) .. ".0",
        tostring(EntityType.BROWNIE) .. ".0",
        tostring(EntityType.SISTERS_VIS) .. ".0",
        tostring(EntityType.REAP_CREEP) .. ".0"
    }
)
--- Contains just the bosses in Mausoleum (not e.g. Dank Depths).
local MAUSOLEUM_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.MOM) .. ".") .. tostring(MomVariant.MOM),
        tostring(EntityType.SIREN) .. ".0",
        tostring(EntityType.HERETIC) .. ".0"
    }
)
--- Contains just the bosses in Gehenna (not e.g. Dank Depths).
local GEHENNA_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.MOM) .. ".") .. tostring(MomVariant.MOM),
        tostring(EntityType.VISAGE) .. ".0",
        tostring(EntityType.HORNY_BOYS) .. ".0"
    }
)
local ____Set_5 = Set
local ____array_4 = __TS__SparseArrayNew(__TS__Spread(DEPTHS_BOSSES_SET:values()))
__TS__SparseArrayPush(
    ____array_4,
    __TS__Spread(NECROPOLIS_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_4,
    __TS__Spread(DANK_DEPTHS_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_4,
    __TS__Spread(MAUSOLEUM_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_4,
    __TS__Spread(GEHENNA_BOSSES_SET:values())
)
--- The set of unique bosses for Depths, Necropolis, and so on.
local ALL_DEPTHS_BOSSES_SET = __TS__New(
    ____Set_5,
    {__TS__SparseArraySpread(____array_4)}
)
local DEPTHS_STAGE_TYPE_TO_BOSS_SET_MAP = __TS__New(Map, {
    {StageType.ORIGINAL, DEPTHS_BOSSES_SET},
    {StageType.WRATH_OF_THE_LAMB, NECROPOLIS_BOSSES_SET},
    {StageType.AFTERBIRTH, DANK_DEPTHS_BOSSES_SET},
    {StageType.REPENTANCE, MAUSOLEUM_BOSSES_SET},
    {StageType.REPENTANCE_B, GEHENNA_BOSSES_SET}
})
--- Contains just the bosses in Womb (not e.g. Scarred Womb).
local WOMB_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.PIN) .. ".") .. tostring(PinVariant.SCOLEX),
        (tostring(EntityType.WAR) .. ".") .. tostring(WarVariant.CONQUEST),
        tostring(EntityType.DEATH) .. ".0",
        (tostring(EntityType.LOKI) .. ".") .. tostring(LokiVariant.LOKII),
        tostring(EntityType.BLASTOCYST_BIG) .. ".0",
        (tostring(EntityType.MOMS_HEART) .. ".") .. tostring(MomsHeartVariant.MOMS_HEART),
        (tostring(EntityType.MOMS_HEART) .. ".") .. tostring(MomsHeartVariant.IT_LIVES),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0",
        tostring(EntityType.MAMA_GURDY) .. ".0",
        tostring(EntityType.MR_FRED) .. ".0",
        tostring(EntityType.MATRIARCH) .. ".0"
    }
)
--- Contains just the bosses in Utero (not e.g. Scarred Womb).
local UTERO_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.WAR) .. ".") .. tostring(WarVariant.CONQUEST),
        tostring(EntityType.DEATH) .. ".0",
        (tostring(EntityType.DADDY_LONG_LEGS) .. ".") .. tostring(DaddyLongLegsVariant.DADDY_LONG_LEGS),
        (tostring(EntityType.DADDY_LONG_LEGS) .. ".") .. tostring(DaddyLongLegsVariant.TRIACHNID),
        (tostring(EntityType.PEEP) .. ".") .. tostring(PeepVariant.BLOAT),
        (tostring(EntityType.LOKI) .. ".") .. tostring(LokiVariant.LOKII),
        (tostring(EntityType.FISTULA_BIG) .. ".") .. tostring(FistulaVariant.TERATOMA),
        (tostring(EntityType.MOMS_HEART) .. ".") .. tostring(MomsHeartVariant.MOMS_HEART),
        (tostring(EntityType.MOMS_HEART) .. ".") .. tostring(MomsHeartVariant.IT_LIVES),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0"
    }
)
--- Contains just the bosses in Scarred Womb (not e.g. Utero).
local SCARRED_WOMB_BOSSES_SET = __TS__New(
    Set,
    {
        (tostring(EntityType.PIN) .. ".") .. tostring(PinVariant.SCOLEX),
        (tostring(EntityType.WAR) .. ".") .. tostring(WarVariant.CONQUEST),
        tostring(EntityType.DEATH) .. ".0",
        (tostring(EntityType.LOKI) .. ".") .. tostring(LokiVariant.LOKII),
        tostring(EntityType.BLASTOCYST_BIG) .. ".0",
        (tostring(EntityType.MOMS_HEART) .. ".") .. tostring(MomsHeartVariant.MOMS_HEART),
        (tostring(EntityType.MOMS_HEART) .. ".") .. tostring(MomsHeartVariant.IT_LIVES),
        (tostring(EntityType.FALLEN) .. ".") .. tostring(FallenVariant.FALLEN),
        tostring(EntityType.HEADLESS_HORSEMAN) .. ".0",
        (tostring(EntityType.DADDY_LONG_LEGS) .. ".") .. tostring(DaddyLongLegsVariant.TRIACHNID),
        (tostring(EntityType.MAMA_GURDY) .. ".") .. tostring(MamaGurdyVariant.MAMA_GURDY),
        tostring(EntityType.MR_FRED) .. ".0",
        tostring(EntityType.MATRIARCH) .. ".0"
    }
)
--- Contains just the bosses in Corpse (not e.g. Scarred Womb).
local CORPSE_BOSSES_SET = __TS__New(
    Set,
    {
        tostring(EntityType.SCOURGE) .. ".0",
        tostring(EntityType.CHIMERA) .. ".0",
        tostring(EntityType.ROTGUT) .. ".0",
        tostring(EntityType.MOTHER) .. ".0"
    }
)
local ____Set_7 = Set
local ____array_6 = __TS__SparseArrayNew(__TS__Spread(WOMB_BOSSES_SET:values()))
__TS__SparseArrayPush(
    ____array_6,
    __TS__Spread(UTERO_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_6,
    __TS__Spread(SCARRED_WOMB_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_6,
    __TS__Spread(MAUSOLEUM_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_6,
    __TS__Spread(GEHENNA_BOSSES_SET:values())
)
--- The set of unique bosses for Depths, Necropolis, and so on.
local ALL_WOMB_BOSSES_SET = __TS__New(
    ____Set_7,
    {__TS__SparseArraySpread(____array_6)}
)
local WOMB_STAGE_TYPE_TO_BOSS_SET_MAP = __TS__New(Map, {{StageType.ORIGINAL, WOMB_BOSSES_SET}, {StageType.WRATH_OF_THE_LAMB, UTERO_BOSSES_SET}, {StageType.AFTERBIRTH, SCARRED_WOMB_BOSSES_SET}, {StageType.REPENTANCE, CORPSE_BOSSES_SET}})
local BLUE_WOMB_BOSSES_SET = __TS__New(
    Set,
    {tostring(EntityType.HUSH) .. ".0"}
)
local BLUE_WOMB_STAGE_TYPE_TO_BOSS_SET_MAP = __TS__New(Map, {{StageType.ORIGINAL, BLUE_WOMB_BOSSES_SET}})
local SHEOL_BOSSES_SET = __TS__New(
    Set,
    {(tostring(EntityType.SATAN) .. ".") .. tostring(SatanVariant.SATAN)}
)
local CATHEDRAL_BOSSES_SET = __TS__New(
    Set,
    {(tostring(EntityType.ISAAC) .. ".") .. tostring(IsaacVariant.ISAAC)}
)
local ____Set_9 = Set
local ____array_8 = __TS__SparseArrayNew(__TS__Spread(SHEOL_BOSSES_SET:values()))
__TS__SparseArrayPush(
    ____array_8,
    __TS__Spread(CATHEDRAL_BOSSES_SET:values())
)
local ALL_STAGE_10_BOSSES_SET = __TS__New(
    ____Set_9,
    {__TS__SparseArraySpread(____array_8)}
)
local STAGE_10_STAGE_TYPE_TO_BOSS_SET_MAP = __TS__New(Map, {{StageType.ORIGINAL, SHEOL_BOSSES_SET}, {StageType.WRATH_OF_THE_LAMB, CATHEDRAL_BOSSES_SET}})
local DARK_ROOM_BOSSES_SET = __TS__New(
    Set,
    {(tostring(EntityType.THE_LAMB) .. ".") .. tostring(LambVariant.LAMB)}
)
local CHEST_BOSSES_SET = __TS__New(
    Set,
    {(tostring(EntityType.ISAAC) .. ".") .. tostring(IsaacVariant.BLUE_BABY)}
)
local ____Set_11 = Set
local ____array_10 = __TS__SparseArrayNew(__TS__Spread(DARK_ROOM_BOSSES_SET:values()))
__TS__SparseArrayPush(
    ____array_10,
    __TS__Spread(CHEST_BOSSES_SET:values())
)
local ALL_STAGE_11_BOSSES_SET = __TS__New(
    ____Set_11,
    {__TS__SparseArraySpread(____array_10)}
)
local STAGE_11_STAGE_TYPE_TO_BOSS_SET_MAP = __TS__New(Map, {{StageType.ORIGINAL, DARK_ROOM_BOSSES_SET}, {StageType.WRATH_OF_THE_LAMB, CHEST_BOSSES_SET}})
____exports.STAGE_TO_STAGE_TYPE_TO_BOSS_SET_MAP = __TS__New(Map, {
    {1, BASEMENT_STAGE_TYPE_TO_BOSS_SET_MAP},
    {2, BASEMENT_STAGE_TYPE_TO_BOSS_SET_MAP},
    {3, CAVES_STAGE_TYPE_TO_BOSS_SET_MAP},
    {4, CAVES_STAGE_TYPE_TO_BOSS_SET_MAP},
    {5, DEPTHS_STAGE_TYPE_TO_BOSS_SET_MAP},
    {6, DEPTHS_STAGE_TYPE_TO_BOSS_SET_MAP},
    {7, WOMB_STAGE_TYPE_TO_BOSS_SET_MAP},
    {8, WOMB_STAGE_TYPE_TO_BOSS_SET_MAP},
    {9, BLUE_WOMB_STAGE_TYPE_TO_BOSS_SET_MAP},
    {10, STAGE_10_STAGE_TYPE_TO_BOSS_SET_MAP},
    {11, STAGE_11_STAGE_TYPE_TO_BOSS_SET_MAP}
})
____exports.STAGE_TO_COMBINED_BOSS_SET_MAP = __TS__New(Map, {
    {1, ALL_BASEMENT_BOSSES_SET},
    {2, ALL_BASEMENT_BOSSES_SET},
    {3, ALL_CAVES_BOSSES_SET},
    {4, ALL_CAVES_BOSSES_SET},
    {5, ALL_DEPTHS_BOSSES_SET},
    {6, ALL_DEPTHS_BOSSES_SET},
    {7, ALL_WOMB_BOSSES_SET},
    {8, ALL_WOMB_BOSSES_SET},
    {9, BLUE_WOMB_BOSSES_SET},
    {10, ALL_STAGE_10_BOSSES_SET},
    {11, ALL_STAGE_11_BOSSES_SET}
})
local ____Set_13 = Set
local ____array_12 = __TS__SparseArrayNew(__TS__Spread(ALL_BASEMENT_BOSSES_SET:values()))
__TS__SparseArrayPush(
    ____array_12,
    __TS__Spread(ALL_CAVES_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_12,
    __TS__Spread(ALL_DEPTHS_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_12,
    __TS__Spread(ALL_WOMB_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_12,
    __TS__Spread(BLUE_WOMB_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_12,
    __TS__Spread(ALL_STAGE_10_BOSSES_SET:values())
)
__TS__SparseArrayPush(
    ____array_12,
    __TS__Spread(ALL_STAGE_11_BOSSES_SET:values())
)
____exports.ALL_BOSSES_SET = __TS__New(
    ____Set_13,
    {__TS__SparseArraySpread(____array_12)}
)
return ____exports
 end,
["lua_modules.isaacscript-common.sets.sinEntityTypesSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
____exports.SIN_ENTITY_TYPES_SET = __TS__New(Set, {
    EntityType.SLOTH,
    EntityType.LUST,
    EntityType.WRATH,
    EntityType.GLUTTONY,
    EntityType.GREED,
    EntityType.ENVY,
    EntityType.PRIDE
})
return ____exports
 end,
["lua_modules.isaacscript-common.functions.npc"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local ____exports = {}
local NON_ALIVE_NPCS_TYPE_VARIANT, NON_ALIVE_NPCS_TYPE_VARIANT_SUBTYPE
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local BegottenVariant = ____isaac_2Dtypescript_2Ddefinitions.BegottenVariant
local BigHornVariant = ____isaac_2Dtypescript_2Ddefinitions.BigHornVariant
local ChargerSubType = ____isaac_2Dtypescript_2Ddefinitions.ChargerSubType
local ChargerVariant = ____isaac_2Dtypescript_2Ddefinitions.ChargerVariant
local DarkEsauVariant = ____isaac_2Dtypescript_2Ddefinitions.DarkEsauVariant
local DeathVariant = ____isaac_2Dtypescript_2Ddefinitions.DeathVariant
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local MamaGurdyVariant = ____isaac_2Dtypescript_2Ddefinitions.MamaGurdyVariant
local MotherSubType = ____isaac_2Dtypescript_2Ddefinitions.MotherSubType
local MotherVariant = ____isaac_2Dtypescript_2Ddefinitions.MotherVariant
local NpcState = ____isaac_2Dtypescript_2Ddefinitions.NpcState
local PeepVariant = ____isaac_2Dtypescript_2Ddefinitions.PeepVariant
local ProjectilesMode = ____isaac_2Dtypescript_2Ddefinitions.ProjectilesMode
local RaglingVariant = ____isaac_2Dtypescript_2Ddefinitions.RaglingVariant
local VisVariant = ____isaac_2Dtypescript_2Ddefinitions.VisVariant
local ____constants = require("lua_modules.isaacscript-common.constants")
local EGGY_STATE_FRAME_OF_FINAL_SPIDER = ____constants.EGGY_STATE_FRAME_OF_FINAL_SPIDER
local ____entity = require("lua_modules.isaacscript-common.functions.entity")
local getFilteredNewEntities = ____entity.getFilteredNewEntities
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local getNPCs = ____entitySpecific.getNPCs
local getProjectiles = ____entitySpecific.getProjectiles
--- Checks for specific NPCs that have "CanShutDoors" set to true naturally by the game, but should
-- not actually keep the doors closed (like Death's scythes).
function ____exports.isAliveExceptionNPC(self, npc)
    local entityTypeVariant = (tostring(npc.Type) .. ".") .. tostring(npc.Variant)
    if NON_ALIVE_NPCS_TYPE_VARIANT:has(entityTypeVariant) then
        return true
    end
    local entityTypeVariantSubType = (((tostring(npc.Type) .. ".") .. tostring(npc.Variant)) .. ".") .. tostring(npc.SubType)
    if NON_ALIVE_NPCS_TYPE_VARIANT_SUBTYPE:has(entityTypeVariantSubType) then
        return true
    end
    if ____exports.isRaglingDeathPatch(nil, npc) then
        return true
    end
    if ____exports.isDyingEggyWithNoSpidersLeft(nil, npc) then
        return true
    end
    return false
end
--- Helper function to detect the custom death state of an Eggy. Eggies are never actually marked
-- dead by the game. Instead, when Eggies take fatal damage, they go into NpcState.STATE_SUICIDE and
-- spawn 14 Swarm Spiders while their StateFrame ticks upwards.
function ____exports.isDyingEggyWithNoSpidersLeft(self, npc)
    return npc.State == NpcState.SUICIDE and npc.StateFrame >= EGGY_STATE_FRAME_OF_FINAL_SPIDER
end
--- Helper function to detect the custom death state of a Rag Man Ragling. When Rag Man Raglings die,
-- they turn into a patch on the ground and can be revived by Rag Man at a later time. This causes
-- them to show up as an "alive" enemy, so they should usually be filtered out of lists of alive
-- enemies.
function ____exports.isRaglingDeathPatch(self, npc)
    return npc.Type == EntityType.RAGLING and npc.Variant == RaglingVariant.RAG_MANS_RAGLING and npc.State == NpcState.SPECIAL
end
NON_ALIVE_NPCS_TYPE_VARIANT = __TS__New(
    Set,
    {
        (tostring(EntityType.VIS) .. ".") .. tostring(VisVariant.CHUBBER_PROJECTILE),
        (tostring(EntityType.DEATH) .. ".") .. tostring(DeathVariant.DEATH_SCYTHE),
        (tostring(EntityType.PEEP) .. ".") .. tostring(PeepVariant.PEEP_EYE),
        (tostring(EntityType.PEEP) .. ".") .. tostring(PeepVariant.BLOAT_EYE),
        (tostring(EntityType.BEGOTTEN) .. ".") .. tostring(BegottenVariant.BEGOTTEN_CHAIN),
        (tostring(EntityType.MAMA_GURDY) .. ".") .. tostring(MamaGurdyVariant.LEFT_HAND),
        (tostring(EntityType.MAMA_GURDY) .. ".") .. tostring(MamaGurdyVariant.RIGHT_HAND),
        (tostring(EntityType.BIG_HORN) .. ".") .. tostring(BigHornVariant.SMALL_HOLE),
        (tostring(EntityType.BIG_HORN) .. ".") .. tostring(BigHornVariant.BIG_HOLE),
        (tostring(EntityType.DARK_ESAU) .. ".") .. tostring(DarkEsauVariant.DARK_ESAU),
        (tostring(EntityType.DARK_ESAU) .. ".") .. tostring(DarkEsauVariant.PIT)
    }
)
NON_ALIVE_NPCS_TYPE_VARIANT_SUBTYPE = __TS__New(
    Set,
    {
        (((tostring(EntityType.CHARGER) .. ".") .. tostring(ChargerVariant.CHARGER)) .. ".") .. tostring(ChargerSubType.MY_SHADOW),
        (((tostring(EntityType.MOTHER) .. ".") .. tostring(MotherVariant.MOTHER_1)) .. ".") .. tostring(MotherSubType.PHASE_2)
    }
)
--- Helper function to make an NPC fire a projectile. Returns the fired projectile. Use this function
-- instead of the `EntityNPC.FireProjectiles` method, since that returns void.
-- 
-- @param npc The NPC to fire the projectile from.
-- @param position The staring position of the projectile.
-- @param velocity The starting velocity of the projectile.
-- @param projectilesMode The mode of the projectile. Optional. Default is
-- `ProjectilesMode.ONE_PROJECTILE`.
-- @param projectileParams The parameters of the projectile. Optional. Default is
-- `ProjectileParams()`.
-- @returns The fired projectile.
function ____exports.fireProjectiles(self, npc, position, velocity, projectilesMode, projectileParams)
    if projectilesMode == nil then
        projectilesMode = ProjectilesMode.ONE_PROJECTILE
    end
    if projectileParams == nil then
        projectileParams = ProjectileParams()
    end
    local oldProjectiles = getProjectiles(nil, projectileParams.Variant)
    npc:FireProjectiles(position, velocity, projectilesMode, projectileParams)
    local newProjectiles = getProjectiles(nil, projectileParams.Variant)
    return getFilteredNewEntities(nil, oldProjectiles, newProjectiles)
end
--- Helper function to get all of the non-dead NPCs in the room.
-- 
-- This function will not include NPCs on an internal blacklist, such as Death's scythes or Big Horn
-- holes.
function ____exports.getAliveNPCs(self, matchingEntityType, matchingVariant, matchingSubType, ignoreFriendly)
    if ignoreFriendly == nil then
        ignoreFriendly = false
    end
    local npcs = getNPCs(
        nil,
        matchingEntityType,
        matchingVariant,
        matchingSubType,
        ignoreFriendly
    )
    return __TS__ArrayFilter(
        npcs,
        function(____, npc) return not npc:IsDead() and not ____exports.isAliveExceptionNPC(nil, npc) end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.challenges"] = function(...) 
local ____exports = {}
local ____challengeNames = require("lua_modules.isaacscript-common.objects.challengeNames")
local CHALLENGE_NAMES = ____challengeNames.CHALLENGE_NAMES
local DEFAULT_CHALLENGE_NAME = ____challengeNames.DEFAULT_CHALLENGE_NAME
--- Get the proper name for a `Challenge` enum. This will only work for vanilla challenges.
function ____exports.getChallengeName(self, challenge)
    local challengeName = CHALLENGE_NAMES[challenge]
    return challengeName == nil and DEFAULT_CHALLENGE_NAME or challengeName
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.challengeNames"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local Challenge = ____isaac_2Dtypescript_2Ddefinitions.Challenge
____exports.DEFAULT_CHALLENGE_NAME = "Unknown"
____exports.CHALLENGE_NAMES = {
    [Challenge.NULL] = ____exports.DEFAULT_CHALLENGE_NAME,
    [Challenge.PITCH_BLACK] = "Pitch Black",
    [Challenge.HIGH_BROW] = "High Brow",
    [Challenge.HEAD_TRAUMA] = "Head Trauma",
    [Challenge.DARKNESS_FALLS] = "Darkness Falls",
    [Challenge.THE_TANK] = "The Tank",
    [Challenge.SOLAR_SYSTEM] = "Solar System",
    [Challenge.SUICIDE_KING] = "Suicide King",
    [Challenge.CAT_GOT_YOUR_TONGUE] = "Cat Got Your Tongue",
    [Challenge.DEMO_MAN] = "Demo Man",
    [Challenge.CURSED] = "Cursed!",
    [Challenge.GLASS_CANNON] = "Glass Cannon",
    [Challenge.WHEN_LIFE_GIVES_LEMONS] = "When Life Gives You Lemons",
    [Challenge.BEANS] = "Beans!",
    [Challenge.ITS_IN_THE_CARDS] = "It's In The Cards",
    [Challenge.SLOW_ROLL] = "Slow Roll",
    [Challenge.COMPUTER_SAVY] = "Computer Savvy",
    [Challenge.WAKA_WAKA] = "Waka Waka",
    [Challenge.THE_HOST] = "The Host",
    [Challenge.THE_FAMILY_MAN] = "The Family Man",
    [Challenge.PURIST] = "Purist",
    [Challenge.XXXXXXXXL] = "XXXXXXXXL",
    [Challenge.SPEED] = "SPEED!",
    [Challenge.BLUE_BOMBER] = "Blue Bomber",
    [Challenge.PAY_TO_PLAY] = "PAY TO PLAY",
    [Challenge.HAVE_A_HEART] = "Have a Heart",
    [Challenge.I_RULE] = "I RULE!",
    [Challenge.BRAINS] = "BRAINS!",
    [Challenge.PRIDE_DAY] = "PRIDE DAY!",
    [Challenge.ONANS_STREAK] = "Onan's Streak",
    [Challenge.GUARDIAN] = "The Guardian",
    [Challenge.BACKASSWARDS] = "Backasswards",
    [Challenge.APRILS_FOOL] = "Aprils Fool",
    [Challenge.POKEY_MANS] = "Pokey Mans",
    [Challenge.ULTRA_HARD] = "Ultra Hard",
    [Challenge.PONG] = "Pong",
    [Challenge.SCAT_MAN] = "Scat Man",
    [Challenge.BLOODY_MARY] = "Bloody Mary",
    [Challenge.BAPTISM_BY_FIRE] = "Baptism By Fire",
    [Challenge.ISAACS_AWAKENING] = "Isaac's Awakening",
    [Challenge.SEEING_DOUBLE] = "Seeing Double",
    [Challenge.PICA_RUN] = "Pica Run",
    [Challenge.HOT_POTATO] = "Hot Potato",
    [Challenge.CANTRIPPED] = "Cantripped!",
    [Challenge.RED_REDEMPTION] = "Red Redemption",
    [Challenge.DELETE_THIS] = "DELETE THIS"
}
return ____exports
 end,
["lua_modules.isaacscript-common.functions.chargeBar"] = function(...) 
local ____exports = {}
local getChargeBarClamp
local ____constants = require("lua_modules.isaacscript-common.constants")
local VectorZero = ____constants.VectorZero
function getChargeBarClamp(self, charges, maxCharges)
    local meterMultiplier = 24 / maxCharges
    local meterClip = 26 - charges * meterMultiplier
    return Vector(0, meterClip)
end
local CHARGE_BAR_ANM2 = "gfx/ui/ui_chargebar.anm2"
--- Constructor for a `ChargeBarSprites` object. For more information, see the `renderChargeBar`
-- helper function.
function ____exports.newChargeBarSprites(self, maxCharges)
    local back = Sprite()
    back:Load(CHARGE_BAR_ANM2, true)
    back:Play("BarEmpty", true)
    local meter = Sprite()
    meter:Load(CHARGE_BAR_ANM2, true)
    meter:Play("BarFull", true)
    local meterBattery = Sprite()
    meterBattery:Load(CHARGE_BAR_ANM2, true)
    meterBattery:Play("BarFull", true)
    local lines = Sprite()
    lines:Load(CHARGE_BAR_ANM2, true)
    lines:Play(
        "BarOverlay" .. tostring(maxCharges),
        true
    )
    return {
        back = back,
        meter = meter,
        meterBattery = meterBattery,
        lines = lines,
        maxCharges = maxCharges
    }
end
--- Helper function to render a charge bar on the screen. First, call the `newChargeBarSprites`
-- function to initialize the sprites, and then call this function on every render frame.
function ____exports.renderChargeBar(self, sprites, position, normalCharges, batteryCharges)
    sprites.back:Render(position, VectorZero, VectorZero)
    local normalChargesClamp = getChargeBarClamp(nil, normalCharges, sprites.maxCharges)
    sprites.meter:Render(position, normalChargesClamp, VectorZero)
    local batteryChargesClamp = getChargeBarClamp(nil, batteryCharges, sprites.maxCharges)
    sprites.meterBattery:Render(position, batteryChargesClamp, VectorZero)
    sprites.lines:Render(position, VectorZero, VectorZero)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.collectibleCacheFlag"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local Set = ____lualib.Set
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CacheFlag = ____isaac_2Dtypescript_2Ddefinitions.CacheFlag
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local itemConfig = ____cachedClasses.itemConfig
local ____collectibleSet = require("lua_modules.isaacscript-common.functions.collectibleSet")
local getCollectibleArray = ____collectibleSet.getCollectibleArray
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local hasFlag = ____flag.hasFlag
local ____set = require("lua_modules.isaacscript-common.functions.set")
local copySet = ____set.copySet
local getSortedSetValues = ____set.getSortedSetValues
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local ____repeat = ____utils["repeat"]
function ____exports.collectibleHasCacheFlag(self, collectibleType, cacheFlag)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    if itemConfigItem == nil then
        return false
    end
    return hasFlag(nil, itemConfigItem.CacheFlags, cacheFlag)
end
local CACHE_FLAG_TO_COLLECTIBLES_MAP = __TS__New(Map)
local function initCacheFlagMap(self)
    for ____, cacheFlag in ipairs(getEnumValues(nil, CacheFlag)) do
        local collectiblesSet = __TS__New(Set)
        for ____, collectibleType in ipairs(getCollectibleArray(nil)) do
            if ____exports.collectibleHasCacheFlag(nil, collectibleType, cacheFlag) then
                collectiblesSet:add(collectibleType)
            end
        end
        CACHE_FLAG_TO_COLLECTIBLES_MAP:set(cacheFlag, collectiblesSet)
    end
end
--- Returns a set containing every collectible type with the given cache flag, including modded
-- collectibles.
function ____exports.getCollectiblesForCacheFlag(self, cacheFlag)
    if CACHE_FLAG_TO_COLLECTIBLES_MAP.size == 0 then
        initCacheFlagMap(nil)
    end
    local collectiblesSet = CACHE_FLAG_TO_COLLECTIBLES_MAP:get(cacheFlag)
    if collectiblesSet == nil then
        return __TS__New(Set)
    end
    return copySet(nil, collectiblesSet)
end
--- Returns an array containing every collectible type that the player has that matches the provided
-- CacheFlag.
-- 
-- For example, if the cache flag is `CacheFlag.FLYING`, and the player has one Lord of the Pit and
-- two Dead Doves, then this function would return:
-- 
-- ```ts
-- [
--   CollectibleType.LORD_OF_THE_PIT,
--   CollectibleType.DEAD_DOVE,
--   CollectibleType.DEAD_DOVE,
-- ]
-- ```
function ____exports.getPlayerCollectiblesForCacheFlag(self, player, cacheFlag)
    local collectiblesForCacheFlag = ____exports.getCollectiblesForCacheFlag(nil, cacheFlag)
    local playerCollectibles = {}
    for ____, collectibleType in ipairs(getSortedSetValues(nil, collectiblesForCacheFlag)) do
        local numCollectibles = player:GetCollectibleNum(collectibleType)
        ____repeat(
            nil,
            numCollectibles,
            function()
                playerCollectibles[#playerCollectibles + 1] = collectibleType
            end
        )
    end
    return playerCollectibles
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.debug"] = function(...) 
local ____exports = {}
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
--- Helper function to get a stack trace.
-- 
-- This will only work if the `--luadebug` launch option is enabled or the Racing+ sandbox is
-- enabled.
function ____exports.getTraceback(self)
    if debug ~= nil then
        return debug.traceback()
    end
    if sandboxGetTraceback ~= nil then
        return sandboxGetTraceback()
    end
    return "stack traceback:\n(the \"--luadebug\" flag is not enabled)"
end
--- Players can boot the game with an launch option called "--luadebug", which will enable additional
-- functionality that is considered to be unsafe. For more information about this flag, see the
-- wiki: https://bindingofisaacrebirth.fandom.com/wiki/Launch_Options
-- 
-- When this flag is enabled, the global environment will be slightly different. The differences are
-- documented here: https://wofsauge.github.io/IsaacDocs/rep/Globals.html
-- 
-- This function uses the `package` global variable as a proxy to determine if the "--luadebug" flag
-- is enabled or not.
function ____exports.isLuaDebugEnabled(self)
    return _G.package ~= nil
end
--- Helper function to print a stack trace to the "log.txt" file, similar to JavaScript's
-- `console.trace` function.
-- 
-- This will only work if the `--luadebug` launch option is enabled or the Racing+ sandbox is
-- enabled.
function ____exports.traceback(self)
    local tracebackOutput = ____exports.getTraceback(nil)
    log(tracebackOutput)
end
local function setDebugFunctionsGlobal(self)
    if _G.debug == nil and sandboxGetTraceback == nil then
        return
    end
    local globals = _G
    globals.getTraceback = ____exports.getTraceback
    globals.traceback = ____exports.traceback
end
if ____exports.isLuaDebugEnabled(nil) or sandboxGetTraceback ~= nil then
    setDebugFunctionsGlobal(nil)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.deepCopyTests"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__TypeOf = ____lualib.__TS__TypeOf
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local Set = ____lualib.Set
local ____exports = {}
local copiedObjectIsTable, copiedObjectHasKeyAndValueString, copiedTableHasKeyAndValueNumber, copiedTableDoesNotCoerceTypes, copiedObjectHasNoReferencesForPrimitivesForward, copiedObjectHasNoReferencesForPrimitivesBackward, copiedObjectHasNoReferencesForArray, copiedObjectHasChildObject, copiedMapIsMap, copiedMapHasValue, copiedSetIsSet, copiedSetHasValue, copiedMapHasChildMap, copiedDefaultMapHasChildDefaultMap, copiedDefaultMapHasBrand
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____SerializationBrand = require("lua_modules.isaacscript-common.enums.private.SerializationBrand")
local SerializationBrand = ____SerializationBrand.SerializationBrand
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____array = require("lua_modules.isaacscript-common.functions.array")
local arrayEquals = ____array.arrayEquals
local ____deepCopy = require("lua_modules.isaacscript-common.functions.deepCopy")
local deepCopy = ____deepCopy.deepCopy
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
local ____tstlClass = require("lua_modules.isaacscript-common.functions.tstlClass")
local isDefaultMap = ____tstlClass.isDefaultMap
local isTSTLMap = ____tstlClass.isTSTLMap
local isTSTLSet = ____tstlClass.isTSTLSet
local ____types = require("lua_modules.isaacscript-common.functions.types")
local isNumber = ____types.isNumber
local isString = ____types.isString
local isTable = ____types.isTable
function copiedObjectIsTable(self)
    local oldObject = {abc = "def"}
    local newObject = deepCopy(nil, oldObject)
    if not isTable(nil, newObject) then
        error("The copied object had a type of: " .. __TS__TypeOf(newObject))
    end
end
function copiedObjectHasKeyAndValueString(self)
    local keyToLookFor = "abc"
    local valueToLookFor = "def"
    local oldObject = {abc = valueToLookFor}
    local newTable = deepCopy(nil, oldObject)
    local newObject = newTable
    local value = newObject[keyToLookFor]
    if value == nil then
        error("The copied object did not have a key of: " .. keyToLookFor)
    end
    if not isString(nil, value) then
        error("The copied object had a value type of: " .. __TS__TypeOf(value))
    end
    if value ~= valueToLookFor then
        error("The copied object had a value of: " .. value)
    end
end
function copiedTableHasKeyAndValueNumber(self)
    local keyToLookFor = 123
    local valueToLookFor = 456
    local oldTable = {}
    oldTable[keyToLookFor] = valueToLookFor
    local newObject = deepCopy(nil, oldTable)
    local newTable = newObject
    local value = newTable[keyToLookFor]
    if value == nil then
        error("The copied object did not have a key of: " .. tostring(keyToLookFor))
    end
    if not isNumber(nil, value) then
        error("The copied object had a value type of: " .. __TS__TypeOf(value))
    end
    if value ~= valueToLookFor then
        error("The copied object had a value of: " .. tostring(value))
    end
end
function copiedTableDoesNotCoerceTypes(self)
    local keyToLookFor = 123
    local valueToLookFor = 456
    local oldTable = {}
    oldTable[keyToLookFor] = valueToLookFor
    local newObject = deepCopy(nil, oldTable)
    local newTable = newObject
    local keyString = tostring(keyToLookFor)
    local valueString = tostring(valueToLookFor)
    local valueFromString = newTable[keyString]
    if valueFromString ~= nil then
        error("The copied object had a string key of: " .. keyString)
    end
    local value = newTable[keyToLookFor]
    if value == valueString then
        error("The copied object had a value that incorrectly matched the string of: " .. valueString)
    end
end
function copiedObjectHasNoReferencesForPrimitivesForward(self)
    local originalStringValue = "abcdef"
    local originalNumberValue = 123
    local oldObject = {abc = originalStringValue, def = originalNumberValue}
    local newTable = deepCopy(nil, oldObject)
    local newObject = newTable
    oldObject.abc = "newValue"
    if oldObject.abc == newObject.abc then
        error("The copied object has a string reference going forward.")
    end
    oldObject.def = 456
    if oldObject.def == newObject.def then
        error("The copied object has a number reference going forward.")
    end
end
function copiedObjectHasNoReferencesForPrimitivesBackward(self)
    local originalStringValue = "abcdef"
    local originalNumberValue = 123
    local oldObject = {abc = originalStringValue, def = originalNumberValue}
    local newTable = deepCopy(nil, oldObject)
    local newObject = newTable
    newObject.abc = "newValue"
    if newObject.abc == oldObject.abc then
        error("The copied object has a string reference going backward.")
    end
    newObject.def = 456
    if newObject.def == oldObject.def then
        error("The copied object has a number reference going backward.")
    end
end
function copiedObjectHasNoReferencesForArray(self)
    local oldObject = {abc = {1, 2, 3}}
    local newTable = deepCopy(nil, oldObject)
    local newObject = newTable
    if oldObject.abc == newObject.abc then
        error("The copied object has the same point to the child array.")
    end
    if not arrayEquals(nil, oldObject.abc, newObject.abc) then
        error("The copied object does not have an equal array.")
    end
    local ____oldObject_abc_0, ____1_1 = oldObject.abc, 1
    ____oldObject_abc_0[____1_1] = ____oldObject_abc_0[____1_1] + 1
    if arrayEquals(nil, oldObject.abc, newObject.abc) then
        error("The copied object has an equal array after a modification to the old array.")
    end
    local ____oldObject_abc_2, ____1_3 = oldObject.abc, 1
    ____oldObject_abc_2[____1_3] = ____oldObject_abc_2[____1_3] - 1
    local ____newObject_abc_4, ____1_5 = newObject.abc, 1
    ____newObject_abc_4[____1_5] = ____newObject_abc_4[____1_5] + 1
    if arrayEquals(nil, oldObject.abc, newObject.abc) then
        error("The copied object has an equal array after a modification to the new array.")
    end
    local ____newObject_abc_6, ____1_7 = newObject.abc, 1
    ____newObject_abc_6[____1_7] = ____newObject_abc_6[____1_7] - 1
end
function copiedObjectHasChildObject(self)
    local childObjectIndex = "abc"
    local keyToLookFor = "def"
    local valueToLookFor = "ghi"
    local oldObject = {abc = {def = valueToLookFor}}
    local newTable = deepCopy(nil, oldObject)
    local newObject = newTable
    local childObject = newObject[childObjectIndex]
    if childObject == nil then
        error("Failed to find the child object at index: " .. childObjectIndex)
    end
    if not isTable(nil, childObject) then
        error("The copied child object had a type of: " .. __TS__TypeOf(childObject))
    end
    local value = childObject[keyToLookFor]
    if value == nil then
        error("The child object did not have a key of: " .. keyToLookFor)
    end
    if not isString(nil, value) then
        error("The child object value had a type of: " .. __TS__TypeOf(value))
    end
    if value ~= valueToLookFor then
        error("The child object value was: " .. valueToLookFor)
    end
end
function copiedMapIsMap(self)
    local keyToLookFor = "abc"
    local valueToLookFor = "def"
    local oldMap = __TS__New(Map)
    oldMap:set(keyToLookFor, valueToLookFor)
    local newObject = deepCopy(nil, oldMap)
    local newMap = newObject
    if not isTable(nil, newMap) then
        error("The copied Map had a type of: " .. __TS__TypeOf(newMap))
    end
    if not isTSTLMap(nil, newMap) then
        error("The copied Map was not a Map.")
    end
end
function copiedMapHasValue(self)
    local keyToLookFor = "abc"
    local valueToLookFor = "def"
    local oldMap = __TS__New(Map)
    oldMap:set(keyToLookFor, valueToLookFor)
    local newTable = deepCopy(nil, oldMap)
    local newMap = newTable
    local value = newMap:get(keyToLookFor)
    if value == nil then
        error("The copied Map did not have a key of: " .. keyToLookFor)
    end
    if value ~= valueToLookFor then
        error("The copied Map did not have a value of: " .. valueToLookFor)
    end
end
function copiedSetIsSet(self)
    local valueToLookFor = "abc"
    local oldSet = __TS__New(Set)
    oldSet:add(valueToLookFor)
    local newTable = deepCopy(nil, oldSet)
    local newSet = newTable
    if not isTable(nil, newSet) then
        error("The copied Set had a type of: " .. __TS__TypeOf(newSet))
    end
    if not isTSTLSet(nil, newSet) then
        error("The copied Set was not a Map.")
    end
end
function copiedSetHasValue(self)
    local valueToLookFor = "abc"
    local oldSet = __TS__New(Set)
    oldSet:add(valueToLookFor)
    local newTable = deepCopy(nil, oldSet)
    local newSet = newTable
    local hasValue = newSet:has(valueToLookFor)
    if not hasValue then
        error("The copied Set did not have a value of: " .. valueToLookFor)
    end
end
function copiedMapHasChildMap(self)
    local childMapKey = 123
    local childMapValue = 456
    local oldChildMap = __TS__New(Map)
    oldChildMap:set(childMapKey, childMapValue)
    local keyToLookFor = "abc"
    local oldMap = __TS__New(Map)
    oldMap:set(keyToLookFor, oldChildMap)
    local newTable = deepCopy(nil, oldMap)
    local newMap = newTable
    local newChildMap = newMap:get(keyToLookFor)
    if newChildMap == nil then
        error("The copied Map did not have a child map at key: " .. keyToLookFor)
    end
    if not isTable(nil, newChildMap) then
        error("The copied child Map had a type of: " .. __TS__TypeOf(newChildMap))
    end
    if not isTSTLMap(nil, newChildMap) then
        error("The copied child Map was not a Map.")
    end
    local value = newChildMap:get(childMapKey)
    if value == nil then
        error("The copied child Map did not have a key of: " .. tostring(childMapKey))
    end
    if value ~= childMapValue then
        error("The copied child Map did not have a value of: " .. tostring(childMapValue))
    end
end
function copiedDefaultMapHasChildDefaultMap(self)
    local parentMapKey = "abc"
    local childMapKey1 = 123
    local childMapKey2 = 456
    local childMapDefaultValue = 1
    local childMapCustomValue = 2
    local oldParentMap = __TS__New(
        DefaultMap,
        function() return __TS__New(DefaultMap, childMapDefaultValue) end
    )
    local oldChildMap = oldParentMap:getAndSetDefault(parentMapKey)
    oldChildMap:getAndSetDefault(childMapKey1)
    oldChildMap:set(childMapKey2, childMapCustomValue)
    local newTable = deepCopy(nil, oldParentMap)
    local newParentMap = newTable
    local newChildMap = newParentMap:get(parentMapKey)
    if newChildMap == nil then
        error("The copied DefaultMap did not have a child map at key: " .. parentMapKey)
    end
    if not isTable(nil, newChildMap) then
        error("The copied child DefaultMap had a type of: " .. __TS__TypeOf(newChildMap))
    end
    if not isDefaultMap(nil, newChildMap) then
        error("The copied child DefaultMap was not a DefaultMap.")
    end
    local newChildMapValue1 = newChildMap:get(childMapKey1)
    if newChildMapValue1 == nil then
        error("The copied child DefaultMap did not have a key of: " .. tostring(childMapKey1))
    end
    if newChildMapValue1 ~= childMapDefaultValue then
        error("The copied child Map did not have a default value of: " .. tostring(childMapDefaultValue))
    end
    local newChildMapValue2 = newChildMap:get(childMapKey2)
    if newChildMapValue2 == nil then
        error("The copied child DefaultMap did not have a key of: " .. tostring(childMapKey2))
    end
    if newChildMapValue2 ~= childMapCustomValue then
        error("The copied child Map did not have a custom value of: " .. tostring(childMapCustomValue))
    end
end
function copiedDefaultMapHasBrand(self)
    local oldDefaultValue = "foo"
    local oldDefaultMap = __TS__New(DefaultMap, oldDefaultValue)
    local newTable = deepCopy(nil, oldDefaultMap, SerializationType.SERIALIZE)
    if not (newTable[SerializationBrand.DEFAULT_MAP] ~= nil) then
        error("The copied DefaultMap does not have the brand: " .. SerializationBrand.DEFAULT_MAP)
    end
end
function ____exports.deepCopyTests(self)
    copiedObjectIsTable(nil)
    copiedObjectHasKeyAndValueString(nil)
    copiedTableHasKeyAndValueNumber(nil)
    copiedTableDoesNotCoerceTypes(nil)
    copiedObjectHasNoReferencesForPrimitivesForward(nil)
    copiedObjectHasNoReferencesForPrimitivesBackward(nil)
    copiedObjectHasNoReferencesForArray(nil)
    copiedObjectHasChildObject(nil)
    copiedMapIsMap(nil)
    copiedMapHasValue(nil)
    copiedSetIsSet(nil)
    copiedSetHasValue(nil)
    copiedMapHasChildMap(nil)
    copiedDefaultMapHasChildDefaultMap(nil)
    copiedDefaultMapHasBrand(nil)
    log("All deep copy tests passed!")
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.easing"] = function(...) 
local ____exports = {}
function ____exports.easeOutBounce(self, x)
    local n1 = 7.5625
    local d1 = 2.75
    if x < 1 / d1 then
        return n1 * x * x
    end
    if x < 2 / d1 then
        x = x - 1.5 / d1
        return n1 * x * x + 0.75
    end
    if x < 2.5 / d1 then
        x = x - 2.25 / d1
        return n1 * x * x + 0.9375
    end
    x = x - 2.625 / d1
    return n1 * x * x + 0.984375
end
function ____exports.easeInSine(self, x)
    return 1 - math.cos(x * math.pi / 2)
end
function ____exports.easeOutSine(self, x)
    return math.sin(x * math.pi / 2)
end
function ____exports.easeInOutSine(self, x)
    return -(math.cos(math.pi * x) - 1) / 2
end
function ____exports.easeInCubic(self, x)
    return x * x * x
end
function ____exports.easeOutCubic(self, x)
    return 1 - (1 - x) ^ 3
end
function ____exports.easeInOutCubic(self, x)
    return x < 0.5 and 4 * x * x * x or 1 - (-2 * x + 2) ^ 3 / 2
end
function ____exports.easeInQuint(self, x)
    return x * x * x * x * x
end
function ____exports.easeOutQuint(self, x)
    return 1 - (1 - x) ^ 5
end
function ____exports.easeInOutQuint(self, x)
    return x < 0.5 and 16 * x * x * x * x * x or 1 - (-2 * x + 2) ^ 5 / 2
end
function ____exports.easeInCirc(self, x)
    return 1 - math.sqrt(1 - x ^ 2)
end
function ____exports.easeOutCirc(self, x)
    return math.sqrt(1 - (x - 1) ^ 2)
end
function ____exports.easeInOutCirc(self, x)
    return x < 0.5 and (1 - math.sqrt(1 - (2 * x) ^ 2)) / 2 or (math.sqrt(1 - (-2 * x + 2) ^ 2) + 1) / 2
end
function ____exports.easeInElastic(self, x)
    local c4 = 2 * math.pi / 3
    return x == 0 and 0 or (x == 1 and 1 or -2 ^ (10 * x - 10) * math.sin((x * 10 - 10.75) * c4))
end
function ____exports.easeOutElastic(self, x)
    local c4 = 2 * math.pi / 3
    return x == 0 and 0 or (x == 1 and 1 or 2 ^ (-10 * x) * math.sin((x * 10 - 0.75) * c4) + 1)
end
function ____exports.easeInOutElastic(self, x)
    local c5 = 2 * math.pi / 4.5
    return x == 0 and 0 or (x == 1 and 1 or (x < 0.5 and -(2 ^ (20 * x - 10) * math.sin((20 * x - 11.125) * c5)) / 2 or 2 ^ (-20 * x + 10) * math.sin((20 * x - 11.125) * c5) / 2 + 1))
end
function ____exports.easeInQuad(self, x)
    return x * x
end
function ____exports.easeOutQuad(self, x)
    return 1 - (1 - x) * (1 - x)
end
function ____exports.easeInOutQuad(self, x)
    return x < 0.5 and 2 * x * x or 1 - (-2 * x + 2) ^ 2 / 2
end
function ____exports.easeInQuart(self, x)
    return x * x * x * x
end
function ____exports.easeOutQuart(self, x)
    return 1 - (1 - x) ^ 4
end
function ____exports.easeInOutQuart(self, x)
    return x < 0.5 and 8 * x * x * x * x or 1 - (-2 * x + 2) ^ 4 / 2
end
function ____exports.easeInExpo(self, x)
    return x == 0 and 0 or 2 ^ (10 * x - 10)
end
function ____exports.easeOutExpo(self, x)
    return x == 1 and 1 or 1 - 2 ^ (-10 * x)
end
function ____exports.easeInOutExpo(self, x)
    return x == 0 and 0 or (x == 1 and 1 or (x < 0.5 and 2 ^ (20 * x - 10) / 2 or (2 - 2 ^ (-20 * x + 10)) / 2))
end
function ____exports.easeInBack(self, x)
    local c1 = 1.70158
    local c3 = c1 + 1
    return c3 * x * x * x - c1 * x * x
end
function ____exports.easeOutBack(self, x)
    local c1 = 1.70158
    local c3 = c1 + 1
    return 1 + c3 * (x - 1) ^ 3 + c1 * (x - 1) ^ 2
end
function ____exports.easeInOutBack(self, x)
    local c1 = 1.70158
    local c2 = c1 * 1.525
    return x < 0.5 and (2 * x) ^ 2 * ((c2 + 1) * 2 * x - c2) / 2 or ((2 * x - 2) ^ 2 * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2
end
function ____exports.easeInBounce(self, x)
    return 1 - ____exports.easeOutBounce(nil, 1 - x)
end
function ____exports.easeInOutBounce(self, x)
    return x < 0.5 and (1 - ____exports.easeOutBounce(nil, 1 - 2 * x)) / 2 or (1 + ____exports.easeOutBounce(nil, 2 * x - 1)) / 2
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.eden"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ItemConfigTag = ____isaac_2Dtypescript_2Ddefinitions.ItemConfigTag
local ____collectibles = require("lua_modules.isaacscript-common.functions.collectibles")
local isHiddenCollectible = ____collectibles.isHiddenCollectible
local isPassiveCollectible = ____collectibles.isPassiveCollectible
local ____collectibleSet = require("lua_modules.isaacscript-common.functions.collectibleSet")
local getCollectibleSet = ____collectibleSet.getCollectibleSet
local ____collectibleTag = require("lua_modules.isaacscript-common.functions.collectibleTag")
local collectibleHasTag = ____collectibleTag.collectibleHasTag
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local getRandomSeed = ____rng.getRandomSeed
local ____set = require("lua_modules.isaacscript-common.functions.set")
local copySet = ____set.copySet
local getRandomSetElement = ____set.getRandomSetElement
local EDEN_PASSIVE_COLLECTIBLES_SET = __TS__New(Set)
local function initCollectibleSet(self)
    local collectibleSet = getCollectibleSet(nil)
    for ____, collectibleType in __TS__Iterator(collectibleSet:values()) do
        if isPassiveCollectible(nil, collectibleType) and not isHiddenCollectible(nil, collectibleType) and not collectibleHasTag(nil, collectibleType, ItemConfigTag.NO_EDEN) then
            EDEN_PASSIVE_COLLECTIBLES_SET:add(collectibleType)
        end
    end
end
function ____exports.getEdenPassives(self)
    if EDEN_PASSIVE_COLLECTIBLES_SET.size == 0 then
        initCollectibleSet(nil)
    end
    return copySet(nil, EDEN_PASSIVE_COLLECTIBLES_SET)
end
function ____exports.getRandomEdenPassive(self, seedOrRNG, exceptions)
    if seedOrRNG == nil then
        seedOrRNG = getRandomSeed(nil)
    end
    if exceptions == nil then
        exceptions = {}
    end
    if EDEN_PASSIVE_COLLECTIBLES_SET.size == 0 then
        initCollectibleSet(nil)
    end
    return getRandomSetElement(nil, EDEN_PASSIVE_COLLECTIBLES_SET, seedOrRNG, exceptions)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.effects"] = function(...) 
local ____exports = {}
local ____math = require("lua_modules.isaacscript-common.functions.math")
local inRectangle = ____math.inRectangle
--- For `EntityType.EFFECT` (1000), `EffectVariant.DICE_FLOOR` (76)
____exports.DICE_FLOOR_TRIGGER_SQUARE_SIZE = 75
--- Helper function to see if a player is close enough to activate a Dice Room floor.
function ____exports.isCloseEnoughToTriggerDiceFloor(self, player, diceFloor)
    local topLeft = diceFloor.Position + Vector(-____exports.DICE_FLOOR_TRIGGER_SQUARE_SIZE, -____exports.DICE_FLOOR_TRIGGER_SQUARE_SIZE)
    local bottomRight = diceFloor.Position + Vector(____exports.DICE_FLOOR_TRIGGER_SQUARE_SIZE, ____exports.DICE_FLOOR_TRIGGER_SQUARE_SIZE)
    return inRectangle(nil, player.Position, topLeft, bottomRight)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.entityTypes"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
--- For `EntityType.SLOT` (6)
function ____exports.isSlot(self, entity)
    return entity.Type == EntityType.SLOT
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.familiars"] = function(...) 
local ____exports = {}
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local itemConfig = ____cachedClasses.itemConfig
local ____familiarsThatShootPlayerTearsSet = require("lua_modules.isaacscript-common.sets.familiarsThatShootPlayerTearsSet")
local FAMILIARS_THAT_SHOOT_PLAYER_TEARS_SET = ____familiarsThatShootPlayerTearsSet.FAMILIARS_THAT_SHOOT_PLAYER_TEARS_SET
--- Helper function to add and remove familiars based on a target amount that you specify.
-- 
-- This is a convenience wrapper around the `EntityPlayer.CheckFamiliar` method. Use this helper
-- function instead so that you do not have to retrieve the `ItemConfigItem` and so that you do not
-- specify an incorrect RNG object. (The vanilla method is bugged in that it does not increment the
-- RNG object; see the documentation of the method for more details.)
-- 
-- This function is meant to be called in the EvaluateCache callback (when the cache flag is equal
-- to `CacheFlag.FAMILIARS`).
-- 
-- Note that this function is only meant to be used in special circumstances where the familiar
-- count is completely custom and does not correspond to the amount of collectibles. For the general
-- case, use the `checkFamiliarFromCollectibles` helper function instead.
-- 
-- Note that this will spawn familiars with a completely random `InitSeed`. When calculating random
-- events for this familiar, you should use a data structure that maps familiar `InitSeed` to RNG
-- objects that are initialized based on the seed from
-- `EntityPlayer.GetCollectibleRNG(collectibleType)`.
-- 
-- @param player The player that owns the familiars.
-- @param collectibleType The collectible type of the collectible associated with this familiar.
-- @param targetCount The number of familiars that should exist. This function will add or remove
-- familiars until it matches the target count.
-- @param familiarVariant The variant of the familiar to spawn or remove.
-- @param familiarSubType Optional. The sub-type of the familiar to spawn or remove. If not
-- specified, it will search for existing familiars of all sub-types, and
-- spawn new familiars with a sub-type of 0.
function ____exports.checkFamiliar(self, player, collectibleType, targetCount, familiarVariant, familiarSubType)
    local itemConfigItem = itemConfig:GetCollectible(collectibleType)
    player:CheckFamiliar(
        familiarVariant,
        targetCount,
        RNG(),
        itemConfigItem,
        familiarSubType
    )
end
--- Helper function to add and remove familiars based on the amount of associated collectibles that a
-- player has.
-- 
-- Use this helper function instead of invoking the `EntityPlayer.CheckFamiliar` method directly so
-- that the target count is handled automatically.
-- 
-- This function is meant to be called in the EvaluateCache callback (when the cache flag is equal
-- to `CacheFlag.FAMILIARS`).
-- 
-- Use this function when the amount of familiars should be equal to the amount of associated
-- collectibles that the player has (plus any extras from having used Box of Friends or Monster
-- Manual). If you instead need to have a custom amount of familiars, use the `checkFamiliars`
-- function instead.
-- 
-- Note that this will spawn familiars with a completely random `InitSeed`. When calculating random
-- events for this familiar, you should use a data structure that maps familiar `InitSeed` to RNG
-- objects that are initialized based on the seed from
-- `EntityPlayer.GetCollectibleRNG(collectibleType)`.
-- 
-- @param player The player that owns the familiars and collectibles.
-- @param collectibleType The collectible type of the collectible associated with this familiar.
-- @param familiarVariant The variant of the familiar to spawn or remove.
-- @param familiarSubType Optional. The sub-type of the familiar to spawn or remove. If not
-- specified, it will search for existing familiars of all sub-types, and
-- spawn new familiars with a sub-type of 0.
function ____exports.checkFamiliarFromCollectibles(self, player, collectibleType, familiarVariant, familiarSubType)
    local numCollectibles = player:GetCollectibleNum(collectibleType)
    local effects = player:GetEffects()
    local numCollectibleEffects = effects:GetCollectibleEffectNum(collectibleType)
    local targetCount = numCollectibles + numCollectibleEffects
    ____exports.checkFamiliar(
        nil,
        player,
        collectibleType,
        targetCount,
        familiarVariant,
        familiarSubType
    )
end
function ____exports.isFamiliarThatShootsPlayerTears(self, familiar)
    return FAMILIARS_THAT_SHOOT_PLAYER_TEARS_SET:has(familiar.Variant)
end
return ____exports
 end,
["lua_modules.isaacscript-common.sets.familiarsThatShootPlayerTearsSet"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local FamiliarVariant = ____isaac_2Dtypescript_2Ddefinitions.FamiliarVariant
____exports.FAMILIARS_THAT_SHOOT_PLAYER_TEARS_SET = __TS__New(Set, {
    FamiliarVariant.SCISSORS,
    FamiliarVariant.INCUBUS,
    FamiliarVariant.FATES_REWARD,
    FamiliarVariant.SPRINKLER,
    FamiliarVariant.LOST_SOUL,
    FamiliarVariant.TWISTED_BABY,
    FamiliarVariant.BLOOD_BABY,
    FamiliarVariant.DECAP_ATTACK
})
return ____exports
 end,
["lua_modules.isaacscript-common.functions.flying"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CacheFlag = ____isaac_2Dtypescript_2Ddefinitions.CacheFlag
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local NullItemID = ____isaac_2Dtypescript_2Ddefinitions.NullItemID
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____collectibleCacheFlag = require("lua_modules.isaacscript-common.functions.collectibleCacheFlag")
local getCollectiblesForCacheFlag = ____collectibleCacheFlag.getCollectiblesForCacheFlag
local ____set = require("lua_modules.isaacscript-common.functions.set")
local copySet = ____set.copySet
local deleteSetsFromSet = ____set.deleteSetsFromSet
local FLYING_CHARACTERS = __TS__New(Set, {
    PlayerType.AZAZEL,
    PlayerType.THE_LOST,
    PlayerType.THE_SOUL,
    PlayerType.THE_LOST_B,
    PlayerType.JACOB_2_B,
    PlayerType.THE_SOUL_B
})
local FLYING_TRINKETS = __TS__New(Set, {TrinketType.BAT_WING, TrinketType.AZAZELS_STUMP})
local FLYING_NULL_ITEMS = {NullItemID.REVERSE_SUN, NullItemID.SPIRIT_SHACKLES_SOUL, NullItemID.LOST_CURSE}
local CONDITIONAL_FLYING_COLLECTIBLE_TYPES = {CollectibleType.BIBLE, CollectibleType.EMPTY_VESSEL, CollectibleType.ASTRAL_PROJECTION, CollectibleType.RECALL}
--- Returns a set of all of the collectibles that grant flight. This is derived from collectibles
-- that have `CacheFlag.FLYING` set in the "items.xml" file.
-- 
-- Collectibles that only grant flight conditionally are manually pruned. Collectibles such as Empty
-- Vessel should be checked for via the `hasFlyingTemporaryEffect` function.
-- 
-- @param pruneConditionalItems Whether or not collectibles that only grant flight conditionally
-- should be included in the set (like Empty Vessel).
function ____exports.getFlyingCollectibles(self, pruneConditionalItems)
    local collectiblesWithFlyingCacheFlag = getCollectiblesForCacheFlag(nil, CacheFlag.FLYING)
    local collectiblesWithAllCacheFlag = getCollectiblesForCacheFlag(nil, CacheFlag.ALL)
    deleteSetsFromSet(nil, collectiblesWithFlyingCacheFlag, collectiblesWithAllCacheFlag)
    if pruneConditionalItems then
        for ____, collectibleType in ipairs(CONDITIONAL_FLYING_COLLECTIBLE_TYPES) do
            collectiblesWithFlyingCacheFlag:delete(collectibleType)
        end
    end
    return collectiblesWithFlyingCacheFlag
end
--- Returns a set of all of the trinkets that grant flight. (All trinkets that grant flight do so
-- conditionally, like Bat Wing.)
function ____exports.getFlyingTrinkets(self)
    return copySet(nil, FLYING_TRINKETS)
end
function ____exports.hasFlyingTemporaryEffect(self, player)
    local effects = player:GetEffects()
    local flyingCollectibles = ____exports.getFlyingCollectibles(nil, false)
    for ____, collectibleType in __TS__Iterator(flyingCollectibles:values()) do
        if effects:HasCollectibleEffect(collectibleType) then
            return true
        end
    end
    local flyingTrinkets = ____exports.getFlyingTrinkets(nil)
    for ____, trinketType in __TS__Iterator(flyingTrinkets:values()) do
        if effects:HasTrinketEffect(trinketType) then
            return true
        end
    end
    for ____, nullItemID in ipairs(FLYING_NULL_ITEMS) do
        if effects:HasNullEffect(nullItemID) then
            return true
        end
    end
    return false
end
function ____exports.isFlyingCharacter(self, player)
    local character = player:GetPlayerType()
    return FLYING_CHARACTERS:has(character)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.globals"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArraySort = ____lualib.__TS__ArraySort
local __TS__ArrayForEach = ____lualib.__TS__ArrayForEach
local ____exports = {}
local isRacingPlusSandboxEnabled
local ____debug = require("lua_modules.isaacscript-common.functions.debug")
local isLuaDebugEnabled = ____debug.isLuaDebugEnabled
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
local ____set = require("lua_modules.isaacscript-common.functions.set")
local addSetsToSet = ____set.addSetsToSet
local copySet = ____set.copySet
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local twoDimensionalSort = ____utils.twoDimensionalSort
function isRacingPlusSandboxEnabled(self)
    return getParentFunctionDescription ~= nil
end
local DEFAULT_GLOBALS = __TS__New(Set, {
    "ActionTriggers",
    "ActiveSlot",
    "BabySubType",
    "BackdropType",
    "BatterySubType",
    "BedSubType",
    "BitSet128",
    "BombSubType",
    "BombVariant",
    "ButtonAction",
    "CacheFlag",
    "Card",
    "Challenge",
    "ChampionColor",
    "ChestSubType",
    "CoinSubType",
    "CollectibleType",
    "Color",
    "CppContainer",
    "DamageFlag",
    "Difficulty",
    "Direction",
    "DoorSlot",
    "DoorState",
    "DoorVariant",
    "EffectVariant",
    "Entity",
    "EntityBomb",
    "EntityCollisionClass",
    "EntityEffect",
    "EntityFamiliar",
    "EntityFlag",
    "EntityGridCollisionClass",
    "EntityKnife",
    "EntityLaser",
    "EntityNPC",
    "EntityPartition",
    "EntityPickup",
    "EntityPlayer",
    "EntityProjectile",
    "EntityPtr",
    "EntityRef",
    "EntityTear",
    "EntityType",
    "FamiliarVariant",
    "Font",
    "Game",
    "GameStateFlag",
    "GetPtrHash",
    "GridCollisionClass",
    "GridEntity",
    "GridEntityDesc",
    "GridEntityDoor",
    "GridEntityPit",
    "GridEntityPoop",
    "GridEntityPressurePlate",
    "GridEntityRock",
    "GridEntitySpikes",
    "GridEntityTNT",
    "GridEntityType",
    "GridRooms",
    "HUD",
    "HeartSubType",
    "Input",
    "InputHook",
    "Isaac",
    "ItemConfig",
    "ItemPool",
    "ItemPoolType",
    "ItemType",
    "KColor",
    "KeySubType",
    "Keyboard",
    "LaserOffset",
    "LaserSubType",
    "Level",
    "LevelCurse",
    "LevelStage",
    "LevelStateFlag",
    "LocustSubtypes",
    "ModCallbacks",
    "Mouse",
    "Music",
    "MusicManager",
    "NpcState",
    "NullItemID",
    "Options",
    "PathFinder",
    "PickupPrice",
    "PickupVariant",
    "PillColor",
    "PillEffect",
    "PlayerForm",
    "PlayerSpriteLayer",
    "PlayerType",
    "PlayerTypes",
    "PoopPickupSubType",
    "PoopSpellType",
    "ProjectileFlags",
    "ProjectileParams",
    "ProjectileVariant",
    "QueueItemData",
    "REPENTANCE",
    "RNG",
    "Random",
    "RandomVector",
    "RegisterMod",
    "RenderMode",
    "Room",
    "RoomConfig",
    "RoomDescriptor",
    "RoomShape",
    "RoomTransitionAnim",
    "RoomType",
    "SFXManager",
    "SackSubType",
    "SeedEffect",
    "Seeds",
    "ShockwaveParams",
    "SkinColor",
    "SortingLayer",
    "SoundEffect",
    "Sprite",
    "StageType",
    "StartDebug",
    "TearFlags",
    "TearParams",
    "TearVariant",
    "TemporaryEffect",
    "TemporaryEffects",
    "TrinketType",
    "UseFlag",
    "Vector",
    "WeaponType",
    "_G",
    "_VERSION",
    "assert",
    "collectgarbage",
    "coroutine",
    "dofile",
    "error",
    "getmetatable",
    "include",
    "ipairs",
    "load",
    "loadfile",
    "math",
    "next",
    "pairs",
    "pcall",
    "print",
    "rawequal",
    "rawget",
    "rawlen",
    "rawset",
    "require",
    "select",
    "setmetatable",
    "string",
    "table",
    "tonumber",
    "tostring",
    "type",
    "utf8",
    "xpcall"
})
local LUA_DEBUG_ADDED_GLOBALS = __TS__New(Set, {"debug", "io", "os", "package"})
local RACING_PLUS_SANDBOX_ADDED_GLOBALS = __TS__New(Set, {"sandboxTraceback", "sandboxGetTraceback", "getParentFunctionDescription"})
--- Helper function to get a set containing all of the global variable names that are contained
-- within the Isaac environment by default.
-- 
-- Returns a slightly different set depending on whether the "--luadebug" flag is enabled or not.
function ____exports.getDefaultGlobals(self)
    local defaultGlobals = copySet(nil, DEFAULT_GLOBALS)
    if isLuaDebugEnabled(nil) then
        addSetsToSet(nil, defaultGlobals, LUA_DEBUG_ADDED_GLOBALS)
    end
    if isRacingPlusSandboxEnabled(nil) then
        addSetsToSet(nil, defaultGlobals, RACING_PLUS_SANDBOX_ADDED_GLOBALS)
    end
    return defaultGlobals
end
--- Helper function to get an array of any added global variables in the Isaac Lua environment.
-- Returns a sorted array of key/value tuples.
function ____exports.getNewGlobals(self)
    local defaultGlobals = ____exports.getDefaultGlobals(nil)
    local newGlobals = {}
    for key, value in pairs(_G) do
        if not defaultGlobals:has(key) then
            local keyValueTuple = {key, value}
            newGlobals[#newGlobals + 1] = keyValueTuple
        end
    end
    __TS__ArraySort(newGlobals, twoDimensionalSort)
    return newGlobals
end
function ____exports.logNewGlobals(self)
    local newGlobals = ____exports.getNewGlobals(nil)
    log("List of added global variables in the Isaac environment:")
    if #newGlobals == 0 then
        log("- n/a (no extra global variables found)")
    end
    __TS__ArrayForEach(
        newGlobals,
        function(____, ____bindingPattern0, i)
            local value
            local key
            key = ____bindingPattern0[1]
            value = ____bindingPattern0[2]
            log((((tostring(i + 1) .. ") ") .. tostring(key)) .. " - ") .. tostring(value))
        end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.gridEntitySpecific"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayEvery = ____lualib.__TS__ArrayEvery
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local GridEntityType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityType
local PressurePlateState = ____isaac_2Dtypescript_2Ddefinitions.PressurePlateState
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____gridEntity = require("lua_modules.isaacscript-common.functions.gridEntity")
local getGridEntities = ____gridEntity.getGridEntities
local getMatchingGridEntities = ____gridEntity.getMatchingGridEntities
--- Helper function to get all of the grid entities of type `GridEntityType.TRAPDOOR` in the room.
-- Specify a specific trapdoor variant to select only trapdoors of that variant.
function ____exports.getCrawlSpaces(self, crawlSpaceVariant)
    if crawlSpaceVariant == nil then
        return getGridEntities(nil, GridEntityType.CRAWL_SPACE)
    end
    return getMatchingGridEntities(nil, GridEntityType.CRAWL_SPACE, crawlSpaceVariant)
end
--- Helper function to get all of the `GridEntityPit` in the room.
function ____exports.getPits(self)
    local gridEntities = getGridEntities(nil)
    local pits = {}
    for ____, gridEntity in ipairs(gridEntities) do
        local pit = gridEntity:ToPit()
        if pit ~= nil then
            pits[#pits + 1] = pit
        end
    end
    return pits
end
--- Helper function to get all of the `GridEntityPoop` in the room.
function ____exports.getPoops(self)
    local gridEntities = getGridEntities(nil)
    local poops = {}
    for ____, gridEntity in ipairs(gridEntities) do
        local poop = gridEntity:ToPoop()
        if poop ~= nil then
            poops[#poops + 1] = poop
        end
    end
    return poops
end
--- Helper function to get all of the `GridEntityPressurePlate` in the room.
function ____exports.getPressurePlates(self)
    local gridEntities = getGridEntities(nil)
    local pressurePlates = {}
    for ____, gridEntity in ipairs(gridEntities) do
        local pressurePlate = gridEntity:ToPressurePlate()
        if pressurePlate ~= nil then
            pressurePlates[#pressurePlates + 1] = pressurePlate
        end
    end
    return pressurePlates
end
--- Helper function to get all of the `GridEntityRock` in the room.
function ____exports.getRocks(self)
    local gridEntities = getGridEntities(nil)
    local rocks = {}
    for ____, gridEntity in ipairs(gridEntities) do
        local rock = gridEntity:ToRock()
        if rock ~= nil then
            rocks[#rocks + 1] = rock
        end
    end
    return rocks
end
--- Helper function to get all of the `GridEntitySpikes` in the room.
function ____exports.getSpikes(self)
    local gridEntities = getGridEntities(nil)
    local spikes = {}
    for ____, gridEntity in ipairs(gridEntities) do
        local spike = gridEntity:ToSpikes()
        if spike ~= nil then
            spikes[#spikes + 1] = spike
        end
    end
    return spikes
end
--- Helper function to get all of the `GridEntityTNT` in the room.
function ____exports.getTNT(self)
    local gridEntities = getGridEntities(nil)
    local tntArray = {}
    for ____, gridEntity in ipairs(gridEntities) do
        local tnt = gridEntity:ToTNT()
        if tnt ~= nil then
            tntArray[#tntArray + 1] = tnt
        end
    end
    return tntArray
end
--- Helper function to get all of the grid entities of type `GridEntityType.TRAPDOOR` in the room.
-- Specify a specific trapdoor variant to select only trapdoors of that variant.
function ____exports.getTrapdoors(self, trapdoorVariant)
    if trapdoorVariant == nil then
        return getGridEntities(nil, GridEntityType.TRAPDOOR)
    end
    return getMatchingGridEntities(nil, GridEntityType.TRAPDOOR, trapdoorVariant)
end
--- Helper function to determine if all of the pressure plates in the current room are pushed.
-- Returns true if there are no pressure plates in the room.
function ____exports.isAllPressurePlatesPushed(self)
    local room = game:GetRoom()
    local hasPressurePlates = room:HasTriggerPressurePlates()
    if not hasPressurePlates then
        return true
    end
    local pressurePlates = ____exports.getPressurePlates(nil)
    return __TS__ArrayEvery(
        pressurePlates,
        function(____, pressurePlate) return pressurePlate.State == PressurePlateState.PRESSURE_PLATE_PRESSED end
    )
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.language"] = function(...) 
local ____exports = {}
local ____languageNames = require("lua_modules.isaacscript-common.objects.languageNames")
local LANGUAGE_NAMES = ____languageNames.LANGUAGE_NAMES
--- Helper function to convert the language abbreviation from `Options.Language` to the "full"
-- language name.
-- 
-- For example, if the current language is set to Korean, `Options.Language` will be set to "kr",
-- and this function will return "Korean".
function ____exports.getLanguageName(self)
    local languageAbbreviation = Options.Language
    return LANGUAGE_NAMES[languageAbbreviation]
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.languageNames"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local LanguageAbbreviation = ____isaac_2Dtypescript_2Ddefinitions.LanguageAbbreviation
____exports.LANGUAGE_NAMES = {
    [LanguageAbbreviation.ENGLISH] = "English",
    [LanguageAbbreviation.JAPANESE] = "Japanese",
    [LanguageAbbreviation.KOREAN] = "Korean",
    [LanguageAbbreviation.CHINESE_SIMPLE] = "Chinese (Simple)",
    [LanguageAbbreviation.RUSSIAN] = "Russian",
    [LanguageAbbreviation.GERMAN] = "German",
    [LanguageAbbreviation.SPANISH] = "Spanish"
}
return ____exports
 end,
["lua_modules.isaacscript-common.functions.level"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local DoorSlot = ____isaac_2Dtypescript_2Ddefinitions.DoorSlot
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____rooms = require("lua_modules.isaacscript-common.functions.rooms")
local getNumRooms = ____rooms.getNumRooms
local getRooms = ____rooms.getRooms
local isDoorSlotValidAtGridIndexForRedRoom = ____rooms.isDoorSlotValidAtGridIndexForRedRoom
function ____exports.fillLevelWithRedRooms(self)
    local level = game:GetLevel()
    local numRooms
    repeat
        do
            local rooms = getRooms(nil)
            numRooms = #rooms
            for ____, roomDescriptor in ipairs(rooms) do
                for ____, doorSlot in ipairs(getEnumValues(nil, DoorSlot)) do
                    if isDoorSlotValidAtGridIndexForRedRoom(nil, doorSlot, roomDescriptor.GridIndex) then
                        level:MakeRedRoomDoor(roomDescriptor.GridIndex, doorSlot)
                    end
                end
            end
        end
    until not (numRooms ~= getNumRooms(nil))
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.mergeTests"] = function(...) 
local ____exports = {}
local oldTableHasUpdatedValue, newTableHasSameValue, oldTableHasUpdatedValueFromNull, oldTableHasSerializedIsaacAPIClass, oldTableHasFilledInterface, oldTableHasVector, oldTableHasVectorSerialized, oldTableHasRNG, oldTableHasRNGSerialized
local ____SerializationType = require("lua_modules.isaacscript-common.enums.SerializationType")
local SerializationType = ____SerializationType.SerializationType
local ____merge = require("lua_modules.isaacscript-common.features.saveDataManager.merge")
local merge = ____merge.merge
local ____deepCopy = require("lua_modules.isaacscript-common.functions.deepCopy")
local deepCopy = ____deepCopy.deepCopy
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local isRNG = ____rng.isRNG
local newRNG = ____rng.newRNG
local ____serialization = require("lua_modules.isaacscript-common.functions.serialization")
local isSerializedIsaacAPIClass = ____serialization.isSerializedIsaacAPIClass
local ____vector = require("lua_modules.isaacscript-common.functions.vector")
local copyVector = ____vector.copyVector
local isVector = ____vector.isVector
function oldTableHasUpdatedValue(self)
    local key = "foo"
    local oldValue = "bar"
    local newValue = "baz"
    local oldTable = {foo = oldValue}
    local newTable = {foo = newValue}
    merge(nil, oldTable, newTable, "oldTableHasUpdatedValue")
    local oldTableValue = oldTable[key]
    if oldTableValue ~= newValue then
        error("The old table does not have a value of: " .. newValue)
    end
end
function newTableHasSameValue(self)
    local key = "foo"
    local oldValue = "bar"
    local newValue = "baz"
    local oldTable = {foo = oldValue}
    local newTable = {foo = newValue}
    merge(nil, oldTable, newTable, "newTableHasSameValue")
    local newTableValue = newTable[key]
    if newTableValue ~= newValue then
        error("The new table does not have a value of: " .. newValue)
    end
end
function oldTableHasUpdatedValueFromNull(self)
    local key = "foo"
    local newValue = "baz"
    local oldTable = {foo = nil}
    local newTable = {foo = newValue}
    merge(nil, oldTable, newTable, "oldTableHasUpdatedValueFromNull")
    local oldTableValue = oldTable[key]
    if oldTableValue ~= newValue then
        error("The old table does not have a value of: " .. newValue)
    end
end
function oldTableHasSerializedIsaacAPIClass(self)
    local x = 50
    local y = 60
    local vector = Vector(x, y)
    local vectorSerialized = copyVector(nil, vector, SerializationType.SERIALIZE)
    if not isSerializedIsaacAPIClass(nil, vectorSerialized) then
        error("The \"isSerializedIsaacAPIClass\" function says that a serialized vector is not serialized.")
    end
end
function oldTableHasFilledInterface(self)
    local key = "foo"
    local newValue = "baz"
    local oldTable = {foo = nil}
    local foo = {bar = newValue}
    local newTable = {foo = foo}
    merge(nil, oldTable, newTable, "oldTableHasFilledInterface")
    local oldTableValue = oldTable[key]
    if oldTableValue == nil then
        error(("The old table's key of \"" .. key) .. "\" was not filled.")
    end
    if oldTableValue.bar ~= newValue then
        error("The old table's key of \"bar\" was not filled.")
    end
end
function oldTableHasVector(self)
    log("Starting test: oldTableHasVector")
    local key = "foo"
    local x = 50
    local y = 60
    local newValue = Vector(x, y)
    local oldTable = {foo = nil}
    local foo = {bar = newValue}
    local newTable = {foo = foo}
    merge(nil, oldTable, newTable, "oldTableHasVector")
    local oldTableValue = oldTable[key]
    if oldTableValue == nil then
        error(("The old table's key of \"" .. key) .. "\" was not filled.")
    end
    if oldTableValue.bar.X ~= x then
        error("The old table's value for \"x\" does not match: " .. tostring(x))
    end
    if oldTableValue.bar.Y ~= y then
        error("The old table's value for \"y\" does not match: " .. tostring(y))
    end
    if not isVector(nil, oldTableValue.bar) then
        error("The old table's value is not a Vector object.")
    end
end
function oldTableHasVectorSerialized(self)
    log("Starting test: oldTableHasVectorSerialized")
    local key = "foo"
    local x = 50
    local y = 60
    local newValue = Vector(x, y)
    local oldTable = {foo = nil}
    local foo = {bar = newValue}
    local newTable = {foo = foo}
    local newTableSerialized = deepCopy(nil, newTable, SerializationType.SERIALIZE)
    merge(nil, oldTable, newTableSerialized, "oldTableHasVectorSerialized")
    local oldTableValue = oldTable[key]
    if oldTableValue == nil then
        error(("The old table's key of \"" .. key) .. "\" was not filled.")
    end
    if oldTableValue.bar.X ~= x then
        error("The old table's value for \"x\" does not match: " .. tostring(x))
    end
    if oldTableValue.bar.Y ~= y then
        error("The old table's value for \"y\" does not match: " .. tostring(y))
    end
    if not isVector(nil, oldTableValue.bar) then
        error("The old table's value is not a Vector object (during the serialized test).")
    end
end
function oldTableHasRNG(self)
    log("Starting test: oldTableHasRNG")
    local key = "foo"
    local seed = 50
    local newValue = newRNG(nil, seed)
    local oldTable = {foo = nil}
    local foo = {bar = newValue}
    local newTable = {foo = foo}
    merge(nil, oldTable, newTable, "oldTableHasRNG")
    local oldTableValue = oldTable[key]
    if oldTableValue == nil then
        error(("The old table's key of \"" .. key) .. "\" was not filled.")
    end
    if not isRNG(nil, oldTableValue.bar) then
        error("The old table's value is not an RNG object.")
    end
    local newSeed = oldTableValue.bar:GetSeed()
    if newSeed ~= seed then
        error("The old table's seed not match: " .. tostring(seed))
    end
end
function oldTableHasRNGSerialized(self)
    log("Starting test: oldTableHasRNGSerialized")
    local key = "foo"
    local seed = 50
    local newValue = newRNG(nil, seed)
    local oldTable = {foo = nil}
    local foo = {bar = newValue}
    local newTable = {foo = foo}
    local newTableSerialized = deepCopy(nil, newTable, SerializationType.SERIALIZE)
    merge(nil, oldTable, newTableSerialized, "oldTableHasRNGSerialized")
    local oldTableValue = oldTable[key]
    if oldTableValue == nil then
        error(("The old table's key of \"" .. key) .. "\" was not filled.")
    end
    if not isRNG(nil, oldTableValue.bar) then
        error("The old table's value is not an RNG object (during the serialized test).")
    end
    local newSeed = oldTableValue.bar:GetSeed()
    if newSeed ~= seed then
        error("The old table's seed not match: " .. tostring(seed))
    end
end
function ____exports.mergeTests(self)
    oldTableHasUpdatedValue(nil)
    newTableHasSameValue(nil)
    oldTableHasUpdatedValueFromNull(nil)
    oldTableHasSerializedIsaacAPIClass(nil)
    oldTableHasFilledInterface(nil)
    oldTableHasVector(nil)
    oldTableHasVectorSerialized(nil)
    oldTableHasRNG(nil)
    oldTableHasRNGSerialized(nil)
    log("All merge tests passed!")
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.minimap"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____roomData = require("lua_modules.isaacscript-common.functions.roomData")
local getRoomDescriptor = ____roomData.getRoomDescriptor
local ____rooms = require("lua_modules.isaacscript-common.functions.rooms")
local getRoomsInGrid = ____rooms.getRoomsInGrid
--- Helper function to set a particular room's minimap display flags (e.g. whether or not it is
-- visible and so on).
-- 
-- @param roomGridIndex Set to undefined to use the current room index.
-- @param displayFlags The bit flags value to set. (See the `DisplayFlag` enum.)
function ____exports.setRoomDisplayFlags(self, roomGridIndex, displayFlags)
    local roomDescriptor = getRoomDescriptor(nil, roomGridIndex)
    roomDescriptor.DisplayFlags = displayFlags
end
--- Helper function to get the minimap `DisplayFlag` value for every room on the floor. Returns a map
-- that is indexed by the room's safe grid index.
function ____exports.getFloorDisplayFlags(self)
    local displayFlagsMap = __TS__New(Map)
    local roomsInGrid = getRoomsInGrid(nil)
    for ____, roomDescriptor in ipairs(roomsInGrid) do
        displayFlagsMap:set(roomDescriptor.SafeGridIndex, roomDescriptor.DisplayFlags)
    end
    return displayFlagsMap
end
--- Helper function to get a particular room's minimap display flags (e.g. whether or not it is
-- visible and so on).
-- 
-- @param roomGridIndex Optional. Default is the current room index.
function ____exports.getRoomDisplayFlags(self, roomGridIndex)
    local roomDescriptor = getRoomDescriptor(nil, roomGridIndex)
    return roomDescriptor.DisplayFlags
end
--- Helper function to set the minimap `DisplayFlag` value for multiple rooms at once.
-- 
-- This function automatically calls the `Level.UpdateVisibility` after setting the flags so that
-- the changes will be immediately visible.
-- 
-- @param displayFlagsMap A map of the display flags that is indexed by the room's safe grid index.
function ____exports.setDisplayFlags(self, displayFlagsMap)
    local level = game:GetLevel()
    for ____, ____value in __TS__Iterator(displayFlagsMap:entries()) do
        local roomGridIndex = ____value[1]
        local displayFlags = ____value[2]
        if MinimapAPI == nil then
            ____exports.setRoomDisplayFlags(nil, roomGridIndex, displayFlags)
        else
            local roomDescriptor = MinimapAPI:GetRoomByIdx(roomGridIndex)
            if roomDescriptor ~= nil then
                roomDescriptor.DisplayFlags = displayFlags
            end
        end
    end
    level:UpdateVisibility()
end
--- Alias for the `setDisplayFlags` function.
function ____exports.setFloorDisplayFlags(self, displayFlagsMap)
    ____exports.setDisplayFlags(nil, displayFlagsMap)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.nextStage"] = function(...) 
local ____exports = {}
local getNextStageBackwardsPath, getStageTypeBackwardsPath
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local GameStateFlag = ____isaac_2Dtypescript_2Ddefinitions.GameStateFlag
local GridRoom = ____isaac_2Dtypescript_2Ddefinitions.GridRoom
local LevelStage = ____isaac_2Dtypescript_2Ddefinitions.LevelStage
local StageType = ____isaac_2Dtypescript_2Ddefinitions.StageType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____stageHistory = require("lua_modules.isaacscript-common.features.stageHistory")
local hasVisitedStage = ____stageHistory.hasVisitedStage
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local areFeaturesInitialized = ____featuresInitialized.areFeaturesInitialized
local ____roomData = require("lua_modules.isaacscript-common.functions.roomData")
local getRoomGridIndex = ____roomData.getRoomGridIndex
local ____stage = require("lua_modules.isaacscript-common.functions.stage")
local calculateStageType = ____stage.calculateStageType
local calculateStageTypeRepentance = ____stage.calculateStageTypeRepentance
local onRepentanceStage = ____stage.onRepentanceStage
function getNextStageBackwardsPath(self, stage, repentanceStage)
    if not areFeaturesInitialized(nil) then
        return stage - 1
    end
    local visitedDownpour1 = hasVisitedStage(nil, LevelStage.BASEMENT_1, StageType.REPENTANCE)
    local visitedDross1 = hasVisitedStage(nil, LevelStage.BASEMENT_1, StageType.REPENTANCE_B)
    local visitedDownpour2 = hasVisitedStage(nil, LevelStage.BASEMENT_2, StageType.REPENTANCE)
    local visitedDross2 = hasVisitedStage(nil, LevelStage.BASEMENT_2, StageType.REPENTANCE_B)
    local visitedMines1 = hasVisitedStage(nil, LevelStage.CAVES_1, StageType.REPENTANCE)
    local visitedAshpit1 = hasVisitedStage(nil, LevelStage.CAVES_1, StageType.REPENTANCE_B)
    local visitedMines2 = hasVisitedStage(nil, LevelStage.DEPTHS_2, StageType.REPENTANCE)
    local visitedAshpit2 = hasVisitedStage(nil, LevelStage.DEPTHS_2, StageType.REPENTANCE_B)
    if stage == LevelStage.BASEMENT_1 then
        if repentanceStage then
            return LevelStage.BASEMENT_1
        end
        return LevelStage.HOME
    end
    if stage == LevelStage.BASEMENT_2 then
        if repentanceStage then
            if visitedDownpour1 or visitedDross1 then
                return LevelStage.BASEMENT_1
            end
            return LevelStage.BASEMENT_2
        end
        return LevelStage.BASEMENT_1
    end
    if stage == LevelStage.CAVES_1 then
        if repentanceStage then
            if visitedDownpour2 or visitedDross2 then
                return LevelStage.BASEMENT_2
            end
            return LevelStage.CAVES_1
        end
        return LevelStage.BASEMENT_2
    end
    if stage == LevelStage.CAVES_2 then
        if repentanceStage then
            if visitedMines1 or visitedAshpit1 then
                return LevelStage.CAVES_1
            end
            return LevelStage.CAVES_2
        end
        return LevelStage.CAVES_1
    end
    if stage == LevelStage.DEPTHS_1 then
        if repentanceStage then
            if visitedMines2 or visitedAshpit2 then
                return LevelStage.CAVES_2
            end
            return LevelStage.DEPTHS_1
        end
        return LevelStage.CAVES_2
    end
    if stage == LevelStage.DEPTHS_2 then
        if repentanceStage then
            return LevelStage.DEPTHS_2
        end
        return LevelStage.DEPTHS_1
    end
    return stage - 1
end
function getStageTypeBackwardsPath(self, stage, nextStage, repentanceStage)
    local visitedDownpour1 = hasVisitedStage(nil, LevelStage.BASEMENT_1, StageType.REPENTANCE)
    local visitedDross1 = hasVisitedStage(nil, LevelStage.BASEMENT_1, StageType.REPENTANCE_B)
    local visitedDownpour2 = hasVisitedStage(nil, LevelStage.BASEMENT_2, StageType.REPENTANCE)
    local visitedDross2 = hasVisitedStage(nil, LevelStage.BASEMENT_2, StageType.REPENTANCE_B)
    local visitedMines1 = hasVisitedStage(nil, LevelStage.CAVES_1, StageType.REPENTANCE)
    local visitedAshpit1 = hasVisitedStage(nil, LevelStage.CAVES_1, StageType.REPENTANCE_B)
    local visitedMines2 = hasVisitedStage(nil, LevelStage.DEPTHS_2, StageType.REPENTANCE)
    local visitedAshpit2 = hasVisitedStage(nil, LevelStage.DEPTHS_2, StageType.REPENTANCE_B)
    if stage == LevelStage.BASEMENT_2 and repentanceStage then
        if visitedDownpour1 then
            return StageType.REPENTANCE
        end
        if visitedDross1 then
            return StageType.REPENTANCE_B
        end
    end
    if stage == LevelStage.CAVES_1 and repentanceStage then
        if visitedDownpour2 then
            return StageType.REPENTANCE
        end
        if visitedDross2 then
            return StageType.REPENTANCE_B
        end
    end
    if stage == LevelStage.CAVES_2 and not repentanceStage then
        if visitedDownpour2 then
            return StageType.REPENTANCE
        end
        if visitedDross2 then
            return StageType.REPENTANCE_B
        end
    end
    if stage == LevelStage.CAVES_2 and repentanceStage then
        if visitedMines1 then
            return StageType.REPENTANCE
        end
        if visitedAshpit1 then
            return StageType.REPENTANCE_B
        end
    end
    if stage == LevelStage.DEPTHS_2 and not repentanceStage then
        if visitedAshpit2 then
            return StageType.REPENTANCE_B
        end
        if visitedMines2 then
            return StageType.REPENTANCE
        end
    end
    return calculateStageType(nil, nextStage)
end
--- Helper function to get the stage that a trapdoor or heaven door would take the player to, based
-- on the current stage, room, and game state flags.
-- 
-- Note that in non-upgraded mods, this function will not account for the player having visited
-- Repentance floors in The Ascent. (Handling this requires stateful tracking as the player
-- progresses through the run.)
function ____exports.getNextStage(self)
    local level = game:GetLevel()
    local backwardsPath = game:GetStateFlag(GameStateFlag.BACKWARDS_PATH)
    local mausoleumHeartKilled = game:GetStateFlag(GameStateFlag.MAUSOLEUM_HEART_KILLED)
    local stage = level:GetStage()
    local repentanceStage = onRepentanceStage(nil)
    local roomGridIndex = getRoomGridIndex(nil)
    if backwardsPath then
        return getNextStageBackwardsPath(nil, stage, repentanceStage)
    end
    repeat
        local ____switch4 = roomGridIndex
        local ____cond4 = ____switch4 == GridRoom.BLUE_WOMB
        if ____cond4 then
            do
                return LevelStage.BLUE_WOMB
            end
        end
        ____cond4 = ____cond4 or ____switch4 == GridRoom.THE_VOID
        if ____cond4 then
            do
                return LevelStage.THE_VOID
            end
        end
        ____cond4 = ____cond4 or ____switch4 == GridRoom.SECRET_EXIT
        if ____cond4 then
            do
                if repentanceStage then
                    return stage + 1
                end
                if stage == LevelStage.DEPTHS_2 then
                    return LevelStage.DEPTHS_2
                end
                return stage
            end
        end
    until true
    if repentanceStage and stage == LevelStage.BASEMENT_2 then
        return LevelStage.CAVES_2
    end
    if repentanceStage and stage == LevelStage.CAVES_2 then
        return LevelStage.DEPTHS_2
    end
    if repentanceStage and stage == LevelStage.DEPTHS_2 then
        if mausoleumHeartKilled then
            return LevelStage.WOMB_1
        end
        return LevelStage.WOMB_2
    end
    if stage == LevelStage.WOMB_2 then
        return LevelStage.SHEOL_CATHEDRAL
    end
    if stage == LevelStage.DARK_ROOM_CHEST then
        return LevelStage.DARK_ROOM_CHEST
    end
    if stage == LevelStage.THE_VOID then
        return LevelStage.THE_VOID
    end
    return stage + 1
end
--- Helper function to get the stage type that a trapdoor or heaven door would take the player to,
-- based on the current stage, room, and game state flags.
-- 
-- @param upwards Whether or not the player should go up to Cathedral in the case of being on Womb
-- 2. Default is false.
function ____exports.getNextStageType(self, upwards)
    if upwards == nil then
        upwards = false
    end
    local backwardsPath = game:GetStateFlag(GameStateFlag.BACKWARDS_PATH)
    local mausoleumHeartKilled = game:GetStateFlag(GameStateFlag.MAUSOLEUM_HEART_KILLED)
    local level = game:GetLevel()
    local stage = level:GetStage()
    local stageType = level:GetStageType()
    local repentanceStage = onRepentanceStage(nil)
    local roomGridIndex = getRoomGridIndex(nil)
    local nextStage = ____exports.getNextStage(nil)
    if backwardsPath then
        return getStageTypeBackwardsPath(nil, stage, nextStage, repentanceStage)
    end
    if roomGridIndex == GridRoom.SECRET_EXIT then
        return calculateStageTypeRepentance(nil, nextStage)
    end
    if repentanceStage and (stage == LevelStage.BASEMENT_1 or stage == LevelStage.CAVES_1 or stage == LevelStage.DEPTHS_1 or stage == LevelStage.WOMB_1) then
        return calculateStageTypeRepentance(nil, nextStage)
    end
    if repentanceStage and stage == LevelStage.DEPTHS_2 and mausoleumHeartKilled then
        return calculateStageTypeRepentance(nil, nextStage)
    end
    if nextStage == LevelStage.BLUE_WOMB then
        return StageType.ORIGINAL
    end
    if nextStage == LevelStage.SHEOL_CATHEDRAL then
        if upwards then
            return StageType.WRATH_OF_THE_LAMB
        end
        return StageType.ORIGINAL
    end
    if nextStage == LevelStage.DARK_ROOM_CHEST then
        if stageType == StageType.ORIGINAL then
            return StageType.ORIGINAL
        end
        return StageType.WRATH_OF_THE_LAMB
    end
    if nextStage == LevelStage.THE_VOID then
        return StageType.ORIGINAL
    end
    if nextStage == LevelStage.HOME then
        return StageType.ORIGINAL
    end
    return calculateStageType(nil, nextStage)
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.stage"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local LevelStage = ____isaac_2Dtypescript_2Ddefinitions.LevelStage
local StageType = ____isaac_2Dtypescript_2Ddefinitions.StageType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____roomTypeGotoPrefixes = require("lua_modules.isaacscript-common.objects.roomTypeGotoPrefixes")
local ROOM_TYPE_GOTO_PREFIXES = ____roomTypeGotoPrefixes.ROOM_TYPE_GOTO_PREFIXES
local ____stageTypeSuffixes = require("lua_modules.isaacscript-common.objects.stageTypeSuffixes")
local STAGE_TYPE_SUFFIXES = ____stageTypeSuffixes.STAGE_TYPE_SUFFIXES
local ____stageTypeToLetter = require("lua_modules.isaacscript-common.objects.stageTypeToLetter")
local STAGE_TYPE_TO_LETTER = ____stageTypeToLetter.STAGE_TYPE_TO_LETTER
function ____exports.isRepentanceStage(self, stageType)
    return stageType == StageType.REPENTANCE or stageType == StageType.REPENTANCE_B
end
function ____exports.onRepentanceStage(self)
    local level = game:GetLevel()
    local stageType = level:GetStageType()
    return ____exports.isRepentanceStage(nil, stageType)
end
--- Helper function to convert a numerical `StageType` into the letter suffix supplied to the "stage"
-- console command. For example, `StageType.REPENTANCE` is the stage type for Downpour, and the
-- console command to go to Downpour is "stage 1c", so this function converts `StageType.REPENTANCE`
-- to "c".
function ____exports.stageTypeToLetter(self, stageType)
    return STAGE_TYPE_TO_LETTER[stageType]
end
--- Helper function that calculates what the stage type should be for the provided stage. This
-- emulates what the game's internal code does.
function ____exports.calculateStageType(self, stage)
    local seeds = game:GetSeeds()
    local stageSeed = seeds:GetStageSeed(stage)
    if stageSeed % 2 == 0 then
        return StageType.WRATH_OF_THE_LAMB
    end
    if stageSeed % 3 == 0 then
        return StageType.AFTERBIRTH
    end
    return StageType.ORIGINAL
end
--- Helper function that calculates what the Repentance stage type should be for the provided stage.
-- This emulates what the game's internal code does.
function ____exports.calculateStageTypeRepentance(self, stage)
    if stage == LevelStage.WOMB_1 or stage == LevelStage.WOMB_2 then
        return StageType.REPENTANCE
    end
    local seeds = game:GetSeeds()
    local adjustedStage = stage + 1
    local stageSeed = seeds:GetStageSeed(adjustedStage)
    local halfStageSeed = math.floor(stageSeed / 2)
    if halfStageSeed % 2 == 0 then
        return StageType.REPENTANCE_B
    end
    return StageType.REPENTANCE
end
--- Helper function to account for Repentance floors being offset by 1. For example, Downpour 2 is
-- the third level of the run, but the game considers it to have a stage of 2. This function will
-- consider Downpour 2 to have a stage of 3.
function ____exports.getEffectiveStage(self)
    local level = game:GetLevel()
    local stage = level:GetStage()
    if ____exports.onRepentanceStage(nil) then
        return stage + 1
    end
    return stage
end
--- Helper function to get the prefix to use with the "goto" console command that would correspond to
-- the provided room type.
function ____exports.getGotoCommandPrefix(self, roomType)
    return ROOM_TYPE_GOTO_PREFIXES[roomType]
end
--- Alias for the `Level.GetStage` method.
function ____exports.getStage(self)
    local level = game:GetLevel()
    return level:GetStage()
end
--- Alias for the `Level.GetStageType` method.
function ____exports.getStageType(self)
    local level = game:GetLevel()
    return level:GetStageType()
end
--- Helper function to directly warp to a specific stage using the "stage" console command.
function ____exports.goToStage(self, stage, stageType)
    local stageTypeLetterSuffix = ____exports.stageTypeToLetter(nil, stageType)
    local command = ("stage " .. tostring(stage)) .. stageTypeLetterSuffix
    Isaac.ExecuteCommand(command)
end
function ____exports.onCathedral(self)
    local level = game:GetLevel()
    local stage = level:GetStage()
    local stageType = level:GetStageType()
    return stage == LevelStage.SHEOL_CATHEDRAL and stageType == StageType.WRATH_OF_THE_LAMB
end
function ____exports.onChest(self)
    local level = game:GetLevel()
    local stage = level:GetStage()
    local stageType = level:GetStageType()
    return stage == LevelStage.DARK_ROOM_CHEST and stageType == StageType.WRATH_OF_THE_LAMB
end
function ____exports.onDarkRoom(self)
    local level = game:GetLevel()
    local stage = level:GetStage()
    local stageType = level:GetStageType()
    return stage == LevelStage.DARK_ROOM_CHEST and stageType == StageType.ORIGINAL
end
--- Returns whether or not the player is on the "final floor" of the particular run. The final floor
-- is defined as one that prevents the player from entering the I AM ERROR room on.
-- 
-- For example, when using Undefined on The Chest, it has a 50% chance of teleporting the player to
-- the Secret Room and a 50% chance of teleporting the player to the Super Secret Room, because the
-- I AM ERROR room is never entered into the list of possibilities.
function ____exports.onFinalFloor(self)
    local level = game:GetLevel()
    local stage = level:GetStage()
    return stage == LevelStage.DARK_ROOM_CHEST or stage == LevelStage.THE_VOID or stage == LevelStage.HOME or stage == LevelStage.WOMB_2 and ____exports.onRepentanceStage(nil)
end
function ____exports.onSheol(self)
    local level = game:GetLevel()
    local stage = level:GetStage()
    local stageType = level:GetStageType()
    return stage == LevelStage.SHEOL_CATHEDRAL and stageType == StageType.ORIGINAL
end
--- Helper function to warp to a new stage/level.
-- 
-- @param stage The stage number to warp to.
-- @param stageType The stage type to warp to.
-- @param reseed Optional. Whether or not to reseed the floor upon arrival. Default is false. Set
-- this to true if you are warping to the same stage but a different stage type (or
-- else the floor layout will be identical to the old floor).
function ____exports.setStage(self, stage, stageType, reseed)
    if reseed == nil then
        reseed = false
    end
    local stageTypeSuffix = STAGE_TYPE_SUFFIXES[stageType]
    local command = ("stage " .. tostring(stage)) .. stageTypeSuffix
    Isaac.ExecuteCommand(command)
    if reseed then
        Isaac.ExecuteCommand("reseed")
    end
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.roomTypeGotoPrefixes"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
____exports.ROOM_TYPE_GOTO_PREFIXES = {
    [RoomType.DEFAULT] = "d.",
    [RoomType.SHOP] = "s.shop.",
    [RoomType.ERROR] = "s.error.",
    [RoomType.TREASURE] = "s.treasure.",
    [RoomType.BOSS] = "s.boss.",
    [RoomType.MINI_BOSS] = "s.miniboss.",
    [RoomType.SECRET] = "s.secret.",
    [RoomType.SUPER_SECRET] = "s.supersecret.",
    [RoomType.ARCADE] = "s.arcade.",
    [RoomType.CURSE] = "s.curse.",
    [RoomType.CHALLENGE] = "s.challenge.",
    [RoomType.LIBRARY] = "s.library.",
    [RoomType.SACRIFICE] = "s.sacrifice.",
    [RoomType.DEVIL] = "s.devil.",
    [RoomType.ANGEL] = "s.angel.",
    [RoomType.DUNGEON] = "s.itemdungeon.",
    [RoomType.BOSS_RUSH] = "s.bossrush.",
    [RoomType.CLEAN_BEDROOM] = "s.isaacs.",
    [RoomType.DIRTY_BEDROOM] = "s.barren.",
    [RoomType.CHEST] = "s.chest.",
    [RoomType.DICE] = "s.dice.",
    [RoomType.BLACK_MARKET] = "s.blackmarket.",
    [RoomType.GREED_EXIT] = "s.greedexit.",
    [RoomType.PLANETARIUM] = "s.planetarium.",
    [RoomType.TELEPORTER] = "s.teleporter.",
    [RoomType.TELEPORTER_EXIT] = "s.teleporterexit.",
    [RoomType.SECRET_EXIT] = "s.secretexit.",
    [RoomType.BLUE] = "s.blue.",
    [RoomType.ULTRA_SECRET] = "s.ultrasecret."
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.stageTypeSuffixes"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local StageType = ____isaac_2Dtypescript_2Ddefinitions.StageType
____exports.STAGE_TYPE_SUFFIXES = {
    [StageType.ORIGINAL] = "",
    [StageType.WRATH_OF_THE_LAMB] = "a",
    [StageType.AFTERBIRTH] = "b",
    [StageType.GREED_MODE] = "",
    [StageType.REPENTANCE] = "c",
    [StageType.REPENTANCE_B] = "d"
}
return ____exports
 end,
["lua_modules.isaacscript-common.objects.stageTypeToLetter"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local StageType = ____isaac_2Dtypescript_2Ddefinitions.StageType
____exports.STAGE_TYPE_TO_LETTER = {
    [StageType.ORIGINAL] = "",
    [StageType.WRATH_OF_THE_LAMB] = "a",
    [StageType.AFTERBIRTH] = "b",
    [StageType.GREED_MODE] = "",
    [StageType.REPENTANCE] = "c",
    [StageType.REPENTANCE_B] = "d"
}
return ____exports
 end,
["lua_modules.isaacscript-common.functions.pocketItems"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayFind = ____lualib.__TS__ArrayFind
local __TS__ArraySome = ____lualib.__TS__ArraySome
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ActiveSlot = ____isaac_2Dtypescript_2Ddefinitions.ActiveSlot
local Card = ____isaac_2Dtypescript_2Ddefinitions.Card
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local PillColor = ____isaac_2Dtypescript_2Ddefinitions.PillColor
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local PocketItemSlot = ____isaac_2Dtypescript_2Ddefinitions.PocketItemSlot
local ____PocketItemType = require("lua_modules.isaacscript-common.enums.PocketItemType")
local PocketItemType = ____PocketItemType.PocketItemType
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____player = require("lua_modules.isaacscript-common.functions.player")
local isCharacter = ____player.isCharacter
--- Use this helper function as a workaround for the `EntityPlayer.GetPocketItem` method not working
-- correctly.
-- 
-- Note that due to API limitations, there is no way to determine the location of a Dice Bag trinket
-- dice. Furthermore, when the player has a Dice Bag trinket dice and a pocket active at the same
-- time, there is no way to determine the location of the pocket active item. If this function
-- cannot determine the identity of a particular slot, it will mark the type of the slot as
-- `PocketItemType.UNDETERMINABLE`.
function ____exports.getPocketItems(self, player)
    local pocketItem = player:GetActiveItem(ActiveSlot.POCKET)
    local hasPocketItem = pocketItem ~= CollectibleType.NULL
    local pocketItem2 = player:GetActiveItem(ActiveSlot.POCKET_SINGLE_USE)
    local hasPocketItem2 = pocketItem2 ~= CollectibleType.NULL
    local maxPocketItems = player:GetMaxPocketItems()
    local pocketItemSlots = getEnumValues(nil, PocketItemSlot)
    local pocketItems = {}
    local pocketItemIdentified = false
    local pocketItem2Identified = false
    for ____, slot in ipairs(pocketItemSlots) do
        local card = player:GetCard(slot)
        local pillColor = player:GetPill(slot)
        if card ~= Card.NULL then
            pocketItems[#pocketItems + 1] = {slot = slot, type = PocketItemType.CARD, subType = card}
        elseif pillColor ~= PillColor.NULL then
            pocketItems[#pocketItems + 1] = {slot = slot, type = PocketItemType.PILL, subType = pillColor}
        elseif hasPocketItem and not hasPocketItem2 and not pocketItemIdentified then
            pocketItemIdentified = true
            pocketItems[#pocketItems + 1] = {slot = slot, type = PocketItemType.ACTIVE_ITEM, subType = pocketItem}
        elseif not hasPocketItem and hasPocketItem2 and not pocketItem2Identified then
            pocketItem2Identified = true
            pocketItems[#pocketItems + 1] = {slot = slot, type = PocketItemType.DICE_BAG_DICE, subType = pocketItem2}
        elseif hasPocketItem and hasPocketItem2 then
            pocketItems[#pocketItems + 1] = {slot = slot, type = PocketItemType.UNDETERMINABLE, subType = 0}
        else
            pocketItems[#pocketItems + 1] = {slot = slot, type = PocketItemType.EMPTY, subType = 0}
        end
        if slot + 1 == maxPocketItems then
            break
        end
    end
    return pocketItems
end
--- Helper function to get the `PocketItemSlot` that the player's pocket active collectible item is
-- in, if any. Returns undefined if the player does not have a pocket active item.
function ____exports.getActivePocketItemSlot(self, player)
    local pocketItems = ____exports.getPocketItems(nil, player)
    for ____, pocketItem in ipairs(pocketItems) do
        if pocketItem.type == PocketItemType.ACTIVE_ITEM then
            return pocketItem.slot
        end
    end
    return nil
end
function ____exports.getFirstCardOrPill(self, player)
    local pocketItems = ____exports.getPocketItems(nil, player)
    return __TS__ArrayFind(
        pocketItems,
        function(____, pocketItem) return pocketItem.type == PocketItemType.CARD or pocketItem.type == PocketItemType.PILL end
    )
end
--- Returns whether or not the player can hold an additional pocket item, beyond what they are
-- currently carrying. This takes into account items that modify the max number of pocket items,
-- like Starter Deck.
-- 
-- If the player is the Tainted Soul, this always returns false, since that character cannot pick up
-- items. (Only Tainted Forgotten can pick up items.)
function ____exports.hasOpenPocketItemSlot(self, player)
    if isCharacter(nil, player, PlayerType.THE_SOUL_B) then
        return false
    end
    local pocketItems = ____exports.getPocketItems(nil, player)
    return __TS__ArraySome(
        pocketItems,
        function(____, pocketItem) return pocketItem.type == PocketItemType.EMPTY end
    )
end
--- Helper function to determine whether or not the player's "active" pocket item slot is set to
-- their pocket active item.
function ____exports.isFirstSlotPocketActiveItem(self, player)
    local pocketItems = ____exports.getPocketItems(nil, player)
    local firstPocketItem = pocketItems[1]
    if firstPocketItem == nil then
        return false
    end
    return firstPocketItem.type == PocketItemType.ACTIVE_ITEM
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.revive"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local NullItemID = ____isaac_2Dtypescript_2Ddefinitions.NullItemID
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____constants = require("lua_modules.isaacscript-common.constants")
local MAX_TAINTED_SAMSON_BERSERK_CHARGE = ____constants.MAX_TAINTED_SAMSON_BERSERK_CHARGE
local TAINTED_SAMSON_BERSERK_CHARGE_FROM_TAKING_DAMAGE = ____constants.TAINTED_SAMSON_BERSERK_CHARGE_FROM_TAKING_DAMAGE
local ____character = require("lua_modules.isaacscript-common.functions.character")
local getCharacterDeathAnimationName = ____character.getCharacterDeathAnimationName
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getPlayerMaxHeartContainers = ____player.getPlayerMaxHeartContainers
local getPlayerNumHitsRemaining = ____player.getPlayerNumHitsRemaining
local hasLostCurse = ____player.hasLostCurse
local isKeeper = ____player.isKeeper
local ____sprite = require("lua_modules.isaacscript-common.functions.sprite")
local getLastFrameOfAnimation = ____sprite.getLastFrameOfAnimation
local ____trinketGive = require("lua_modules.isaacscript-common.functions.trinketGive")
local giveTrinketsBack = ____trinketGive.giveTrinketsBack
local temporarilyRemoveTrinket = ____trinketGive.temporarilyRemoveTrinket
--- Helper function to determine if the player will be revived by the Heartbreak collectible if they
-- take fatal damage. This is contingent on the character that they are playing as and the amount of
-- broken hearts that they already have.
function ____exports.willReviveFromHeartbreak(self, player)
    if not player:HasCollectible(CollectibleType.HEARTBREAK) then
        return false
    end
    local maxHeartContainers = getPlayerMaxHeartContainers(nil, player)
    local numBrokenHeartsThatWillBeAdded = isKeeper(nil, player) and 1 or 2
    local brokenHearts = player:GetBrokenHearts()
    local numBrokenHeartsAfterRevival = numBrokenHeartsThatWillBeAdded + brokenHearts
    return maxHeartContainers > numBrokenHeartsAfterRevival
end
--- Helper function to determine if the Spirit Shackles item is in an enabled state. (It can be
-- either enabled or disabled.)
function ____exports.willReviveFromSpiritShackles(self, player)
    if not player:HasCollectible(CollectibleType.SPIRIT_SHACKLES) then
        return false
    end
    local effects = player:GetEffects()
    local spiritShacklesEnabled = not effects:HasNullEffect(NullItemID.SPIRIT_SHACKLES_DISABLED)
    local playerInSoulForm = effects:HasNullEffect(NullItemID.SPIRIT_SHACKLES_SOUL)
    return spiritShacklesEnabled and not playerInSoulForm
end
--- Uses the player's current health and other miscellaneous things to determine if incoming damage
-- will be fatal.
function ____exports.isDamageToPlayerFatal(self, player, damageAmount, damageSource, lastDamageGameFrame)
    local gameFrameCount = game:GetFrameCount()
    local character = player:GetPlayerType()
    local effects = player:GetEffects()
    local isBerserk = effects:HasCollectibleEffect(CollectibleType.BERSERK)
    if character == PlayerType.JACOB_B and damageSource.Type == EntityType.DARK_ESAU then
        return false
    end
    if isBerserk then
        return false
    end
    local berserkChargeAfterHit = player.SamsonBerserkCharge + TAINTED_SAMSON_BERSERK_CHARGE_FROM_TAKING_DAMAGE
    if character == PlayerType.SAMSON_B and berserkChargeAfterHit >= MAX_TAINTED_SAMSON_BERSERK_CHARGE then
        return false
    end
    if ____exports.willReviveFromSpiritShackles(nil, player) then
        return false
    end
    if character == PlayerType.JACOB_2_B then
        return true
    end
    if hasLostCurse(nil, player) then
        return true
    end
    local playerNumAllHearts = getPlayerNumHitsRemaining(nil, player)
    if damageAmount < playerNumAllHearts then
        return false
    end
    if ____exports.willReviveFromHeartbreak(nil, player) then
        return false
    end
    if player:HasCollectible(CollectibleType.BROKEN_GLASS_CANNON) and gameFrameCount == lastDamageGameFrame then
        return false
    end
    local hearts = player:GetHearts()
    local eternalHearts = player:GetEternalHearts()
    local soulHearts = player:GetSoulHearts()
    local boneHearts = player:GetBoneHearts()
    if hearts > 0 and soulHearts > 0 or hearts > 0 and boneHearts > 0 or soulHearts > 0 and boneHearts > 0 or soulHearts > 0 and eternalHearts > 0 or boneHearts >= 2 then
        return false
    end
    return true
end
--- Assuming that we are on the frame of fatal damage, this function returns whether or not
-- Mysterious Paper would rotate to Missing Poster on the frame that the "Game Over" screen would
-- appear (which would subsequently save the player from fatal damage).
-- 
-- Mysterious Paper rotates between the 4 items on every frame, in order. The formula for whether
-- Mysterious Paper be Missing Power is: `gameFrameCount % 4 === 3`
function ____exports.willMysteriousPaperRevive(self, player)
    local gameFrameCount = game:GetFrameCount()
    local sprite = player:GetSprite()
    local character = player:GetPlayerType()
    local animation = getCharacterDeathAnimationName(nil, character)
    local deathAnimationFrames = getLastFrameOfAnimation(nil, sprite, animation)
    local frameOfDeath = gameFrameCount + deathAnimationFrames + 1
    return frameOfDeath % 4 == 3
end
--- The `EntityPlayer.WillPlayerRevive` method does not properly account for Mysterious Paper, so use
-- this helper function instead for more robust revival detection.
function ____exports.willPlayerRevive(self, player)
    local trinketSituation = temporarilyRemoveTrinket(nil, player, TrinketType.MYSTERIOUS_PAPER)
    local willRevive = player:WillPlayerRevive() or trinketSituation ~= nil and ____exports.willMysteriousPaperRevive(nil, player)
    giveTrinketsBack(nil, player, trinketSituation)
    return willRevive
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.trinketGive"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local TrinketSlot = ____isaac_2Dtypescript_2Ddefinitions.TrinketSlot
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____player = require("lua_modules.isaacscript-common.functions.player")
local useActiveItemTemp = ____player.useActiveItemTemp
local ____trinkets = require("lua_modules.isaacscript-common.functions.trinkets")
local getGoldenTrinketType = ____trinkets.getGoldenTrinketType
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local ____repeat = ____utils["repeat"]
--- Helper function to temporarily removes a player's held trinkets, if any. This will not remove any
-- smelted trinkets. Use this in combination with the `giveTrinketsBack` function to take away and
-- give back trinkets on the same frame.
-- 
-- @returns Undefined if the player does not have any trinkets, or TrinketSituation if they do.
function ____exports.temporarilyRemoveTrinkets(self, player)
    local trinketType1 = player:GetTrinket(TrinketSlot.SLOT_1)
    local trinketType2 = player:GetTrinket(TrinketSlot.SLOT_2)
    if trinketType1 == TrinketType.NULL and trinketType2 == TrinketType.NULL then
        return nil
    end
    if trinketType1 ~= TrinketType.NULL then
        player:TryRemoveTrinket(trinketType1)
    end
    if trinketType2 ~= TrinketType.NULL then
        player:TryRemoveTrinket(trinketType2)
    end
    return {trinketTypeRemoved = TrinketType.NULL, trinketType1 = trinketType1, trinketType2 = trinketType2, numSmeltedTrinkets = 0}
end
--- Helper function to restore the player's trinkets back to the way they were before the
-- `temporarilyRemoveTrinket` function was used. It will re-smelt any smelted trinkets that were
-- removed.
function ____exports.giveTrinketsBack(self, player, trinketSituation)
    if trinketSituation == nil then
        return
    end
    local trinketType1 = player:GetTrinket(TrinketSlot.SLOT_1)
    local trinketType2 = player:GetTrinket(TrinketSlot.SLOT_2)
    if trinketType1 ~= TrinketType.NULL then
        player:TryRemoveTrinket(trinketType1)
    end
    if trinketType2 ~= TrinketType.NULL then
        player:TryRemoveTrinket(trinketType2)
    end
    ____repeat(
        nil,
        trinketSituation.numSmeltedTrinkets,
        function()
            player:AddTrinket(trinketSituation.trinketTypeRemoved, false)
            useActiveItemTemp(nil, player, CollectibleType.SMELTER)
        end
    )
    if trinketSituation.trinketType1 ~= TrinketType.NULL then
        player:AddTrinket(trinketSituation.trinketType1, false)
    end
    if trinketSituation.trinketType2 ~= TrinketType.NULL then
        player:AddTrinket(trinketSituation.trinketType2, false)
    end
end
--- Helper function to smelt a trinket. Before smelting, this function will automatically remove the
-- trinkets that the player is holding, if any, and then give them back after the new trinket is
-- smelted.
-- 
-- @param player The player to smelt the trinkets to.
-- @param trinketType The trinket type to smelt.
-- @param numTrinkets Optional. If specified, will smelt the given number of trinkets. Use this to
-- avoid calling this function multiple times. Default is 1.
function ____exports.smeltTrinket(self, player, trinketType, numTrinkets)
    if numTrinkets == nil then
        numTrinkets = 1
    end
    local trinketSituation = ____exports.temporarilyRemoveTrinkets(nil, player)
    ____repeat(
        nil,
        numTrinkets,
        function()
            player:AddTrinket(trinketType)
            useActiveItemTemp(nil, player, CollectibleType.SMELTER)
        end
    )
    ____exports.giveTrinketsBack(nil, player, trinketSituation)
end
--- Helper function to temporarily remove a specific kind of trinket from the player. Use this in
-- combination with the `giveTrinketsBack` function to take away and give back a trinket on the same
-- frame. This function correctly handles multiple trinket slots and ensures that all copies of the
-- trinket are removed, including smelted trinkets.
-- 
-- Note that one smelted golden trinket is the same as two smelted normal trinkets.
-- 
-- @returns Undefined if the player does not have the trinket, or TrinketSituation if they do.
function ____exports.temporarilyRemoveTrinket(self, player, trinketType)
    if not player:HasTrinket(trinketType) then
        return nil
    end
    local trinketType1 = player:GetTrinket(TrinketSlot.SLOT_1)
    local trinketType2 = player:GetTrinket(TrinketSlot.SLOT_2)
    local numTrinkets = 0
    while player:HasTrinket(trinketType) do
        player:TryRemoveTrinket(trinketType)
        numTrinkets = numTrinkets + 1
    end
    local numSmeltedTrinkets = numTrinkets
    local trinketWasInSlot1 = trinketType1 == trinketType or trinketType1 == getGoldenTrinketType(nil, trinketType)
    if trinketWasInSlot1 then
        numSmeltedTrinkets = numSmeltedTrinkets - 1
    end
    local trinketWasInSlot2 = trinketType2 == trinketType or trinketType2 == getGoldenTrinketType(nil, trinketType)
    if trinketWasInSlot2 then
        numSmeltedTrinkets = numSmeltedTrinkets - 1
    end
    return {trinketTypeRemoved = trinketType, trinketType1 = trinketType1, trinketType2 = trinketType2, numSmeltedTrinkets = numSmeltedTrinkets}
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.saveFile"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____collectibleSet = require("lua_modules.isaacscript-common.functions.collectibleSet")
local getCollectibleSet = ____collectibleSet.getCollectibleSet
local ____player = require("lua_modules.isaacscript-common.functions.player")
local anyPlayerHasCollectible = ____player.anyPlayerHasCollectible
local getPlayersOfType = ____player.getPlayersOfType
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local mapGetPlayer = ____playerDataStructures.mapGetPlayer
local mapSetPlayer = ____playerDataStructures.mapSetPlayer
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getPlayers = ____playerIndex.getPlayers
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local ____repeat = ____utils["repeat"]
local COLLECTIBLES_THAT_AFFECT_ITEM_POOLS = {CollectibleType.CHAOS, CollectibleType.SACRED_ORB, CollectibleType.TMTRAINER}
local TRINKETS_THAT_AFFECT_ITEM_POOLS = {TrinketType.NO}
--- Helper function to see if the given collectible is unlocked on the player's save file. This
-- requires providing the corresponding item pool that the collectible is located in.
-- 
-- - If any player currently has the item, then it is assumed to be unlocked. (This is because Eden
--   may have randomly started with the provided collectible, and it will be subsequently removed
--   from all pools.)
-- - If the collectible is located in more than one item pool, then any item pool can be provided.
-- - If the collectible is not located in any item pools, then this function will always return
--   false.
-- - If any player is Tainted Lost, they will be temporarily changed to Isaac and then temporarily
--   changed back (because Tainted Lost is not able to retrieve some collectibles from item pools).
function ____exports.isCollectibleUnlocked(self, collectibleTypeToCheckFor, itemPoolToCheckFor)
    if anyPlayerHasCollectible(nil, collectibleTypeToCheckFor) then
        return true
    end
    local taintedLosts = getPlayersOfType(nil, PlayerType.THE_LOST_B)
    for ____, player in ipairs(taintedLosts) do
        player:ChangePlayerType(PlayerType.ISAAC)
    end
    local removedItemsMap = __TS__New(Map)
    local removedTrinketsMap = __TS__New(Map)
    for ____, player in ipairs(getPlayers(nil)) do
        local removedItems = {}
        for ____, itemToRemove in ipairs(COLLECTIBLES_THAT_AFFECT_ITEM_POOLS) do
            if player:HasCollectible(itemToRemove) then
                local numCollectibles = player:GetCollectibleNum(itemToRemove)
                ____repeat(
                    nil,
                    numCollectibles,
                    function()
                        player:RemoveCollectible(itemToRemove)
                        removedItems[#removedItems + 1] = itemToRemove
                    end
                )
            end
        end
        mapSetPlayer(nil, removedItemsMap, player, removedItems)
        local removedTrinkets = {}
        for ____, trinketToRemove in ipairs(TRINKETS_THAT_AFFECT_ITEM_POOLS) do
            if player:HasTrinket(trinketToRemove) then
                local numTrinkets = player:GetTrinketMultiplier(trinketToRemove)
                ____repeat(
                    nil,
                    numTrinkets,
                    function()
                        player:TryRemoveTrinket(trinketToRemove)
                        removedTrinkets[#removedTrinkets + 1] = trinketToRemove
                    end
                )
            end
        end
        mapSetPlayer(nil, removedTrinketsMap, player, removedTrinkets)
    end
    local itemPool = game:GetItemPool()
    local collectibleSet = getCollectibleSet(nil)
    for ____, collectibleType in __TS__Iterator(collectibleSet:values()) do
        if collectibleType ~= collectibleTypeToCheckFor then
            itemPool:AddRoomBlacklist(collectibleType)
        end
    end
    local retrievedCollectibleType = itemPool:GetCollectible(itemPoolToCheckFor, false, 1)
    local collectibleUnlocked = retrievedCollectibleType == collectibleTypeToCheckFor
    itemPool:ResetRoomBlacklist()
    for ____, player in ipairs(getPlayers(nil)) do
        local removedItems = mapGetPlayer(nil, removedItemsMap, player)
        if removedItems ~= nil then
            for ____, collectibleType in ipairs(removedItems) do
                player:AddCollectible(collectibleType, 0, false)
            end
        end
        local removedTrinkets = mapGetPlayer(nil, removedTrinketsMap, player)
        if removedTrinkets ~= nil then
            for ____, trinketType in ipairs(removedTrinkets) do
                player:AddTrinket(trinketType, false)
            end
        end
    end
    for ____, player in ipairs(taintedLosts) do
        player:ChangePlayerType(PlayerType.THE_LOST_B)
    end
    return collectibleUnlocked
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.seeds"] = function(...) 
local ____exports = {}
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____rng = require("lua_modules.isaacscript-common.functions.rng")
local newRNG = ____rng.newRNG
--- Alias for the `Seeds.GetStartSeedString` method.
function ____exports.getStartSeedString(self)
    local seeds = game:GetSeeds()
    return seeds:GetStartSeedString()
end
--- Helper function to get the next seed value.
-- 
-- This function is useful when you are working with seed values directly over RNG objects.
function ____exports.nextSeed(self, seed)
    local rng = newRNG(nil, seed)
    rng:Next()
    return rng:GetSeed()
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.transformations"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local Set = ____lualib.Set
local __TS__Spread = ____lualib.__TS__Spread
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ItemConfigTag = ____isaac_2Dtypescript_2Ddefinitions.ItemConfigTag
local PlayerForm = ____isaac_2Dtypescript_2Ddefinitions.PlayerForm
local ____transformationNames = require("lua_modules.isaacscript-common.objects.transformationNames")
local TRANSFORMATION_NAMES = ____transformationNames.TRANSFORMATION_NAMES
local ____collectibles = require("lua_modules.isaacscript-common.functions.collectibles")
local getCollectibleTags = ____collectibles.getCollectibleTags
local ____collectibleTag = require("lua_modules.isaacscript-common.functions.collectibleTag")
local getCollectibleTypesWithTag = ____collectibleTag.getCollectibleTypesWithTag
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local hasFlag = ____flag.hasFlag
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getPlayerCollectibleCount = ____player.getPlayerCollectibleCount
local TRANSFORMATION_TO_TAG_MAP = __TS__New(Map, {
    {PlayerForm.GUPPY, ItemConfigTag.GUPPY},
    {PlayerForm.BEELZEBUB, ItemConfigTag.FLY},
    {PlayerForm.FUN_GUY, ItemConfigTag.MUSHROOM},
    {PlayerForm.SERAPHIM, ItemConfigTag.ANGEL},
    {PlayerForm.BOB, ItemConfigTag.BOB},
    {PlayerForm.SPUN, ItemConfigTag.SYRINGE},
    {PlayerForm.YES_MOTHER, ItemConfigTag.MOM},
    {PlayerForm.CONJOINED, ItemConfigTag.BABY},
    {PlayerForm.LEVIATHAN, ItemConfigTag.DEVIL},
    {PlayerForm.OH_CRAP, ItemConfigTag.POOP},
    {PlayerForm.BOOKWORM, ItemConfigTag.BOOK},
    {PlayerForm.SPIDER_BABY, ItemConfigTag.SPIDER}
})
local TRANSFORMATIONS_THAT_GRANT_FLYING = __TS__New(Set, {PlayerForm.GUPPY, PlayerForm.BEELZEBUB, PlayerForm.SERAPHIM, PlayerForm.LEVIATHAN})
--- Helper function to get all of the collectible types in the game that count towards a particular
-- transformation.
-- 
-- For example, to get all of the collectible types that count towards Guppy:
-- 
-- ```ts
-- const guppyCollectibleTypes = getCollectibleTypesForTransformation(PlayerForm.GUPPY);
-- ```
function ____exports.getCollectibleTypesForTransformation(self, playerForm)
    local itemConfigTag = TRANSFORMATION_TO_TAG_MAP:get(playerForm)
    if itemConfigTag == nil then
        error(("Failed to get the collectible types for the transformation of " .. tostring(playerForm)) .. " because that transformation is not based on collectibles.")
    end
    return getCollectibleTypesWithTag(nil, itemConfigTag)
end
--- Returns the number of items that a player has towards a particular transformation.
function ____exports.getPlayerNumCollectiblesForTransformation(self, player, playerForm)
    local collectibleTypes = ____exports.getCollectibleTypesForTransformation(nil, playerForm)
    return getPlayerCollectibleCount(
        nil,
        player,
        __TS__Spread(collectibleTypes:values())
    )
end
--- Returns a set of the player's current transformations.
function ____exports.getPlayerTransformations(self, player)
    local transformations = __TS__New(Set)
    for ____, playerForm in ipairs(getEnumValues(nil, PlayerForm)) do
        if player:HasPlayerForm(playerForm) then
            transformations:add(playerForm)
        end
    end
    return transformations
end
--- Helper function to get a transformation name from a PlayerForm enum.
-- 
-- For example:
-- 
-- ```ts
-- const transformationName = getTransformationName(PlayerForm.LORD_OF_THE_FLIES);
-- // transformationName is "Beelzebub"
-- ```
function ____exports.getTransformationName(self, playerForm)
    return TRANSFORMATION_NAMES[playerForm]
end
function ____exports.getTransformationsForCollectibleType(self, collectibleType)
    local itemConfigTags = getCollectibleTags(nil, collectibleType)
    local playerForms = getEnumValues(nil, PlayerForm)
    local transformationSet = __TS__New(Set)
    for ____, playerForm in ipairs(playerForms) do
        do
            local itemConfigTag = TRANSFORMATION_TO_TAG_MAP:get(playerForm)
            if itemConfigTag == nil then
                goto __continue11
            end
            if hasFlag(nil, itemConfigTags, itemConfigTag) then
                transformationSet:add(playerForm)
            end
        end
        ::__continue11::
    end
    return transformationSet
end
function ____exports.hasFlyingTransformation(self, player)
    for ____, playerForm in __TS__Iterator(TRANSFORMATIONS_THAT_GRANT_FLYING:values()) do
        if player:HasPlayerForm(playerForm) then
            return true
        end
    end
    return false
end
function ____exports.isTransformationFlying(self, playerForm)
    return TRANSFORMATIONS_THAT_GRANT_FLYING:has(playerForm)
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.transformationNames"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PlayerForm = ____isaac_2Dtypescript_2Ddefinitions.PlayerForm
____exports.TRANSFORMATION_NAMES = {
    [PlayerForm.GUPPY] = "Guppy",
    [PlayerForm.BEELZEBUB] = "Beelzebub",
    [PlayerForm.FUN_GUY] = "Fun Guy",
    [PlayerForm.SERAPHIM] = "Seraphim",
    [PlayerForm.BOB] = "Bob",
    [PlayerForm.SPUN] = "Spun",
    [PlayerForm.YES_MOTHER] = "Yes Mother?",
    [PlayerForm.CONJOINED] = "Conjoined",
    [PlayerForm.LEVIATHAN] = "Leviathan",
    [PlayerForm.OH_CRAP] = "Oh Crap",
    [PlayerForm.BOOKWORM] = "Bookworm",
    [PlayerForm.ADULT] = "Adult",
    [PlayerForm.SPIDER_BABY] = "Spider Baby",
    [PlayerForm.STOMPY] = "Stompy"
}
return ____exports
 end,
["lua_modules.isaacscript-common.functions.trinketCacheFlag"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local Set = ____lualib.Set
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local initCacheFlagMap, CACHE_FLAG_TO_TRINKETS_MAP
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CacheFlag = ____isaac_2Dtypescript_2Ddefinitions.CacheFlag
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____set = require("lua_modules.isaacscript-common.functions.set")
local copySet = ____set.copySet
local ____trinkets = require("lua_modules.isaacscript-common.functions.trinkets")
local getTrinketTypes = ____trinkets.getTrinketTypes
local trinketHasCacheFlag = ____trinkets.trinketHasCacheFlag
function initCacheFlagMap(self)
    for ____, cacheFlag in ipairs(getEnumValues(nil, CacheFlag)) do
        local trinketsSet = __TS__New(Set)
        for ____, trinketType in ipairs(getTrinketTypes(nil)) do
            if trinketHasCacheFlag(nil, trinketType, cacheFlag) then
                trinketsSet:add(trinketType)
            end
        end
        CACHE_FLAG_TO_TRINKETS_MAP:set(cacheFlag, trinketsSet)
    end
end
--- Returns a set containing every trinket type with the given cache flag, including modded trinkets.
function ____exports.getTrinketsForCacheFlag(self, cacheFlag)
    if CACHE_FLAG_TO_TRINKETS_MAP.size == 0 then
        initCacheFlagMap(nil)
    end
    local trinketsSet = CACHE_FLAG_TO_TRINKETS_MAP:get(cacheFlag)
    if trinketsSet == nil then
        return __TS__New(Set)
    end
    return copySet(nil, trinketsSet)
end
CACHE_FLAG_TO_TRINKETS_MAP = __TS__New(Map)
--- Returns a map containing every trinket type that the player has that matches the provided
-- CacheFlag. The values of the map correspond to the multiplier for that trinket.
function ____exports.getPlayerTrinketsForCacheFlag(self, player, cacheFlag)
    local trinketsForCacheFlag = ____exports.getTrinketsForCacheFlag(nil, cacheFlag)
    local playerTrinkets = __TS__New(Map)
    for ____, trinketType in __TS__Iterator(trinketsForCacheFlag:values()) do
        local trinketMultiplier = player:GetTrinketMultiplier(trinketType)
        if trinketMultiplier > 0 then
            playerTrinkets:set(trinketType, trinketMultiplier)
        end
    end
    return playerTrinkets
end
return ____exports
 end,
["lua_modules.isaacscript-common.functions.ui"] = function(...) 
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local LevelCurse = ____isaac_2Dtypescript_2Ddefinitions.LevelCurse
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____constants = require("lua_modules.isaacscript-common.constants")
local UI_HEART_WIDTH = ____constants.UI_HEART_WIDTH
local VectorZero = ____constants.VectorZero
local ____vector = require("lua_modules.isaacscript-common.functions.vector")
local copyVector = ____vector.copyVector
function ____exports.getScreenBottomRightPos(self)
    local screenWidth = Isaac.GetScreenWidth()
    local screenHeight = Isaac.GetScreenHeight()
    return Vector(screenWidth, screenHeight)
end
--- In the options menu, players have the ability to set a HUD offset. However, mods do not have
-- access to this value. To get around this, Mod Config Menu provides a separate HUD offset setting
-- on the first page of the menu. This is intended to be set by end-users to match their vanilla HUD
-- offset setting so that mods can render UI elements to the screen in the correct position.
-- 
-- @returns If the user does not have Mod Config Menu enabled, or does not have this option set,
-- then this function will return `Vector.Zero.` Otherwise, it will return a Vector that
-- represents a HUD offset that should be added to the position of a UI element.
function ____exports.getHUDOffsetVector(self)
    local defaultVector = copyVector(nil, VectorZero)
    local hudOffset = math.floor(Options.HUDOffset * 10)
    if hudOffset < 1 or hudOffset > 10 then
        return defaultVector
    end
    local x = hudOffset * 2
    local y = hudOffset
    if y >= 4 then
        y = y + 1
    end
    if y >= 9 then
        y = y + 1
    end
    return Vector(x, y)
end
--- Returns how many hearts are in the heart UI row. If the player has more than 6 hearts, this
-- function will return 6.
function ____exports.getHeartRowLength(self, player)
    local maxHearts = player:GetMaxHearts()
    local soulHearts = player:GetSoulHearts()
    local boneHearts = player:GetBoneHearts()
    local combinedHearts = maxHearts + soulHearts + boneHearts * 2
    local heartRowLength = combinedHearts / 2
    return math.min(heartRowLength, 6)
end
--- Helper function to get the width of the first player's hearts on the UI. This is useful for
-- drawing UI elements to the right of where the player's hearts are. Make sure to use this in
-- combination with the the `getHUDOffsetVector` helper function.
function ____exports.getHeartsUIWidth(self)
    local level = game:GetLevel()
    local curses = level:GetCurses()
    local player = Isaac.GetPlayer()
    local extraLives = player:GetExtraLives()
    local effects = player:GetEffects()
    local hasHolyMantleEffect = effects:HasCollectibleEffect(CollectibleType.HOLY_MANTLE)
    local heartRowLength = ____exports.getHeartRowLength(nil, player)
    if hasHolyMantleEffect then
        heartRowLength = heartRowLength + 1
    end
    if curses == LevelCurse.UNKNOWN then
        heartRowLength = 1
    end
    local width = heartRowLength * UI_HEART_WIDTH
    if extraLives > 9 then
        width = width + 20
        if player:HasCollectible(CollectibleType.GUPPYS_COLLAR) then
            width = width + 6
        end
    elseif extraLives > 0 then
        width = width + 16
        if player:HasCollectible(CollectibleType.GUPPYS_COLLAR) then
            width = width + 4
        end
    end
    return width
end
function ____exports.getScreenBottomLeftPos(self)
    local bottomRight = ____exports.getScreenBottomRightPos(nil)
    return Vector(0, bottomRight.Y)
end
function ____exports.getScreenCenterPos(self)
    local bottomRight = ____exports.getScreenBottomRightPos(nil)
    return bottomRight / 2
end
function ____exports.getScreenTopLeftPos(self)
    return copyVector(nil, VectorZero)
end
function ____exports.getScreenTopRightPos(self)
    local bottomRight = ____exports.getScreenBottomRightPos(nil)
    return Vector(bottomRight.X, 0)
end
--- Get how many hearts are currently being shown on the hearts UI.
-- 
-- This function is originally from piber20 Helper.
function ____exports.getVisibleHearts(self, player)
    local effectiveMaxHearts = player:GetEffectiveMaxHearts()
    local soulHearts = player:GetSoulHearts()
    local boneHearts = player:GetBoneHearts()
    local maxHearts = math.max(effectiveMaxHearts, boneHearts * 2)
    local visibleHearts = math.ceil((maxHearts + soulHearts) / 2)
    if visibleHearts < 1 then
        visibleHearts = 1
    end
    return visibleHearts
end
return ____exports
 end,
["lua_modules.isaacscript-common.objects.colors"] = function(...) 
local ____exports = {}
--- A collection of common colors that can be reused.
-- 
-- Note that if you want to further modify these colors, you should copy them first with the
-- `copyColor` function.
____exports.COLORS = {
    Black = Color(1, 1, 1),
    Red = Color(1, 0, 0),
    Green = Color(0, 1, 0),
    Blue = Color(0, 0, 1),
    Yellow = Color(1, 1, 0),
    Pink = Color(1, 0, 1),
    Cyan = Color(0, 1, 1),
    White = Color(1, 1, 1)
}
return ____exports
 end,
["lua_modules.isaacscript-common.types.PickingUpItem"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local ItemType = ____isaac_2Dtypescript_2Ddefinitions.ItemType
local DEFAULT_ITEM_TYPE = ItemType.NULL
local DEFAULT_SUB_TYPE = CollectibleType.NULL
---
-- @internal
function ____exports.newPickingUpItem(self)
    return {itemType = DEFAULT_ITEM_TYPE, subType = DEFAULT_SUB_TYPE}
end
---
-- @internal
function ____exports.resetPickingUpItem(self, pickingUpItem)
    pickingUpItem.itemType = DEFAULT_ITEM_TYPE
    pickingUpItem.subType = DEFAULT_SUB_TYPE
end
local COLLECTIBLE_ITEM_TYPES = __TS__New(Set, {ItemType.PASSIVE, ItemType.ACTIVE, ItemType.FAMILIAR})
--- Helper function to narrow the type of `PickingUpItem`.
function ____exports.isPickingUpItemNull(self, pickingUpItem)
    return pickingUpItem.itemType == ItemType.NULL
end
--- Helper function to narrow the type of `PickingUpItem`.
function ____exports.isPickingUpItemCollectible(self, pickingUpItem)
    return COLLECTIBLE_ITEM_TYPES:has(pickingUpItem.itemType)
end
--- Helper function to narrow the type of `PickingUpItem`.
function ____exports.isPickingUpItemTrinket(self, pickingUpItem)
    return pickingUpItem.itemType == ItemType.TRINKET
end
return ____exports
 end,
["lua_modules.isaacscript-common.upgradeMod"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local ____postNewRoomEarly = require("lua_modules.isaacscript-common.callbacks.postNewRoomEarly")
local postNewRoomEarlyCallbackInit = ____postNewRoomEarly.postNewRoomEarlyCallbackInit
local ____ModUpgraded = require("lua_modules.isaacscript-common.classes.ModUpgraded")
local ModUpgraded = ____ModUpgraded.ModUpgraded
local ____main = require("lua_modules.isaacscript-common.features.saveDataManager.main")
local saveDataManagerInit = ____main.saveDataManagerInit
local ____featuresInitialized = require("lua_modules.isaacscript-common.featuresInitialized")
local areFeaturesInitialized = ____featuresInitialized.areFeaturesInitialized
local setFeaturesInitialized = ____featuresInitialized.setFeaturesInitialized
local ____initCustomCallbacks = require("lua_modules.isaacscript-common.initCustomCallbacks")
local initCustomCallbacks = ____initCustomCallbacks.initCustomCallbacks
local ____initFeatures = require("lua_modules.isaacscript-common.initFeatures")
local initFeaturesMajor = ____initFeatures.initFeaturesMajor
local initFeaturesMinor = ____initFeatures.initFeaturesMinor
local ____patchErrorFunctions = require("lua_modules.isaacscript-common.patchErrorFunctions")
local patchErrorFunction = ____patchErrorFunctions.patchErrorFunction
--- Use this function to enable the custom callbacks and other optional features provided by
-- `isaacscript-common`.
-- 
-- For example:
-- 
-- ```ts
-- const modVanilla = RegisterMod("My Mod", 1);
-- const mod = upgradeMod(modVanilla);
-- 
-- // Subscribe to vanilla callbacks.
-- mod.AddCallback(ModCallback.POST_UPDATE, postUpdate);
-- 
-- // Subscribe to custom callbacks.
-- mod.AddCallbackCustom(ModCallbackCustom.POST_ITEM_PICKUP, postItemPickup);
-- ```
-- 
-- @param modVanilla The mod object returned by the `RegisterMod` function.
-- @returns The upgraded mod object.
function ____exports.upgradeMod(self, modVanilla)
    patchErrorFunction(nil)
    local mod = __TS__New(ModUpgraded, modVanilla)
    if not areFeaturesInitialized(nil) then
        setFeaturesInitialized(nil)
        postNewRoomEarlyCallbackInit(nil, mod)
        saveDataManagerInit(nil, mod)
        initCustomCallbacks(nil, mod)
        initFeaturesMajor(nil, mod)
        initFeaturesMinor(nil, mod)
    end
    return mod
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postNewRoomEarly"] = function(...) 
local ____exports = {}
local hasSubscriptions, postNewRoom, preEntitySpawn, checkRoomChanged, currentRoomTopLeftWallPtrHash, currentRoomTopLeftWallPtrHash2
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local GridEntityType = ____isaac_2Dtypescript_2Ddefinitions.GridEntityType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____gridEntity = require("lua_modules.isaacscript-common.functions.gridEntity")
local getTopLeftWallGridIndex = ____gridEntity.getTopLeftWallGridIndex
local spawnGrid = ____gridEntity.spawnGrid
local ____log = require("lua_modules.isaacscript-common.functions.log")
local logError = ____log.logError
local ____postNewRoomEarly = require("lua_modules.isaacscript-common.callbacks.subscriptions.postNewRoomEarly")
local postNewRoomEarlyFire = ____postNewRoomEarly.postNewRoomEarlyFire
local postNewRoomEarlyHasSubscriptions = ____postNewRoomEarly.postNewRoomEarlyHasSubscriptions
function hasSubscriptions(self)
    return postNewRoomEarlyHasSubscriptions(nil)
end
function postNewRoom(self)
    if not hasSubscriptions(nil) then
        return
    end
    checkRoomChanged(nil)
end
function preEntitySpawn(self)
    if not hasSubscriptions(nil) then
        return nil
    end
    checkRoomChanged(nil)
    return nil
end
function checkRoomChanged(self)
    local room = game:GetRoom()
    local topLeftWallGridIndex = getTopLeftWallGridIndex(nil)
    local rightOfTopWallGridIndex = topLeftWallGridIndex + 1
    local topLeftWall = room:GetGridEntity(topLeftWallGridIndex)
    local topLeftWall2 = room:GetGridEntity(rightOfTopWallGridIndex)
    if topLeftWall == nil then
        topLeftWall = spawnGrid(nil, GridEntityType.WALL, topLeftWallGridIndex)
        if topLeftWall == nil then
            logError("Failed to spawn a new wall (1) for the PostNewRoomEarly callback.")
            return
        end
    end
    if topLeftWall2 == nil then
        topLeftWall2 = spawnGrid(nil, GridEntityType.WALL, rightOfTopWallGridIndex)
        if topLeftWall2 == nil then
            logError("Failed to spawn a new wall (2) for the PostNewRoomEarly callback.")
            return
        end
    end
    local topLeftWallPtrHash = GetPtrHash(topLeftWall)
    local topLeftWallPtrHash2 = GetPtrHash(topLeftWall2)
    if topLeftWallPtrHash ~= currentRoomTopLeftWallPtrHash or topLeftWallPtrHash2 ~= currentRoomTopLeftWallPtrHash2 then
        currentRoomTopLeftWallPtrHash = topLeftWallPtrHash
        currentRoomTopLeftWallPtrHash2 = topLeftWallPtrHash2
        postNewRoomEarlyFire(nil)
    end
end
currentRoomTopLeftWallPtrHash = nil
currentRoomTopLeftWallPtrHash2 = nil
---
-- @internal
function ____exports.postNewRoomEarlyCallbackInit(self, mod)
    mod:AddCallback(ModCallback.POST_NEW_ROOM, postNewRoom)
    mod:AddCallback(ModCallback.PRE_ENTITY_SPAWN, preEntitySpawn)
end
return ____exports
 end,
["lua_modules.isaacscript-common.initCustomCallbacks"] = function(...) 
local ____exports = {}
local ____customRevive = require("lua_modules.isaacscript-common.callbacks.customRevive")
local customReviveCallbacksInit = ____customRevive.customReviveCallbacksInit
local ____itemPickup = require("lua_modules.isaacscript-common.callbacks.itemPickup")
local itemPickupCallbacksInit = ____itemPickup.itemPickupCallbacksInit
local ____postAmbush = require("lua_modules.isaacscript-common.callbacks.postAmbush")
local postAmbushCallbacksInit = ____postAmbush.postAmbushCallbacksInit
local ____postBombExploded = require("lua_modules.isaacscript-common.callbacks.postBombExploded")
local postBombExplodedInit = ____postBombExploded.postBombExplodedInit
local ____postBombInitLate = require("lua_modules.isaacscript-common.callbacks.postBombInitLate")
local postBombInitLateInit = ____postBombInitLate.postBombInitLateInit
local ____postBoneSwing = require("lua_modules.isaacscript-common.callbacks.postBoneSwing")
local postBoneSwingInit = ____postBoneSwing.postBoneSwingInit
local ____postCollectibleInitFirst = require("lua_modules.isaacscript-common.callbacks.postCollectibleInitFirst")
local postCollectibleInitFirstInit = ____postCollectibleInitFirst.postCollectibleInitFirstInit
local ____postCursedTeleport = require("lua_modules.isaacscript-common.callbacks.postCursedTeleport")
local postCursedTeleportInit = ____postCursedTeleport.postCursedTeleportInit
local ____postCustomDoorEnter = require("lua_modules.isaacscript-common.callbacks.postCustomDoorEnter")
local postCustomDoorEnterInit = ____postCustomDoorEnter.postCustomDoorEnterInit
local ____postDiceRoomActivated = require("lua_modules.isaacscript-common.callbacks.postDiceRoomActivated")
local postDiceRoomActivatedInit = ____postDiceRoomActivated.postDiceRoomActivatedInit
local ____postDoorRender = require("lua_modules.isaacscript-common.callbacks.postDoorRender")
local postDoorRenderInit = ____postDoorRender.postDoorRenderInit
local ____postDoorUpdate = require("lua_modules.isaacscript-common.callbacks.postDoorUpdate")
local postDoorUpdateInit = ____postDoorUpdate.postDoorUpdateInit
local ____postEffectInitLate = require("lua_modules.isaacscript-common.callbacks.postEffectInitLate")
local postEffectInitLateInit = ____postEffectInitLate.postEffectInitLateInit
local ____postEffectStateChanged = require("lua_modules.isaacscript-common.callbacks.postEffectStateChanged")
local postEffectStateChangedInit = ____postEffectStateChanged.postEffectStateChangedInit
local ____postEsauJr = require("lua_modules.isaacscript-common.callbacks.postEsauJr")
local postEsauJrCallbacksInit = ____postEsauJr.postEsauJrCallbacksInit
local ____postFamiliarInitLate = require("lua_modules.isaacscript-common.callbacks.postFamiliarInitLate")
local postFamiliarInitLateInit = ____postFamiliarInitLate.postFamiliarInitLateInit
local ____postFamiliarStateChanged = require("lua_modules.isaacscript-common.callbacks.postFamiliarStateChanged")
local postFamiliarStateChangedInit = ____postFamiliarStateChanged.postFamiliarStateChangedInit
local ____postFlip = require("lua_modules.isaacscript-common.callbacks.postFlip")
local postFlipCallbacksInit = ____postFlip.postFlipCallbacksInit
local ____postGreedModeWave = require("lua_modules.isaacscript-common.callbacks.postGreedModeWave")
local postGreedModeWaveInit = ____postGreedModeWave.postGreedModeWaveInit
local ____postGridEntity = require("lua_modules.isaacscript-common.callbacks.postGridEntity")
local postGridEntityCallbacksInit = ____postGridEntity.postGridEntityCallbacksInit
local ____postGridEntityCollision = require("lua_modules.isaacscript-common.callbacks.postGridEntityCollision")
local postGridEntityCollisionInit = ____postGridEntityCollision.postGridEntityCollisionInit
local ____postGridEntityRender = require("lua_modules.isaacscript-common.callbacks.postGridEntityRender")
local postGridEntityRenderInit = ____postGridEntityRender.postGridEntityRenderInit
local ____postHolyMantleRemoved = require("lua_modules.isaacscript-common.callbacks.postHolyMantleRemoved")
local postHolyMantleRemovedInit = ____postHolyMantleRemoved.postHolyMantleRemovedInit
local ____postItemDischarged = require("lua_modules.isaacscript-common.callbacks.postItemDischarged")
local postItemDischargeInit = ____postItemDischarged.postItemDischargeInit
local ____postKnifeInitLate = require("lua_modules.isaacscript-common.callbacks.postKnifeInitLate")
local postKnifeInitLateInit = ____postKnifeInitLate.postKnifeInitLateInit
local ____postLaserInitLate = require("lua_modules.isaacscript-common.callbacks.postLaserInitLate")
local postLaserInitLateInit = ____postLaserInitLate.postLaserInitLateInit
local ____postNPCInitLate = require("lua_modules.isaacscript-common.callbacks.postNPCInitLate")
local postNPCInitLateInit = ____postNPCInitLate.postNPCInitLateInit
local ____postNPCStateChanged = require("lua_modules.isaacscript-common.callbacks.postNPCStateChanged")
local postNPCStateChangedInit = ____postNPCStateChanged.postNPCStateChangedInit
local ____postPickupCollect = require("lua_modules.isaacscript-common.callbacks.postPickupCollect")
local postPickupCollectInit = ____postPickupCollect.postPickupCollectInit
local ____postPickupInitFirst = require("lua_modules.isaacscript-common.callbacks.postPickupInitFirst")
local postPickupInitFirstInit = ____postPickupInitFirst.postPickupInitFirstInit
local ____postPickupInitLate = require("lua_modules.isaacscript-common.callbacks.postPickupInitLate")
local postPickupInitLateInit = ____postPickupInitLate.postPickupInitLateInit
local ____postPickupStateChanged = require("lua_modules.isaacscript-common.callbacks.postPickupStateChanged")
local postPickupStateChangedInit = ____postPickupStateChanged.postPickupStateChangedInit
local ____postPitRender = require("lua_modules.isaacscript-common.callbacks.postPitRender")
local postPitRenderInit = ____postPitRender.postPitRenderInit
local ____postPitUpdate = require("lua_modules.isaacscript-common.callbacks.postPitUpdate")
local postPitUpdateInit = ____postPitUpdate.postPitUpdateInit
local ____postPlayerChangeHealth = require("lua_modules.isaacscript-common.callbacks.postPlayerChangeHealth")
local postPlayerChangeHealthInit = ____postPlayerChangeHealth.postPlayerChangeHealthInit
local ____postPlayerChangeType = require("lua_modules.isaacscript-common.callbacks.postPlayerChangeType")
local postPlayerChangeTypeInit = ____postPlayerChangeType.postPlayerChangeTypeInit
local ____postPlayerCollectible = require("lua_modules.isaacscript-common.callbacks.postPlayerCollectible")
local postPlayerCollectibleCallbacksInit = ____postPlayerCollectible.postPlayerCollectibleCallbacksInit
local ____postPlayerFatalDamage = require("lua_modules.isaacscript-common.callbacks.postPlayerFatalDamage")
local postPlayerFatalDamageInit = ____postPlayerFatalDamage.postPlayerFatalDamageInit
local ____postPlayerInitLate = require("lua_modules.isaacscript-common.callbacks.postPlayerInitLate")
local postPlayerInitLateInit = ____postPlayerInitLate.postPlayerInitLateInit
local ____postPlayerReordered = require("lua_modules.isaacscript-common.callbacks.postPlayerReordered")
local postPlayerReorderedCallbacksInit = ____postPlayerReordered.postPlayerReorderedCallbacksInit
local ____postPoopRender = require("lua_modules.isaacscript-common.callbacks.postPoopRender")
local postPoopRenderInit = ____postPoopRender.postPoopRenderInit
local ____postPoopUpdate = require("lua_modules.isaacscript-common.callbacks.postPoopUpdate")
local postPoopUpdateInit = ____postPoopUpdate.postPoopUpdateInit
local ____postPressurePlateRender = require("lua_modules.isaacscript-common.callbacks.postPressurePlateRender")
local postPressurePlateRenderInit = ____postPressurePlateRender.postPressurePlateRenderInit
local ____postPressurePlateUpdate = require("lua_modules.isaacscript-common.callbacks.postPressurePlateUpdate")
local postPressurePlateUpdateInit = ____postPressurePlateUpdate.postPressurePlateUpdateInit
local ____postProjectileInitLate = require("lua_modules.isaacscript-common.callbacks.postProjectileInitLate")
local postProjectileInitLateInit = ____postProjectileInitLate.postProjectileInitLateInit
local ____postPurchase = require("lua_modules.isaacscript-common.callbacks.postPurchase")
local postPurchaseInit = ____postPurchase.postPurchaseInit
local ____postRockRender = require("lua_modules.isaacscript-common.callbacks.postRockRender")
local postRockRenderInit = ____postRockRender.postRockRenderInit
local ____postRockUpdate = require("lua_modules.isaacscript-common.callbacks.postRockUpdate")
local postRockUpdateInit = ____postRockUpdate.postRockUpdateInit
local ____postRoomClearChanged = require("lua_modules.isaacscript-common.callbacks.postRoomClearChanged")
local postRoomClearChangedInit = ____postRoomClearChanged.postRoomClearChangedInit
local ____postSacrifice = require("lua_modules.isaacscript-common.callbacks.postSacrifice")
local postSacrificeInit = ____postSacrifice.postSacrificeInit
local ____postSlotDestroyed = require("lua_modules.isaacscript-common.callbacks.postSlotDestroyed")
local postSlotDestroyedInit = ____postSlotDestroyed.postSlotDestroyedInit
local ____postSlotInitUpdate = require("lua_modules.isaacscript-common.callbacks.postSlotInitUpdate")
local postSlotInitUpdateCallbacksInit = ____postSlotInitUpdate.postSlotInitUpdateCallbacksInit
local ____postSlotRender = require("lua_modules.isaacscript-common.callbacks.postSlotRender")
local postSlotRenderCallbacksInit = ____postSlotRender.postSlotRenderCallbacksInit
local ____postSpikesRender = require("lua_modules.isaacscript-common.callbacks.postSpikesRender")
local postSpikesRenderInit = ____postSpikesRender.postSpikesRenderInit
local ____postSpikesUpdate = require("lua_modules.isaacscript-common.callbacks.postSpikesUpdate")
local postSpikesUpdateInit = ____postSpikesUpdate.postSpikesUpdateInit
local ____postTearInitLate = require("lua_modules.isaacscript-common.callbacks.postTearInitLate")
local postTearInitLateInit = ____postTearInitLate.postTearInitLateInit
local ____postTearInitVeryLate = require("lua_modules.isaacscript-common.callbacks.postTearInitVeryLate")
local postTearInitVeryLateInit = ____postTearInitVeryLate.postTearInitVeryLateInit
local ____postTNTRender = require("lua_modules.isaacscript-common.callbacks.postTNTRender")
local postTNTRenderInit = ____postTNTRender.postTNTRenderInit
local ____postTNTUpdate = require("lua_modules.isaacscript-common.callbacks.postTNTUpdate")
local postTNTUpdateInit = ____postTNTUpdate.postTNTUpdateInit
local ____postTransformation = require("lua_modules.isaacscript-common.callbacks.postTransformation")
local postTransformationInit = ____postTransformation.postTransformationInit
local ____postTrinketBreak = require("lua_modules.isaacscript-common.callbacks.postTrinketBreak")
local postTrinketBreakInit = ____postTrinketBreak.postTrinketBreakInit
local ____preBerserkDeath = require("lua_modules.isaacscript-common.callbacks.preBerserkDeath")
local preBerserkDeathInit = ____preBerserkDeath.preBerserkDeathInit
local ____preNewLevel = require("lua_modules.isaacscript-common.callbacks.preNewLevel")
local preNewLevelInit = ____preNewLevel.preNewLevelInit
local ____reorderedCallbacks = require("lua_modules.isaacscript-common.callbacks.reorderedCallbacks")
local reorderedCallbacksInit = ____reorderedCallbacks.reorderedCallbacksInit
function ____exports.initCustomCallbacks(self, mod)
    customReviveCallbacksInit(nil, mod)
    itemPickupCallbacksInit(nil, mod)
    postAmbushCallbacksInit(nil, mod)
    postBombExplodedInit(nil, mod)
    postBombInitLateInit(nil, mod)
    postBoneSwingInit(nil, mod)
    postCollectibleInitFirstInit(nil, mod)
    postCursedTeleportInit(nil, mod)
    postCustomDoorEnterInit(nil)
    postDiceRoomActivatedInit(nil, mod)
    postDoorRenderInit(nil, mod)
    postDoorUpdateInit(nil, mod)
    postEffectInitLateInit(nil, mod)
    postEffectStateChangedInit(nil, mod)
    postEsauJrCallbacksInit(nil, mod)
    postFamiliarInitLateInit(nil, mod)
    postFamiliarStateChangedInit(nil, mod)
    postFlipCallbacksInit(nil, mod)
    postGreedModeWaveInit(nil, mod)
    postGridEntityCallbacksInit(nil, mod)
    postGridEntityCollisionInit(nil, mod)
    postGridEntityRenderInit(nil, mod)
    postHolyMantleRemovedInit(nil, mod)
    postItemDischargeInit(nil, mod)
    postLaserInitLateInit(nil, mod)
    postKnifeInitLateInit(nil, mod)
    postNPCInitLateInit(nil, mod)
    postNPCStateChangedInit(nil, mod)
    postPickupCollectInit(nil, mod)
    postPickupInitFirstInit(nil, mod)
    postPickupInitLateInit(nil, mod)
    postPickupStateChangedInit(nil, mod)
    postPitRenderInit(nil, mod)
    postPitUpdateInit(nil, mod)
    postPlayerChangeHealthInit(nil, mod)
    postPlayerChangeTypeInit(nil, mod)
    postPlayerCollectibleCallbacksInit(nil, mod)
    postPlayerFatalDamageInit(nil, mod)
    postPlayerInitLateInit(nil, mod)
    postPlayerReorderedCallbacksInit(nil, mod)
    postPoopRenderInit(nil, mod)
    postPoopUpdateInit(nil, mod)
    postPressurePlateRenderInit(nil, mod)
    postPressurePlateUpdateInit(nil, mod)
    postProjectileInitLateInit(nil, mod)
    postPurchaseInit(nil, mod)
    postRockRenderInit(nil, mod)
    postRockUpdateInit(nil, mod)
    postRoomClearChangedInit(nil, mod)
    postSacrificeInit(nil, mod)
    postSlotDestroyedInit(nil, mod)
    postSlotInitUpdateCallbacksInit(nil, mod)
    postSlotRenderCallbacksInit(nil, mod)
    postSpikesRenderInit(nil, mod)
    postSpikesUpdateInit(nil, mod)
    postTearInitLateInit(nil, mod)
    postTearInitVeryLateInit(nil, mod)
    postTNTRenderInit(nil, mod)
    postTNTUpdateInit(nil, mod)
    postTransformationInit(nil, mod)
    postTrinketBreakInit(nil, mod)
    preBerserkDeathInit(nil, mod)
    preNewLevelInit(nil, mod)
    reorderedCallbacksInit(nil, mod)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.customRevive"] = function(...) 
local ____exports = {}
local hasSubscriptions, postRender, postNewRoomReordered, postPEffectUpdateReordered, checkWaitingForItemAnimation, postPlayerFatalDamage, preBerserkDeath, playerIsAboutToDie, logStateChanged, DEBUG, CustomReviveState, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local FamiliarVariant = ____isaac_2Dtypescript_2Ddefinitions.FamiliarVariant
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local SoundEffect = ____isaac_2Dtypescript_2Ddefinitions.SoundEffect
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local sfxManager = ____cachedClasses.sfxManager
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____runInNFrames = require("lua_modules.isaacscript-common.features.runInNFrames")
local runNextGameFrame = ____runInNFrames.runNextGameFrame
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____collectibles = require("lua_modules.isaacscript-common.functions.collectibles")
local removeCollectibleFromItemTracker = ____collectibles.removeCollectibleFromItemTracker
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local removeAllFamiliars = ____entitySpecific.removeAllFamiliars
local ____log = require("lua_modules.isaacscript-common.functions.log")
local log = ____log.log
local logError = ____log.logError
local ____player = require("lua_modules.isaacscript-common.functions.player")
local isCharacter = ____player.isCharacter
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getPlayerFromIndex = ____playerIndex.getPlayerFromIndex
local getPlayerIndex = ____playerIndex.getPlayerIndex
local ____postCustomRevive = require("lua_modules.isaacscript-common.callbacks.subscriptions.postCustomRevive")
local postCustomReviveFire = ____postCustomRevive.postCustomReviveFire
local postCustomReviveHasSubscriptions = ____postCustomRevive.postCustomReviveHasSubscriptions
local ____preCustomRevive = require("lua_modules.isaacscript-common.callbacks.subscriptions.preCustomRevive")
local preCustomReviveFire = ____preCustomRevive.preCustomReviveFire
local preCustomReviveHasSubscriptions = ____preCustomRevive.preCustomReviveHasSubscriptions
function hasSubscriptions(self)
    return preCustomReviveHasSubscriptions(nil) or postCustomReviveHasSubscriptions(nil)
end
function postRender(self)
    if v.run.state ~= CustomReviveState.WAITING_FOR_ITEM_ANIMATION then
        return
    end
    sfxManager:Stop(SoundEffect.ONE_UP)
end
function postNewRoomReordered(self)
    if v.run.state ~= CustomReviveState.WAITING_FOR_ROOM_TRANSITION then
        return
    end
    v.run.state = CustomReviveState.WAITING_FOR_ITEM_ANIMATION
    logStateChanged(nil)
end
function postPEffectUpdateReordered(self, player)
    checkWaitingForItemAnimation(nil, player)
end
function checkWaitingForItemAnimation(self, player)
    if v.run.state ~= CustomReviveState.WAITING_FOR_ITEM_ANIMATION then
        return
    end
    if v.run.dyingPlayerIndex == nil then
        return
    end
    local playerIndex = getPlayerIndex(nil, player)
    if playerIndex ~= v.run.dyingPlayerIndex then
        return
    end
    local playerToCheckHoldingItem = player
    if isCharacter(nil, player, PlayerType.THE_SOUL_B) then
        local forgottenBody = player:GetOtherTwin()
        if forgottenBody ~= nil then
            playerToCheckHoldingItem = forgottenBody
        end
    end
    if not playerToCheckHoldingItem:IsHoldingItem() then
        return
    end
    if v.run.revivalType ~= nil then
        postCustomReviveFire(nil, playerToCheckHoldingItem, v.run.revivalType)
    end
    v.run.state = CustomReviveState.DISABLED
    v.run.revivalType = nil
    v.run.dyingPlayerIndex = nil
    logStateChanged(nil)
end
function postPlayerFatalDamage(self, player)
    if not hasSubscriptions(nil) then
        return nil
    end
    playerIsAboutToDie(nil, player)
    return nil
end
function preBerserkDeath(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    playerIsAboutToDie(nil, player)
end
function playerIsAboutToDie(self, player)
    local revivalType = preCustomReviveFire(nil, player)
    if revivalType == nil then
        return
    end
    v.run.state = CustomReviveState.WAITING_FOR_ROOM_TRANSITION
    v.run.revivalType = revivalType
    v.run.dyingPlayerIndex = getPlayerIndex(nil, player)
    logStateChanged(nil)
    player:AddCollectible(CollectibleType.ONE_UP, 0, false)
    removeAllFamiliars(nil, FamiliarVariant.ONE_UP)
    removeCollectibleFromItemTracker(nil, CollectibleType.ONE_UP)
    local playerIndex = getPlayerIndex(nil, player)
    runNextGameFrame(
        nil,
        function()
            local futurePlayer = getPlayerFromIndex(nil, playerIndex)
            if futurePlayer == nil then
                return
            end
            if futurePlayer:IsDead() then
                return
            end
            logError("The player is still alive after initializing a custom revive. Explicitly killing the player.")
            futurePlayer:Kill()
        end
    )
end
function logStateChanged(self)
    if DEBUG then
        log(((("Custom revive state changed: " .. tostring(CustomReviveState[v.run.state])) .. " (") .. tostring(v.run.state)) .. ")")
    end
end
DEBUG = false
CustomReviveState = CustomReviveState or ({})
CustomReviveState.DISABLED = 0
CustomReviveState[CustomReviveState.DISABLED] = "DISABLED"
CustomReviveState.WAITING_FOR_ROOM_TRANSITION = 1
CustomReviveState[CustomReviveState.WAITING_FOR_ROOM_TRANSITION] = "WAITING_FOR_ROOM_TRANSITION"
CustomReviveState.WAITING_FOR_ITEM_ANIMATION = 2
CustomReviveState[CustomReviveState.WAITING_FOR_ITEM_ANIMATION] = "WAITING_FOR_ITEM_ANIMATION"
v = {run = {state = CustomReviveState.DISABLED, revivalType = nil, dyingPlayerIndex = nil}}
---
-- @internal
function ____exports.customReviveCallbacksInit(self, mod)
    saveDataManager(nil, "customRevive", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
    mod:AddCallbackCustom(ModCallbackCustom.POST_NEW_ROOM_REORDERED, postNewRoomReordered)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED, postPEffectUpdateReordered)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PLAYER_FATAL_DAMAGE, postPlayerFatalDamage)
    mod:AddCallbackCustom(ModCallbackCustom.PRE_BERSERK_DEATH, preBerserkDeath)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.itemPickup"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPEffectUpdateReordered, queueEmpty, queueNotEmpty, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ItemType = ____isaac_2Dtypescript_2Ddefinitions.ItemType
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local defaultMapGetPlayer = ____playerDataStructures.defaultMapGetPlayer
local ____PickingUpItem = require("lua_modules.isaacscript-common.types.PickingUpItem")
local newPickingUpItem = ____PickingUpItem.newPickingUpItem
local resetPickingUpItem = ____PickingUpItem.resetPickingUpItem
local ____postItemPickup = require("lua_modules.isaacscript-common.callbacks.subscriptions.postItemPickup")
local postItemPickupFire = ____postItemPickup.postItemPickupFire
local postItemPickupHasSubscriptions = ____postItemPickup.postItemPickupHasSubscriptions
local ____preItemPickup = require("lua_modules.isaacscript-common.callbacks.subscriptions.preItemPickup")
local preItemPickupFire = ____preItemPickup.preItemPickupFire
local preItemPickupHasSubscriptions = ____preItemPickup.preItemPickupHasSubscriptions
function hasSubscriptions(self)
    return preItemPickupHasSubscriptions(nil) or postItemPickupHasSubscriptions(nil)
end
function postPEffectUpdateReordered(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local pickingUpItem = defaultMapGetPlayer(nil, v.run.playersPickingUpItemMap, player)
    if player:IsItemQueueEmpty() then
        queueEmpty(nil, player, pickingUpItem)
    else
        queueNotEmpty(nil, player, pickingUpItem)
    end
end
function queueEmpty(self, player, pickingUpItem)
    if pickingUpItem.itemType == ItemType.NULL or pickingUpItem.subType == 0 then
        return
    end
    postItemPickupFire(nil, player, pickingUpItem)
    resetPickingUpItem(nil, pickingUpItem)
end
function queueNotEmpty(self, player, pickingUpItem)
    local queuedItem = player.QueuedItem.Item
    if queuedItem == nil or queuedItem.Type == ItemType.NULL then
        return
    end
    if queuedItem.Type ~= pickingUpItem.itemType or queuedItem.ID ~= pickingUpItem.subType then
        pickingUpItem.itemType = queuedItem.Type
        pickingUpItem.subType = queuedItem.ID
        preItemPickupFire(nil, player, pickingUpItem)
    end
end
v = {run = {playersPickingUpItemMap = __TS__New(
    DefaultMap,
    function() return newPickingUpItem(nil) end
)}}
---
-- @internal
function ____exports.itemPickupCallbacksInit(self, mod)
    saveDataManager(nil, "itemPickup", v, hasSubscriptions)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED, postPEffectUpdateReordered)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postAmbush"] = function(...) 
local ____exports = {}
local hasSubscriptions, postUpdate, getAmbushType, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____AmbushType = require("lua_modules.isaacscript-common.enums.AmbushType")
local AmbushType = ____AmbushType.AmbushType
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____roomData = require("lua_modules.isaacscript-common.functions.roomData")
local getRoomType = ____roomData.getRoomType
local ____postAmbushFinished = require("lua_modules.isaacscript-common.callbacks.subscriptions.postAmbushFinished")
local postAmbushFinishedFire = ____postAmbushFinished.postAmbushFinishedFire
local postAmbushFinishedHasSubscriptions = ____postAmbushFinished.postAmbushFinishedHasSubscriptions
local ____postAmbushStarted = require("lua_modules.isaacscript-common.callbacks.subscriptions.postAmbushStarted")
local postAmbushStartedFire = ____postAmbushStarted.postAmbushStartedFire
local postAmbushStartedHasSubscriptions = ____postAmbushStarted.postAmbushStartedHasSubscriptions
function hasSubscriptions(self)
    return postAmbushStartedHasSubscriptions(nil) or postAmbushFinishedHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    local room = game:GetRoom()
    if not v.room.ambushActive then
        local ambushActive = room:IsAmbushActive()
        if ambushActive then
            v.room.ambushActive = true
            local ambushType = getAmbushType(nil)
            postAmbushStartedFire(nil, ambushType)
        end
    end
    if not v.room.ambushDone then
        local ambushDone = room:IsAmbushDone()
        if ambushDone then
            v.room.ambushDone = true
            local ambushType = getAmbushType(nil)
            postAmbushFinishedFire(nil, ambushType)
        end
    end
end
function getAmbushType(self)
    local roomType = getRoomType(nil)
    return roomType == RoomType.BOSS_RUSH and AmbushType.BOSS_RUSH or AmbushType.CHALLENGE_ROOM
end
v = {room = {ambushActive = false, ambushDone = false}}
---
-- @internal
function ____exports.postAmbushCallbacksInit(self, mod)
    saveDataManager(nil, "postAmbushCallbacks", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.enums.AmbushType"] = function(...) 
local ____exports = {}
____exports.AmbushType = {}
____exports.AmbushType.CHALLENGE_ROOM = 0
____exports.AmbushType[____exports.AmbushType.CHALLENGE_ROOM] = "CHALLENGE_ROOM"
____exports.AmbushType.BOSS_RUSH = 1
____exports.AmbushType[____exports.AmbushType.BOSS_RUSH] = "BOSS_RUSH"
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postBombExploded"] = function(...) 
local ____exports = {}
local hasSubscriptions, postBombUpdate
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____constants = require("lua_modules.isaacscript-common.constants")
local BOMB_EXPLODE_FRAME = ____constants.BOMB_EXPLODE_FRAME
local ____postBoneExploded = require("lua_modules.isaacscript-common.callbacks.subscriptions.postBoneExploded")
local postBombExplodedFire = ____postBoneExploded.postBombExplodedFire
local postBombExplodedHasSubscriptions = ____postBoneExploded.postBombExplodedHasSubscriptions
function hasSubscriptions(self)
    return postBombExplodedHasSubscriptions(nil)
end
function postBombUpdate(self, bomb)
    if not hasSubscriptions(nil) then
        return
    end
    if bomb.FrameCount == BOMB_EXPLODE_FRAME then
        postBombExplodedFire(nil, bomb)
    end
end
---
-- @internal
function ____exports.postBombExplodedInit(self, mod)
    mod:AddCallback(ModCallback.POST_BOMB_UPDATE, postBombUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postBombInitLate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postBombUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postBombInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postBombInitLate")
local postBombInitLateFire = ____postBombInitLate.postBombInitLateFire
local postBombInitLateHasSubscriptions = ____postBombInitLate.postBombInitLateHasSubscriptions
function hasSubscriptions(self)
    return postBombInitLateHasSubscriptions(nil)
end
function postBombUpdate(self, bomb)
    if not hasSubscriptions(nil) then
        return
    end
    local index = GetPtrHash(bomb)
    if not v.room.firedSet:has(index) then
        v.room.firedSet:add(index)
        postBombInitLateFire(nil, bomb)
    end
end
v = {room = {firedSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postBombInitLateInit(self, mod)
    saveDataManager(nil, "postBombInitLate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_BOMB_UPDATE, postBombUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postBoneSwing"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local Map = ____lualib.Map
local ____exports = {}
local hasSubscriptions, postKnifeRender, postKnifeRenderBoneClub, boneClubAnimationChanged, BONE_SWING_ANIMATIONS, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local KnifeVariant = ____isaac_2Dtypescript_2Ddefinitions.KnifeVariant
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postBoneSwing = require("lua_modules.isaacscript-common.callbacks.subscriptions.postBoneSwing")
local postBoneSwingFire = ____postBoneSwing.postBoneSwingFire
local postBoneSwingHasSubscriptions = ____postBoneSwing.postBoneSwingHasSubscriptions
function hasSubscriptions(self)
    return postBoneSwingHasSubscriptions(nil)
end
function postKnifeRender(self, knife)
    if not hasSubscriptions(nil) then
        return
    end
    if knife.Variant ~= KnifeVariant.BONE_CLUB then
        return
    end
    postKnifeRenderBoneClub(nil, knife)
end
function postKnifeRenderBoneClub(self, boneClub)
    local sprite = boneClub:GetSprite()
    local animation = sprite:GetAnimation()
    local ptrHash = GetPtrHash(boneClub)
    local animationOnLastFrame = v.room.boneClubAnimations:get(ptrHash)
    v.room.boneClubAnimations:set(ptrHash, animation)
    if animationOnLastFrame ~= nil and animation ~= animationOnLastFrame then
        boneClubAnimationChanged(nil, boneClub, animation)
    end
end
function boneClubAnimationChanged(self, boneClub, animation)
    if BONE_SWING_ANIMATIONS:has(animation) then
        postBoneSwingFire(nil, boneClub)
    end
end
BONE_SWING_ANIMATIONS = __TS__New(Set, {"Swing", "Swing2", "Spin"})
v = {room = {boneClubAnimations = __TS__New(Map)}}
---
-- @internal
function ____exports.postBoneSwingInit(self, mod)
    saveDataManager(nil, "postBoneSwing", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_KNIFE_RENDER, postKnifeRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postCollectibleInitFirst"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPickupInitCollectible, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____collectibles = require("lua_modules.isaacscript-common.functions.collectibles")
local getCollectibleIndex = ____collectibles.getCollectibleIndex
local ____postCollectibleInitFirst = require("lua_modules.isaacscript-common.callbacks.subscriptions.postCollectibleInitFirst")
local postCollectibleInitFirstFire = ____postCollectibleInitFirst.postCollectibleInitFirstFire
local postCollectibleInitFirstHasSubscriptions = ____postCollectibleInitFirst.postCollectibleInitFirstHasSubscriptions
function hasSubscriptions(self)
    return postCollectibleInitFirstHasSubscriptions(nil)
end
function postPickupInitCollectible(self, pickup)
    local collectible = pickup
    local collectibleIndex = getCollectibleIndex(nil, collectible)
    if v.run.seenCollectibles:has(collectibleIndex) then
        return
    end
    v.run.seenCollectibles:add(collectibleIndex)
    postCollectibleInitFirstFire(nil, collectible)
end
v = {run = {seenCollectibles = __TS__New(Set)}}
---
-- @internal
function ____exports.postCollectibleInitFirstInit(self, mod)
    saveDataManager(nil, "postCollectibleInitFirst", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_PICKUP_INIT, postPickupInitCollectible, PickupVariant.COLLECTIBLE)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postCursedTeleport"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, entityTakeDmgPlayer, setDamageFrame, isPotentialNaturalTeleportFromSacrificeRoom, incrementNumSacrifices, postPlayerRenderPlayer, playerIsTeleportingFromCursedTeleport, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local DamageFlag = ____isaac_2Dtypescript_2Ddefinitions.DamageFlag
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local PlayerVariant = ____isaac_2Dtypescript_2Ddefinitions.PlayerVariant
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local hasFlag = ____flag.hasFlag
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getPlayerNumHitsRemaining = ____player.getPlayerNumHitsRemaining
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local mapGetPlayer = ____playerDataStructures.mapGetPlayer
local mapSetPlayer = ____playerDataStructures.mapSetPlayer
local ____postCursedTeleport = require("lua_modules.isaacscript-common.callbacks.subscriptions.postCursedTeleport")
local postCursedTeleportFire = ____postCursedTeleport.postCursedTeleportFire
local postCursedTeleportHasSubscriptions = ____postCursedTeleport.postCursedTeleportHasSubscriptions
function hasSubscriptions(self)
    return postCursedTeleportHasSubscriptions(nil)
end
function entityTakeDmgPlayer(self, tookDamage, _damageAmount, damageFlags, _damageSource, _damageCountdownFrames)
    if not hasSubscriptions(nil) then
        return nil
    end
    incrementNumSacrifices(nil, damageFlags)
    setDamageFrame(nil, tookDamage, damageFlags)
    return nil
end
function setDamageFrame(self, tookDamage, damageFlags)
    local gameFrameCount = game:GetFrameCount()
    local player = tookDamage:ToPlayer()
    if player == nil then
        return
    end
    local trackingArray = mapGetPlayer(nil, v.run.playersDamageFrameMap, player)
    if trackingArray ~= nil then
        local lastDamageFrame, callbackFiredOnThisFrame = table.unpack(trackingArray)
        if lastDamageFrame == gameFrameCount and callbackFiredOnThisFrame then
            return
        end
    end
    if isPotentialNaturalTeleportFromSacrificeRoom(nil, damageFlags) then
        return
    end
    local newTrackingArray = {gameFrameCount, false}
    mapSetPlayer(nil, v.run.playersDamageFrameMap, player, newTrackingArray)
end
function isPotentialNaturalTeleportFromSacrificeRoom(self, damageFlags)
    local room = game:GetRoom()
    local roomType = room:GetType()
    local isSpikeDamage = hasFlag(nil, damageFlags, DamageFlag.SPIKES)
    return roomType == RoomType.SACRIFICE and isSpikeDamage and (v.level.numSacrifices == 6 or v.level.numSacrifices >= 12)
end
function incrementNumSacrifices(self, damageFlags)
    local room = game:GetRoom()
    local roomType = room:GetType()
    local isSpikeDamage = hasFlag(nil, damageFlags, DamageFlag.SPIKES)
    if roomType == RoomType.SACRIFICE and isSpikeDamage then
        local ____v_level_0, ____numSacrifices_1 = v.level, "numSacrifices"
        ____v_level_0[____numSacrifices_1] = ____v_level_0[____numSacrifices_1] + 1
    end
end
function postPlayerRenderPlayer(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local trackingArray = mapGetPlayer(nil, v.run.playersDamageFrameMap, player)
    if trackingArray == nil then
        return
    end
    local lastDamageFrame, callbackActivatedOnThisFrame = table.unpack(trackingArray)
    if not playerIsTeleportingFromCursedTeleport(nil, player, lastDamageFrame) then
        return
    end
    if callbackActivatedOnThisFrame then
        return
    end
    local gameFrameCount = game:GetFrameCount()
    local newTrackingArray = {gameFrameCount, true}
    mapSetPlayer(nil, v.run.playersDamageFrameMap, player, newTrackingArray)
    postCursedTeleportFire(nil, player)
end
function playerIsTeleportingFromCursedTeleport(self, player, lastDamageFrame)
    local gameFrameCount = game:GetFrameCount()
    if gameFrameCount ~= lastDamageFrame then
        return false
    end
    local sprite = player:GetSprite()
    if not sprite:IsPlaying("TeleportUp") or sprite:GetFrame() ~= 1 then
        return false
    end
    if player:HasCollectible(CollectibleType.CURSED_EYE) then
        return true
    end
    local numHitsRemaining = getPlayerNumHitsRemaining(nil, player)
    if player:HasTrinket(TrinketType.CURSED_SKULL) and numHitsRemaining == 1 then
        return true
    end
    return false
end
v = {
    run = {playersDamageFrameMap = __TS__New(Map)},
    level = {numSacrifices = 0}
}
---
-- @internal
function ____exports.postCursedTeleportInit(self, mod)
    saveDataManager(nil, "postCursedTeleport", v, hasSubscriptions)
    mod:AddCallback(ModCallback.ENTITY_TAKE_DMG, entityTakeDmgPlayer, EntityType.PLAYER)
    mod:AddCallback(ModCallback.POST_PLAYER_RENDER, postPlayerRenderPlayer, PlayerVariant.PLAYER)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postDiceRoomActivated"] = function(...) 
local ____exports = {}
local hasSubscriptions, postEffectUpdateDiceFloor, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EffectVariant = ____isaac_2Dtypescript_2Ddefinitions.EffectVariant
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____effects = require("lua_modules.isaacscript-common.functions.effects")
local isCloseEnoughToTriggerDiceFloor = ____effects.isCloseEnoughToTriggerDiceFloor
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getClosestPlayer = ____player.getClosestPlayer
local ____postDiceRoomActivated = require("lua_modules.isaacscript-common.callbacks.subscriptions.postDiceRoomActivated")
local postDiceRoomActivatedFire = ____postDiceRoomActivated.postDiceRoomActivatedFire
local postDiceRoomActivatedHasSubscriptions = ____postDiceRoomActivated.postDiceRoomActivatedHasSubscriptions
function hasSubscriptions(self)
    return postDiceRoomActivatedHasSubscriptions(nil)
end
function postEffectUpdateDiceFloor(self, effect)
    if not hasSubscriptions(nil) then
        return
    end
    if v.room.diceRoomActivated then
        return
    end
    if effect.FrameCount == 0 then
        return
    end
    local closestPlayer = getClosestPlayer(nil, effect.Position)
    if isCloseEnoughToTriggerDiceFloor(nil, closestPlayer, effect) then
        v.room.diceRoomActivated = true
        postDiceRoomActivatedFire(nil, closestPlayer, effect.SubType)
    end
end
v = {room = {diceRoomActivated = false}}
---
-- @internal
function ____exports.postDiceRoomActivatedInit(self, mod)
    saveDataManager(nil, "postDiceRoomActivated", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_EFFECT_UPDATE, postEffectUpdateDiceFloor, EffectVariant.DICE_FLOOR)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postDoorRender"] = function(...) 
local ____exports = {}
local hasSubscriptions, postRender
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____doors = require("lua_modules.isaacscript-common.functions.doors")
local getDoors = ____doors.getDoors
local ____postDoorRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postDoorRender")
local postDoorRenderFire = ____postDoorRender.postDoorRenderFire
local postDoorRenderHasSubscriptions = ____postDoorRender.postDoorRenderHasSubscriptions
function hasSubscriptions(self)
    return postDoorRenderHasSubscriptions(nil)
end
function postRender(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, doors in ipairs(getDoors(nil)) do
        postDoorRenderFire(nil, doors)
    end
end
---
-- @internal
function ____exports.postDoorRenderInit(self, mod)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postDoorUpdate"] = function(...) 
local ____exports = {}
local hasSubscriptions, postUpdate
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____doors = require("lua_modules.isaacscript-common.functions.doors")
local getDoors = ____doors.getDoors
local ____postDoorUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postDoorUpdate")
local postDoorUpdateFire = ____postDoorUpdate.postDoorUpdateFire
local postDoorUpdateHasSubscriptions = ____postDoorUpdate.postDoorUpdateHasSubscriptions
function hasSubscriptions(self)
    return postDoorUpdateHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, doors in ipairs(getDoors(nil)) do
        postDoorUpdateFire(nil, doors)
    end
end
---
-- @internal
function ____exports.postDoorUpdateInit(self, mod)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postEffectInitLate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postEffectUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postEffectInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postEffectInitLate")
local postEffectInitLateFire = ____postEffectInitLate.postEffectInitLateFire
local postEffectInitLateHasSubscriptions = ____postEffectInitLate.postEffectInitLateHasSubscriptions
function hasSubscriptions(self)
    return postEffectInitLateHasSubscriptions(nil)
end
function postEffectUpdate(self, effect)
    if not hasSubscriptions(nil) then
        return
    end
    local index = GetPtrHash(effect)
    if not v.room.firedSet:has(index) then
        v.room.firedSet:add(index)
        postEffectInitLateFire(nil, effect)
    end
end
v = {room = {firedSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postEffectInitLateInit(self, mod)
    saveDataManager(nil, "postEffectInitLate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_EFFECT_UPDATE, postEffectUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postEffectStateChanged"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postEffectUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postEffectStateChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postEffectStateChanged")
local postEffectStateChangedFire = ____postEffectStateChanged.postEffectStateChangedFire
local postEffectStateChangedHasSubscriptions = ____postEffectStateChanged.postEffectStateChangedHasSubscriptions
function hasSubscriptions(self)
    return postEffectStateChangedHasSubscriptions(nil)
end
function postEffectUpdate(self, effect)
    if not hasSubscriptions(nil) then
        return
    end
    local ptrHash = GetPtrHash(effect)
    local previousState = v.run.effectStateMap:getAndSetDefault(ptrHash, effect.State)
    local currentState = effect.State
    v.run.effectStateMap:set(ptrHash, currentState)
    if previousState ~= currentState then
        postEffectStateChangedFire(nil, effect, previousState, currentState)
    end
end
v = {run = {effectStateMap = __TS__New(
    DefaultMap,
    function(____, state) return state end
)}}
---
-- @internal
function ____exports.postEffectStateChangedInit(self, mod)
    saveDataManager(nil, "postEffectStateChanged", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_EFFECT_UPDATE, postEffectUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postEsauJr"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayFind = ____lualib.__TS__ArrayFind
local ____exports = {}
local hasSubscriptions, postUpdate, getPlayerWithControllerIndex, useItemEsauJr, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getPlayers = ____playerIndex.getPlayers
local ____postEsauJr = require("lua_modules.isaacscript-common.callbacks.subscriptions.postEsauJr")
local postEsauJrFire = ____postEsauJr.postEsauJrFire
local postEsauJrHasSubscriptions = ____postEsauJr.postEsauJrHasSubscriptions
local ____postFirstEsauJr = require("lua_modules.isaacscript-common.callbacks.subscriptions.postFirstEsauJr")
local postFirstEsauJrFire = ____postFirstEsauJr.postFirstEsauJrFire
local postFirstEsauJrHasSubscriptions = ____postFirstEsauJr.postFirstEsauJrHasSubscriptions
function hasSubscriptions(self)
    return postEsauJrHasSubscriptions(nil) or postFirstEsauJrHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    local gameFrameCount = game:GetFrameCount()
    if v.run.usedEsauJrFrame == nil or gameFrameCount < v.run.usedEsauJrFrame + 1 then
        return
    end
    v.run.usedEsauJrFrame = nil
    if v.run.usedEsauJrControllerIndex == nil then
        return
    end
    local player = getPlayerWithControllerIndex(nil, v.run.usedEsauJrControllerIndex)
    v.run.usedEsauJrControllerIndex = nil
    if player == nil then
        return
    end
    if not v.run.usedEsauJrAtLeastOnce then
        v.run.usedEsauJrAtLeastOnce = true
        postFirstEsauJrFire(nil, player)
    end
    postEsauJrFire(nil, player)
end
function getPlayerWithControllerIndex(self, controllerIndex)
    local players = getPlayers(nil)
    return __TS__ArrayFind(
        players,
        function(____, player) return player.ControllerIndex == controllerIndex end
    )
end
function useItemEsauJr(self, _collectibleType, _rng, player, _useFlags, _activeSlot, _customVarData)
    if not hasSubscriptions(nil) then
        return nil
    end
    local gameFrameCount = game:GetFrameCount()
    v.run.usedEsauJrFrame = gameFrameCount + 1
    v.run.usedEsauJrControllerIndex = player.ControllerIndex
    return nil
end
v = {run = {usedEsauJrFrame = nil, usedEsauJrControllerIndex = nil, usedEsauJrAtLeastOnce = false}}
---
-- @internal
function ____exports.postEsauJrCallbacksInit(self, mod)
    saveDataManager(nil, "postEsauJr", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
    mod:AddCallback(ModCallback.POST_USE_ITEM, useItemEsauJr, CollectibleType.ESAU_JR)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postFamiliarInitLate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postFamiliarUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postFamiliarInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postFamiliarInitLate")
local postFamiliarInitLateFire = ____postFamiliarInitLate.postFamiliarInitLateFire
local postFamiliarInitLateHasSubscriptions = ____postFamiliarInitLate.postFamiliarInitLateHasSubscriptions
function hasSubscriptions(self)
    return postFamiliarInitLateHasSubscriptions(nil)
end
function postFamiliarUpdate(self, familiar)
    if not hasSubscriptions(nil) then
        return
    end
    local index = GetPtrHash(familiar)
    if not v.run.firedSet:has(index) then
        v.run.firedSet:add(index)
        postFamiliarInitLateFire(nil, familiar)
    end
end
v = {run = {firedSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postFamiliarInitLateInit(self, mod)
    saveDataManager(nil, "postFamiliarInitLate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_FAMILIAR_UPDATE, postFamiliarUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postFamiliarStateChanged"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postFamiliarUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postFamiliarStateChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postFamiliarStateChanged")
local postFamiliarStateChangedFire = ____postFamiliarStateChanged.postFamiliarStateChangedFire
local postFamiliarStateChangedHasSubscriptions = ____postFamiliarStateChanged.postFamiliarStateChangedHasSubscriptions
function hasSubscriptions(self)
    return postFamiliarStateChangedHasSubscriptions(nil)
end
function postFamiliarUpdate(self, familiar)
    if not hasSubscriptions(nil) then
        return
    end
    local ptrHash = GetPtrHash(familiar)
    local previousState = v.run.familiarStateMap:getAndSetDefault(ptrHash, familiar.State)
    local currentState = familiar.State
    v.run.familiarStateMap:set(ptrHash, currentState)
    if previousState ~= currentState then
        postFamiliarStateChangedFire(nil, familiar, previousState, currentState)
    end
end
v = {run = {familiarStateMap = __TS__New(
    DefaultMap,
    function(____, state) return state end
)}}
---
-- @internal
function ____exports.postFamiliarStateChangedInit(self, mod)
    saveDataManager(nil, "postFamiliarStateChanged", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_FAMILIAR_UPDATE, postFamiliarUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postFlip"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__ArrayFind = ____lualib.__TS__ArrayFind
local ____exports = {}
local hasSubscriptions, useItemFlip, getNewLazarus, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local PlayerType = ____isaac_2Dtypescript_2Ddefinitions.PlayerType
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getPlayersOfType = ____player.getPlayersOfType
local isTaintedLazarus = ____player.isTaintedLazarus
local ____postFirstFlip = require("lua_modules.isaacscript-common.callbacks.subscriptions.postFirstFlip")
local postFirstFlipFire = ____postFirstFlip.postFirstFlipFire
local postFirstFlipHasSubscriptions = ____postFirstFlip.postFirstFlipHasSubscriptions
local ____postFlip = require("lua_modules.isaacscript-common.callbacks.subscriptions.postFlip")
local postFlipFire = ____postFlip.postFlipFire
local postFlipHasSubscriptions = ____postFlip.postFlipHasSubscriptions
function hasSubscriptions(self)
    return postFlipHasSubscriptions(nil) or postFirstFlipHasSubscriptions(nil)
end
function useItemFlip(self, _collectibleType, _rng, player, _useFlags, _activeSlot, _customVarData)
    if not hasSubscriptions(nil) then
        return nil
    end
    if not isTaintedLazarus(nil, player) then
        return nil
    end
    local newLazarus = getNewLazarus(nil, player)
    if newLazarus == nil then
        return nil
    end
    if not v.run.usedFlipAtLeastOnce then
        v.run.usedFlipAtLeastOnce = true
        postFirstFlipFire(nil, newLazarus)
    end
    postFlipFire(nil, newLazarus)
    return nil
end
function getNewLazarus(self, oldLazarus)
    local oldCharacter = oldLazarus:GetPlayerType()
    local newCharacter
    if oldCharacter == PlayerType.LAZARUS_B then
        newCharacter = PlayerType.LAZARUS_2_B
    elseif oldCharacter == PlayerType.LAZARUS_2_B then
        newCharacter = PlayerType.LAZARUS_B
    else
        error("Failed to determine the character in the postFlip callback.")
    end
    local playersOfType = getPlayersOfType(nil, newCharacter)
    return __TS__ArrayFind(
        playersOfType,
        function(____, player) return player.FrameCount == oldLazarus.FrameCount end
    )
end
v = {run = {usedFlipAtLeastOnce = false}}
---
-- @internal
function ____exports.postFlipCallbacksInit(self, mod)
    saveDataManager(nil, "postFlip", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_USE_ITEM, useItemFlip, CollectibleType.FLIP)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postGreedModeWave"] = function(...) 
local ____exports = {}
local hasSubscriptions, postUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postGreedModeWave = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGreedModeWave")
local postGreedModeWaveFire = ____postGreedModeWave.postGreedModeWaveFire
local postGreedModeWaveHasSubscriptions = ____postGreedModeWave.postGreedModeWaveHasSubscriptions
function hasSubscriptions(self)
    return postGreedModeWaveHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    local level = game:GetLevel()
    local newWave = level.GreedModeWave
    local oldWave = v.run.currentGreedWave
    v.run.currentGreedWave = newWave
    if newWave > oldWave then
        postGreedModeWaveFire(nil, oldWave, newWave)
    end
end
v = {run = {currentGreedWave = 0}}
---
-- @internal
function ____exports.postGreedModeWaveInit(self, mod)
    saveDataManager(nil, "postModeGreedWave", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postGridEntity"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local hasSubscriptions, postUpdate, checkGridEntitiesRemoved, checkGridEntityStateChanged, checkNewGridEntity, updateTupleInMap, postNewRoomReordered, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____gridEntity = require("lua_modules.isaacscript-common.functions.gridEntity")
local getGridEntitiesMap = ____gridEntity.getGridEntitiesMap
local isGridEntityBroken = ____gridEntity.isGridEntityBroken
local ____postGridEntityBroken = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityBroken")
local postGridEntityBrokenFire = ____postGridEntityBroken.postGridEntityBrokenFire
local postGridEntityBrokenHasSubscriptions = ____postGridEntityBroken.postGridEntityBrokenHasSubscriptions
local ____postGridEntityInit = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityInit")
local postGridEntityInitFire = ____postGridEntityInit.postGridEntityInitFire
local postGridEntityInitHasSubscriptions = ____postGridEntityInit.postGridEntityInitHasSubscriptions
local ____postGridEntityRemove = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityRemove")
local postGridEntityRemoveFire = ____postGridEntityRemove.postGridEntityRemoveFire
local postGridEntityRemoveHasSubscriptions = ____postGridEntityRemove.postGridEntityRemoveHasSubscriptions
local ____postGridEntityStateChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityStateChanged")
local postGridEntityStateChangedFire = ____postGridEntityStateChanged.postGridEntityStateChangedFire
local postGridEntityStateChangedHasSubscriptions = ____postGridEntityStateChanged.postGridEntityStateChangedHasSubscriptions
local ____postGridEntityUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityUpdate")
local postGridEntityUpdateFire = ____postGridEntityUpdate.postGridEntityUpdateFire
local postGridEntityUpdateHasSubscriptions = ____postGridEntityUpdate.postGridEntityUpdateHasSubscriptions
function hasSubscriptions(self)
    return postGridEntityInitHasSubscriptions(nil) or postGridEntityUpdateHasSubscriptions(nil) or postGridEntityRemoveHasSubscriptions(nil) or postGridEntityStateChangedHasSubscriptions(nil) or postGridEntityBrokenHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    local gridEntitiesMap = getGridEntitiesMap(nil)
    checkGridEntitiesRemoved(nil, gridEntitiesMap)
    for ____, ____value in __TS__Iterator(gridEntitiesMap:entries()) do
        local gridIndex = ____value[1]
        local gridEntity = ____value[2]
        checkGridEntityStateChanged(nil, gridIndex, gridEntity)
        checkNewGridEntity(nil, gridIndex, gridEntity)
        postGridEntityUpdateFire(nil, gridEntity)
    end
end
function checkGridEntitiesRemoved(self, gridEntitiesMap)
    for ____, ____value in __TS__Iterator(v.room.initializedGridEntities:entries()) do
        local gridIndex = ____value[1]
        local gridEntityTuple = ____value[2]
        local storedGridEntityType, storedGridEntityVariant = table.unpack(gridEntityTuple)
        local gridEntity = gridEntitiesMap:get(gridIndex)
        if gridEntity == nil or gridEntity:GetType() ~= storedGridEntityType then
            v.room.initializedGridEntities:delete(gridIndex)
            postGridEntityRemoveFire(nil, gridIndex, storedGridEntityType, storedGridEntityVariant)
        end
    end
end
function checkGridEntityStateChanged(self, gridIndex, gridEntity)
    local gridEntityTuple = v.room.initializedGridEntities:get(gridIndex)
    if gridEntityTuple == nil then
        return
    end
    local _gridEntityType, _gridEntityVariant, oldState = table.unpack(gridEntityTuple)
    local newState = gridEntity.State
    if oldState ~= newState then
        updateTupleInMap(nil, gridEntity)
        postGridEntityStateChangedFire(nil, gridEntity, oldState, newState)
        if isGridEntityBroken(nil, gridEntity) then
            postGridEntityBrokenFire(nil, gridEntity)
        end
    end
end
function checkNewGridEntity(self, gridIndex, gridEntity)
    local gridEntityType = gridEntity:GetType()
    local gridEntityTuple = v.room.initializedGridEntities:get(gridIndex)
    if gridEntityTuple == nil or gridEntityTuple[1] ~= gridEntityType then
        updateTupleInMap(nil, gridEntity)
        postGridEntityInitFire(nil, gridEntity)
    end
end
function updateTupleInMap(self, gridEntity)
    local gridEntityType = gridEntity:GetType()
    local gridEntityVariant = gridEntity:GetVariant()
    local gridIndex = gridEntity:GetGridIndex()
    local newTuple = {gridEntityType, gridEntityVariant, gridEntity.State}
    v.room.initializedGridEntities:set(gridIndex, newTuple)
end
function postNewRoomReordered(self)
    if not hasSubscriptions(nil) then
        return
    end
    local gridEntitiesMap = getGridEntitiesMap(nil)
    for ____, ____value in __TS__Iterator(gridEntitiesMap:entries()) do
        local gridIndex = ____value[1]
        local gridEntity = ____value[2]
        checkNewGridEntity(nil, gridIndex, gridEntity)
    end
end
v = {room = {initializedGridEntities = __TS__New(Map)}}
---
-- @internal
function ____exports.postGridEntityCallbacksInit(self, mod)
    saveDataManager(nil, "postGridEntity", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
    mod:AddCallbackCustom(ModCallbackCustom.POST_NEW_ROOM_REORDERED, postNewRoomReordered)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postGridEntityCollision"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local __TS__ArrayMap = ____lualib.__TS__ArrayMap
local __TS__Iterator = ____lualib.__TS__Iterator
local ____exports = {}
local hasSubscriptions, postUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local GridCollisionClass = ____isaac_2Dtypescript_2Ddefinitions.GridCollisionClass
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____gridEntity = require("lua_modules.isaacscript-common.functions.gridEntity")
local getCollidingEntitiesWithGridEntity = ____gridEntity.getCollidingEntitiesWithGridEntity
local getGridEntities = ____gridEntity.getGridEntities
local ____postGridEntityCollision = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityCollision")
local postGridEntityCollisionFire = ____postGridEntityCollision.postGridEntityCollisionFire
local postGridEntityCollisionHasSubscriptions = ____postGridEntityCollision.postGridEntityCollisionHasSubscriptions
function hasSubscriptions(self)
    return postGridEntityCollisionHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    local gridEntities = getGridEntities(nil)
    local gridEntitiesWithCollision = __TS__ArrayFilter(
        gridEntities,
        function(____, gridEntity) return gridEntity.CollisionClass ~= GridCollisionClass.NONE end
    )
    for ____, gridEntity in ipairs(gridEntitiesWithCollision) do
        local gridEntityPtrHash = GetPtrHash(gridEntity)
        local oldCollidingEntities = v.room.collidingEntitiesMap:getAndSetDefault(gridEntityPtrHash)
        local collidingEntities = getCollidingEntitiesWithGridEntity(nil, gridEntity)
        for ____, entity in ipairs(collidingEntities) do
            local entityPtrHash = GetPtrHash(entity)
            if not oldCollidingEntities:has(entityPtrHash) then
                oldCollidingEntities:add(entityPtrHash)
                postGridEntityCollisionFire(nil, gridEntity, entity)
            end
        end
        local collidingEntitiesPtrHashes = __TS__ArrayMap(
            collidingEntities,
            function(____, entity) return GetPtrHash(entity) end
        )
        local collidingEntitiesPtrHashSet = __TS__New(Set, collidingEntitiesPtrHashes)
        for ____, oldCollidingEntityPtrHash in __TS__Iterator(oldCollidingEntities:values()) do
            if not collidingEntitiesPtrHashSet:has(oldCollidingEntityPtrHash) then
                oldCollidingEntities:delete(oldCollidingEntityPtrHash)
            end
        end
    end
end
v = {room = {collidingEntitiesMap = __TS__New(
    DefaultMap,
    function() return __TS__New(Set) end
)}}
---
-- @internal
function ____exports.postGridEntityCollisionInit(self, mod)
    saveDataManager(nil, "postGridEntityCollision", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postGridEntityRender"] = function(...) 
local ____exports = {}
local hasSubscriptions, postRender
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntity = require("lua_modules.isaacscript-common.functions.gridEntity")
local getGridEntities = ____gridEntity.getGridEntities
local ____postGridEntityRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postGridEntityRender")
local postGridEntityRenderFire = ____postGridEntityRender.postGridEntityRenderFire
local postGridEntityRenderHasSubscriptions = ____postGridEntityRender.postGridEntityRenderHasSubscriptions
function hasSubscriptions(self)
    return postGridEntityRenderHasSubscriptions(nil)
end
function postRender(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, gridEntity in ipairs(getGridEntities(nil)) do
        postGridEntityRenderFire(nil, gridEntity)
    end
end
---
-- @internal
function ____exports.postGridEntityRenderInit(self, mod)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postHolyMantleRemoved"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPEffectUpdateReordered, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local defaultMapGetPlayer = ____playerDataStructures.defaultMapGetPlayer
local mapSetPlayer = ____playerDataStructures.mapSetPlayer
local ____postHolyMantleRemoved = require("lua_modules.isaacscript-common.callbacks.subscriptions.postHolyMantleRemoved")
local postHolyMantleRemovedFire = ____postHolyMantleRemoved.postHolyMantleRemovedFire
local postHolyMantleRemovedHasSubscriptions = ____postHolyMantleRemoved.postHolyMantleRemovedHasSubscriptions
function hasSubscriptions(self)
    return postHolyMantleRemovedHasSubscriptions(nil)
end
function postPEffectUpdateReordered(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local effects = player:GetEffects()
    local newNumHolyMantles = effects:GetCollectibleEffectNum(CollectibleType.HOLY_MANTLE)
    local oldNumHolyMantles = defaultMapGetPlayer(nil, v.run.playersHolyMantleMap, player)
    mapSetPlayer(nil, v.run.playersHolyMantleMap, player, newNumHolyMantles)
    if newNumHolyMantles < oldNumHolyMantles then
        postHolyMantleRemovedFire(nil, player, oldNumHolyMantles, newNumHolyMantles)
    end
end
v = {run = {playersHolyMantleMap = __TS__New(DefaultMap, 0)}}
---
-- @internal
function ____exports.postHolyMantleRemovedInit(self, mod)
    saveDataManager(nil, "postHolyMantleRemoved", v, hasSubscriptions)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED, postPEffectUpdateReordered)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postItemDischarged"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local Map = ____lualib.Map
local ____exports = {}
local hasSubscriptions, postPEffectUpdate, playerRecentlyCollidedWithBulb, preNPCCollisionSucker, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ActiveSlot = ____isaac_2Dtypescript_2Ddefinitions.ActiveSlot
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local SuckerVariant = ____isaac_2Dtypescript_2Ddefinitions.SuckerVariant
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____charge = require("lua_modules.isaacscript-common.functions.charge")
local getTotalCharge = ____charge.getTotalCharge
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local defaultMapGetPlayer = ____playerDataStructures.defaultMapGetPlayer
local mapGetPlayer = ____playerDataStructures.mapGetPlayer
local mapSetPlayer = ____playerDataStructures.mapSetPlayer
local ____postItemDischarged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postItemDischarged")
local postItemDischargeFire = ____postItemDischarged.postItemDischargeFire
local postItemDischargeHasSubscriptions = ____postItemDischarged.postItemDischargeHasSubscriptions
function hasSubscriptions(self)
    return postItemDischargeHasSubscriptions(nil)
end
function postPEffectUpdate(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local activeItemMap = defaultMapGetPlayer(nil, v.run.playersActiveItemMap, player)
    local chargeMap = defaultMapGetPlayer(nil, v.run.playersActiveChargeMap, player)
    for ____, activeSlot in ipairs(getEnumValues(nil, ActiveSlot)) do
        do
            local currentActiveItem = player:GetActiveItem()
            local previousActiveItem = activeItemMap:getAndSetDefault(activeSlot, currentActiveItem)
            activeItemMap:set(activeSlot, currentActiveItem)
            if currentActiveItem ~= previousActiveItem then
                goto __continue10
            end
            local currentCharge = getTotalCharge(nil, player, activeSlot)
            local previousCharge = chargeMap:getAndSetDefault(activeSlot, currentCharge)
            chargeMap:set(activeSlot, currentCharge)
            if playerRecentlyCollidedWithBulb(nil, player) then
                goto __continue10
            end
            if currentCharge < previousCharge then
                local collectibleType = player:GetActiveItem(activeSlot)
                postItemDischargeFire(nil, player, collectibleType, activeSlot)
            end
        end
        ::__continue10::
    end
end
function playerRecentlyCollidedWithBulb(self, player)
    local gameFrameCount = game:GetFrameCount()
    local bulbLastCollisionFrame = mapGetPlayer(nil, v.room.playersBulbLastCollisionFrame, player)
    local collidedOnThisFrame = gameFrameCount == bulbLastCollisionFrame
    local collidedOnLastFrame = gameFrameCount - 1 == bulbLastCollisionFrame
    return collidedOnThisFrame or collidedOnLastFrame
end
function preNPCCollisionSucker(self, npc, collider)
    if not hasSubscriptions(nil) then
        return nil
    end
    if npc.Variant ~= SuckerVariant.BULB then
        return nil
    end
    local player = collider:ToPlayer()
    if player == nil then
        return nil
    end
    local gameFrameCount = game:GetFrameCount()
    mapSetPlayer(nil, v.room.playersBulbLastCollisionFrame, player, gameFrameCount)
    return nil
end
v = {
    run = {
        playersActiveItemMap = __TS__New(
            DefaultMap,
            function() return __TS__New(
                DefaultMap,
                function(____, collectibleType) return collectibleType end
            ) end
        ),
        playersActiveChargeMap = __TS__New(
            DefaultMap,
            function() return __TS__New(
                DefaultMap,
                function(____, charge) return charge end
            ) end
        )
    },
    room = {playersBulbLastCollisionFrame = __TS__New(Map)}
}
function ____exports.postItemDischargeInit(self, mod)
    saveDataManager(nil, "postItemDischarge", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_PEFFECT_UPDATE, postPEffectUpdate)
    mod:AddCallback(ModCallback.PRE_NPC_COLLISION, preNPCCollisionSucker, EntityType.SUCKER)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postKnifeInitLate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postKnifeUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postKnifeInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postKnifeInitLate")
local postKnifeInitLateFire = ____postKnifeInitLate.postKnifeInitLateFire
local postKnifeInitLateHasSubscriptions = ____postKnifeInitLate.postKnifeInitLateHasSubscriptions
function hasSubscriptions(self)
    return postKnifeInitLateHasSubscriptions(nil)
end
function postKnifeUpdate(self, knife)
    if not hasSubscriptions(nil) then
        return
    end
    local index = GetPtrHash(knife)
    if not v.room.firedSet:has(index) then
        v.room.firedSet:add(index)
        postKnifeInitLateFire(nil, knife)
    end
end
v = {room = {firedSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postKnifeInitLateInit(self, mod)
    saveDataManager(nil, "postKnifeInitLate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_KNIFE_UPDATE, postKnifeUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postLaserInitLate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postLaserUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postLaserInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postLaserInitLate")
local postLaserInitLateFire = ____postLaserInitLate.postLaserInitLateFire
local postLaserInitLateHasSubscriptions = ____postLaserInitLate.postLaserInitLateHasSubscriptions
function hasSubscriptions(self)
    return postLaserInitLateHasSubscriptions(nil)
end
function postLaserUpdate(self, laser)
    if not hasSubscriptions(nil) then
        return
    end
    local index = GetPtrHash(laser)
    if not v.room.firedSet:has(index) then
        v.room.firedSet:add(index)
        postLaserInitLateFire(nil, laser)
    end
end
v = {room = {firedSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postLaserInitLateInit(self, mod)
    saveDataManager(nil, "postLaserInitLate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_LASER_UPDATE, postLaserUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postNPCInitLate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postNPCUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postNPCInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postNPCInitLate")
local postNPCInitLateFire = ____postNPCInitLate.postNPCInitLateFire
local postNPCInitLateHasSubscriptions = ____postNPCInitLate.postNPCInitLateHasSubscriptions
function hasSubscriptions(self)
    return postNPCInitLateHasSubscriptions(nil)
end
function postNPCUpdate(self, npc)
    if not hasSubscriptions(nil) then
        return
    end
    local index = GetPtrHash(npc)
    if not v.room.firedSet:has(index) then
        v.room.firedSet:add(index)
        postNPCInitLateFire(nil, npc)
    end
end
v = {room = {firedSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postNPCInitLateInit(self, mod)
    saveDataManager(nil, "postNPCInitLate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_NPC_UPDATE, postNPCUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postNPCStateChanged"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postNPCUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postNPCStateChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postNPCStateChanged")
local postNPCStateChangedFire = ____postNPCStateChanged.postNPCStateChangedFire
local postNPCStateChangedHasSubscriptions = ____postNPCStateChanged.postNPCStateChangedHasSubscriptions
function hasSubscriptions(self)
    return postNPCStateChangedHasSubscriptions(nil)
end
function postNPCUpdate(self, npc)
    if not hasSubscriptions(nil) then
        return
    end
    local ptrHash = GetPtrHash(npc)
    local previousState = v.run.npcStateMap:getAndSetDefault(ptrHash, npc.State)
    local currentState = npc.State
    v.run.npcStateMap:set(ptrHash, currentState)
    if previousState ~= currentState then
        postNPCStateChangedFire(nil, npc, previousState, currentState)
    end
end
v = {run = {npcStateMap = __TS__New(
    DefaultMap,
    function(____, state) return state end
)}}
---
-- @internal
function ____exports.postNPCStateChangedInit(self, mod)
    saveDataManager(nil, "postNPCStateChanged", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_NPC_UPDATE, postNPCUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPickupCollect"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPickupRender, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getClosestPlayer = ____player.getClosestPlayer
local ____postPickupCollect = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPickupCollect")
local postPickupCollectFire = ____postPickupCollect.postPickupCollectFire
local postPickupCollectHasSubscriptions = ____postPickupCollect.postPickupCollectHasSubscriptions
function hasSubscriptions(self)
    return postPickupCollectHasSubscriptions(nil)
end
function postPickupRender(self, pickup)
    if not hasSubscriptions(nil) then
        return
    end
    local sprite = pickup:GetSprite()
    local animation = sprite:GetAnimation()
    if animation ~= "Collect" then
        return
    end
    local index = GetPtrHash(pickup)
    if not v.room.firedSet:has(index) then
        v.room.firedSet:add(index)
        local player = getClosestPlayer(nil, pickup.Position)
        postPickupCollectFire(nil, pickup, player)
    end
end
v = {room = {firedSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postPickupCollectInit(self, mod)
    saveDataManager(nil, "postPickupCollect", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_PICKUP_RENDER, postPickupRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPickupInitFirst"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPickupInit, POST_ASCENT_ROOM_TYPES, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local GameStateFlag = ____isaac_2Dtypescript_2Ddefinitions.GameStateFlag
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____roomData = require("lua_modules.isaacscript-common.functions.roomData")
local getRoomVisitedCount = ____roomData.getRoomVisitedCount
local ____postPickupInitFirst = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPickupInitFirst")
local postPickupInitFirstFire = ____postPickupInitFirst.postPickupInitFirstFire
local postPickupInitFirstHasSubscriptions = ____postPickupInitFirst.postPickupInitFirstHasSubscriptions
function hasSubscriptions(self)
    return postPickupInitFirstHasSubscriptions(nil)
end
function postPickupInit(self, pickup)
    if not hasSubscriptions(nil) then
        return
    end
    local room = game:GetRoom()
    local roomType = room:GetType()
    local roomFrameCount = room:GetFrameCount()
    local previouslySeen = v.run.postAscentPickupInitSeeds:has(pickup.InitSeed)
    if POST_ASCENT_ROOM_TYPES:has(roomType) then
        v.run.postAscentPickupInitSeeds:add(pickup.InitSeed)
    end
    if roomFrameCount > 0 then
        postPickupInitFirstFire(nil, pickup)
        return
    end
    local roomVisitedCount = getRoomVisitedCount(nil)
    if roomVisitedCount > 0 then
        return
    end
    local onAscent = game:GetStateFlag(GameStateFlag.BACKWARDS_PATH)
    if onAscent and POST_ASCENT_ROOM_TYPES:has(roomType) and previouslySeen then
        return
    end
    postPickupInitFirstFire(nil, pickup)
end
POST_ASCENT_ROOM_TYPES = __TS__New(Set, {RoomType.TREASURE, RoomType.BOSS})
v = {run = {postAscentPickupInitSeeds = __TS__New(Set)}}
---
-- @internal
function ____exports.postPickupInitFirstInit(self, mod)
    saveDataManager(nil, "postPickupInitFirst", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_PICKUP_INIT, postPickupInit)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPickupInitLate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPickupUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postPickupInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPickupInitLate")
local postPickupInitLateFire = ____postPickupInitLate.postPickupInitLateFire
local postPickupInitLateHasSubscriptions = ____postPickupInitLate.postPickupInitLateHasSubscriptions
function hasSubscriptions(self)
    return postPickupInitLateHasSubscriptions(nil)
end
function postPickupUpdate(self, pickup)
    if not hasSubscriptions(nil) then
        return
    end
    local index = GetPtrHash(pickup)
    if not v.room.firedSet:has(index) then
        v.room.firedSet:add(index)
        postPickupInitLateFire(nil, pickup)
    end
end
v = {room = {firedSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postPickupInitLateInit(self, mod)
    saveDataManager(nil, "postPickupInitLate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_PICKUP_UPDATE, postPickupUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPickupStateChanged"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPickupUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postPickupStateChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPickupStateChanged")
local postPickupStateChangedFire = ____postPickupStateChanged.postPickupStateChangedFire
local postPickupStateChangedHasSubscriptions = ____postPickupStateChanged.postPickupStateChangedHasSubscriptions
function hasSubscriptions(self)
    return postPickupStateChangedHasSubscriptions(nil)
end
function postPickupUpdate(self, pickup)
    if not hasSubscriptions(nil) then
        return
    end
    local ptrHash = GetPtrHash(pickup)
    local previousState = v.run.pickupStateMap:getAndSetDefault(ptrHash, pickup.State)
    local currentState = pickup.State
    v.run.pickupStateMap:set(ptrHash, currentState)
    if previousState ~= currentState then
        postPickupStateChangedFire(nil, pickup, previousState, currentState)
    end
end
v = {run = {pickupStateMap = __TS__New(
    DefaultMap,
    function(____, state) return state end
)}}
---
-- @internal
function ____exports.postPickupStateChangedInit(self, mod)
    saveDataManager(nil, "postPickupStateChanged", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_PICKUP_UPDATE, postPickupUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPitRender"] = function(...) 
local ____exports = {}
local hasSubscriptions, postRender
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getPits = ____gridEntitySpecific.getPits
local ____postPitRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPitRender")
local postPitRenderFire = ____postPitRender.postPitRenderFire
local postPitRenderHasSubscriptions = ____postPitRender.postPitRenderHasSubscriptions
function hasSubscriptions(self)
    return postPitRenderHasSubscriptions(nil)
end
function postRender(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, pit in ipairs(getPits(nil)) do
        postPitRenderFire(nil, pit)
    end
end
---
-- @internal
function ____exports.postPitRenderInit(self, mod)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPitUpdate"] = function(...) 
local ____exports = {}
local hasSubscriptions, postUpdate
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getPits = ____gridEntitySpecific.getPits
local ____postPitUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPitUpdate")
local postPitUpdateFire = ____postPitUpdate.postPitUpdateFire
local postPitUpdateHasSubscriptions = ____postPitUpdate.postPitUpdateHasSubscriptions
function hasSubscriptions(self)
    return postPitUpdateHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, pit in ipairs(getPits(nil)) do
        postPitUpdateFire(nil, pit)
    end
end
---
-- @internal
function ____exports.postPitUpdateInit(self, mod)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPlayerChangeHealth"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPEffectUpdateReordered, v
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____HealthType = require("lua_modules.isaacscript-common.enums.HealthType")
local HealthType = ____HealthType.HealthType
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____playerHealth = require("lua_modules.isaacscript-common.functions.playerHealth")
local getPlayerHealthType = ____playerHealth.getPlayerHealthType
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getPlayerIndex = ____playerIndex.getPlayerIndex
local ____postPlayerChangeHealth = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerChangeHealth")
local postPlayerChangeHealthFire = ____postPlayerChangeHealth.postPlayerChangeHealthFire
local postPlayerChangeHealthHasSubscriptions = ____postPlayerChangeHealth.postPlayerChangeHealthHasSubscriptions
function hasSubscriptions(self)
    return postPlayerChangeHealthHasSubscriptions(nil)
end
function postPEffectUpdateReordered(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local playerIndex = getPlayerIndex(nil, player, true)
    local playerHealthMap = v.run.playersHealthMap:getAndSetDefault(playerIndex)
    for ____, healthType in ipairs(getEnumValues(nil, HealthType)) do
        local storedHealthValue = playerHealthMap:get(healthType)
        local currentHealthValue = getPlayerHealthType(nil, player, healthType)
        playerHealthMap:set(healthType, currentHealthValue)
        if storedHealthValue ~= nil and storedHealthValue ~= currentHealthValue then
            local difference = currentHealthValue - storedHealthValue
            postPlayerChangeHealthFire(nil, player, healthType, difference)
        end
    end
end
v = {run = {playersHealthMap = __TS__New(
    DefaultMap,
    function() return __TS__New(Map) end
)}}
---
-- @internal
function ____exports.postPlayerChangeHealthInit(self, mod)
    saveDataManager(nil, "postPlayerChangeHealth", v, hasSubscriptions)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED, postPEffectUpdateReordered)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPlayerChangeType"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPEffectUpdateReordered, v
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local defaultMapGetPlayer = ____playerDataStructures.defaultMapGetPlayer
local mapSetPlayer = ____playerDataStructures.mapSetPlayer
local ____postPlayerChangeType = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerChangeType")
local postPlayerChangeTypeFire = ____postPlayerChangeType.postPlayerChangeTypeFire
local postPlayerChangeTypeHasSubscriptions = ____postPlayerChangeType.postPlayerChangeTypeHasSubscriptions
function hasSubscriptions(self)
    return postPlayerChangeTypeHasSubscriptions(nil)
end
function postPEffectUpdateReordered(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local character = player:GetPlayerType()
    local storedCharacter = defaultMapGetPlayer(nil, v.run.playersCharacterMap, player, character)
    if character ~= storedCharacter then
        mapSetPlayer(nil, v.run.playersCharacterMap, player, character)
        postPlayerChangeTypeFire(nil, player, storedCharacter, character)
    end
end
v = {run = {playersCharacterMap = __TS__New(
    DefaultMap,
    function(____, character) return character end
)}}
---
-- @internal
function ____exports.postPlayerChangeTypeInit(self, mod)
    saveDataManager(nil, "postPlayerChangeType", v, hasSubscriptions)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED, postPEffectUpdateReordered)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPlayerCollectible"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local __TS__Spread = ____lualib.__TS__Spread
local __TS__SparseArrayNew = ____lualib.__TS__SparseArrayNew
local __TS__SparseArrayPush = ____lualib.__TS__SparseArrayPush
local __TS__SparseArraySpread = ____lualib.__TS__SparseArraySpread
local __TS__ArraySort = ____lualib.__TS__ArraySort
local ____exports = {}
local hasSubscriptions, postPEffectUpdate, collectibleCountChanged, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getPlayerCollectibleMap = ____player.getPlayerCollectibleMap
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local defaultMapGetPlayer = ____playerDataStructures.defaultMapGetPlayer
local mapGetPlayer = ____playerDataStructures.mapGetPlayer
local mapSetPlayer = ____playerDataStructures.mapSetPlayer
local ____utils = require("lua_modules.isaacscript-common.functions.utils")
local ____repeat = ____utils["repeat"]
local ____postPlayerCollectibleAdded = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerCollectibleAdded")
local postPlayerCollectibleAddedFire = ____postPlayerCollectibleAdded.postPlayerCollectibleAddedFire
local postPlayerCollectibleAddedHasSubscriptions = ____postPlayerCollectibleAdded.postPlayerCollectibleAddedHasSubscriptions
local ____postPlayerCollectibleRemoved = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerCollectibleRemoved")
local postPlayerCollectibleRemovedFire = ____postPlayerCollectibleRemoved.postPlayerCollectibleRemovedFire
local postPlayerCollectibleRemovedHasSubscriptions = ____postPlayerCollectibleRemoved.postPlayerCollectibleRemovedHasSubscriptions
function hasSubscriptions(self)
    return postPlayerCollectibleAddedHasSubscriptions(nil) or postPlayerCollectibleRemovedHasSubscriptions(nil)
end
function postPEffectUpdate(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local oldCollectibleCount = mapGetPlayer(nil, v.run.playersCollectibleCount, player)
    local newCollectibleCount = player:GetCollectibleCount()
    mapSetPlayer(nil, v.run.playersCollectibleCount, player, newCollectibleCount)
    if oldCollectibleCount == nil then
        return
    end
    local difference = newCollectibleCount - oldCollectibleCount
    if difference > 0 then
        collectibleCountChanged(nil, player, difference, true)
    elseif difference < 0 then
        collectibleCountChanged(nil, player, difference * -1, false)
    end
end
function collectibleCountChanged(self, player, numCollectiblesChanged, increased)
    local oldCollectibleMap = defaultMapGetPlayer(nil, v.run.playersCollectibleMap, player)
    local newCollectibleMap = getPlayerCollectibleMap(nil, player)
    mapSetPlayer(nil, v.run.playersCollectibleMap, player, newCollectibleMap)
    local ____array_0 = __TS__SparseArrayNew(__TS__Spread(oldCollectibleMap:keys()))
    __TS__SparseArrayPush(
        ____array_0,
        __TS__Spread(newCollectibleMap:keys())
    )
    local collectibleTypes = {__TS__SparseArraySpread(____array_0)}
    __TS__ArraySort(collectibleTypes)
    local numFired = 0
    for ____, collectibleType in ipairs(collectibleTypes) do
        local oldNum = oldCollectibleMap:get(collectibleType) or 0
        local newNum = newCollectibleMap:get(collectibleType) or 0
        local difference = math.abs(newNum - oldNum)
        ____repeat(
            nil,
            difference,
            function()
                if increased then
                    postPlayerCollectibleAddedFire(nil, player, collectibleType)
                else
                    postPlayerCollectibleRemovedFire(nil, player, collectibleType)
                end
                numFired = numFired + 1
            end
        )
        if numFired == numCollectiblesChanged then
            return
        end
    end
end
v = {run = {
    playersCollectibleCount = __TS__New(Map),
    playersCollectibleMap = __TS__New(
        DefaultMap,
        function() return __TS__New(Map) end
    )
}}
---
-- @internal
function ____exports.postPlayerCollectibleCallbacksInit(self, mod)
    saveDataManager(nil, "postPlayerCollectible", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_PEFFECT_UPDATE, postPEffectUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPlayerFatalDamage"] = function(...) 
local ____lualib = require("lualib_bundle")
local Map = ____lualib.Map
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, entityTakeDmgPlayer, preUseItemBible, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local BossID = ____isaac_2Dtypescript_2Ddefinitions.BossID
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local DamageFlagZero = ____isaac_2Dtypescript_2Ddefinitions.DamageFlagZero
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local mapGetPlayer = ____playerDataStructures.mapGetPlayer
local mapSetPlayer = ____playerDataStructures.mapSetPlayer
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local isChildPlayer = ____playerIndex.isChildPlayer
local ____revive = require("lua_modules.isaacscript-common.functions.revive")
local isDamageToPlayerFatal = ____revive.isDamageToPlayerFatal
local willPlayerRevive = ____revive.willPlayerRevive
local ____rooms = require("lua_modules.isaacscript-common.functions.rooms")
local inBossRoomOf = ____rooms.inBossRoomOf
local ____postPlayerFatalDamage = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerFatalDamage")
local postPlayerFatalDamageFire = ____postPlayerFatalDamage.postPlayerFatalDamageFire
local postPlayerFatalDamageHasSubscriptions = ____postPlayerFatalDamage.postPlayerFatalDamageHasSubscriptions
function hasSubscriptions(self)
    return postPlayerFatalDamageHasSubscriptions(nil)
end
function entityTakeDmgPlayer(self, tookDamage, damageAmount, damageFlags, damageSource, damageCountdownFrames)
    if not hasSubscriptions(nil) then
        return nil
    end
    local player = tookDamage:ToPlayer()
    if player == nil then
        return nil
    end
    if isChildPlayer(nil, player) then
        return nil
    end
    local gameFrameCount = game:GetFrameCount()
    local lastDamageGameFrame = mapGetPlayer(nil, v.run.playersLastDamageGameFrame, player)
    mapSetPlayer(nil, v.run.playersLastDamageGameFrame, player, gameFrameCount)
    if willPlayerRevive(nil, player) then
        return nil
    end
    if not isDamageToPlayerFatal(
        nil,
        player,
        damageAmount,
        damageSource,
        lastDamageGameFrame
    ) then
        return nil
    end
    local shouldSustainDeath = postPlayerFatalDamageFire(
        nil,
        player,
        damageAmount,
        damageFlags,
        damageSource,
        damageCountdownFrames
    )
    if shouldSustainDeath ~= nil then
        return shouldSustainDeath
    end
    return nil
end
function preUseItemBible(self, _collectibleType, _rng, player)
    if not hasSubscriptions(nil) then
        return nil
    end
    if not inBossRoomOf(nil, BossID.SATAN) then
        return nil
    end
    local shouldSustainDeath = postPlayerFatalDamageFire(
        nil,
        player,
        0,
        DamageFlagZero,
        EntityRef(player),
        0
    )
    if shouldSustainDeath ~= nil then
        return not shouldSustainDeath
    end
    return nil
end
v = {run = {playersLastDamageGameFrame = __TS__New(Map)}}
---
-- @internal
function ____exports.postPlayerFatalDamageInit(self, mod)
    saveDataManager(nil, "postPlayerFatalDamage", v)
    mod:AddCallback(ModCallback.ENTITY_TAKE_DMG, entityTakeDmgPlayer, EntityType.PLAYER)
    mod:AddCallback(ModCallback.PRE_USE_ITEM, preUseItemBible, CollectibleType.BIBLE)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPlayerInitLate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPlayerUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local setAddPlayer = ____playerDataStructures.setAddPlayer
local setHasPlayer = ____playerDataStructures.setHasPlayer
local ____postPlayerInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerInitLate")
local postPlayerInitLateFire = ____postPlayerInitLate.postPlayerInitLateFire
local postPlayerInitLateHasSubscriptions = ____postPlayerInitLate.postPlayerInitLateHasSubscriptions
function hasSubscriptions(self)
    return postPlayerInitLateHasSubscriptions(nil)
end
function postPlayerUpdate(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    if not setHasPlayer(nil, v.run.playersFiredSet, player) then
        setAddPlayer(nil, v.run.playersFiredSet, player)
        postPlayerInitLateFire(nil, player)
    end
end
v = {run = {playersFiredSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postPlayerInitLateInit(self, mod)
    saveDataManager(nil, "postPlayerInitLate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_PLAYER_UPDATE, postPlayerUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPlayerReordered"] = function(...) 
local ____exports = {}
local hasSubscriptions, postPEffectUpdate, postPlayerInit, postPlayerUpdate, postPlayerRender, postGameStarted, dequeue, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____array = require("lua_modules.isaacscript-common.functions.array")
local emptyArray = ____array.emptyArray
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local getPlayerFromIndex = ____playerIndex.getPlayerFromIndex
local getPlayerIndex = ____playerIndex.getPlayerIndex
local ____postPEffectUpdateReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPEffectUpdateReordered")
local postPEffectUpdateReorderedFire = ____postPEffectUpdateReordered.postPEffectUpdateReorderedFire
local postPEffectUpdateReorderedHasSubscriptions = ____postPEffectUpdateReordered.postPEffectUpdateReorderedHasSubscriptions
local ____postPlayerInitReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerInitReordered")
local postPlayerInitReorderedFire = ____postPlayerInitReordered.postPlayerInitReorderedFire
local postPlayerInitReorderedHasSubscriptions = ____postPlayerInitReordered.postPlayerInitReorderedHasSubscriptions
local ____postPlayerRenderReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerRenderReordered")
local postPlayerRenderReorderedFire = ____postPlayerRenderReordered.postPlayerRenderReorderedFire
local postPlayerRenderReorderedHasSubscriptions = ____postPlayerRenderReordered.postPlayerRenderReorderedHasSubscriptions
local ____postPlayerUpdateReordered = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPlayerUpdateReordered")
local postPlayerUpdateReorderedFire = ____postPlayerUpdateReordered.postPlayerUpdateReorderedFire
local postPlayerUpdateReorderedHasSubscriptions = ____postPlayerUpdateReordered.postPlayerUpdateReorderedHasSubscriptions
function hasSubscriptions(self)
    return postPlayerInitReorderedHasSubscriptions(nil) or postPEffectUpdateReorderedHasSubscriptions(nil) or postPlayerUpdateReorderedHasSubscriptions(nil) or postPlayerRenderReorderedHasSubscriptions(nil)
end
function postPEffectUpdate(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    if v.run.postGameStartedFiredOnThisRun then
        postPEffectUpdateReorderedFire(nil, player)
    else
        local playerIndex = getPlayerIndex(nil, player)
        local ____v_run_postPEffectUpdateQueue_0 = v.run.postPEffectUpdateQueue
        ____v_run_postPEffectUpdateQueue_0[#____v_run_postPEffectUpdateQueue_0 + 1] = playerIndex
    end
end
function postPlayerInit(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    if v.run.postGameStartedFiredOnThisRun then
        postPlayerInitReorderedFire(nil, player)
    else
        local playerIndex = getPlayerIndex(nil, player)
        local ____v_run_postPlayerInitQueue_1 = v.run.postPlayerInitQueue
        ____v_run_postPlayerInitQueue_1[#____v_run_postPlayerInitQueue_1 + 1] = playerIndex
    end
end
function postPlayerUpdate(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    if v.run.postGameStartedFiredOnThisRun then
        postPlayerUpdateReorderedFire(nil, player)
    else
        local playerIndex = getPlayerIndex(nil, player)
        local ____v_run_postPlayerUpdateQueue_2 = v.run.postPlayerUpdateQueue
        ____v_run_postPlayerUpdateQueue_2[#____v_run_postPlayerUpdateQueue_2 + 1] = playerIndex
    end
end
function postPlayerRender(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    if v.run.postGameStartedFiredOnThisRun then
        postPlayerRenderReorderedFire(nil, player)
    else
        local playerIndex = getPlayerIndex(nil, player)
        local ____v_run_postPlayerRenderQueue_3 = v.run.postPlayerRenderQueue
        ____v_run_postPlayerRenderQueue_3[#____v_run_postPlayerRenderQueue_3 + 1] = playerIndex
    end
end
function postGameStarted(self)
    if not hasSubscriptions(nil) then
        return
    end
    v.run.postGameStartedFiredOnThisRun = true
    dequeue(nil, v.run.postPlayerInitQueue, postPlayerInitReorderedFire)
    dequeue(nil, v.run.postPlayerUpdateQueue, postPlayerUpdateReorderedFire)
    dequeue(nil, v.run.postPlayerRenderQueue, postPlayerRenderReorderedFire)
end
function dequeue(self, playerIndexes, fireFunction)
    for ____, playerIndex in ipairs(playerIndexes) do
        do
            local player = getPlayerFromIndex(nil, playerIndex)
            if player == nil then
                goto __continue23
            end
            fireFunction(nil, player)
        end
        ::__continue23::
    end
    emptyArray(nil, playerIndexes)
end
v = {run = {
    postGameStartedFiredOnThisRun = false,
    postPlayerInitQueue = {},
    postPEffectUpdateQueue = {},
    postPlayerUpdateQueue = {},
    postPlayerRenderQueue = {}
}}
---
-- @internal
function ____exports.postPlayerReorderedCallbacksInit(self, mod)
    saveDataManager(nil, "postPlayerReordered", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_PEFFECT_UPDATE, postPEffectUpdate)
    mod:AddCallback(ModCallback.POST_PLAYER_INIT, postPlayerInit)
    mod:AddCallback(ModCallback.POST_PLAYER_UPDATE, postPlayerUpdate)
    mod:AddCallback(ModCallback.POST_PLAYER_RENDER, postPlayerRender)
    mod:AddCallback(ModCallback.POST_GAME_STARTED, postGameStarted)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPoopRender"] = function(...) 
local ____exports = {}
local hasSubscriptions, postRender
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getPoops = ____gridEntitySpecific.getPoops
local ____postPoopRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPoopRender")
local postPoopRenderFire = ____postPoopRender.postPoopRenderFire
local postPoopRenderHasSubscriptions = ____postPoopRender.postPoopRenderHasSubscriptions
function hasSubscriptions(self)
    return postPoopRenderHasSubscriptions(nil)
end
function postRender(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, poop in ipairs(getPoops(nil)) do
        postPoopRenderFire(nil, poop)
    end
end
---
-- @internal
function ____exports.postPoopRenderInit(self, mod)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPoopUpdate"] = function(...) 
local ____exports = {}
local hasSubscriptions, postUpdate
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getPoops = ____gridEntitySpecific.getPoops
local ____postPoopUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPoopUpdate")
local postPoopUpdateFire = ____postPoopUpdate.postPoopUpdateFire
local postPoopUpdateHasSubscriptions = ____postPoopUpdate.postPoopUpdateHasSubscriptions
function hasSubscriptions(self)
    return postPoopUpdateHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, poop in ipairs(getPoops(nil)) do
        postPoopUpdateFire(nil, poop)
    end
end
---
-- @internal
function ____exports.postPoopUpdateInit(self, mod)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPressurePlateRender"] = function(...) 
local ____exports = {}
local hasSubscriptions, postRender
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getPressurePlates = ____gridEntitySpecific.getPressurePlates
local ____postPressurePlateRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPressurePlateRender")
local postPressurePlateRenderFire = ____postPressurePlateRender.postPressurePlateRenderFire
local postPressurePlateRenderHasSubscriptions = ____postPressurePlateRender.postPressurePlateRenderHasSubscriptions
function hasSubscriptions(self)
    return postPressurePlateRenderHasSubscriptions(nil)
end
function postRender(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, pressurePlate in ipairs(getPressurePlates(nil)) do
        postPressurePlateRenderFire(nil, pressurePlate)
    end
end
---
-- @internal
function ____exports.postPressurePlateRenderInit(self, mod)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPressurePlateUpdate"] = function(...) 
local ____exports = {}
local hasSubscriptions, postUpdate
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getPressurePlates = ____gridEntitySpecific.getPressurePlates
local ____postPressurePlateUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPressurePlateUpdate")
local postPressurePlateUpdateFire = ____postPressurePlateUpdate.postPressurePlateUpdateFire
local postPressurePlateUpdateHasSubscriptions = ____postPressurePlateUpdate.postPressurePlateUpdateHasSubscriptions
function hasSubscriptions(self)
    return postPressurePlateUpdateHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, pressurePlate in ipairs(getPressurePlates(nil)) do
        postPressurePlateUpdateFire(nil, pressurePlate)
    end
end
---
-- @internal
function ____exports.postPressurePlateUpdateInit(self, mod)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postProjectileInitLate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postProjectileUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postProjectileInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postProjectileInitLate")
local postProjectileInitLateFire = ____postProjectileInitLate.postProjectileInitLateFire
local postProjectileInitLateHasSubscriptions = ____postProjectileInitLate.postProjectileInitLateHasSubscriptions
function hasSubscriptions(self)
    return postProjectileInitLateHasSubscriptions(nil)
end
function postProjectileUpdate(self, projectile)
    if not hasSubscriptions(nil) then
        return
    end
    local index = GetPtrHash(projectile)
    if not v.room.firedSet:has(index) then
        v.room.firedSet:add(index)
        postProjectileInitLateFire(nil, projectile)
    end
end
v = {room = {firedSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postProjectileInitLateInit(self, mod)
    saveDataManager(nil, "postProjectileInitLate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_PROJECTILE_UPDATE, postProjectileUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postPurchase"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local __TS__ArrayFind = ____lualib.__TS__ArrayFind
local ____exports = {}
local hasSubscriptions, postPEffectUpdateReordered, playerPickedUpNewItem, v
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local getPickups = ____entitySpecific.getPickups
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local defaultMapGetPlayer = ____playerDataStructures.defaultMapGetPlayer
local mapSetPlayer = ____playerDataStructures.mapSetPlayer
local ____postPurchase = require("lua_modules.isaacscript-common.callbacks.subscriptions.postPurchase")
local postPurchaseFire = ____postPurchase.postPurchaseFire
local postPurchaseHasSubscriptions = ____postPurchase.postPurchaseHasSubscriptions
function hasSubscriptions(self)
    return postPurchaseHasSubscriptions(nil)
end
function postPEffectUpdateReordered(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local isHoldingItem = player:IsHoldingItem()
    local wasHoldingItemOnLastFrame = defaultMapGetPlayer(nil, v.room.playersHoldingItemOnLastFrameMap, player)
    mapSetPlayer(nil, v.room.playersHoldingItemOnLastFrameMap, player, isHoldingItem)
    if not wasHoldingItemOnLastFrame and isHoldingItem then
        playerPickedUpNewItem(nil, player)
    end
end
function playerPickedUpNewItem(self, player)
    local pickups = getPickups(nil)
    local disappearingPickup = __TS__ArrayFind(
        pickups,
        function(____, pickup) return not pickup:Exists() and pickup.Price ~= 0 end
    )
    if disappearingPickup ~= nil then
        postPurchaseFire(nil, player, disappearingPickup)
    end
end
v = {room = {playersHoldingItemOnLastFrameMap = __TS__New(DefaultMap, false)}}
---
-- @internal
function ____exports.postPurchaseInit(self, mod)
    saveDataManager(nil, "postPurchase", v, hasSubscriptions)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED, postPEffectUpdateReordered)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postRockRender"] = function(...) 
local ____exports = {}
local hasSubscriptions, postRender
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getRocks = ____gridEntitySpecific.getRocks
local ____postRockRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postRockRender")
local postRockRenderFire = ____postRockRender.postRockRenderFire
local postRockRenderHasSubscriptions = ____postRockRender.postRockRenderHasSubscriptions
function hasSubscriptions(self)
    return postRockRenderHasSubscriptions(nil)
end
function postRender(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, rock in ipairs(getRocks(nil)) do
        postRockRenderFire(nil, rock)
    end
end
---
-- @internal
function ____exports.postRockRenderInit(self, mod)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postRockUpdate"] = function(...) 
local ____exports = {}
local hasSubscriptions, postUpdate
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getRocks = ____gridEntitySpecific.getRocks
local ____postRockUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postRockUpdate")
local postRockUpdateFire = ____postRockUpdate.postRockUpdateFire
local postRockUpdateHasSubscriptions = ____postRockUpdate.postRockUpdateHasSubscriptions
function hasSubscriptions(self)
    return postRockUpdateHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, rock in ipairs(getRocks(nil)) do
        postRockUpdateFire(nil, rock)
    end
end
---
-- @internal
function ____exports.postRockUpdateInit(self, mod)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postRoomClearChanged"] = function(...) 
local ____exports = {}
local hasSubscriptions, postUpdate, postNewRoomReordered, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postRoomClearChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postRoomClearChanged")
local postRoomClearChangedFire = ____postRoomClearChanged.postRoomClearChangedFire
local postRoomClearChangedHasSubscriptions = ____postRoomClearChanged.postRoomClearChangedHasSubscriptions
function hasSubscriptions(self)
    return postRoomClearChangedHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    local room = game:GetRoom()
    local roomClear = room:IsClear()
    if roomClear ~= v.room.cleared then
        v.room.cleared = roomClear
        postRoomClearChangedFire(nil, roomClear)
    end
end
function postNewRoomReordered(self)
    if not hasSubscriptions(nil) then
        return
    end
    local room = game:GetRoom()
    local roomClear = room:IsClear()
    v.room.cleared = roomClear
end
v = {room = {cleared = false}}
---
-- @internal
function ____exports.postRoomClearChangedInit(self, mod)
    saveDataManager(nil, "postRoomClearChanged", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
    mod:AddCallbackCustom(ModCallbackCustom.POST_NEW_ROOM_REORDERED, postNewRoomReordered)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postSacrifice"] = function(...) 
local ____exports = {}
local hasSubscriptions, entityTakeDmgPlayer, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local DamageFlag = ____isaac_2Dtypescript_2Ddefinitions.DamageFlag
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local RoomType = ____isaac_2Dtypescript_2Ddefinitions.RoomType
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____flag = require("lua_modules.isaacscript-common.functions.flag")
local hasFlag = ____flag.hasFlag
local ____postSacrifice = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSacrifice")
local postSacrificeFire = ____postSacrifice.postSacrificeFire
local postSacrificeHasSubscriptions = ____postSacrifice.postSacrificeHasSubscriptions
function hasSubscriptions(self)
    return postSacrificeHasSubscriptions(nil)
end
function entityTakeDmgPlayer(self, tookDamage, _damageAmount, damageFlags, _damageSource, _damageCountdownFrames)
    if not hasSubscriptions(nil) then
        return nil
    end
    local player = tookDamage:ToPlayer()
    if player == nil then
        return nil
    end
    local room = game:GetRoom()
    local roomType = room:GetType()
    local isSpikeDamage = hasFlag(nil, damageFlags, DamageFlag.SPIKES)
    if roomType == RoomType.SACRIFICE and isSpikeDamage then
        local ____v_level_0, ____numSacrifices_1 = v.level, "numSacrifices"
        ____v_level_0[____numSacrifices_1] = ____v_level_0[____numSacrifices_1] + 1
        postSacrificeFire(nil, player, v.level.numSacrifices)
    end
    return nil
end
v = {level = {numSacrifices = 0}}
---
-- @internal
function ____exports.postSacrificeInit(self, mod)
    saveDataManager(nil, "postSacrifice", v, hasSubscriptions)
    mod:AddCallback(ModCallback.ENTITY_TAKE_DMG, entityTakeDmgPlayer, EntityType.PLAYER)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postSlotDestroyed"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local Map = ____lualib.Map
local ____exports = {}
local hasSubscriptions, postEntityRemove, postSlotAnimationChanged, PRIZE_GAME_FRAME_DELAY_UNTIL_REMOVAL, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EntityGridCollisionClass = ____isaac_2Dtypescript_2Ddefinitions.EntityGridCollisionClass
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____cachedClasses = require("lua_modules.isaacscript-common.cachedClasses")
local game = ____cachedClasses.game
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____SlotDestructionType = require("lua_modules.isaacscript-common.enums.SlotDestructionType")
local SlotDestructionType = ____SlotDestructionType.SlotDestructionType
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postSlotDestroyed = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSlotDestroyed")
local postSlotDestroyedFire = ____postSlotDestroyed.postSlotDestroyedFire
local postSlotDestroyedHasSubscriptions = ____postSlotDestroyed.postSlotDestroyedHasSubscriptions
function hasSubscriptions(self)
    return postSlotDestroyedHasSubscriptions(nil)
end
function postEntityRemove(self, entity)
    local slot = entity
    local ptrHash = GetPtrHash(slot)
    local gameFrameCount = game:GetFrameCount()
    local prizeFrame = v.room.slotPrizeAnimationGameFrame:get(ptrHash)
    if prizeFrame == nil then
        return
    end
    if prizeFrame + PRIZE_GAME_FRAME_DELAY_UNTIL_REMOVAL == gameFrameCount then
        postSlotDestroyedFire(nil, slot, SlotDestructionType.COLLECTIBLE_PAYOUT)
    end
end
function postSlotAnimationChanged(self, slot)
    local ptrHash = GetPtrHash(slot)
    local gameFrameCount = game:GetFrameCount()
    local alreadyBroken = v.room.brokenSlots:has(ptrHash)
    if alreadyBroken then
        return
    end
    if slot.GridCollisionClass == EntityGridCollisionClass.GROUND then
        v.room.brokenSlots:add(ptrHash)
        postSlotDestroyedFire(nil, slot, SlotDestructionType.NORMAL)
    end
    local sprite = slot:GetSprite()
    local animation = sprite:GetAnimation()
    if animation == "Prize" then
        v.room.slotPrizeAnimationGameFrame:set(ptrHash, gameFrameCount)
    else
        v.room.slotPrizeAnimationGameFrame:delete(ptrHash)
    end
end
PRIZE_GAME_FRAME_DELAY_UNTIL_REMOVAL = 3
v = {room = {
    brokenSlots = __TS__New(Set),
    slotPrizeAnimationGameFrame = __TS__New(Map)
}}
---
-- @internal
function ____exports.postSlotDestroyedInit(self, mod)
    saveDataManager(nil, "postSlotDestroyed", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_ENTITY_REMOVE, postEntityRemove, EntityType.SLOT)
    mod:AddCallbackCustom(ModCallbackCustom.POST_SLOT_ANIMATION_CHANGED, postSlotAnimationChanged)
end
return ____exports
 end,
["lua_modules.isaacscript-common.enums.SlotDestructionType"] = function(...) 
local ____exports = {}
____exports.SlotDestructionType = {}
____exports.SlotDestructionType.NORMAL = 0
____exports.SlotDestructionType[____exports.SlotDestructionType.NORMAL] = "NORMAL"
____exports.SlotDestructionType.COLLECTIBLE_PAYOUT = 1
____exports.SlotDestructionType[____exports.SlotDestructionType.COLLECTIBLE_PAYOUT] = "COLLECTIBLE_PAYOUT"
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postSlotInitUpdate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postUpdate, postNewRoomReordered, checkNewEntity, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local getSlots = ____entitySpecific.getSlots
local ____postSlotInit = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSlotInit")
local postSlotInitFire = ____postSlotInit.postSlotInitFire
local postSlotInitHasSubscriptions = ____postSlotInit.postSlotInitHasSubscriptions
local ____postSlotUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSlotUpdate")
local postSlotUpdateFire = ____postSlotUpdate.postSlotUpdateFire
local postSlotUpdateHasSubscriptions = ____postSlotUpdate.postSlotUpdateHasSubscriptions
function hasSubscriptions(self)
    return postSlotInitHasSubscriptions(nil) or postSlotUpdateHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, slot in ipairs(getSlots(nil)) do
        checkNewEntity(nil, slot)
        postSlotUpdateFire(nil, slot)
    end
end
function postNewRoomReordered(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, slot in ipairs(getSlots(nil)) do
        checkNewEntity(nil, slot)
    end
end
function checkNewEntity(self, slot)
    local ptrHash = GetPtrHash(slot)
    if not v.room.initializedSlots:has(ptrHash) then
        v.room.initializedSlots:add(ptrHash)
        postSlotInitFire(nil, slot)
    end
end
v = {room = {initializedSlots = __TS__New(Set)}}
---
-- @internal
function ____exports.postSlotInitUpdateCallbacksInit(self, mod)
    saveDataManager(nil, "postSlotInitUpdate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
    mod:AddCallbackCustom(ModCallbackCustom.POST_NEW_ROOM_REORDERED, postNewRoomReordered)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postSlotRender"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local Set = ____lualib.Set
local ____exports = {}
local hasSubscriptions, postRender, checkSlotAnimationChanged, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____entitySpecific = require("lua_modules.isaacscript-common.functions.entitySpecific")
local getSlots = ____entitySpecific.getSlots
local ____postSlotAnimationChanged = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSlotAnimationChanged")
local postSlotAnimationChangedFire = ____postSlotAnimationChanged.postSlotAnimationChangedFire
local postSlotAnimationChangedHasSubscriptions = ____postSlotAnimationChanged.postSlotAnimationChangedHasSubscriptions
local ____postSlotRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSlotRender")
local postSlotRenderFire = ____postSlotRender.postSlotRenderFire
local postSlotRenderHasSubscriptions = ____postSlotRender.postSlotRenderHasSubscriptions
function hasSubscriptions(self)
    return postSlotRenderHasSubscriptions(nil) or postSlotAnimationChangedHasSubscriptions(nil)
end
function postRender(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, slot in ipairs(getSlots(nil)) do
        postSlotRenderFire(nil, slot)
        checkSlotAnimationChanged(nil, slot)
    end
end
function checkSlotAnimationChanged(self, slot)
    local sprite = slot:GetSprite()
    local currentAnimation = sprite:GetAnimation()
    local ptrHash = GetPtrHash(slot)
    local previousAnimation = v.room.slotAnimations:getAndSetDefault(ptrHash, slot)
    v.room.slotAnimations:set(ptrHash, currentAnimation)
    if currentAnimation ~= previousAnimation then
        postSlotAnimationChangedFire(nil, slot, previousAnimation, currentAnimation)
    end
end
v = {room = {
    slotAnimations = __TS__New(
        DefaultMap,
        function(____, slot)
            local sprite = slot:GetSprite()
            return sprite:GetAnimation()
        end
    ),
    brokenSlots = __TS__New(Set)
}}
---
-- @internal
function ____exports.postSlotRenderCallbacksInit(self, mod)
    saveDataManager(nil, "postSlotRender", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postSpikesRender"] = function(...) 
local ____exports = {}
local hasSubscriptions, postRender
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getSpikes = ____gridEntitySpecific.getSpikes
local ____postSpikesRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSpikesRender")
local postSpikesRenderFire = ____postSpikesRender.postSpikesRenderFire
local postSpikesRenderHasSubscriptions = ____postSpikesRender.postSpikesRenderHasSubscriptions
function hasSubscriptions(self)
    return postSpikesRenderHasSubscriptions(nil)
end
function postRender(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, spikes in ipairs(getSpikes(nil)) do
        postSpikesRenderFire(nil, spikes)
    end
end
---
-- @internal
function ____exports.postSpikesRenderInit(self, mod)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postSpikesUpdate"] = function(...) 
local ____exports = {}
local hasSubscriptions, postUpdate
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getSpikes = ____gridEntitySpecific.getSpikes
local ____postSpikesUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postSpikesUpdate")
local postSpikesUpdateFire = ____postSpikesUpdate.postSpikesUpdateFire
local postSpikesUpdateHasSubscriptions = ____postSpikesUpdate.postSpikesUpdateHasSubscriptions
function hasSubscriptions(self)
    return postSpikesUpdateHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, spikes in ipairs(getSpikes(nil)) do
        postSpikesUpdateFire(nil, spikes)
    end
end
---
-- @internal
function ____exports.postSpikesUpdateInit(self, mod)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postTearInitLate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postTearUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postTearInitLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTearInitLate")
local postTearInitLateFire = ____postTearInitLate.postTearInitLateFire
local postTearInitLateHasSubscriptions = ____postTearInitLate.postTearInitLateHasSubscriptions
function hasSubscriptions(self)
    return postTearInitLateHasSubscriptions(nil)
end
function postTearUpdate(self, tear)
    if not hasSubscriptions(nil) then
        return
    end
    local index = GetPtrHash(tear)
    if not v.room.firedSet:has(index) then
        v.room.firedSet:add(index)
        postTearInitLateFire(nil, tear)
    end
end
v = {room = {firedSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postTearInitLateInit(self, mod)
    saveDataManager(nil, "postTearInitLate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_TEAR_UPDATE, postTearUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postTearInitVeryLate"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postTearUpdate, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____postTearInitVeryLate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTearInitVeryLate")
local postTearInitVeryLateFire = ____postTearInitVeryLate.postTearInitVeryLateFire
local postTearInitVeryLateHasSubscriptions = ____postTearInitVeryLate.postTearInitVeryLateHasSubscriptions
function hasSubscriptions(self)
    return postTearInitVeryLateHasSubscriptions(nil)
end
function postTearUpdate(self, tear)
    if not hasSubscriptions(nil) then
        return
    end
    if tear.FrameCount == 0 then
        return
    end
    local index = GetPtrHash(tear)
    if not v.room.firedSet:has(index) then
        v.room.firedSet:add(index)
        postTearInitVeryLateFire(nil, tear)
    end
end
v = {room = {firedSet = __TS__New(Set)}}
---
-- @internal
function ____exports.postTearInitVeryLateInit(self, mod)
    saveDataManager(nil, "postTearInitVeryLate", v, hasSubscriptions)
    mod:AddCallback(ModCallback.POST_TEAR_UPDATE, postTearUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postTNTRender"] = function(...) 
local ____exports = {}
local hasSubscriptions, postRender
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getTNT = ____gridEntitySpecific.getTNT
local ____postTNTRender = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTNTRender")
local postTNTRenderFire = ____postTNTRender.postTNTRenderFire
local postTNTRenderHasSubscriptions = ____postTNTRender.postTNTRenderHasSubscriptions
function hasSubscriptions(self)
    return postTNTRenderHasSubscriptions(nil)
end
function postRender(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, tnt in ipairs(getTNT(nil)) do
        postTNTRenderFire(nil, tnt)
    end
end
---
-- @internal
function ____exports.postTNTRenderInit(self, mod)
    mod:AddCallback(ModCallback.POST_RENDER, postRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postTNTUpdate"] = function(...) 
local ____exports = {}
local hasSubscriptions, postUpdate
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____gridEntitySpecific = require("lua_modules.isaacscript-common.functions.gridEntitySpecific")
local getTNT = ____gridEntitySpecific.getTNT
local ____postTNTUpdate = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTNTUpdate")
local postTNTUpdateFire = ____postTNTUpdate.postTNTUpdateFire
local postTNTUpdateHasSubscriptions = ____postTNTUpdate.postTNTUpdateHasSubscriptions
function hasSubscriptions(self)
    return postTNTUpdateHasSubscriptions(nil)
end
function postUpdate(self)
    if not hasSubscriptions(nil) then
        return
    end
    for ____, tnt in ipairs(getTNT(nil)) do
        postTNTUpdateFire(nil, tnt)
    end
end
---
-- @internal
function ____exports.postTNTUpdateInit(self, mod)
    mod:AddCallback(ModCallback.POST_UPDATE, postUpdate)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postTransformation"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPEffectUpdateReordered, PLAYER_FORMS, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local PlayerForm = ____isaac_2Dtypescript_2Ddefinitions.PlayerForm
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____enums = require("lua_modules.isaacscript-common.functions.enums")
local getEnumValues = ____enums.getEnumValues
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local defaultMapGetPlayer = ____playerDataStructures.defaultMapGetPlayer
local ____postTransformation = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTransformation")
local postTransformationFire = ____postTransformation.postTransformationFire
local postTransformationHasSubscriptions = ____postTransformation.postTransformationHasSubscriptions
function hasSubscriptions(self)
    return postTransformationHasSubscriptions(nil)
end
function postPEffectUpdateReordered(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local playerTransformationsMap = defaultMapGetPlayer(nil, v.run.playersTransformationsMap, player)
    for ____, playerForm in ipairs(PLAYER_FORMS) do
        local hasForm = player:HasPlayerForm(playerForm)
        local storedForm = playerTransformationsMap:getAndSetDefault(playerForm)
        if hasForm ~= storedForm then
            playerTransformationsMap:set(playerForm, hasForm)
            postTransformationFire(nil, player, playerForm, hasForm)
        end
    end
end
PLAYER_FORMS = getEnumValues(nil, PlayerForm)
v = {run = {playersTransformationsMap = __TS__New(
    DefaultMap,
    function() return __TS__New(DefaultMap, false) end
)}}
---
-- @internal
function ____exports.postTransformationInit(self, mod)
    saveDataManager(nil, "postTransformation", v, hasSubscriptions)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED, postPEffectUpdateReordered)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.postTrinketBreak"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, entityTakeDmgPlayer, postPEffectUpdateReordered, TRINKETS_THAT_CAN_BREAK, v
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local EntityType = ____isaac_2Dtypescript_2Ddefinitions.EntityType
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local PickupVariant = ____isaac_2Dtypescript_2Ddefinitions.PickupVariant
local TrinketType = ____isaac_2Dtypescript_2Ddefinitions.TrinketType
local ____DefaultMap = require("lua_modules.isaacscript-common.classes.DefaultMap")
local DefaultMap = ____DefaultMap.DefaultMap
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____exports = require("lua_modules.isaacscript-common.features.saveDataManager.exports")
local saveDataManager = ____exports.saveDataManager
local ____playerDataStructures = require("lua_modules.isaacscript-common.functions.playerDataStructures")
local defaultMapGetPlayer = ____playerDataStructures.defaultMapGetPlayer
local ____postTrinketBreak = require("lua_modules.isaacscript-common.callbacks.subscriptions.postTrinketBreak")
local postTrinketBreakFire = ____postTrinketBreak.postTrinketBreakFire
local postTrinketBreakHasSubscriptions = ____postTrinketBreak.postTrinketBreakHasSubscriptions
function hasSubscriptions(self)
    return postTrinketBreakHasSubscriptions(nil)
end
function entityTakeDmgPlayer(self, tookDamage, _damageAmount, _damageFlags, _damageSource, _damageCountdownFrames)
    if not hasSubscriptions(nil) then
        return nil
    end
    local player = tookDamage:ToPlayer()
    if player == nil then
        return nil
    end
    local trinketMap = defaultMapGetPlayer(nil, v.run.playersTrinketMap, player)
    for ____, trinketType in ipairs(TRINKETS_THAT_CAN_BREAK) do
        do
            local numTrinketsHeld = player:GetTrinketMultiplier(trinketType)
            local oldNumTrinketsHeld = trinketMap:getAndSetDefault(trinketType)
            if numTrinketsHeld >= oldNumTrinketsHeld then
                goto __continue8
            end
            trinketMap:set(trinketType, numTrinketsHeld)
            local numTrinketsOnGround = Isaac.CountEntities(nil, EntityType.PICKUP, PickupVariant.TRINKET, trinketType)
            if numTrinketsOnGround > 0 then
                goto __continue8
            end
            postTrinketBreakFire(nil, player, trinketType)
        end
        ::__continue8::
    end
    return nil
end
function postPEffectUpdateReordered(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local trinketMap = defaultMapGetPlayer(nil, v.run.playersTrinketMap, player)
    for ____, trinketType in ipairs(TRINKETS_THAT_CAN_BREAK) do
        local numTrinkets = player:GetTrinketMultiplier(trinketType)
        trinketMap:set(trinketType, numTrinkets)
    end
end
TRINKETS_THAT_CAN_BREAK = {TrinketType.WISH_BONE, TrinketType.WALNUT}
v = {run = {playersTrinketMap = __TS__New(
    DefaultMap,
    function() return __TS__New(DefaultMap, 0) end
)}}
---
-- @internal
function ____exports.postTrinketBreakInit(self, mod)
    saveDataManager(nil, "postTrinketBreak", v, hasSubscriptions)
    mod:AddCallback(ModCallback.ENTITY_TAKE_DMG, entityTakeDmgPlayer, EntityType.PLAYER)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED, postPEffectUpdateReordered)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.preBerserkDeath"] = function(...) 
local ____exports = {}
local hasSubscriptions, postPEffectUpdateReordered
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local CollectibleType = ____isaac_2Dtypescript_2Ddefinitions.CollectibleType
local ____ModCallbackCustom = require("lua_modules.isaacscript-common.enums.ModCallbackCustom")
local ModCallbackCustom = ____ModCallbackCustom.ModCallbackCustom
local ____player = require("lua_modules.isaacscript-common.functions.player")
local getPlayerNumHitsRemaining = ____player.getPlayerNumHitsRemaining
local ____playerIndex = require("lua_modules.isaacscript-common.functions.playerIndex")
local isChildPlayer = ____playerIndex.isChildPlayer
local ____revive = require("lua_modules.isaacscript-common.functions.revive")
local willPlayerRevive = ____revive.willPlayerRevive
local ____preBerserkDeath = require("lua_modules.isaacscript-common.callbacks.subscriptions.preBerserkDeath")
local preBerserkDeathFire = ____preBerserkDeath.preBerserkDeathFire
local preBerserkDeathHasSubscriptions = ____preBerserkDeath.preBerserkDeathHasSubscriptions
function hasSubscriptions(self)
    return preBerserkDeathHasSubscriptions(nil)
end
function postPEffectUpdateReordered(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    if isChildPlayer(nil, player) then
        return
    end
    local effects = player:GetEffects()
    local berserkEffect = effects:GetCollectibleEffect(CollectibleType.BERSERK)
    local numHitsRemaining = getPlayerNumHitsRemaining(nil, player)
    if berserkEffect ~= nil and berserkEffect.Cooldown == 1 and numHitsRemaining == 0 and not willPlayerRevive(nil, player) then
        preBerserkDeathFire(nil, player)
    end
end
---
-- @internal
function ____exports.preBerserkDeathInit(self, mod)
    mod:AddCallbackCustom(ModCallbackCustom.POST_PEFFECT_UPDATE_REORDERED, postPEffectUpdateReordered)
end
return ____exports
 end,
["lua_modules.isaacscript-common.callbacks.preNewLevel"] = function(...) 
local ____lualib = require("lualib_bundle")
local Set = ____lualib.Set
local __TS__New = ____lualib.__TS__New
local ____exports = {}
local hasSubscriptions, postPlayerRender, TRAVELING_TO_NEXT_FLOOR_ANIMATIONS, firedOnStage
local ____isaac_2Dtypescript_2Ddefinitions = require("lua_modules.isaac-typescript-definitions.index")
local ModCallback = ____isaac_2Dtypescript_2Ddefinitions.ModCallback
local ____sprite = require("lua_modules.isaacscript-common.functions.sprite")
local getLastFrameOfAnimation = ____sprite.getLastFrameOfAnimation
local ____stage = require("lua_modules.isaacscript-common.functions.stage")
local getEffectiveStage = ____stage.getEffectiveStage
local ____preNewLevel = require("lua_modules.isaacscript-common.callbacks.subscriptions.preNewLevel")
local preNewLevelFire = ____preNewLevel.preNewLevelFire
local preNewLevelHasSubscriptions = ____preNewLevel.preNewLevelHasSubscriptions
function hasSubscriptions(self)
    return preNewLevelHasSubscriptions(nil)
end
function postPlayerRender(self, player)
    if not hasSubscriptions(nil) then
        return
    end
    local effectiveStage = getEffectiveStage(nil)
    if effectiveStage == firedOnStage then
        return
    end
    local sprite = player:GetSprite()
    local animation = sprite:GetAnimation()
    if not TRAVELING_TO_NEXT_FLOOR_ANIMATIONS:has(animation) then
        return
    end
    local frame = sprite:GetFrame()
    local finalFrame = getLastFrameOfAnimation(nil, sprite)
    if frame == finalFrame then
        firedOnStage = effectiveStage
        preNewLevelFire(nil, player)
    end
end
TRAVELING_TO_NEXT_FLOOR_ANIMATIONS = __TS__New(Set, {"Trapdoor", "LightTravel"})
firedOnStage = nil
---
-- @internal
function ____exports.preNewLevelInit(self, mod)
    mod:AddCallback(ModCallback.POST_PLAYER_RENDER, postPlayerRender)
end
return ____exports
 end,
["lua_modules.isaacscript-common.initFeatures"] = function(...) 
local ____exports = {}
local ____characterHealthConversion = require("lua_modules.isaacscript-common.features.characterHealthConversion")
local characterHealthConversionInit = ____characterHealthConversion.characterHealthConversionInit
local ____characterStats = require("lua_modules.isaacscript-common.features.characterStats")
local characterStatsInit = ____characterStats.characterStatsInit
local ____collectibleItemPoolType = require("lua_modules.isaacscript-common.features.collectibleItemPoolType")
local collectibleItemPoolTypeInit = ____collectibleItemPoolType.collectibleItemPoolTypeInit
local ____deployJSONRoom = require("lua_modules.isaacscript-common.features.deployJSONRoom")
local deployJSONRoomInit = ____deployJSONRoom.deployJSONRoomInit
local ____disableAllSound = require("lua_modules.isaacscript-common.features.disableAllSound")
local disableAllSoundInit = ____disableAllSound.disableAllSoundInit
local ____disableInputs = require("lua_modules.isaacscript-common.features.disableInputs")
local disableInputsInit = ____disableInputs.disableInputsInit
local ____fadeInRemover = require("lua_modules.isaacscript-common.features.fadeInRemover")
local fadeInRemoverInit = ____fadeInRemover.fadeInRemoverInit
local ____fastReset = require("lua_modules.isaacscript-common.features.fastReset")
local fastResetInit = ____fastReset.fastResetInit
local ____forgottenSwitch = require("lua_modules.isaacscript-common.features.forgottenSwitch")
local forgottenSwitchInit = ____forgottenSwitch.forgottenSwitchInit
local ____persistentEntities = require("lua_modules.isaacscript-common.features.persistentEntities")
local persistentEntitiesInit = ____persistentEntities.persistentEntitiesInit
local ____playerInventory = require("lua_modules.isaacscript-common.features.playerInventory")
local playerInventoryInit = ____playerInventory.playerInventoryInit
local ____ponyDetection = require("lua_modules.isaacscript-common.features.ponyDetection")
local ponyDetectionInit = ____ponyDetection.ponyDetectionInit
local ____preventCollectibleRotation = require("lua_modules.isaacscript-common.features.preventCollectibleRotation")
local preventCollectibleRotationInit = ____preventCollectibleRotation.preventCollectibleRotationInit
local ____registerHotkey = require("lua_modules.isaacscript-common.features.registerHotkey")
local registerHotkeyInit = ____registerHotkey.registerHotkeyInit
local ____roomClearFrame = require("lua_modules.isaacscript-common.features.roomClearFrame")
local roomClearFrameInit = ____roomClearFrame.roomClearFrameInit
local ____runInNFrames = require("lua_modules.isaacscript-common.features.runInNFrames")
local runInNFramesInit = ____runInNFrames.runInNFramesInit
local ____sirenHelpers = require("lua_modules.isaacscript-common.features.sirenHelpers")
local sirenHelpersInit = ____sirenHelpers.sirenHelpersInit
local ____stageHistory = require("lua_modules.isaacscript-common.features.stageHistory")
local stageHistoryInit = ____stageHistory.stageHistoryInit
local ____taintedLazarusPlayers = require("lua_modules.isaacscript-common.features.taintedLazarusPlayers")
local taintedLazarusPlayersInit = ____taintedLazarusPlayers.taintedLazarusPlayersInit
function ____exports.initFeaturesMajor(self, mod)
    deployJSONRoomInit(nil, mod)
    runInNFramesInit(nil, mod)
    characterStatsInit(nil, mod)
    characterHealthConversionInit(nil, mod)
end
function ____exports.initFeaturesMinor(self, mod)
    disableAllSoundInit(nil, mod)
    disableInputsInit(nil, mod)
    fadeInRemoverInit(nil, mod)
    fastResetInit(nil, mod)
    forgottenSwitchInit(nil, mod)
    collectibleItemPoolTypeInit(nil, mod)
    persistentEntitiesInit(nil, mod)
    playerInventoryInit(nil, mod)
    ponyDetectionInit(nil, mod)
    preventCollectibleRotationInit(nil, mod)
    registerHotkeyInit(nil, mod)
    roomClearFrameInit(nil, mod)
    sirenHelpersInit(nil, mod)
    stageHistoryInit(nil, mod)
    taintedLazarusPlayersInit(nil, mod)
end
return ____exports
 end,
["lua_modules.isaacscript-common.patchErrorFunctions"] = function(...) 
local ____lualib = require("lualib_bundle")
local __TS__StringSplit = ____lualib.__TS__StringSplit
local __TS__StringIncludes = ____lualib.__TS__StringIncludes
local __TS__ArrayFilter = ____lualib.__TS__ArrayFilter
local ____exports = {}
local errorWithTraceback, slimTracebackOutput, removeLinesContaining, LINE_SEPARATOR, USELESS_TRACEBACK_MESSAGES, vanillaError
local ____debug = require("lua_modules.isaacscript-common.functions.debug")
local getTraceback = ____debug.getTraceback
local isLuaDebugEnabled = ____debug.isLuaDebugEnabled
function errorWithTraceback(message, level)
    if vanillaError == nil then
        error(message, level)
    end
    if level == nil then
        level = 1
    end
    local tracebackOutput = getTraceback(nil)
    local slimmedTracebackOutput = slimTracebackOutput(nil, tracebackOutput)
    message = message .. "\n"
    message = message .. slimmedTracebackOutput
    return vanillaError(message, level + 1)
end
function slimTracebackOutput(self, tracebackOutput)
    for ____, msg in ipairs(USELESS_TRACEBACK_MESSAGES) do
        tracebackOutput = removeLinesContaining(nil, tracebackOutput, msg)
    end
    return tracebackOutput
end
function removeLinesContaining(self, msg, containsMsg)
    local lines = __TS__StringSplit(msg, LINE_SEPARATOR)
    local linesThatDontContain = __TS__ArrayFilter(
        lines,
        function(____, line) return not __TS__StringIncludes(line, containsMsg) end
    )
    return table.concat(linesThatDontContain, LINE_SEPARATOR or ",")
end
LINE_SEPARATOR = "\n"
USELESS_TRACEBACK_MESSAGES = {"in upvalue 'getTraceback'", "in function 'sandbox.GetTraceback'", "in function 'error'"}
--- In Lua, the `error` function will tell you the line number of the error, but not give you a full
-- traceback of the parent functions, which is unlike how JavaScript works. This function monkey
-- patches the `error` function to add this functionality.
-- 
-- Traceback functionality can only be added if the "--luadebug" flag is turned on, so this function
-- does nothing if the "--luadebug" flag is disabled.
-- 
-- @internal
function ____exports.patchErrorFunction(self)
    if not isLuaDebugEnabled(nil) then
        return
    end
    if __PATCHED_ERROR ~= nil then
        return
    end
    __PATCHED_ERROR = true
    vanillaError = error
    error = errorWithTraceback
end
return ____exports
 end,
}
return require("main", ...)
